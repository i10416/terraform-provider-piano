// Package piano_publisher provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package piano_publisher

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AppState.
const (
	AppStateActive    AppState = "active"
	AppStateDeclined  AppState = "declined"
	AppStateInactive  AppState = "inactive"
	AppStateNew       AppState = "new"
	AppStateSuspended AppState = "suspended"
)

// Defines values for AppUserProvider.
const (
	AppUserProviderConde            AppUserProvider = "conde"
	AppUserProviderGigya            AppUserProvider = "gigya"
	AppUserProviderJanrain          AppUserProvider = "janrain"
	AppUserProviderPianoId          AppUserProvider = "piano_id"
	AppUserProviderPianoIdLite      AppUserProvider = "piano_id_lite"
	AppUserProviderPublisherUserRef AppUserProvider = "publisher_user_ref"
	AppUserProviderTinypassAccounts AppUserProvider = "tinypass_accounts"
	AppUserProviderTinypassGo       AppUserProvider = "tinypass_go"
)

// Defines values for CommentActionCaption.
const (
	CommentActionCaptionDECLINE         CommentActionCaption = "DECLINE"
	CommentActionCaptionNOREFUNDGRANT   CommentActionCaption = "NO_REFUND_GRANT"
	CommentActionCaptionNOREFUNDREVOKE  CommentActionCaption = "NO_REFUND_REVOKE"
	CommentActionCaptionREFUNDGRANT     CommentActionCaption = "REFUND_GRANT"
	CommentActionCaptionREFUNDONLY      CommentActionCaption = "REFUND_ONLY"
	CommentActionCaptionREFUNDREVOKE    CommentActionCaption = "REFUND_REVOKE"
	CommentActionCaptionREPLYONLY       CommentActionCaption = "REPLY_ONLY"
	CommentActionCaptionRESOLVE         CommentActionCaption = "RESOLVE"
	CommentActionCaptionSUBCANCEL       CommentActionCaption = "SUB_CANCEL"
	CommentActionCaptionSUBREFUNDCANCEL CommentActionCaption = "SUB_REFUND_CANCEL"
	CommentActionCaptionSUBREFUNDONLY   CommentActionCaption = "SUB_REFUND_ONLY"
)

// Defines values for ConsentType.
const (
	ConsentTypeCheckout     ConsentType = "checkout"
	ConsentTypeRegistration ConsentType = "registration"
)

// Defines values for ConsentBoxEntryType.
const (
	ConsentBoxEntryTypeCheckout     ConsentBoxEntryType = "checkout"
	ConsentBoxEntryTypeRegistration ConsentBoxEntryType = "registration"
)

// Defines values for ContractContractType.
const (
	ContractContractTypeEMAILDOMAINCONTRACT            ContractContractType = "EMAIL_DOMAIN_CONTRACT"
	ContractContractTypeIPRANGECONTRACT                ContractContractType = "IP_RANGE_CONTRACT"
	ContractContractTypeSPECIFICEMAILADDRESSESCONTRACT ContractContractType = "SPECIFIC_EMAIL_ADDRESSES_CONTRACT"
)

// Defines values for ContractDomainStatus.
const (
	ContractDomainStatusACTIVE  ContractDomainStatus = "ACTIVE"
	ContractDomainStatusINVALID ContractDomainStatus = "INVALID"
)

// Defines values for ContractIpRangeStatus.
const (
	ContractIpRangeStatusINVALID ContractIpRangeStatus = "INVALID"
	ContractIpRangeStatusVALID   ContractIpRangeStatus = "VALID"
)

// Defines values for ContractUserStatus.
const (
	ContractUserStatusActive  ContractUserStatus = "active"
	ContractUserStatusInvalid ContractUserStatus = "invalid"
	ContractUserStatusPending ContractUserStatus = "pending"
	ContractUserStatusRevoked ContractUserStatus = "revoked"
)

// Defines values for ExportExportStatus.
const (
	ExportExportStatusCOMPLETED  ExportExportStatus = "COMPLETED"
	ExportExportStatusCREATED    ExportExportStatus = "CREATED"
	ExportExportStatusFAILED     ExportExportStatus = "FAILED"
	ExportExportStatusINPROGRESS ExportExportStatus = "IN_PROGRESS"
	ExportExportStatusREPROCESS  ExportExportStatus = "RE_PROCESS"
)

// Defines values for ExportReportType.
const (
	AAMDAILYPROOF               ExportReportType = "AAM_DAILY_PROOF"
	AAMMONTHLY                  ExportReportType = "AAM_MONTHLY"
	ACCESSREPORT                ExportReportType = "ACCESS_REPORT"
	ACCESSREPORTTZ              ExportReportType = "ACCESS_REPORT_TZ"
	AIDOWNLOAD                  ExportReportType = "AI_DOWNLOAD"
	DAILYACTIVITYREPORT         ExportReportType = "DAILY_ACTIVITY_REPORT"
	MONTHLYACTIVITYREPORT       ExportReportType = "MONTHLY_ACTIVITY_REPORT"
	PROMOCODESREPORT            ExportReportType = "PROMO_CODES_REPORT"
	SUBSCRIPTIONDETAILS         ExportReportType = "SUBSCRIPTION_DETAILS"
	SUBSCRIPTIONDETAILSREPORT   ExportReportType = "SUBSCRIPTION_DETAILS_REPORT"
	SUBSCRIPTIONDETAILSREPORTTZ ExportReportType = "SUBSCRIPTION_DETAILS_REPORT_TZ"
	SUBSCRIPTIONSUMMARY         ExportReportType = "SUBSCRIPTION_SUMMARY"
	SUBSCRIPTIONSUMMARYREPORT   ExportReportType = "SUBSCRIPTION_SUMMARY_REPORT"
	TERMCHANGEREPORT            ExportReportType = "TERM_CHANGE_REPORT"
	TRANSACTIONS                ExportReportType = "TRANSACTIONS"
	TRANSACTIONSREPORT          ExportReportType = "TRANSACTIONS_REPORT"
	TRANSACTIONSREPORTTZ        ExportReportType = "TRANSACTIONS_REPORT_TZ"
	TRANSACTIONSREPORTUPDATED   ExportReportType = "TRANSACTIONS_REPORT_UPDATED"
	USERS                       ExportReportType = "USERS"
	USERSES                     ExportReportType = "USERS_ES"
)

// Defines values for ExternalAPIFieldType.
const (
	COUNTRYSELECTOR   ExternalAPIFieldType = "COUNTRY_SELECTOR"
	INPUT             ExternalAPIFieldType = "INPUT"
	STATEAUTOCOMPLETE ExternalAPIFieldType = "STATE_AUTOCOMPLETE"
)

// Defines values for ExternalCssStatus.
const (
	ExternalCssStatusActive   ExternalCssStatus = "active"
	ExternalCssStatusInactive ExternalCssStatus = "inactive"
)

// Defines values for ExternalTermExternalApiSource.
const (
	ExternalTermExternalApiSourceN1  ExternalTermExternalApiSource = 1
	ExternalTermExternalApiSourceN10 ExternalTermExternalApiSource = 10
	ExternalTermExternalApiSourceN2  ExternalTermExternalApiSource = 2
	ExternalTermExternalApiSourceN3  ExternalTermExternalApiSource = 3
	ExternalTermExternalApiSourceN4  ExternalTermExternalApiSource = 4
	ExternalTermExternalApiSourceN5  ExternalTermExternalApiSource = 5
	ExternalTermExternalApiSourceN6  ExternalTermExternalApiSource = 6
	ExternalTermExternalApiSourceN7  ExternalTermExternalApiSource = 7
	ExternalTermExternalApiSourceN8  ExternalTermExternalApiSource = 8
	ExternalTermExternalApiSourceN9  ExternalTermExternalApiSource = 9
)

// Defines values for ExternalTermType.
const (
	ExternalTermTypeAdview                         ExternalTermType = "adview"
	ExternalTermTypeCustom                         ExternalTermType = "custom"
	ExternalTermTypeDynamic                        ExternalTermType = "dynamic"
	ExternalTermTypeEmailDomainContract            ExternalTermType = "email_domain_contract"
	ExternalTermTypeExternal                       ExternalTermType = "external"
	ExternalTermTypeGift                           ExternalTermType = "gift"
	ExternalTermTypeGrantAccess                    ExternalTermType = "grant_access"
	ExternalTermTypeIpRangeContract                ExternalTermType = "ip_range_contract"
	ExternalTermTypeLinked                         ExternalTermType = "linked"
	ExternalTermTypeNewsletter                     ExternalTermType = "newsletter"
	ExternalTermTypePayment                        ExternalTermType = "payment"
	ExternalTermTypeRegistration                   ExternalTermType = "registration"
	ExternalTermTypeSpecificEmailAddressesContract ExternalTermType = "specific_email_addresses_contract"
)

// Defines values for ExternalTermTypeName.
const (
	ExternalTermTypeNameAccessGranted                  ExternalTermTypeName = "Access Granted"
	ExternalTermTypeNameAdView                         ExternalTermTypeName = "Ad View"
	ExternalTermTypeNameCustom                         ExternalTermTypeName = "Custom"
	ExternalTermTypeNameDynamic                        ExternalTermTypeName = "Dynamic"
	ExternalTermTypeNameEmailDomainContract            ExternalTermTypeName = "Email Domain Contract"
	ExternalTermTypeNameExternal                       ExternalTermTypeName = "External"
	ExternalTermTypeNameGift                           ExternalTermTypeName = "Gift"
	ExternalTermTypeNameIPRangeContract                ExternalTermTypeName = "IP Range Contract"
	ExternalTermTypeNameLinked                         ExternalTermTypeName = "Linked"
	ExternalTermTypeNameNewsletter                     ExternalTermTypeName = "Newsletter"
	ExternalTermTypeNamePayment                        ExternalTermTypeName = "Payment"
	ExternalTermTypeNameRegistration                   ExternalTermTypeName = "Registration"
	ExternalTermTypeNameSpecificEmailAddressesContract ExternalTermTypeName = "Specific Email Addresses Contract"
)

// Defines values for GetPublisherAdblockerGetErrorCode.
const (
	GetPublisherAdblockerGetErrorCodeN2   GetPublisherAdblockerGetErrorCode = 2
	GetPublisherAdblockerGetErrorCodeN402 GetPublisherAdblockerGetErrorCode = 402
)

// Defines values for GetPublisherAppCurrenciesErrorCode.
const (
	GetPublisherAppCurrenciesErrorCodeN2 GetPublisherAppCurrenciesErrorCode = 2
)

// Defines values for GetPublisherAppFeaturesGetErrorCode.
const (
	GetPublisherAppFeaturesGetErrorCodeN2 GetPublisherAppFeaturesGetErrorCode = 2
)

// Defines values for GetPublisherAppGetErrorCode.
const (
	GetPublisherAppGetErrorCodeN2   GetPublisherAppGetErrorCode = 2
	GetPublisherAppGetErrorCodeN402 GetPublisherAppGetErrorCode = 402
)

// Defines values for GetPublisherAppListErrorCode.
const (
	GetPublisherAppListErrorCodeN2 GetPublisherAppListErrorCode = 2
)

// Defines values for GetPublisherConsentGetErrorCode.
const (
	GetPublisherConsentGetErrorCodeN2 GetPublisherConsentGetErrorCode = 2
)

// Defines values for GetPublisherConsentListErrorCode.
const (
	GetPublisherConsentListErrorCodeN2 GetPublisherConsentListErrorCode = 2
)

// Defines values for GetPublisherConversionCountErrorCode.
const (
	GetPublisherConversionCountErrorCodeN1001 GetPublisherConversionCountErrorCode = 1001
	GetPublisherConversionCountErrorCodeN2    GetPublisherConversionCountErrorCode = 2
)

// Defines values for GetPublisherConversionDataGetErrorCode.
const (
	GetPublisherConversionDataGetErrorCodeN2   GetPublisherConversionDataGetErrorCode = 2
	GetPublisherConversionDataGetErrorCodeN404 GetPublisherConversionDataGetErrorCode = 404
)

// Defines values for GetPublisherConversionGetErrorCode.
const (
	GetPublisherConversionGetErrorCodeN2   GetPublisherConversionGetErrorCode = 2
	GetPublisherConversionGetErrorCodeN404 GetPublisherConversionGetErrorCode = 404
)

// Defines values for GetPublisherConversionLastAccessErrorCode.
const (
	GetPublisherConversionLastAccessErrorCodeN2   GetPublisherConversionLastAccessErrorCode = 2
	GetPublisherConversionLastAccessErrorCodeN404 GetPublisherConversionLastAccessErrorCode = 404
)

// Defines values for GetPublisherConversionListErrorCode.
const (
	GetPublisherConversionListErrorCodeN1001 GetPublisherConversionListErrorCode = 1001
	GetPublisherConversionListErrorCodeN2    GetPublisherConversionListErrorCode = 2
)

// Defines values for GetPublisherExperienceMetadataListErrorCode.
const (
	GetPublisherExperienceMetadataListErrorCodeN2   GetPublisherExperienceMetadataListErrorCode = 2
	GetPublisherExperienceMetadataListErrorCodeN402 GetPublisherExperienceMetadataListErrorCode = 402
)

// Defines values for GetPublisherExportCreateAccessReportExportErrorCode.
const (
	GetPublisherExportCreateAccessReportExportErrorCodeN11003 GetPublisherExportCreateAccessReportExportErrorCode = 11003
)

// Defines values for GetPublisherExportCreateAccessReportExportV2ErrorCode.
const (
	GetPublisherExportCreateAccessReportExportV2ErrorCodeN11003 GetPublisherExportCreateAccessReportExportV2ErrorCode = 11003
)

// Defines values for GetPublisherExportCreateDailyActivityReportExportErrorCode.
const (
	GetPublisherExportCreateDailyActivityReportExportErrorCodeN11003 GetPublisherExportCreateDailyActivityReportExportErrorCode = 11003
)

// Defines values for GetPublisherExportCreateMonthlyActivityReportExportErrorCode.
const (
	GetPublisherExportCreateMonthlyActivityReportExportErrorCodeN11003 GetPublisherExportCreateMonthlyActivityReportExportErrorCode = 11003
)

// Defines values for GetPublisherExportCreateTermChangeReportExportErrorCode.
const (
	N11003 GetPublisherExportCreateTermChangeReportExportErrorCode = 11003
)

// Defines values for GetPublisherExportDeleteErrorCode.
const (
	GetPublisherExportDeleteErrorCodeN2 GetPublisherExportDeleteErrorCode = 2
)

// Defines values for GetPublisherExportDownloadErrorCode.
const (
	GetPublisherExportDownloadErrorCodeN2 GetPublisherExportDownloadErrorCode = 2
)

// Defines values for GetPublisherExportGetErrorCode.
const (
	GetPublisherExportGetErrorCodeN2 GetPublisherExportGetErrorCode = 2
)

// Defines values for GetPublisherExportRunErrorCode.
const (
	GetPublisherExportRunErrorCodeN11001 GetPublisherExportRunErrorCode = 11001
	GetPublisherExportRunErrorCodeN11005 GetPublisherExportRunErrorCode = 11005
	GetPublisherExportRunErrorCodeN2     GetPublisherExportRunErrorCode = 2
	GetPublisherExportRunErrorCodeN404   GetPublisherExportRunErrorCode = 404
)

// Defines values for GetPublisherInquiryAddErrorCode.
const (
	GetPublisherInquiryAddErrorCodeN1     GetPublisherInquiryAddErrorCode = 1
	GetPublisherInquiryAddErrorCodeN12002 GetPublisherInquiryAddErrorCode = 12002
	GetPublisherInquiryAddErrorCodeN12003 GetPublisherInquiryAddErrorCode = 12003
	GetPublisherInquiryAddErrorCodeN12004 GetPublisherInquiryAddErrorCode = 12004
	GetPublisherInquiryAddErrorCodeN12005 GetPublisherInquiryAddErrorCode = 12005
	GetPublisherInquiryAddErrorCodeN12006 GetPublisherInquiryAddErrorCode = 12006
	GetPublisherInquiryAddErrorCodeN2     GetPublisherInquiryAddErrorCode = 2
)

// Defines values for GetPublisherInquiryCommentsErrorCode.
const (
	GetPublisherInquiryCommentsErrorCodeN2 GetPublisherInquiryCommentsErrorCode = 2
)

// Defines values for GetPublisherInquiryDetailsErrorCode.
const (
	GetPublisherInquiryDetailsErrorCodeN2 GetPublisherInquiryDetailsErrorCode = 2
)

// Defines values for GetPublisherInquiryInquiryActionsErrorCode.
const (
	GetPublisherInquiryInquiryActionsErrorCodeN2   GetPublisherInquiryInquiryActionsErrorCode = 2
	GetPublisherInquiryInquiryActionsErrorCodeN404 GetPublisherInquiryInquiryActionsErrorCode = 404
)

// Defines values for GetPublisherInquiryLastCommentErrorCode.
const (
	GetPublisherInquiryLastCommentErrorCodeN2 GetPublisherInquiryLastCommentErrorCode = 2
)

// Defines values for GetPublisherInquiryListErrorCode.
const (
	GetPublisherInquiryListErrorCodeN2 GetPublisherInquiryListErrorCode = 2
)

// Defines values for GetPublisherInquiryUnresolvedCountErrorCode.
const (
	GetPublisherInquiryUnresolvedCountErrorCodeN2 GetPublisherInquiryUnresolvedCountErrorCode = 2
)

// Defines values for GetPublisherLicensingContractDomainContractUserListErrorCode.
const (
	GetPublisherLicensingContractDomainContractUserListErrorCodeN2     GetPublisherLicensingContractDomainContractUserListErrorCode = 2
	GetPublisherLicensingContractDomainContractUserListErrorCodeN61002 GetPublisherLicensingContractDomainContractUserListErrorCode = 61002
	GetPublisherLicensingContractDomainContractUserListErrorCodeN61028 GetPublisherLicensingContractDomainContractUserListErrorCode = 61028
)

// Defines values for GetPublisherLicensingContractDomainListErrorCode.
const (
	GetPublisherLicensingContractDomainListErrorCodeN2     GetPublisherLicensingContractDomainListErrorCode = 2
	GetPublisherLicensingContractDomainListErrorCodeN61002 GetPublisherLicensingContractDomainListErrorCode = 61002
)

// Defines values for GetPublisherLicensingContractGetErrorCode.
const (
	GetPublisherLicensingContractGetErrorCodeN2     GetPublisherLicensingContractGetErrorCode = 2
	GetPublisherLicensingContractGetErrorCodeN61002 GetPublisherLicensingContractGetErrorCode = 61002
)

// Defines values for GetPublisherLicensingContractIpRangeListErrorCode.
const (
	GetPublisherLicensingContractIpRangeListErrorCodeN2     GetPublisherLicensingContractIpRangeListErrorCode = 2
	GetPublisherLicensingContractIpRangeListErrorCodeN61002 GetPublisherLicensingContractIpRangeListErrorCode = 61002
)

// Defines values for GetPublisherLicensingContractListErrorCode.
const (
	GetPublisherLicensingContractListErrorCodeN2 GetPublisherLicensingContractListErrorCode = 2
)

// Defines values for GetPublisherLicensingContractUserListErrorCode.
const (
	GetPublisherLicensingContractUserListErrorCodeN2 GetPublisherLicensingContractUserListErrorCode = 2
)

// Defines values for GetPublisherLicensingLicenseeCountErrorCode.
const (
	GetPublisherLicensingLicenseeCountErrorCodeN2 GetPublisherLicensingLicenseeCountErrorCode = 2
)

// Defines values for GetPublisherLicensingLicenseeGetErrorCode.
const (
	GetPublisherLicensingLicenseeGetErrorCodeN2 GetPublisherLicensingLicenseeGetErrorCode = 2
)

// Defines values for GetPublisherLicensingLicenseeListErrorCode.
const (
	GetPublisherLicensingLicenseeListErrorCodeN2 GetPublisherLicensingLicenseeListErrorCode = 2
)

// Defines values for GetPublisherLicensingNotificationListErrorCode.
const (
	GetPublisherLicensingNotificationListErrorCodeN2     GetPublisherLicensingNotificationListErrorCode = 2
	GetPublisherLicensingNotificationListErrorCodeN61005 GetPublisherLicensingNotificationListErrorCode = 61005
)

// Defines values for GetPublisherLicensingNotificationRuleListErrorCode.
const (
	GetPublisherLicensingNotificationRuleListErrorCodeN2     GetPublisherLicensingNotificationRuleListErrorCode = 2
	GetPublisherLicensingNotificationRuleListErrorCodeN61005 GetPublisherLicensingNotificationRuleListErrorCode = 61005
)

// Defines values for GetPublisherLicensingScheduleContractsErrorCode.
const (
	GetPublisherLicensingScheduleContractsErrorCodeN2     GetPublisherLicensingScheduleContractsErrorCode = 2
	GetPublisherLicensingScheduleContractsErrorCodeN61011 GetPublisherLicensingScheduleContractsErrorCode = 61011
)

// Defines values for GetPublisherOfferCountErrorCode.
const (
	GetPublisherOfferCountErrorCodeN2 GetPublisherOfferCountErrorCode = 2
)

// Defines values for GetPublisherOfferGetErrorCode.
const (
	GetPublisherOfferGetErrorCodeN2 GetPublisherOfferGetErrorCode = 2
)

// Defines values for GetPublisherOfferListErrorCode.
const (
	GetPublisherOfferListErrorCodeN2 GetPublisherOfferListErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCode.
const (
	GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCodeN2 GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateCountErrorCode.
const (
	GetPublisherOfferTemplateCountErrorCodeN2 GetPublisherOfferTemplateCountErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateDefaultCodeErrorCode.
const (
	GetPublisherOfferTemplateDefaultCodeErrorCodeN2 GetPublisherOfferTemplateDefaultCodeErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateDuplicateErrorCode.
const (
	GetPublisherOfferTemplateDuplicateErrorCodeN2 GetPublisherOfferTemplateDuplicateErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateGetErrorCode.
const (
	GetPublisherOfferTemplateGetErrorCodeN2 GetPublisherOfferTemplateGetErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateGetHistoryErrorCode.
const (
	GetPublisherOfferTemplateGetHistoryErrorCodeN2 GetPublisherOfferTemplateGetHistoryErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateInheritedCountErrorCode.
const (
	GetPublisherOfferTemplateInheritedCountErrorCodeN2 GetPublisherOfferTemplateInheritedCountErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesErrorCode.
const (
	GetPublisherOfferTemplateListBoilerplatesErrorCodeN2 GetPublisherOfferTemplateListBoilerplatesErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateListByCategoryErrorCode.
const (
	GetPublisherOfferTemplateListByCategoryErrorCodeN2 GetPublisherOfferTemplateListByCategoryErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateListErrorCode.
const (
	GetPublisherOfferTemplateListErrorCodeN2 GetPublisherOfferTemplateListErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateMakeGlobalErrorCode.
const (
	GetPublisherOfferTemplateMakeGlobalErrorCodeN2   GetPublisherOfferTemplateMakeGlobalErrorCode = 2
	GetPublisherOfferTemplateMakeGlobalErrorCodeN411 GetPublisherOfferTemplateMakeGlobalErrorCode = 411
)

// Defines values for GetPublisherOfferTemplateVariantDuplicateErrorCode.
const (
	GetPublisherOfferTemplateVariantDuplicateErrorCodeN2 GetPublisherOfferTemplateVariantDuplicateErrorCode = 2
)

// Defines values for GetPublisherOfferTemplateVariantGetErrorCode.
const (
	GetPublisherOfferTemplateVariantGetErrorCodeN2 GetPublisherOfferTemplateVariantGetErrorCode = 2
)

// Defines values for GetPublisherOfferTermListErrorCode.
const (
	GetPublisherOfferTermListErrorCodeN2 GetPublisherOfferTermListErrorCode = 2
)

// Defines values for GetPublisherOfferTermOfferListErrorCode.
const (
	GetPublisherOfferTermOfferListErrorCodeN2 GetPublisherOfferTermOfferListErrorCode = 2
)

// Defines values for GetPublisherPaymentGetErrorCode.
const (
	GetPublisherPaymentGetErrorCodeN2   GetPublisherPaymentGetErrorCode = 2
	GetPublisherPaymentGetErrorCodeN400 GetPublisherPaymentGetErrorCode = 400
)

// Defines values for GetPublisherPaymentIsPartialRefundErrorCode.
const (
	GetPublisherPaymentIsPartialRefundErrorCodeN2   GetPublisherPaymentIsPartialRefundErrorCode = 2
	GetPublisherPaymentIsPartialRefundErrorCodeN400 GetPublisherPaymentIsPartialRefundErrorCode = 400
)

// Defines values for GetPublisherPaymentMethodGetErrorCode.
const (
	GetPublisherPaymentMethodGetErrorCodeN2 GetPublisherPaymentMethodGetErrorCode = 2
)

// Defines values for GetPublisherPaymentRefundErrorCode.
const (
	GetPublisherPaymentRefundErrorCodeN14001 GetPublisherPaymentRefundErrorCode = 14001
	GetPublisherPaymentRefundErrorCodeN14002 GetPublisherPaymentRefundErrorCode = 14002
	GetPublisherPaymentRefundErrorCodeN2     GetPublisherPaymentRefundErrorCode = 2
	GetPublisherPaymentRefundErrorCodeN400   GetPublisherPaymentRefundErrorCode = 400
)

// Defines values for GetPublisherPromotionCodeCountErrorCode.
const (
	GetPublisherPromotionCodeCountErrorCodeN2 GetPublisherPromotionCodeCountErrorCode = 2
)

// Defines values for GetPublisherPromotionCodeCreateErrorCode.
const (
	GetPublisherPromotionCodeCreateErrorCodeN2    GetPublisherPromotionCodeCreateErrorCode = 2
	GetPublisherPromotionCodeCreateErrorCodeN3005 GetPublisherPromotionCodeCreateErrorCode = 3005
	GetPublisherPromotionCodeCreateErrorCodeN401  GetPublisherPromotionCodeCreateErrorCode = 401
)

// Defines values for GetPublisherPromotionCodeGetErrorCode.
const (
	GetPublisherPromotionCodeGetErrorCodeN2 GetPublisherPromotionCodeGetErrorCode = 2
)

// Defines values for GetPublisherPromotionCodeListErrorCode.
const (
	GetPublisherPromotionCodeListErrorCodeN2 GetPublisherPromotionCodeListErrorCode = 2
)

// Defines values for GetPublisherPromotionCountErrorCode.
const (
	GetPublisherPromotionCountErrorCodeN2 GetPublisherPromotionCountErrorCode = 2
)

// Defines values for GetPublisherPromotionFixedDiscountAddErrorCode.
const (
	GetPublisherPromotionFixedDiscountAddErrorCodeN2    GetPublisherPromotionFixedDiscountAddErrorCode = 2
	GetPublisherPromotionFixedDiscountAddErrorCodeN3002 GetPublisherPromotionFixedDiscountAddErrorCode = 3002
	GetPublisherPromotionFixedDiscountAddErrorCodeN3012 GetPublisherPromotionFixedDiscountAddErrorCode = 3012
	GetPublisherPromotionFixedDiscountAddErrorCodeN3013 GetPublisherPromotionFixedDiscountAddErrorCode = 3013
	GetPublisherPromotionFixedDiscountAddErrorCodeN3015 GetPublisherPromotionFixedDiscountAddErrorCode = 3015
)

// Defines values for GetPublisherPromotionGetErrorCode.
const (
	GetPublisherPromotionGetErrorCodeN2 GetPublisherPromotionGetErrorCode = 2
)

// Defines values for GetPublisherPromotionListErrorCode.
const (
	GetPublisherPromotionListErrorCodeN2 GetPublisherPromotionListErrorCode = 2
)

// Defines values for GetPublisherPromotionTermListErrorCode.
const (
	GetPublisherPromotionTermListErrorCodeN2 GetPublisherPromotionTermListErrorCode = 2
)

// Defines values for GetPublisherPromotionTotalErrorCode.
const (
	GetPublisherPromotionTotalErrorCodeN16001 GetPublisherPromotionTotalErrorCode = 16001
	GetPublisherPromotionTotalErrorCodeN2     GetPublisherPromotionTotalErrorCode = 2
)

// Defines values for GetPublisherResourceBundleMembersErrorCode.
const (
	GetPublisherResourceBundleMembersErrorCodeN2 GetPublisherResourceBundleMembersErrorCode = 2
)

// Defines values for GetPublisherResourceCountErrorCode.
const (
	GetPublisherResourceCountErrorCodeN2 GetPublisherResourceCountErrorCode = 2
)

// Defines values for GetPublisherResourceCrossAppCountErrorCode.
const (
	GetPublisherResourceCrossAppCountErrorCodeN2   GetPublisherResourceCrossAppCountErrorCode = 2
	GetPublisherResourceCrossAppCountErrorCodeN411 GetPublisherResourceCrossAppCountErrorCode = 411
)

// Defines values for GetPublisherResourceGetErrorCode.
const (
	GetPublisherResourceGetErrorCodeN2   GetPublisherResourceGetErrorCode = 2
	GetPublisherResourceGetErrorCodeN404 GetPublisherResourceGetErrorCode = 404
)

// Defines values for GetPublisherResourceListErrorCode.
const (
	GetPublisherResourceListErrorCodeN2 GetPublisherResourceListErrorCode = 2
)

// Defines values for GetPublisherResourceStatsListErrorCode.
const (
	GetPublisherResourceStatsListErrorCodeN2 GetPublisherResourceStatsListErrorCode = 2
)

// Defines values for GetPublisherResourceTagBundlesErrorCode.
const (
	GetPublisherResourceTagBundlesErrorCodeN2 GetPublisherResourceTagBundlesErrorCode = 2
)

// Defines values for GetPublisherResourceTagCreateErrorCode.
const (
	GetPublisherResourceTagCreateErrorCodeN2   GetPublisherResourceTagCreateErrorCode = 2
	GetPublisherResourceTagCreateErrorCodeN700 GetPublisherResourceTagCreateErrorCode = 700
	GetPublisherResourceTagCreateErrorCodeN701 GetPublisherResourceTagCreateErrorCode = 701
)

// Defines values for GetPublisherResourceTagGetErrorCode.
const (
	GetPublisherResourceTagGetErrorCodeN2 GetPublisherResourceTagGetErrorCode = 2
)

// Defines values for GetPublisherResourceTagListErrorCode.
const (
	GetPublisherResourceTagListErrorCodeN2 GetPublisherResourceTagListErrorCode = 2
)

// Defines values for GetPublisherResourceUserListErrorCode.
const (
	GetPublisherResourceUserListErrorCodeN2 GetPublisherResourceUserListErrorCode = 2
)

// Defines values for GetPublisherSubscriptionGetErrorCode.
const (
	GetPublisherSubscriptionGetErrorCodeN2    GetPublisherSubscriptionGetErrorCode = 2
	GetPublisherSubscriptionGetErrorCodeN8005 GetPublisherSubscriptionGetErrorCode = 8005
)

// Defines values for GetPublisherTermApplicableErrorCode.
const (
	GetPublisherTermApplicableErrorCodeN1001 GetPublisherTermApplicableErrorCode = 1001
	GetPublisherTermApplicableErrorCodeN2    GetPublisherTermApplicableErrorCode = 2
)

// Defines values for GetPublisherTermCountErrorCode.
const (
	GetPublisherTermCountErrorCodeN2 GetPublisherTermCountErrorCode = 2
)

// Defines values for GetPublisherTermGetErrorCode.
const (
	GetPublisherTermGetErrorCodeN1001 GetPublisherTermGetErrorCode = 1001
	GetPublisherTermGetErrorCodeN2    GetPublisherTermGetErrorCode = 2
)

// Defines values for GetPublisherTermStatsListErrorCode.
const (
	GetPublisherTermStatsListErrorCodeN16001 GetPublisherTermStatsListErrorCode = 16001
	GetPublisherTermStatsListErrorCodeN2     GetPublisherTermStatsListErrorCode = 2
)

// Defines values for GetPublisherTestUserRefErrorCode.
const (
	GetPublisherTestUserRefErrorCodeN2001 GetPublisherTestUserRefErrorCode = 2001
	GetPublisherTestUserRefErrorCodeN2002 GetPublisherTestUserRefErrorCode = 2002
	GetPublisherTestUserRefErrorCodeN7004 GetPublisherTestUserRefErrorCode = 7004
	GetPublisherTestUserRefErrorCodeN7006 GetPublisherTestUserRefErrorCode = 7006
	GetPublisherTestUserRefErrorCodeN7007 GetPublisherTestUserRefErrorCode = 7007
)

// Defines values for GetPublisherUserAccessCheckErrorCode.
const (
	GetPublisherUserAccessCheckErrorCodeN2    GetPublisherUserAccessCheckErrorCode = 2
	GetPublisherUserAccessCheckErrorCodeN2001 GetPublisherUserAccessCheckErrorCode = 2001
)

// Defines values for GetPublisherUserAccessGrantErrorCode.
const (
	GetPublisherUserAccessGrantErrorCodeN2    GetPublisherUserAccessGrantErrorCode = 2
	GetPublisherUserAccessGrantErrorCodeN401  GetPublisherUserAccessGrantErrorCode = 401
	GetPublisherUserAccessGrantErrorCodeN406  GetPublisherUserAccessGrantErrorCode = 406
	GetPublisherUserAccessGrantErrorCodeN5001 GetPublisherUserAccessGrantErrorCode = 5001
	GetPublisherUserAccessGrantErrorCodeN5002 GetPublisherUserAccessGrantErrorCode = 5002
	GetPublisherUserAccessGrantErrorCodeN805  GetPublisherUserAccessGrantErrorCode = 805
)

// Defines values for GetPublisherUserAccessGrantToUsersErrorCode.
const (
	GetPublisherUserAccessGrantToUsersErrorCodeN2   GetPublisherUserAccessGrantToUsersErrorCode = 2
	GetPublisherUserAccessGrantToUsersErrorCodeN805 GetPublisherUserAccessGrantToUsersErrorCode = 805
)

// Defines values for GetPublisherUserAccessListErrorCode.
const (
	GetPublisherUserAccessListErrorCodeN2    GetPublisherUserAccessListErrorCode = 2
	GetPublisherUserAccessListErrorCodeN2001 GetPublisherUserAccessListErrorCode = 2001
)

// Defines values for GetPublisherUserAccessRevokeErrorCode.
const (
	GetPublisherUserAccessRevokeErrorCodeN2    GetPublisherUserAccessRevokeErrorCode = 2
	GetPublisherUserAccessRevokeErrorCodeN5003 GetPublisherUserAccessRevokeErrorCode = 5003
	GetPublisherUserAccessRevokeErrorCodeN5007 GetPublisherUserAccessRevokeErrorCode = 5007
)

// Defines values for GetPublisherUserEmailGetErrorCode.
const (
	GetPublisherUserEmailGetErrorCodeN2   GetPublisherUserEmailGetErrorCode = 2
	GetPublisherUserEmailGetErrorCodeN404 GetPublisherUserEmailGetErrorCode = 404
)

// Defines values for GetPublisherUserEmailListErrorCode.
const (
	GetPublisherUserEmailListErrorCodeN2    GetPublisherUserEmailListErrorCode = 2
	GetPublisherUserEmailListErrorCodeN2001 GetPublisherUserEmailListErrorCode = 2001
)

// Defines values for GetPublisherUserNoteGetErrorCode.
const (
	GetPublisherUserNoteGetErrorCodeN2   GetPublisherUserNoteGetErrorCode = 2
	GetPublisherUserNoteGetErrorCodeN404 GetPublisherUserNoteGetErrorCode = 404
)

// Defines values for GetPublisherUserNoteListErrorCode.
const (
	GetPublisherUserNoteListErrorCodeN2 GetPublisherUserNoteListErrorCode = 2
)

// Defines values for GetPublisherVoucherGetErrorCode.
const (
	GetPublisherVoucherGetErrorCodeN2    GetPublisherVoucherGetErrorCode = 2
	GetPublisherVoucherGetErrorCodeN7108 GetPublisherVoucherGetErrorCode = 7108
)

// Defines values for GetPublisherVoucherListErrorCode.
const (
	GetPublisherVoucherListErrorCodeN1 GetPublisherVoucherListErrorCode = 1
	GetPublisherVoucherListErrorCodeN2 GetPublisherVoucherListErrorCode = 2
)

// Defines values for GetPublisherWebhookEventsErrorCode.
const (
	GetPublisherWebhookEventsErrorCodeN2 GetPublisherWebhookEventsErrorCode = 2
)

// Defines values for GetPublisherWebhookGetErrorCode.
const (
	GetPublisherWebhookGetErrorCodeN2 GetPublisherWebhookGetErrorCode = 2
)

// Defines values for GetPublisherWebhookResponseListErrorCode.
const (
	GetPublisherWebhookResponseListErrorCodeN2 GetPublisherWebhookResponseListErrorCode = 2
)

// Defines values for GetPublisherWebhookResponseResendErrorCode.
const (
	GetPublisherWebhookResponseResendErrorCodeN2    GetPublisherWebhookResponseResendErrorCode = 2
	GetPublisherWebhookResponseResendErrorCodeN4002 GetPublisherWebhookResponseResendErrorCode = 4002
)

// Defines values for GetPublisherWebhookSettingsErrorCode.
const (
	GetPublisherWebhookSettingsErrorCodeN2 GetPublisherWebhookSettingsErrorCode = 2
)

// Defines values for GetPublisherWebhookSkipErrorCode.
const (
	GetPublisherWebhookSkipErrorCodeN2    GetPublisherWebhookSkipErrorCode = 2
	GetPublisherWebhookSkipErrorCodeN4006 GetPublisherWebhookSkipErrorCode = 4006
)

// Defines values for GetPublisherWebhookStatusErrorCode.
const (
	GetPublisherWebhookStatusErrorCodeN2 GetPublisherWebhookStatusErrorCode = 2
)

// Defines values for InquiryCommentSubmitterType.
const (
	InquiryCommentSubmitterTypeN0 InquiryCommentSubmitterType = 0
	InquiryCommentSubmitterTypeN1 InquiryCommentSubmitterType = 1
	InquiryCommentSubmitterTypeN2 InquiryCommentSubmitterType = 2
)

// Defines values for LicenseeNotificationCondition.
const (
	LicenseeNotificationConditionDROPSBELOW      LicenseeNotificationCondition = "DROPS_BELOW"
	LicenseeNotificationConditionEXCEEDS         LicenseeNotificationCondition = "EXCEEDS"
	LicenseeNotificationConditionEXPIRES         LicenseeNotificationCondition = "EXPIRES"
	LicenseeNotificationConditionHASEXPIRED      LicenseeNotificationCondition = "HAS_EXPIRED"
	LicenseeNotificationConditionHASOCCURRED     LicenseeNotificationCondition = "HAS_OCCURRED"
	LicenseeNotificationConditionOCCURS          LicenseeNotificationCondition = "OCCURS"
	LicenseeNotificationConditionREACHESCAPACITY LicenseeNotificationCondition = "REACHES_CAPACITY"
	LicenseeNotificationConditionWILLEXPIREIN    LicenseeNotificationCondition = "WILL_EXPIRE_IN"
	LicenseeNotificationConditionWILLOCCURIN     LicenseeNotificationCondition = "WILL_OCCUR_IN"
)

// Defines values for LicenseeNotificationParameter.
const (
	LicenseeNotificationParameterDATEOFSALE          LicenseeNotificationParameter = "DATE_OF_SALE"
	LicenseeNotificationParameterOCCUPIEDSEATSNUMBER LicenseeNotificationParameter = "OCCUPIED_SEATS_NUMBER"
	LicenseeNotificationParameterPERIODOFACCESS      LicenseeNotificationParameter = "PERIOD_OF_ACCESS"
)

// Defines values for LicenseeNotificationRuleCondition.
const (
	LicenseeNotificationRuleConditionDROPSBELOW      LicenseeNotificationRuleCondition = "DROPS_BELOW"
	LicenseeNotificationRuleConditionEXCEEDS         LicenseeNotificationRuleCondition = "EXCEEDS"
	LicenseeNotificationRuleConditionEXPIRES         LicenseeNotificationRuleCondition = "EXPIRES"
	LicenseeNotificationRuleConditionHASEXPIRED      LicenseeNotificationRuleCondition = "HAS_EXPIRED"
	LicenseeNotificationRuleConditionHASOCCURRED     LicenseeNotificationRuleCondition = "HAS_OCCURRED"
	LicenseeNotificationRuleConditionOCCURS          LicenseeNotificationRuleCondition = "OCCURS"
	LicenseeNotificationRuleConditionREACHESCAPACITY LicenseeNotificationRuleCondition = "REACHES_CAPACITY"
	LicenseeNotificationRuleConditionWILLEXPIREIN    LicenseeNotificationRuleCondition = "WILL_EXPIRE_IN"
	LicenseeNotificationRuleConditionWILLOCCURIN     LicenseeNotificationRuleCondition = "WILL_OCCUR_IN"
)

// Defines values for LicenseeNotificationRuleParameter.
const (
	LicenseeNotificationRuleParameterDATEOFSALE          LicenseeNotificationRuleParameter = "DATE_OF_SALE"
	LicenseeNotificationRuleParameterOCCUPIEDSEATSNUMBER LicenseeNotificationRuleParameter = "OCCUPIED_SEATS_NUMBER"
	LicenseeNotificationRuleParameterPERIODOFACCESS      LicenseeNotificationRuleParameter = "PERIOD_OF_ACCESS"
)

// Defines values for MailLogStatus.
const (
	MailLogStatusBounce    MailLogStatus = "bounce"
	MailLogStatusDelivered MailLogStatus = "delivered"
	MailLogStatusError     MailLogStatus = "error"
	MailLogStatusInvalid   MailLogStatus = "invalid"
	MailLogStatusMock      MailLogStatus = "mock"
	MailLogStatusQueued    MailLogStatus = "queued"
	MailLogStatusRejected  MailLogStatus = "rejected"
	MailLogStatusScheduled MailLogStatus = "scheduled"
	MailLogStatusSent      MailLogStatus = "sent"
	MailLogStatusUnknown   MailLogStatus = "unknown"
)

// Defines values for OfferModelStatus.
const (
	OfferModelStatusActive   OfferModelStatus = "active"
	OfferModelStatusArchived OfferModelStatus = "archived"
)

// Defines values for OfferTemplateBoilerplateType.
const (
	OfferTemplateBoilerplateTypeBannerUpgrades                   OfferTemplateBoilerplateType = "Banner - Upgrades"
	OfferTemplateBoilerplateTypeBasicTemplateModal               OfferTemplateBoilerplateType = "Basic template modal"
	OfferTemplateBoilerplateTypeCreditCounter                    OfferTemplateBoilerplateType = "Credit counter"
	OfferTemplateBoilerplateTypeCreditRedemption                 OfferTemplateBoilerplateType = "Credit redemption"
	OfferTemplateBoilerplateTypeFinalConfirmation                OfferTemplateBoilerplateType = "Final confirmation"
	OfferTemplateBoilerplateTypeFrictionlessOffer                OfferTemplateBoilerplateType = "Frictionless Offer"
	OfferTemplateBoilerplateTypeGridModal2Upgrades               OfferTemplateBoilerplateType = "Grid modal 2 - Upgrades"
	OfferTemplateBoilerplateTypeGridModal3Upgrades               OfferTemplateBoilerplateType = "Grid modal 3 - Upgrades"
	OfferTemplateBoilerplateTypeHardAdblockerInterceptModal      OfferTemplateBoilerplateType = "Hard adblocker intercept modal"
	OfferTemplateBoilerplateTypeLinkedInBanner                   OfferTemplateBoilerplateType = "LinkedIn Banner"
	OfferTemplateBoilerplateTypeLinkedInFree                     OfferTemplateBoilerplateType = "LinkedIn Free"
	OfferTemplateBoilerplateTypeLinkedInOffer                    OfferTemplateBoilerplateType = "LinkedIn Offer"
	OfferTemplateBoilerplateTypeLinkedInPremium                  OfferTemplateBoilerplateType = "LinkedIn Premium"
	OfferTemplateBoilerplateTypeLostValueChurnPrevention         OfferTemplateBoilerplateType = "Lost value - Churn prevention"
	OfferTemplateBoilerplateTypeMeterExpiredModal                OfferTemplateBoilerplateType = "Meter expired modal"
	OfferTemplateBoilerplateTypeMeterReminderModal               OfferTemplateBoilerplateType = "Meter reminder modal"
	OfferTemplateBoilerplateTypeNewscycle                        OfferTemplateBoilerplateType = "Newscycle"
	OfferTemplateBoilerplateTypeNewsletterSignupModal            OfferTemplateBoilerplateType = "Newsletter signup modal"
	OfferTemplateBoilerplateTypeOfferGridModal                   OfferTemplateBoilerplateType = "Offer grid modal"
	OfferTemplateBoilerplateTypeOfferListModal                   OfferTemplateBoilerplateType = "Offer list modal"
	OfferTemplateBoilerplateTypeOpenPass                         OfferTemplateBoilerplateType = "OpenPass"
	OfferTemplateBoilerplateTypePushEnrollment                   OfferTemplateBoilerplateType = "Push Enrollment"
	OfferTemplateBoilerplateTypeSiteLicensingLandingPage         OfferTemplateBoilerplateType = "Site Licensing Landing Page"
	OfferTemplateBoilerplateTypeSoftAdblockerInterceptModal      OfferTemplateBoilerplateType = "Soft adblocker intercept modal"
	OfferTemplateBoilerplateTypeSubscriptionModalPrompt1Upgrades OfferTemplateBoilerplateType = "Subscription modal prompt 1  - Upgrades"
	OfferTemplateBoilerplateTypeSubscriptionModalPrompt2Upgrades OfferTemplateBoilerplateType = "Subscription modal prompt 2 - Upgrades"
	OfferTemplateBoilerplateTypeSubscriptionPromptModal          OfferTemplateBoilerplateType = "Subscription prompt modal"
	OfferTemplateBoilerplateTypeUpgradeOffer1                    OfferTemplateBoilerplateType = "Upgrade offer 1"
	OfferTemplateBoilerplateTypeUpgradeOffer2                    OfferTemplateBoilerplateType = "Upgrade offer 2"
	OfferTemplateBoilerplateTypeZuora                            OfferTemplateBoilerplateType = "Zuora"
)

// Defines values for OfferTemplateBoilerplateTypeId.
const (
	OfferTemplateBoilerplateTypeIdBasic                                         OfferTemplateBoilerplateTypeId = "basic"
	OfferTemplateBoilerplateTypeIdChurnPreventionFinalConfirmation              OfferTemplateBoilerplateTypeId = "churn_prevention_final_confirmation"
	OfferTemplateBoilerplateTypeIdChurnPreventionLostValue                      OfferTemplateBoilerplateTypeId = "churn_prevention_lost_value"
	OfferTemplateBoilerplateTypeIdCreditCounter                                 OfferTemplateBoilerplateTypeId = "credit_counter"
	OfferTemplateBoilerplateTypeIdCreditRedemption                              OfferTemplateBoilerplateTypeId = "credit_redemption"
	OfferTemplateBoilerplateTypeIdHardAdblocker                                 OfferTemplateBoilerplateTypeId = "hard_adblocker"
	OfferTemplateBoilerplateTypeIdLicensingLandingPage                          OfferTemplateBoilerplateTypeId = "licensing_landing_page"
	OfferTemplateBoilerplateTypeIdLinkedinBanner                                OfferTemplateBoilerplateTypeId = "linkedin_banner"
	OfferTemplateBoilerplateTypeIdLinkedinFree                                  OfferTemplateBoilerplateTypeId = "linkedin_free"
	OfferTemplateBoilerplateTypeIdLinkedinOffer                                 OfferTemplateBoilerplateTypeId = "linkedin_offer"
	OfferTemplateBoilerplateTypeIdLinkedinPremium                               OfferTemplateBoilerplateTypeId = "linkedin_premium"
	OfferTemplateBoilerplateTypeIdMeterExpired                                  OfferTemplateBoilerplateTypeId = "meter_expired"
	OfferTemplateBoilerplateTypeIdMeterReminder                                 OfferTemplateBoilerplateTypeId = "meter_reminder"
	OfferTemplateBoilerplateTypeIdNewscycle                                     OfferTemplateBoilerplateTypeId = "newscycle"
	OfferTemplateBoilerplateTypeIdNewsletterSignup                              OfferTemplateBoilerplateTypeId = "newsletter_signup"
	OfferTemplateBoilerplateTypeIdOfferGrid                                     OfferTemplateBoilerplateTypeId = "offer_grid"
	OfferTemplateBoilerplateTypeIdOfferList                                     OfferTemplateBoilerplateTypeId = "offer_list"
	OfferTemplateBoilerplateTypeIdOpenPass                                      OfferTemplateBoilerplateTypeId = "open_pass"
	OfferTemplateBoilerplateTypeIdPasswordlessOffer                             OfferTemplateBoilerplateTypeId = "passwordless_offer"
	OfferTemplateBoilerplateTypeIdPushEnrollment                                OfferTemplateBoilerplateTypeId = "push_enrollment"
	OfferTemplateBoilerplateTypeIdSoftAdblocker                                 OfferTemplateBoilerplateTypeId = "soft_adblocker"
	OfferTemplateBoilerplateTypeIdSubscriptionPrompt                            OfferTemplateBoilerplateTypeId = "subscription_prompt"
	OfferTemplateBoilerplateTypeIdUpgradeDowngradeOfferBanner                   OfferTemplateBoilerplateTypeId = "upgrade_downgrade_offer_banner"
	OfferTemplateBoilerplateTypeIdUpgradeDowngradeOfferGridModal2               OfferTemplateBoilerplateTypeId = "upgrade_downgrade_offer_grid_modal_2"
	OfferTemplateBoilerplateTypeIdUpgradeDowngradeOfferGridModal3               OfferTemplateBoilerplateTypeId = "upgrade_downgrade_offer_grid_modal_3"
	OfferTemplateBoilerplateTypeIdUpgradeDowngradeOfferSubscriptionPromptModal1 OfferTemplateBoilerplateTypeId = "upgrade_downgrade_offer_subscription_prompt_modal_1"
	OfferTemplateBoilerplateTypeIdUpgradeDowngradeOfferSubscriptionPromptModal2 OfferTemplateBoilerplateTypeId = "upgrade_downgrade_offer_subscription_prompt_modal_2"
	OfferTemplateBoilerplateTypeIdUpgradeOffer1                                 OfferTemplateBoilerplateTypeId = "upgrade_offer_1"
	OfferTemplateBoilerplateTypeIdUpgradeOffer2                                 OfferTemplateBoilerplateTypeId = "upgrade_offer_2"
	OfferTemplateBoilerplateTypeIdZuora                                         OfferTemplateBoilerplateTypeId = "zuora"
)

// Defines values for OfferTemplateCategoryId.
const (
	OfferTemplateCategoryIdAdblocker       OfferTemplateCategoryId = "adblocker"
	OfferTemplateCategoryIdAffiliate       OfferTemplateCategoryId = "affiliate"
	OfferTemplateCategoryIdCheckout        OfferTemplateCategoryId = "checkout"
	OfferTemplateCategoryIdChurnPrevention OfferTemplateCategoryId = "churn_prevention"
	OfferTemplateCategoryIdExpPianoId      OfferTemplateCategoryId = "exp_piano_id"
	OfferTemplateCategoryIdGtOffer         OfferTemplateCategoryId = "gt_offer"
	OfferTemplateCategoryIdGtTemplate      OfferTemplateCategoryId = "gt_template"
	OfferTemplateCategoryIdLicensing       OfferTemplateCategoryId = "licensing"
	OfferTemplateCategoryIdMetering        OfferTemplateCategoryId = "metering"
	OfferTemplateCategoryIdMyAccount       OfferTemplateCategoryId = "my_account"
	OfferTemplateCategoryIdNewsletter      OfferTemplateCategoryId = "newsletter"
	OfferTemplateCategoryIdOffer           OfferTemplateCategoryId = "offer"
	OfferTemplateCategoryIdPianoId         OfferTemplateCategoryId = "piano_id"
	OfferTemplateCategoryIdPushEnrollment  OfferTemplateCategoryId = "push_enrollment"
	OfferTemplateCategoryIdRegistration    OfferTemplateCategoryId = "registration"
	OfferTemplateCategoryIdSocial          OfferTemplateCategoryId = "social"
	OfferTemplateCategoryIdSystem          OfferTemplateCategoryId = "system"
	OfferTemplateCategoryIdUpgradeOffer    OfferTemplateCategoryId = "upgrade_offer"
)

// Defines values for OfferTemplateStatus.
const (
	OfferTemplateStatusActive   OfferTemplateStatus = "active"
	OfferTemplateStatusArchived OfferTemplateStatus = "archived"
)

// Defines values for OfferTemplateTokenType.
const (
	OfferTemplateTokenTypeBOILERPLATE OfferTemplateTokenType = "BOILERPLATE"
	OfferTemplateTokenTypeNONSTATIC   OfferTemplateTokenType = "NON_STATIC"
	OfferTemplateTokenTypeSTATIC      OfferTemplateTokenType = "STATIC"
)

// Defines values for OfferTemplateType.
const (
	OfferTemplateTypeAlreadyHasAccess                   OfferTemplateType = "Already has access"
	OfferTemplateTypeCheckout                           OfferTemplateType = "Checkout"
	OfferTemplateTypeCheckoutComponents                 OfferTemplateType = "Checkout Components"
	OfferTemplateTypeCheckoutStyle                      OfferTemplateType = "Checkout Style"
	OfferTemplateTypeConfirmationScreen                 OfferTemplateType = "Confirmation screen"
	OfferTemplateTypeConsentComponents                  OfferTemplateType = "Consent Components"
	OfferTemplateTypeCustomLoginregister                OfferTemplateType = "Custom login/register"
	OfferTemplateTypeDefaultOffer                       OfferTemplateType = "Default Offer"
	OfferTemplateTypeErrorScreen                        OfferTemplateType = "Error screen"
	OfferTemplateTypeExternalVerificationComponents     OfferTemplateType = "External Verification Components"
	OfferTemplateTypeFinalConfirmation                  OfferTemplateType = "Final confirmation"
	OfferTemplateTypeFutureStartComponents              OfferTemplateType = "Future Start Components"
	OfferTemplateTypeGiftComponents                     OfferTemplateType = "Gift Components"
	OfferTemplateTypeLostValueOffer                     OfferTemplateType = "Lost value offer"
	OfferTemplateTypeMyAccountCashPaymentComponents     OfferTemplateType = "My Account Cash Payment Components"
	OfferTemplateTypeMyAccountCommonComponentsTemplates OfferTemplateType = "My Account common components templates"
	OfferTemplateTypeMyAccountErrorPageMessage          OfferTemplateType = "My Account error page message"
	OfferTemplateTypeMyAccountHelpComponents            OfferTemplateType = "My Account Help Components"
	OfferTemplateTypeMyAccountLayout                    OfferTemplateType = "My Account layout"
	OfferTemplateTypeMyAccountLibraryComponents         OfferTemplateType = "My Account Library Components"
	OfferTemplateTypeMyAccountLicensingComponents       OfferTemplateType = "My Account Licensing Components"
	OfferTemplateTypeMyAccountPaymentsComponents        OfferTemplateType = "My Account Payments Components"
	OfferTemplateTypeMyAccountPianoIdComponents         OfferTemplateType = "My Account PianoId Components"
	OfferTemplateTypeMyAccountStyle                     OfferTemplateType = "My Account Style"
	OfferTemplateTypeMyAccountTransactionsComponents    OfferTemplateType = "My Account Transactions Components"
	OfferTemplateTypeMyAccountUserProfileComponents     OfferTemplateType = "My Account User Profile Components"
	OfferTemplateTypeMyAccountVoucherComponents         OfferTemplateType = "My Account Voucher Components"
	OfferTemplateTypeMyAccountWalletComponents          OfferTemplateType = "My Account Wallet Components"
	OfferTemplateTypeN3dBankSecureComponents            OfferTemplateType = "3d Bank secure components"
	OfferTemplateTypeNewscycleOffer                     OfferTemplateType = "Newscycle offer"
	OfferTemplateTypeNewsletterSignup                   OfferTemplateType = "Newsletter signup"
	OfferTemplateTypePaymentComponents                  OfferTemplateType = "Payment Components"
	OfferTemplateTypePianoID2FADigitalCode              OfferTemplateType = "Piano ID 2FA Digital code"
	OfferTemplateTypePianoIDAliasLogin                  OfferTemplateType = "Piano ID Alias login"
	OfferTemplateTypePianoIDCustomForm                  OfferTemplateType = "Piano ID custom form"
	OfferTemplateTypePianoIDDigitalCode                 OfferTemplateType = "Piano ID Digital code"
	OfferTemplateTypePianoIDEmailConfirmationRequired   OfferTemplateType = "Piano ID email confirmation required"
	OfferTemplateTypePianoIDEmailConfirmationView       OfferTemplateType = "Piano ID email confirmation view"
	OfferTemplateTypePianoIDEmailIsNotConfirmed         OfferTemplateType = "Piano ID email is not confirmed"
	OfferTemplateTypePianoIDGenericErrorPage            OfferTemplateType = "Piano ID generic error page"
	OfferTemplateTypePianoIDInitiatePasswordReset       OfferTemplateType = "Piano ID initiate password reset"
	OfferTemplateTypePianoIDLayout                      OfferTemplateType = "Piano ID layout"
	OfferTemplateTypePianoIDLayoutGMSSO                 OfferTemplateType = "Piano ID layout GM SSO"
	OfferTemplateTypePianoIDLoginConfirmPage            OfferTemplateType = "Piano ID login confirm page"
	OfferTemplateTypePianoIDLoginPage                   OfferTemplateType = "Piano ID login page"
	OfferTemplateTypePianoIDNewPasswordPage             OfferTemplateType = "Piano ID new password page"
	OfferTemplateTypePianoIDNewsletters                 OfferTemplateType = "Piano ID newsletters"
	OfferTemplateTypePianoIDPasswordlessLoginPage       OfferTemplateType = "Piano ID passwordless login page"
	OfferTemplateTypePianoIDPhoneNumberIsNotConfirmed   OfferTemplateType = "Piano ID Phone number is not confirmed"
	OfferTemplateTypePianoIDPhoneNumberUpdate           OfferTemplateType = "Piano ID Phone number Update"
	OfferTemplateTypePianoIDProfileInMyAccount          OfferTemplateType = "Piano ID profile in My Account"
	OfferTemplateTypePianoIDRegisterConfirmPage         OfferTemplateType = "Piano ID register confirm page"
	OfferTemplateTypePianoIDRegisterPage                OfferTemplateType = "Piano ID register page"
	OfferTemplateTypePianoIDSSOConfirmBefore            OfferTemplateType = "Piano ID SSO confirm before"
	OfferTemplateTypePianoIDSSOConfirmPage              OfferTemplateType = "Piano ID SSO confirm page"
	OfferTemplateTypePrintAddressCollectScreen          OfferTemplateType = "Print address collect screen"
	OfferTemplateTypePromotionComponents                OfferTemplateType = "Promotion Components"
	OfferTemplateTypeProviderComponents                 OfferTemplateType = "Provider Components"
	OfferTemplateTypePushSignup                         OfferTemplateType = "Push signup"
	OfferTemplateTypeReactivateSubscriptionComponents   OfferTemplateType = "Reactivate subscription components"
	OfferTemplateTypeReceipt                            OfferTemplateType = "Receipt"
	OfferTemplateTypeRedemptionComponents               OfferTemplateType = "Redemption Components"
	OfferTemplateTypeSharedSubscriptionComponents       OfferTemplateType = "Shared subscription components"
	OfferTemplateTypeSiteLicensingContractList          OfferTemplateType = "Site Licensing Contract List"
	OfferTemplateTypeSiteLicensingLandingPage           OfferTemplateType = "Site Licensing Landing Page"
	OfferTemplateTypeSiteLicensingRedeemResult          OfferTemplateType = "Site Licensing Redeem Result"
	OfferTemplateTypeTemplate                           OfferTemplateType = "Template"
	OfferTemplateTypeTermComponents                     OfferTemplateType = "Term Components"
	OfferTemplateTypeUpgradeAuthenticationComponents    OfferTemplateType = "Upgrade authentication components"
	OfferTemplateTypeUpgradeComponents                  OfferTemplateType = "Upgrade components"
	OfferTemplateTypeUpgradeOffer                       OfferTemplateType = "Upgrade offer"
	OfferTemplateTypeZuoraOffer                         OfferTemplateType = "Zuora offer"
)

// Defines values for OfferTemplateTypeId.
const (
	OfferTemplateTypeIdAlreadyHasAccess                 OfferTemplateTypeId = "already_has_access"
	OfferTemplateTypeIdAuth                             OfferTemplateTypeId = "auth"
	OfferTemplateTypeIdBankSecureComponents             OfferTemplateTypeId = "bank_secure_components"
	OfferTemplateTypeIdCheckoutStyle                    OfferTemplateTypeId = "checkout_style"
	OfferTemplateTypeIdComponents                       OfferTemplateTypeId = "components"
	OfferTemplateTypeIdConfirmation                     OfferTemplateTypeId = "confirmation"
	OfferTemplateTypeIdConsentComponents                OfferTemplateTypeId = "consent_components"
	OfferTemplateTypeIdDefaultOffer                     OfferTemplateTypeId = "default_offer"
	OfferTemplateTypeIdError                            OfferTemplateTypeId = "error"
	OfferTemplateTypeIdExternalVerificationComponents   OfferTemplateTypeId = "external_verification_components"
	OfferTemplateTypeIdFinalConfirmation                OfferTemplateTypeId = "final_confirmation"
	OfferTemplateTypeIdFutureStartComponents            OfferTemplateTypeId = "future_start_components"
	OfferTemplateTypeIdGiftComponents                   OfferTemplateTypeId = "gift_components"
	OfferTemplateTypeIdLicensingContractList            OfferTemplateTypeId = "licensing_contract_list"
	OfferTemplateTypeIdLicensingLandingPage             OfferTemplateTypeId = "licensing_landing_page"
	OfferTemplateTypeIdLicensingRedeemResult            OfferTemplateTypeId = "licensing_redeem_result"
	OfferTemplateTypeIdLostValueOffer                   OfferTemplateTypeId = "lost_value_offer"
	OfferTemplateTypeIdMyaccountApp                     OfferTemplateTypeId = "myaccount_app"
	OfferTemplateTypeIdMyaccountCashPayments            OfferTemplateTypeId = "myaccount_cash_payments"
	OfferTemplateTypeIdMyaccountCommon                  OfferTemplateTypeId = "myaccount_common"
	OfferTemplateTypeIdMyaccountError                   OfferTemplateTypeId = "myaccount_error"
	OfferTemplateTypeIdMyaccountHelp                    OfferTemplateTypeId = "myaccount_help"
	OfferTemplateTypeIdMyaccountLibrary                 OfferTemplateTypeId = "myaccount_library"
	OfferTemplateTypeIdMyaccountLicensing               OfferTemplateTypeId = "myaccount_licensing"
	OfferTemplateTypeIdMyaccountPayments                OfferTemplateTypeId = "myaccount_payments"
	OfferTemplateTypeIdMyaccountStyle                   OfferTemplateTypeId = "myaccount_style"
	OfferTemplateTypeIdMyaccountTransactions            OfferTemplateTypeId = "myaccount_transactions"
	OfferTemplateTypeIdMyaccountUserProfile             OfferTemplateTypeId = "myaccount_user_profile"
	OfferTemplateTypeIdMyaccountVoucher                 OfferTemplateTypeId = "myaccount_voucher"
	OfferTemplateTypeIdMyaccountWallet                  OfferTemplateTypeId = "myaccount_wallet"
	OfferTemplateTypeIdNewscycleOffer                   OfferTemplateTypeId = "newscycle_offer"
	OfferTemplateTypeIdNewsletterSignup                 OfferTemplateTypeId = "newsletter_signup"
	OfferTemplateTypeIdPaymentComponents                OfferTemplateTypeId = "payment_components"
	OfferTemplateTypeIdPianoId2faEmailDigitalCode       OfferTemplateTypeId = "piano_id_2fa_email_digital_code"
	OfferTemplateTypeIdPianoIdAliasLogin                OfferTemplateTypeId = "piano_id_alias_login"
	OfferTemplateTypeIdPianoIdCustomForm                OfferTemplateTypeId = "piano_id_custom_form"
	OfferTemplateTypeIdPianoIdCustomFormExp             OfferTemplateTypeId = "piano_id_custom_form_exp"
	OfferTemplateTypeIdPianoIdDigitalCode               OfferTemplateTypeId = "piano_id_digital_code"
	OfferTemplateTypeIdPianoIdEmailConfirmation         OfferTemplateTypeId = "piano_id_email_confirmation"
	OfferTemplateTypeIdPianoIdEmailConfirmationRequired OfferTemplateTypeId = "piano_id_email_confirmation_required"
	OfferTemplateTypeIdPianoIdEmailIsNotConfirmed       OfferTemplateTypeId = "piano_id_email_is_not_confirmed"
	OfferTemplateTypeIdPianoIdErrorPage                 OfferTemplateTypeId = "piano_id_error_page"
	OfferTemplateTypeIdPianoIdInitiatePasswordReset     OfferTemplateTypeId = "piano_id_initiate_password_reset"
	OfferTemplateTypeIdPianoIdLayout                    OfferTemplateTypeId = "piano_id_layout"
	OfferTemplateTypeIdPianoIdLayoutGmSso               OfferTemplateTypeId = "piano_id_layout_gm_sso"
	OfferTemplateTypeIdPianoIdLogin                     OfferTemplateTypeId = "piano_id_login"
	OfferTemplateTypeIdPianoIdLoginConfirm              OfferTemplateTypeId = "piano_id_login_confirm"
	OfferTemplateTypeIdPianoIdMyAccount                 OfferTemplateTypeId = "piano_id_my_account"
	OfferTemplateTypeIdPianoIdNewPassword               OfferTemplateTypeId = "piano_id_new_password"
	OfferTemplateTypeIdPianoIdNewsletters               OfferTemplateTypeId = "piano_id_newsletters"
	OfferTemplateTypeIdPianoIdPasswordlessConfirmation  OfferTemplateTypeId = "piano_id_passwordless_confirmation"
	OfferTemplateTypeIdPianoIdPhoneIsNotConfirmed       OfferTemplateTypeId = "piano_id_phone_is_not_confirmed"
	OfferTemplateTypeIdPianoIdPhoneUpdate               OfferTemplateTypeId = "piano_id_phone_update"
	OfferTemplateTypeIdPianoIdProfile                   OfferTemplateTypeId = "piano_id_profile"
	OfferTemplateTypeIdPianoIdRegister                  OfferTemplateTypeId = "piano_id_register"
	OfferTemplateTypeIdPianoIdRegisterConfirm           OfferTemplateTypeId = "piano_id_register_confirm"
	OfferTemplateTypeIdPianoIdRegistrationExp           OfferTemplateTypeId = "piano_id_registration_exp"
	OfferTemplateTypeIdPianoIdSsoConfirm                OfferTemplateTypeId = "piano_id_sso_confirm"
	OfferTemplateTypeIdPianoIdSsoConfirmBefore          OfferTemplateTypeId = "piano_id_sso_confirm_before"
	OfferTemplateTypeIdPrintAddressComponents           OfferTemplateTypeId = "print_address_components"
	OfferTemplateTypeIdPromoComponents                  OfferTemplateTypeId = "promo_components"
	OfferTemplateTypeIdProviderComponents               OfferTemplateTypeId = "provider_components"
	OfferTemplateTypeIdPushSignup                       OfferTemplateTypeId = "push_signup"
	OfferTemplateTypeIdReactivateSubscription           OfferTemplateTypeId = "reactivate_subscription"
	OfferTemplateTypeIdReceiptTemplate                  OfferTemplateTypeId = "receipt_template"
	OfferTemplateTypeIdRedemptionComponents             OfferTemplateTypeId = "redemption_components"
	OfferTemplateTypeIdSharedSubscriptionComponents     OfferTemplateTypeId = "shared_subscription_components"
	OfferTemplateTypeIdStates                           OfferTemplateTypeId = "states"
	OfferTemplateTypeIdTemplate                         OfferTemplateTypeId = "template"
	OfferTemplateTypeIdTermComponents                   OfferTemplateTypeId = "term_components"
	OfferTemplateTypeIdUpgradeAuthenticationComponents  OfferTemplateTypeId = "upgrade_authentication_components"
	OfferTemplateTypeIdUpgradeComponents                OfferTemplateTypeId = "upgrade_components"
	OfferTemplateTypeIdUpgradeOffer                     OfferTemplateTypeId = "upgrade_offer"
	OfferTemplateTypeIdZuoraOffer                       OfferTemplateTypeId = "zuora_offer"
)

// Defines values for OfferTemplateCategoriesCategoryId.
const (
	OfferTemplateCategoriesCategoryIdAdblocker       OfferTemplateCategoriesCategoryId = "adblocker"
	OfferTemplateCategoriesCategoryIdAffiliate       OfferTemplateCategoriesCategoryId = "affiliate"
	OfferTemplateCategoriesCategoryIdCheckout        OfferTemplateCategoriesCategoryId = "checkout"
	OfferTemplateCategoriesCategoryIdChurnPrevention OfferTemplateCategoriesCategoryId = "churn_prevention"
	OfferTemplateCategoriesCategoryIdExpPianoId      OfferTemplateCategoriesCategoryId = "exp_piano_id"
	OfferTemplateCategoriesCategoryIdGtOffer         OfferTemplateCategoriesCategoryId = "gt_offer"
	OfferTemplateCategoriesCategoryIdGtTemplate      OfferTemplateCategoriesCategoryId = "gt_template"
	OfferTemplateCategoriesCategoryIdLicensing       OfferTemplateCategoriesCategoryId = "licensing"
	OfferTemplateCategoriesCategoryIdMetering        OfferTemplateCategoriesCategoryId = "metering"
	OfferTemplateCategoriesCategoryIdMyAccount       OfferTemplateCategoriesCategoryId = "my_account"
	OfferTemplateCategoriesCategoryIdNewsletter      OfferTemplateCategoriesCategoryId = "newsletter"
	OfferTemplateCategoriesCategoryIdOffer           OfferTemplateCategoriesCategoryId = "offer"
	OfferTemplateCategoriesCategoryIdPianoId         OfferTemplateCategoriesCategoryId = "piano_id"
	OfferTemplateCategoriesCategoryIdPushEnrollment  OfferTemplateCategoriesCategoryId = "push_enrollment"
	OfferTemplateCategoriesCategoryIdRegistration    OfferTemplateCategoriesCategoryId = "registration"
	OfferTemplateCategoriesCategoryIdSocial          OfferTemplateCategoriesCategoryId = "social"
	OfferTemplateCategoriesCategoryIdSystem          OfferTemplateCategoriesCategoryId = "system"
	OfferTemplateCategoriesCategoryIdUpgradeOffer    OfferTemplateCategoriesCategoryId = "upgrade_offer"
)

// Defines values for OfferTemplateVariantStatus.
const (
	OfferTemplateVariantStatusActive   OfferTemplateVariantStatus = "active"
	OfferTemplateVariantStatusArchived OfferTemplateVariantStatus = "archived"
)

// Defines values for OfferTemplateVersionBoilerplateType.
const (
	OfferTemplateVersionBoilerplateTypeBannerUpgrades                   OfferTemplateVersionBoilerplateType = "Banner - Upgrades"
	OfferTemplateVersionBoilerplateTypeBasicTemplateModal               OfferTemplateVersionBoilerplateType = "Basic template modal"
	OfferTemplateVersionBoilerplateTypeCreditCounter                    OfferTemplateVersionBoilerplateType = "Credit counter"
	OfferTemplateVersionBoilerplateTypeCreditRedemption                 OfferTemplateVersionBoilerplateType = "Credit redemption"
	OfferTemplateVersionBoilerplateTypeFinalConfirmation                OfferTemplateVersionBoilerplateType = "Final confirmation"
	OfferTemplateVersionBoilerplateTypeFrictionlessOffer                OfferTemplateVersionBoilerplateType = "Frictionless Offer"
	OfferTemplateVersionBoilerplateTypeGridModal2Upgrades               OfferTemplateVersionBoilerplateType = "Grid modal 2 - Upgrades"
	OfferTemplateVersionBoilerplateTypeGridModal3Upgrades               OfferTemplateVersionBoilerplateType = "Grid modal 3 - Upgrades"
	OfferTemplateVersionBoilerplateTypeHardAdblockerInterceptModal      OfferTemplateVersionBoilerplateType = "Hard adblocker intercept modal"
	OfferTemplateVersionBoilerplateTypeLinkedInBanner                   OfferTemplateVersionBoilerplateType = "LinkedIn Banner"
	OfferTemplateVersionBoilerplateTypeLinkedInFree                     OfferTemplateVersionBoilerplateType = "LinkedIn Free"
	OfferTemplateVersionBoilerplateTypeLinkedInOffer                    OfferTemplateVersionBoilerplateType = "LinkedIn Offer"
	OfferTemplateVersionBoilerplateTypeLinkedInPremium                  OfferTemplateVersionBoilerplateType = "LinkedIn Premium"
	OfferTemplateVersionBoilerplateTypeLostValueChurnPrevention         OfferTemplateVersionBoilerplateType = "Lost value - Churn prevention"
	OfferTemplateVersionBoilerplateTypeMeterExpiredModal                OfferTemplateVersionBoilerplateType = "Meter expired modal"
	OfferTemplateVersionBoilerplateTypeMeterReminderModal               OfferTemplateVersionBoilerplateType = "Meter reminder modal"
	OfferTemplateVersionBoilerplateTypeNewscycle                        OfferTemplateVersionBoilerplateType = "Newscycle"
	OfferTemplateVersionBoilerplateTypeNewsletterSignupModal            OfferTemplateVersionBoilerplateType = "Newsletter signup modal"
	OfferTemplateVersionBoilerplateTypeOfferGridModal                   OfferTemplateVersionBoilerplateType = "Offer grid modal"
	OfferTemplateVersionBoilerplateTypeOfferListModal                   OfferTemplateVersionBoilerplateType = "Offer list modal"
	OfferTemplateVersionBoilerplateTypeOpenPass                         OfferTemplateVersionBoilerplateType = "OpenPass"
	OfferTemplateVersionBoilerplateTypePushEnrollment                   OfferTemplateVersionBoilerplateType = "Push Enrollment"
	OfferTemplateVersionBoilerplateTypeSiteLicensingLandingPage         OfferTemplateVersionBoilerplateType = "Site Licensing Landing Page"
	OfferTemplateVersionBoilerplateTypeSoftAdblockerInterceptModal      OfferTemplateVersionBoilerplateType = "Soft adblocker intercept modal"
	OfferTemplateVersionBoilerplateTypeSubscriptionModalPrompt1Upgrades OfferTemplateVersionBoilerplateType = "Subscription modal prompt 1  - Upgrades"
	OfferTemplateVersionBoilerplateTypeSubscriptionModalPrompt2Upgrades OfferTemplateVersionBoilerplateType = "Subscription modal prompt 2 - Upgrades"
	OfferTemplateVersionBoilerplateTypeSubscriptionPromptModal          OfferTemplateVersionBoilerplateType = "Subscription prompt modal"
	OfferTemplateVersionBoilerplateTypeUpgradeOffer1                    OfferTemplateVersionBoilerplateType = "Upgrade offer 1"
	OfferTemplateVersionBoilerplateTypeUpgradeOffer2                    OfferTemplateVersionBoilerplateType = "Upgrade offer 2"
	OfferTemplateVersionBoilerplateTypeZuora                            OfferTemplateVersionBoilerplateType = "Zuora"
)

// Defines values for OfferTemplateVersionBoilerplateTypeId.
const (
	OfferTemplateVersionBoilerplateTypeIdBasic                                         OfferTemplateVersionBoilerplateTypeId = "basic"
	OfferTemplateVersionBoilerplateTypeIdChurnPreventionFinalConfirmation              OfferTemplateVersionBoilerplateTypeId = "churn_prevention_final_confirmation"
	OfferTemplateVersionBoilerplateTypeIdChurnPreventionLostValue                      OfferTemplateVersionBoilerplateTypeId = "churn_prevention_lost_value"
	OfferTemplateVersionBoilerplateTypeIdCreditCounter                                 OfferTemplateVersionBoilerplateTypeId = "credit_counter"
	OfferTemplateVersionBoilerplateTypeIdCreditRedemption                              OfferTemplateVersionBoilerplateTypeId = "credit_redemption"
	OfferTemplateVersionBoilerplateTypeIdHardAdblocker                                 OfferTemplateVersionBoilerplateTypeId = "hard_adblocker"
	OfferTemplateVersionBoilerplateTypeIdLicensingLandingPage                          OfferTemplateVersionBoilerplateTypeId = "licensing_landing_page"
	OfferTemplateVersionBoilerplateTypeIdLinkedinBanner                                OfferTemplateVersionBoilerplateTypeId = "linkedin_banner"
	OfferTemplateVersionBoilerplateTypeIdLinkedinFree                                  OfferTemplateVersionBoilerplateTypeId = "linkedin_free"
	OfferTemplateVersionBoilerplateTypeIdLinkedinOffer                                 OfferTemplateVersionBoilerplateTypeId = "linkedin_offer"
	OfferTemplateVersionBoilerplateTypeIdLinkedinPremium                               OfferTemplateVersionBoilerplateTypeId = "linkedin_premium"
	OfferTemplateVersionBoilerplateTypeIdMeterExpired                                  OfferTemplateVersionBoilerplateTypeId = "meter_expired"
	OfferTemplateVersionBoilerplateTypeIdMeterReminder                                 OfferTemplateVersionBoilerplateTypeId = "meter_reminder"
	OfferTemplateVersionBoilerplateTypeIdNewscycle                                     OfferTemplateVersionBoilerplateTypeId = "newscycle"
	OfferTemplateVersionBoilerplateTypeIdNewsletterSignup                              OfferTemplateVersionBoilerplateTypeId = "newsletter_signup"
	OfferTemplateVersionBoilerplateTypeIdOfferGrid                                     OfferTemplateVersionBoilerplateTypeId = "offer_grid"
	OfferTemplateVersionBoilerplateTypeIdOfferList                                     OfferTemplateVersionBoilerplateTypeId = "offer_list"
	OfferTemplateVersionBoilerplateTypeIdOpenPass                                      OfferTemplateVersionBoilerplateTypeId = "open_pass"
	OfferTemplateVersionBoilerplateTypeIdPasswordlessOffer                             OfferTemplateVersionBoilerplateTypeId = "passwordless_offer"
	OfferTemplateVersionBoilerplateTypeIdPushEnrollment                                OfferTemplateVersionBoilerplateTypeId = "push_enrollment"
	OfferTemplateVersionBoilerplateTypeIdSoftAdblocker                                 OfferTemplateVersionBoilerplateTypeId = "soft_adblocker"
	OfferTemplateVersionBoilerplateTypeIdSubscriptionPrompt                            OfferTemplateVersionBoilerplateTypeId = "subscription_prompt"
	OfferTemplateVersionBoilerplateTypeIdUpgradeDowngradeOfferBanner                   OfferTemplateVersionBoilerplateTypeId = "upgrade_downgrade_offer_banner"
	OfferTemplateVersionBoilerplateTypeIdUpgradeDowngradeOfferGridModal2               OfferTemplateVersionBoilerplateTypeId = "upgrade_downgrade_offer_grid_modal_2"
	OfferTemplateVersionBoilerplateTypeIdUpgradeDowngradeOfferGridModal3               OfferTemplateVersionBoilerplateTypeId = "upgrade_downgrade_offer_grid_modal_3"
	OfferTemplateVersionBoilerplateTypeIdUpgradeDowngradeOfferSubscriptionPromptModal1 OfferTemplateVersionBoilerplateTypeId = "upgrade_downgrade_offer_subscription_prompt_modal_1"
	OfferTemplateVersionBoilerplateTypeIdUpgradeDowngradeOfferSubscriptionPromptModal2 OfferTemplateVersionBoilerplateTypeId = "upgrade_downgrade_offer_subscription_prompt_modal_2"
	OfferTemplateVersionBoilerplateTypeIdUpgradeOffer1                                 OfferTemplateVersionBoilerplateTypeId = "upgrade_offer_1"
	OfferTemplateVersionBoilerplateTypeIdUpgradeOffer2                                 OfferTemplateVersionBoilerplateTypeId = "upgrade_offer_2"
	OfferTemplateVersionBoilerplateTypeIdZuora                                         OfferTemplateVersionBoilerplateTypeId = "zuora"
)

// Defines values for OfferTemplateVersionCategoryId.
const (
	OfferTemplateVersionCategoryIdAdblocker       OfferTemplateVersionCategoryId = "adblocker"
	OfferTemplateVersionCategoryIdAffiliate       OfferTemplateVersionCategoryId = "affiliate"
	OfferTemplateVersionCategoryIdCheckout        OfferTemplateVersionCategoryId = "checkout"
	OfferTemplateVersionCategoryIdChurnPrevention OfferTemplateVersionCategoryId = "churn_prevention"
	OfferTemplateVersionCategoryIdExpPianoId      OfferTemplateVersionCategoryId = "exp_piano_id"
	OfferTemplateVersionCategoryIdGtOffer         OfferTemplateVersionCategoryId = "gt_offer"
	OfferTemplateVersionCategoryIdGtTemplate      OfferTemplateVersionCategoryId = "gt_template"
	OfferTemplateVersionCategoryIdLicensing       OfferTemplateVersionCategoryId = "licensing"
	OfferTemplateVersionCategoryIdMetering        OfferTemplateVersionCategoryId = "metering"
	OfferTemplateVersionCategoryIdMyAccount       OfferTemplateVersionCategoryId = "my_account"
	OfferTemplateVersionCategoryIdNewsletter      OfferTemplateVersionCategoryId = "newsletter"
	OfferTemplateVersionCategoryIdOffer           OfferTemplateVersionCategoryId = "offer"
	OfferTemplateVersionCategoryIdPianoId         OfferTemplateVersionCategoryId = "piano_id"
	OfferTemplateVersionCategoryIdPushEnrollment  OfferTemplateVersionCategoryId = "push_enrollment"
	OfferTemplateVersionCategoryIdRegistration    OfferTemplateVersionCategoryId = "registration"
	OfferTemplateVersionCategoryIdSocial          OfferTemplateVersionCategoryId = "social"
	OfferTemplateVersionCategoryIdSystem          OfferTemplateVersionCategoryId = "system"
	OfferTemplateVersionCategoryIdUpgradeOffer    OfferTemplateVersionCategoryId = "upgrade_offer"
)

// Defines values for OfferTemplateVersionStatus.
const (
	OfferTemplateVersionStatusActive   OfferTemplateVersionStatus = "active"
	OfferTemplateVersionStatusArchived OfferTemplateVersionStatus = "archived"
)

// Defines values for OfferTemplateVersionTokenType.
const (
	OfferTemplateVersionTokenTypeBOILERPLATE OfferTemplateVersionTokenType = "BOILERPLATE"
	OfferTemplateVersionTokenTypeNONSTATIC   OfferTemplateVersionTokenType = "NON_STATIC"
	OfferTemplateVersionTokenTypeSTATIC      OfferTemplateVersionTokenType = "STATIC"
)

// Defines values for OfferTemplateVersionType.
const (
	OfferTemplateVersionTypeAlreadyHasAccess                   OfferTemplateVersionType = "Already has access"
	OfferTemplateVersionTypeCheckout                           OfferTemplateVersionType = "Checkout"
	OfferTemplateVersionTypeCheckoutComponents                 OfferTemplateVersionType = "Checkout Components"
	OfferTemplateVersionTypeCheckoutStyle                      OfferTemplateVersionType = "Checkout Style"
	OfferTemplateVersionTypeConfirmationScreen                 OfferTemplateVersionType = "Confirmation screen"
	OfferTemplateVersionTypeConsentComponents                  OfferTemplateVersionType = "Consent Components"
	OfferTemplateVersionTypeCustomLoginregister                OfferTemplateVersionType = "Custom login/register"
	OfferTemplateVersionTypeDefaultOffer                       OfferTemplateVersionType = "Default Offer"
	OfferTemplateVersionTypeErrorScreen                        OfferTemplateVersionType = "Error screen"
	OfferTemplateVersionTypeExternalVerificationComponents     OfferTemplateVersionType = "External Verification Components"
	OfferTemplateVersionTypeFinalConfirmation                  OfferTemplateVersionType = "Final confirmation"
	OfferTemplateVersionTypeFutureStartComponents              OfferTemplateVersionType = "Future Start Components"
	OfferTemplateVersionTypeGiftComponents                     OfferTemplateVersionType = "Gift Components"
	OfferTemplateVersionTypeLostValueOffer                     OfferTemplateVersionType = "Lost value offer"
	OfferTemplateVersionTypeMyAccountCashPaymentComponents     OfferTemplateVersionType = "My Account Cash Payment Components"
	OfferTemplateVersionTypeMyAccountCommonComponentsTemplates OfferTemplateVersionType = "My Account common components templates"
	OfferTemplateVersionTypeMyAccountErrorPageMessage          OfferTemplateVersionType = "My Account error page message"
	OfferTemplateVersionTypeMyAccountHelpComponents            OfferTemplateVersionType = "My Account Help Components"
	OfferTemplateVersionTypeMyAccountLayout                    OfferTemplateVersionType = "My Account layout"
	OfferTemplateVersionTypeMyAccountLibraryComponents         OfferTemplateVersionType = "My Account Library Components"
	OfferTemplateVersionTypeMyAccountLicensingComponents       OfferTemplateVersionType = "My Account Licensing Components"
	OfferTemplateVersionTypeMyAccountPaymentsComponents        OfferTemplateVersionType = "My Account Payments Components"
	OfferTemplateVersionTypeMyAccountPianoIdComponents         OfferTemplateVersionType = "My Account PianoId Components"
	OfferTemplateVersionTypeMyAccountStyle                     OfferTemplateVersionType = "My Account Style"
	OfferTemplateVersionTypeMyAccountTransactionsComponents    OfferTemplateVersionType = "My Account Transactions Components"
	OfferTemplateVersionTypeMyAccountUserProfileComponents     OfferTemplateVersionType = "My Account User Profile Components"
	OfferTemplateVersionTypeMyAccountVoucherComponents         OfferTemplateVersionType = "My Account Voucher Components"
	OfferTemplateVersionTypeMyAccountWalletComponents          OfferTemplateVersionType = "My Account Wallet Components"
	OfferTemplateVersionTypeN3dBankSecureComponents            OfferTemplateVersionType = "3d Bank secure components"
	OfferTemplateVersionTypeNewscycleOffer                     OfferTemplateVersionType = "Newscycle offer"
	OfferTemplateVersionTypeNewsletterSignup                   OfferTemplateVersionType = "Newsletter signup"
	OfferTemplateVersionTypePaymentComponents                  OfferTemplateVersionType = "Payment Components"
	OfferTemplateVersionTypePianoID2FADigitalCode              OfferTemplateVersionType = "Piano ID 2FA Digital code"
	OfferTemplateVersionTypePianoIDAliasLogin                  OfferTemplateVersionType = "Piano ID Alias login"
	OfferTemplateVersionTypePianoIDCustomForm                  OfferTemplateVersionType = "Piano ID custom form"
	OfferTemplateVersionTypePianoIDDigitalCode                 OfferTemplateVersionType = "Piano ID Digital code"
	OfferTemplateVersionTypePianoIDEmailConfirmationRequired   OfferTemplateVersionType = "Piano ID email confirmation required"
	OfferTemplateVersionTypePianoIDEmailConfirmationView       OfferTemplateVersionType = "Piano ID email confirmation view"
	OfferTemplateVersionTypePianoIDEmailIsNotConfirmed         OfferTemplateVersionType = "Piano ID email is not confirmed"
	OfferTemplateVersionTypePianoIDGenericErrorPage            OfferTemplateVersionType = "Piano ID generic error page"
	OfferTemplateVersionTypePianoIDInitiatePasswordReset       OfferTemplateVersionType = "Piano ID initiate password reset"
	OfferTemplateVersionTypePianoIDLayout                      OfferTemplateVersionType = "Piano ID layout"
	OfferTemplateVersionTypePianoIDLayoutGMSSO                 OfferTemplateVersionType = "Piano ID layout GM SSO"
	OfferTemplateVersionTypePianoIDLoginConfirmPage            OfferTemplateVersionType = "Piano ID login confirm page"
	OfferTemplateVersionTypePianoIDLoginPage                   OfferTemplateVersionType = "Piano ID login page"
	OfferTemplateVersionTypePianoIDNewPasswordPage             OfferTemplateVersionType = "Piano ID new password page"
	OfferTemplateVersionTypePianoIDNewsletters                 OfferTemplateVersionType = "Piano ID newsletters"
	OfferTemplateVersionTypePianoIDPasswordlessLoginPage       OfferTemplateVersionType = "Piano ID passwordless login page"
	OfferTemplateVersionTypePianoIDPhoneNumberIsNotConfirmed   OfferTemplateVersionType = "Piano ID Phone number is not confirmed"
	OfferTemplateVersionTypePianoIDPhoneNumberUpdate           OfferTemplateVersionType = "Piano ID Phone number Update"
	OfferTemplateVersionTypePianoIDProfileInMyAccount          OfferTemplateVersionType = "Piano ID profile in My Account"
	OfferTemplateVersionTypePianoIDRegisterConfirmPage         OfferTemplateVersionType = "Piano ID register confirm page"
	OfferTemplateVersionTypePianoIDRegisterPage                OfferTemplateVersionType = "Piano ID register page"
	OfferTemplateVersionTypePianoIDSSOConfirmBefore            OfferTemplateVersionType = "Piano ID SSO confirm before"
	OfferTemplateVersionTypePianoIDSSOConfirmPage              OfferTemplateVersionType = "Piano ID SSO confirm page"
	OfferTemplateVersionTypePrintAddressCollectScreen          OfferTemplateVersionType = "Print address collect screen"
	OfferTemplateVersionTypePromotionComponents                OfferTemplateVersionType = "Promotion Components"
	OfferTemplateVersionTypeProviderComponents                 OfferTemplateVersionType = "Provider Components"
	OfferTemplateVersionTypePushSignup                         OfferTemplateVersionType = "Push signup"
	OfferTemplateVersionTypeReactivateSubscriptionComponents   OfferTemplateVersionType = "Reactivate subscription components"
	OfferTemplateVersionTypeReceipt                            OfferTemplateVersionType = "Receipt"
	OfferTemplateVersionTypeRedemptionComponents               OfferTemplateVersionType = "Redemption Components"
	OfferTemplateVersionTypeSharedSubscriptionComponents       OfferTemplateVersionType = "Shared subscription components"
	OfferTemplateVersionTypeSiteLicensingContractList          OfferTemplateVersionType = "Site Licensing Contract List"
	OfferTemplateVersionTypeSiteLicensingLandingPage           OfferTemplateVersionType = "Site Licensing Landing Page"
	OfferTemplateVersionTypeSiteLicensingRedeemResult          OfferTemplateVersionType = "Site Licensing Redeem Result"
	OfferTemplateVersionTypeTemplate                           OfferTemplateVersionType = "Template"
	OfferTemplateVersionTypeTermComponents                     OfferTemplateVersionType = "Term Components"
	OfferTemplateVersionTypeUpgradeAuthenticationComponents    OfferTemplateVersionType = "Upgrade authentication components"
	OfferTemplateVersionTypeUpgradeComponents                  OfferTemplateVersionType = "Upgrade components"
	OfferTemplateVersionTypeUpgradeOffer                       OfferTemplateVersionType = "Upgrade offer"
	OfferTemplateVersionTypeZuoraOffer                         OfferTemplateVersionType = "Zuora offer"
)

// Defines values for OfferTemplateVersionTypeId.
const (
	OfferTemplateVersionTypeIdAlreadyHasAccess                 OfferTemplateVersionTypeId = "already_has_access"
	OfferTemplateVersionTypeIdAuth                             OfferTemplateVersionTypeId = "auth"
	OfferTemplateVersionTypeIdBankSecureComponents             OfferTemplateVersionTypeId = "bank_secure_components"
	OfferTemplateVersionTypeIdCheckoutStyle                    OfferTemplateVersionTypeId = "checkout_style"
	OfferTemplateVersionTypeIdComponents                       OfferTemplateVersionTypeId = "components"
	OfferTemplateVersionTypeIdConfirmation                     OfferTemplateVersionTypeId = "confirmation"
	OfferTemplateVersionTypeIdConsentComponents                OfferTemplateVersionTypeId = "consent_components"
	OfferTemplateVersionTypeIdDefaultOffer                     OfferTemplateVersionTypeId = "default_offer"
	OfferTemplateVersionTypeIdError                            OfferTemplateVersionTypeId = "error"
	OfferTemplateVersionTypeIdExternalVerificationComponents   OfferTemplateVersionTypeId = "external_verification_components"
	OfferTemplateVersionTypeIdFinalConfirmation                OfferTemplateVersionTypeId = "final_confirmation"
	OfferTemplateVersionTypeIdFutureStartComponents            OfferTemplateVersionTypeId = "future_start_components"
	OfferTemplateVersionTypeIdGiftComponents                   OfferTemplateVersionTypeId = "gift_components"
	OfferTemplateVersionTypeIdLicensingContractList            OfferTemplateVersionTypeId = "licensing_contract_list"
	OfferTemplateVersionTypeIdLicensingLandingPage             OfferTemplateVersionTypeId = "licensing_landing_page"
	OfferTemplateVersionTypeIdLicensingRedeemResult            OfferTemplateVersionTypeId = "licensing_redeem_result"
	OfferTemplateVersionTypeIdLostValueOffer                   OfferTemplateVersionTypeId = "lost_value_offer"
	OfferTemplateVersionTypeIdMyaccountApp                     OfferTemplateVersionTypeId = "myaccount_app"
	OfferTemplateVersionTypeIdMyaccountCashPayments            OfferTemplateVersionTypeId = "myaccount_cash_payments"
	OfferTemplateVersionTypeIdMyaccountCommon                  OfferTemplateVersionTypeId = "myaccount_common"
	OfferTemplateVersionTypeIdMyaccountError                   OfferTemplateVersionTypeId = "myaccount_error"
	OfferTemplateVersionTypeIdMyaccountHelp                    OfferTemplateVersionTypeId = "myaccount_help"
	OfferTemplateVersionTypeIdMyaccountLibrary                 OfferTemplateVersionTypeId = "myaccount_library"
	OfferTemplateVersionTypeIdMyaccountLicensing               OfferTemplateVersionTypeId = "myaccount_licensing"
	OfferTemplateVersionTypeIdMyaccountPayments                OfferTemplateVersionTypeId = "myaccount_payments"
	OfferTemplateVersionTypeIdMyaccountStyle                   OfferTemplateVersionTypeId = "myaccount_style"
	OfferTemplateVersionTypeIdMyaccountTransactions            OfferTemplateVersionTypeId = "myaccount_transactions"
	OfferTemplateVersionTypeIdMyaccountUserProfile             OfferTemplateVersionTypeId = "myaccount_user_profile"
	OfferTemplateVersionTypeIdMyaccountVoucher                 OfferTemplateVersionTypeId = "myaccount_voucher"
	OfferTemplateVersionTypeIdMyaccountWallet                  OfferTemplateVersionTypeId = "myaccount_wallet"
	OfferTemplateVersionTypeIdNewscycleOffer                   OfferTemplateVersionTypeId = "newscycle_offer"
	OfferTemplateVersionTypeIdNewsletterSignup                 OfferTemplateVersionTypeId = "newsletter_signup"
	OfferTemplateVersionTypeIdPaymentComponents                OfferTemplateVersionTypeId = "payment_components"
	OfferTemplateVersionTypeIdPianoId2faEmailDigitalCode       OfferTemplateVersionTypeId = "piano_id_2fa_email_digital_code"
	OfferTemplateVersionTypeIdPianoIdAliasLogin                OfferTemplateVersionTypeId = "piano_id_alias_login"
	OfferTemplateVersionTypeIdPianoIdCustomForm                OfferTemplateVersionTypeId = "piano_id_custom_form"
	OfferTemplateVersionTypeIdPianoIdCustomFormExp             OfferTemplateVersionTypeId = "piano_id_custom_form_exp"
	OfferTemplateVersionTypeIdPianoIdDigitalCode               OfferTemplateVersionTypeId = "piano_id_digital_code"
	OfferTemplateVersionTypeIdPianoIdEmailConfirmation         OfferTemplateVersionTypeId = "piano_id_email_confirmation"
	OfferTemplateVersionTypeIdPianoIdEmailConfirmationRequired OfferTemplateVersionTypeId = "piano_id_email_confirmation_required"
	OfferTemplateVersionTypeIdPianoIdEmailIsNotConfirmed       OfferTemplateVersionTypeId = "piano_id_email_is_not_confirmed"
	OfferTemplateVersionTypeIdPianoIdErrorPage                 OfferTemplateVersionTypeId = "piano_id_error_page"
	OfferTemplateVersionTypeIdPianoIdInitiatePasswordReset     OfferTemplateVersionTypeId = "piano_id_initiate_password_reset"
	OfferTemplateVersionTypeIdPianoIdLayout                    OfferTemplateVersionTypeId = "piano_id_layout"
	OfferTemplateVersionTypeIdPianoIdLayoutGmSso               OfferTemplateVersionTypeId = "piano_id_layout_gm_sso"
	OfferTemplateVersionTypeIdPianoIdLogin                     OfferTemplateVersionTypeId = "piano_id_login"
	OfferTemplateVersionTypeIdPianoIdLoginConfirm              OfferTemplateVersionTypeId = "piano_id_login_confirm"
	OfferTemplateVersionTypeIdPianoIdMyAccount                 OfferTemplateVersionTypeId = "piano_id_my_account"
	OfferTemplateVersionTypeIdPianoIdNewPassword               OfferTemplateVersionTypeId = "piano_id_new_password"
	OfferTemplateVersionTypeIdPianoIdNewsletters               OfferTemplateVersionTypeId = "piano_id_newsletters"
	OfferTemplateVersionTypeIdPianoIdPasswordlessConfirmation  OfferTemplateVersionTypeId = "piano_id_passwordless_confirmation"
	OfferTemplateVersionTypeIdPianoIdPhoneIsNotConfirmed       OfferTemplateVersionTypeId = "piano_id_phone_is_not_confirmed"
	OfferTemplateVersionTypeIdPianoIdPhoneUpdate               OfferTemplateVersionTypeId = "piano_id_phone_update"
	OfferTemplateVersionTypeIdPianoIdProfile                   OfferTemplateVersionTypeId = "piano_id_profile"
	OfferTemplateVersionTypeIdPianoIdRegister                  OfferTemplateVersionTypeId = "piano_id_register"
	OfferTemplateVersionTypeIdPianoIdRegisterConfirm           OfferTemplateVersionTypeId = "piano_id_register_confirm"
	OfferTemplateVersionTypeIdPianoIdRegistrationExp           OfferTemplateVersionTypeId = "piano_id_registration_exp"
	OfferTemplateVersionTypeIdPianoIdSsoConfirm                OfferTemplateVersionTypeId = "piano_id_sso_confirm"
	OfferTemplateVersionTypeIdPianoIdSsoConfirmBefore          OfferTemplateVersionTypeId = "piano_id_sso_confirm_before"
	OfferTemplateVersionTypeIdPrintAddressComponents           OfferTemplateVersionTypeId = "print_address_components"
	OfferTemplateVersionTypeIdPromoComponents                  OfferTemplateVersionTypeId = "promo_components"
	OfferTemplateVersionTypeIdProviderComponents               OfferTemplateVersionTypeId = "provider_components"
	OfferTemplateVersionTypeIdPushSignup                       OfferTemplateVersionTypeId = "push_signup"
	OfferTemplateVersionTypeIdReactivateSubscription           OfferTemplateVersionTypeId = "reactivate_subscription"
	OfferTemplateVersionTypeIdReceiptTemplate                  OfferTemplateVersionTypeId = "receipt_template"
	OfferTemplateVersionTypeIdRedemptionComponents             OfferTemplateVersionTypeId = "redemption_components"
	OfferTemplateVersionTypeIdSharedSubscriptionComponents     OfferTemplateVersionTypeId = "shared_subscription_components"
	OfferTemplateVersionTypeIdStates                           OfferTemplateVersionTypeId = "states"
	OfferTemplateVersionTypeIdTemplate                         OfferTemplateVersionTypeId = "template"
	OfferTemplateVersionTypeIdTermComponents                   OfferTemplateVersionTypeId = "term_components"
	OfferTemplateVersionTypeIdUpgradeAuthenticationComponents  OfferTemplateVersionTypeId = "upgrade_authentication_components"
	OfferTemplateVersionTypeIdUpgradeComponents                OfferTemplateVersionTypeId = "upgrade_components"
	OfferTemplateVersionTypeIdUpgradeOffer                     OfferTemplateVersionTypeId = "upgrade_offer"
	OfferTemplateVersionTypeIdZuoraOffer                       OfferTemplateVersionTypeId = "zuora_offer"
)

// Defines values for PaymentInquiryState.
const (
	PaymentInquiryStateN0 PaymentInquiryState = 0
	PaymentInquiryStateN1 PaymentInquiryState = 1
	PaymentInquiryStateN2 PaymentInquiryState = 2
	PaymentInquiryStateN3 PaymentInquiryState = 3
)

// Defines values for PostPublisherConversionCustomCreateErrorCode.
const (
	PostPublisherConversionCustomCreateErrorCodeN1001 PostPublisherConversionCustomCreateErrorCode = 1001
	PostPublisherConversionCustomCreateErrorCodeN1002 PostPublisherConversionCustomCreateErrorCode = 1002
	PostPublisherConversionCustomCreateErrorCodeN1003 PostPublisherConversionCustomCreateErrorCode = 1003
	PostPublisherConversionCustomCreateErrorCodeN2    PostPublisherConversionCustomCreateErrorCode = 2
	PostPublisherConversionCustomCreateErrorCodeN401  PostPublisherConversionCustomCreateErrorCode = 401
)

// Defines values for PostPublisherConversionCustomCreateRequestUserState.
const (
	PostPublisherConversionCustomCreateRequestUserStateAnon            PostPublisherConversionCustomCreateRequestUserState = "anon"
	PostPublisherConversionCustomCreateRequestUserStateHasactiveaccess PostPublisherConversionCustomCreateRequestUserState = "hasactiveaccess"
	PostPublisherConversionCustomCreateRequestUserStateNa              PostPublisherConversionCustomCreateRequestUserState = "na"
	PostPublisherConversionCustomCreateRequestUserStateRegistered      PostPublisherConversionCustomCreateRequestUserState = "registered"
)

// Defines values for PostPublisherConversionExternalCreateErrorCode.
const (
	PostPublisherConversionExternalCreateErrorCodeN10001 PostPublisherConversionExternalCreateErrorCode = 10001
	PostPublisherConversionExternalCreateErrorCodeN1001  PostPublisherConversionExternalCreateErrorCode = 1001
	PostPublisherConversionExternalCreateErrorCodeN1002  PostPublisherConversionExternalCreateErrorCode = 1002
	PostPublisherConversionExternalCreateErrorCodeN1003  PostPublisherConversionExternalCreateErrorCode = 1003
	PostPublisherConversionExternalCreateErrorCodeN2     PostPublisherConversionExternalCreateErrorCode = 2
	PostPublisherConversionExternalCreateErrorCodeN401   PostPublisherConversionExternalCreateErrorCode = 401
)

// Defines values for PostPublisherConversionExternalCreateRequestUserState.
const (
	PostPublisherConversionExternalCreateRequestUserStateAnon            PostPublisherConversionExternalCreateRequestUserState = "anon"
	PostPublisherConversionExternalCreateRequestUserStateHasactiveaccess PostPublisherConversionExternalCreateRequestUserState = "hasactiveaccess"
	PostPublisherConversionExternalCreateRequestUserStateNa              PostPublisherConversionExternalCreateRequestUserState = "na"
	PostPublisherConversionExternalCreateRequestUserStateRegistered      PostPublisherConversionExternalCreateRequestUserState = "registered"
)

// Defines values for PostPublisherConversionLogRequestConversionCategory.
const (
	PostPublisherConversionLogRequestConversionCategoryAdblockDisabled      PostPublisherConversionLogRequestConversionCategory = "adblock_disabled"
	PostPublisherConversionLogRequestConversionCategoryAdview               PostPublisherConversionLogRequestConversionCategory = "adview"
	PostPublisherConversionLogRequestConversionCategoryCustom               PostPublisherConversionLogRequestConversionCategory = "custom"
	PostPublisherConversionLogRequestConversionCategoryExternal             PostPublisherConversionLogRequestConversionCategory = "external"
	PostPublisherConversionLogRequestConversionCategoryFreePromoRedemption  PostPublisherConversionLogRequestConversionCategory = "free_promo_redemption"
	PostPublisherConversionLogRequestConversionCategoryGiftPurchased        PostPublisherConversionLogRequestConversionCategory = "gift_purchased"
	PostPublisherConversionLogRequestConversionCategoryGiftReceived         PostPublisherConversionLogRequestConversionCategory = "gift_received"
	PostPublisherConversionLogRequestConversionCategoryGrantAccess          PostPublisherConversionLogRequestConversionCategory = "grant_access"
	PostPublisherConversionLogRequestConversionCategoryMicroConversionEvent PostPublisherConversionLogRequestConversionCategory = "micro_conversion_event"
	PostPublisherConversionLogRequestConversionCategoryMicroConversionLink  PostPublisherConversionLogRequestConversionCategory = "micro_conversion_link"
	PostPublisherConversionLogRequestConversionCategoryNewsletter           PostPublisherConversionLogRequestConversionCategory = "newsletter"
	PostPublisherConversionLogRequestConversionCategoryPayment              PostPublisherConversionLogRequestConversionCategory = "payment"
	PostPublisherConversionLogRequestConversionCategoryRegistration         PostPublisherConversionLogRequestConversionCategory = "registration"
	PostPublisherConversionLogRequestConversionCategorySubscription         PostPublisherConversionLogRequestConversionCategory = "subscription"
	PostPublisherConversionLogRequestConversionCategoryUncategorized        PostPublisherConversionLogRequestConversionCategory = "uncategorized"
)

// Defines values for PostPublisherConversionLogRequestUserState.
const (
	PostPublisherConversionLogRequestUserStateAnon            PostPublisherConversionLogRequestUserState = "anon"
	PostPublisherConversionLogRequestUserStateHasactiveaccess PostPublisherConversionLogRequestUserState = "hasactiveaccess"
	PostPublisherConversionLogRequestUserStateNa              PostPublisherConversionLogRequestUserState = "na"
	PostPublisherConversionLogRequestUserStateRegistered      PostPublisherConversionLogRequestUserState = "registered"
)

// Defines values for PostPublisherConversionRegistrationCreateErrorCode.
const (
	PostPublisherConversionRegistrationCreateErrorCodeN1002 PostPublisherConversionRegistrationCreateErrorCode = 1002
	PostPublisherConversionRegistrationCreateErrorCodeN1008 PostPublisherConversionRegistrationCreateErrorCode = 1008
	PostPublisherConversionRegistrationCreateErrorCodeN1009 PostPublisherConversionRegistrationCreateErrorCode = 1009
	PostPublisherConversionRegistrationCreateErrorCodeN1010 PostPublisherConversionRegistrationCreateErrorCode = 1010
	PostPublisherConversionRegistrationCreateErrorCodeN2    PostPublisherConversionRegistrationCreateErrorCode = 2
	PostPublisherConversionRegistrationCreateErrorCodeN404  PostPublisherConversionRegistrationCreateErrorCode = 404
)

// Defines values for PostPublisherExportCreateAamDailyErrorCode.
const (
	PostPublisherExportCreateAamDailyErrorCodeN11004 PostPublisherExportCreateAamDailyErrorCode = 11004
	PostPublisherExportCreateAamDailyErrorCodeN2     PostPublisherExportCreateAamDailyErrorCode = 2
	PostPublisherExportCreateAamDailyErrorCodeN302   PostPublisherExportCreateAamDailyErrorCode = 302
)

// Defines values for PostPublisherExportCreateAamMonthlyErrorCode.
const (
	PostPublisherExportCreateAamMonthlyErrorCodeN11004 PostPublisherExportCreateAamMonthlyErrorCode = 11004
	PostPublisherExportCreateAamMonthlyErrorCodeN2     PostPublisherExportCreateAamMonthlyErrorCode = 2
	PostPublisherExportCreateAamMonthlyErrorCodeN302   PostPublisherExportCreateAamMonthlyErrorCode = 302
)

// Defines values for PostPublisherExportCreateAamMonthlyV2ErrorCode.
const (
	PostPublisherExportCreateAamMonthlyV2ErrorCodeN11004 PostPublisherExportCreateAamMonthlyV2ErrorCode = 11004
	PostPublisherExportCreateAamMonthlyV2ErrorCodeN11006 PostPublisherExportCreateAamMonthlyV2ErrorCode = 11006
	PostPublisherExportCreateAamMonthlyV2ErrorCodeN2     PostPublisherExportCreateAamMonthlyV2ErrorCode = 2
	PostPublisherExportCreateAamMonthlyV2ErrorCodeN302   PostPublisherExportCreateAamMonthlyV2ErrorCode = 302
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportErrorCode.
const (
	PostPublisherExportCreateSubscriptionDetailsReportErrorCodeN2 PostPublisherExportCreateSubscriptionDetailsReportErrorCode = 2
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatusesActive         PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses = "active"
	PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatusesFailedAndRetry PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses = "failedAndRetry"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatusesCancelled      PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses = "cancelled"
	PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatusesCompleted      PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses = "completed"
	PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatusesExpired        PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses = "expired"
	PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatusesPaymentFailure PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses = "paymentFailure"
	PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatusesUpgraded       PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses = "upgraded"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes.
const (
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesAdview                         PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "adview"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesCustom                         PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "custom"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesDynamic                        PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "dynamic"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesEmailDomainContract            PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "email_domain_contract"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesExternal                       PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "external"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesGift                           PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "gift"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesGrantAccess                    PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "grant_access"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesIpRangeContract                PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "ip_range_contract"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesLinked                         PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "linked"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesNewsletter                     PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "newsletter"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesPayment                        PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "payment"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesRegistration                   PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "registration"
	PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypesSpecificEmailAddressesContract PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes = "specific_email_addresses_contract"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatusesRenewed PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatuses = "renewed"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCode.
const (
	PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCodeN2 PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCode = 2
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatusesActive         PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses = "active"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatusesFailedAndRetry PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses = "failedAndRetry"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatusesCancelled      PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses = "cancelled"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatusesCompleted      PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses = "completed"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatusesExpired        PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses = "expired"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatusesPaymentFailure PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses = "paymentFailure"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatusesUpgraded       PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses = "upgraded"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes.
const (
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesAdview                         PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "adview"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesCustom                         PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "custom"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesDynamic                        PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "dynamic"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesEmailDomainContract            PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "email_domain_contract"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesExternal                       PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "external"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesGift                           PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "gift"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesGrantAccess                    PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "grant_access"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesIpRangeContract                PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "ip_range_contract"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesLinked                         PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "linked"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesNewsletter                     PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "newsletter"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesPayment                        PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "payment"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesRegistration                   PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "registration"
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypesSpecificEmailAddressesContract PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes = "specific_email_addresses_contract"
)

// Defines values for PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatuses.
const (
	PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatusesRenewed PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatuses = "renewed"
)

// Defines values for PostPublisherExportCreateSubscriptionSummaryReportErrorCode.
const (
	PostPublisherExportCreateSubscriptionSummaryReportErrorCodeN2 PostPublisherExportCreateSubscriptionSummaryReportErrorCode = 2
)

// Defines values for PostPublisherExportCreateTransactionsReportErrorCode.
const (
	PostPublisherExportCreateTransactionsReportErrorCodeN2 PostPublisherExportCreateTransactionsReportErrorCode = 2
)

// Defines values for PostPublisherExportCreateTransactionsReportRequestOrderBy.
const (
	PostPublisherExportCreateTransactionsReportRequestOrderByPaymentDate PostPublisherExportCreateTransactionsReportRequestOrderBy = "payment_date"
)

// Defines values for PostPublisherExportCreateTransactionsReportRequestOrderDirection.
const (
	PostPublisherExportCreateTransactionsReportRequestOrderDirectionAsc  PostPublisherExportCreateTransactionsReportRequestOrderDirection = "asc"
	PostPublisherExportCreateTransactionsReportRequestOrderDirectionDesc PostPublisherExportCreateTransactionsReportRequestOrderDirection = "desc"
)

// Defines values for PostPublisherExportCreateTransactionsReportRequestTransactionsType.
const (
	PostPublisherExportCreateTransactionsReportRequestTransactionsTypeAll       PostPublisherExportCreateTransactionsReportRequestTransactionsType = "all"
	PostPublisherExportCreateTransactionsReportRequestTransactionsTypePurchases PostPublisherExportCreateTransactionsReportRequestTransactionsType = "purchases"
	PostPublisherExportCreateTransactionsReportRequestTransactionsTypeRefunds   PostPublisherExportCreateTransactionsReportRequestTransactionsType = "refunds"
)

// Defines values for PostPublisherExportCreateTransactionsReportV2ErrorCode.
const (
	PostPublisherExportCreateTransactionsReportV2ErrorCodeN2 PostPublisherExportCreateTransactionsReportV2ErrorCode = 2
)

// Defines values for PostPublisherExportCreateTransactionsReportV2RequestOrderBy.
const (
	PostPublisherExportCreateTransactionsReportV2RequestOrderByPaymentDate PostPublisherExportCreateTransactionsReportV2RequestOrderBy = "payment_date"
)

// Defines values for PostPublisherExportCreateTransactionsReportV2RequestOrderDirection.
const (
	PostPublisherExportCreateTransactionsReportV2RequestOrderDirectionAsc  PostPublisherExportCreateTransactionsReportV2RequestOrderDirection = "asc"
	PostPublisherExportCreateTransactionsReportV2RequestOrderDirectionDesc PostPublisherExportCreateTransactionsReportV2RequestOrderDirection = "desc"
)

// Defines values for PostPublisherExportCreateTransactionsReportV2RequestTransactionsType.
const (
	PostPublisherExportCreateTransactionsReportV2RequestTransactionsTypeAll       PostPublisherExportCreateTransactionsReportV2RequestTransactionsType = "all"
	PostPublisherExportCreateTransactionsReportV2RequestTransactionsTypePurchases PostPublisherExportCreateTransactionsReportV2RequestTransactionsType = "purchases"
	PostPublisherExportCreateTransactionsReportV2RequestTransactionsTypeRefunds   PostPublisherExportCreateTransactionsReportV2RequestTransactionsType = "refunds"
)

// Defines values for PostPublisherExportCreateUserExportErrorCode.
const (
	PostPublisherExportCreateUserExportErrorCodeN2 PostPublisherExportCreateUserExportErrorCode = 2
)

// Defines values for PostPublisherExportCreateUserExportRequestConvertedTermSharingType.
const (
	PostPublisherExportCreateUserExportRequestConvertedTermSharingTypeAll      PostPublisherExportCreateUserExportRequestConvertedTermSharingType = "all"
	PostPublisherExportCreateUserExportRequestConvertedTermSharingTypeChildren PostPublisherExportCreateUserExportRequestConvertedTermSharingType = "children"
	PostPublisherExportCreateUserExportRequestConvertedTermSharingTypeParents  PostPublisherExportCreateUserExportRequestConvertedTermSharingType = "parents"
)

// Defines values for PostPublisherExportCreateUserExportRequestConvertedTermTypes.
const (
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN10EmailDomainContract           PostPublisherExportCreateUserExportRequestConvertedTermTypes = "10: Email Domain Contract"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN11IPRangeContract               PostPublisherExportCreateUserExportRequestConvertedTermTypes = "11: IP Range Contract"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN12Dynamic                       PostPublisherExportCreateUserExportRequestConvertedTermTypes = "12: Dynamic"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN13Linked                        PostPublisherExportCreateUserExportRequestConvertedTermTypes = "13: Linked"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN1Payment                        PostPublisherExportCreateUserExportRequestConvertedTermTypes = "1: Payment"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN2AdView                         PostPublisherExportCreateUserExportRequestConvertedTermTypes = "2: Ad View"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN3Registration                   PostPublisherExportCreateUserExportRequestConvertedTermTypes = "3: Registration"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN4Newsletter                     PostPublisherExportCreateUserExportRequestConvertedTermTypes = "4: Newsletter"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN5External                       PostPublisherExportCreateUserExportRequestConvertedTermTypes = "5: External"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN6Custom                         PostPublisherExportCreateUserExportRequestConvertedTermTypes = "6: Custom"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN7AccessGranted                  PostPublisherExportCreateUserExportRequestConvertedTermTypes = "7: Access Granted"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN8Gift                           PostPublisherExportCreateUserExportRequestConvertedTermTypes = "8: Gift"
	PostPublisherExportCreateUserExportRequestConvertedTermTypesN9SpecificEmailAddressesContract PostPublisherExportCreateUserExportRequestConvertedTermTypes = "9: Specific Email Addresses Contract"
)

// Defines values for PostPublisherExportCreateUserExportRequestEmailConfirmationState.
const (
	PostPublisherExportCreateUserExportRequestEmailConfirmationStateConfirmed    PostPublisherExportCreateUserExportRequestEmailConfirmationState = "confirmed"
	PostPublisherExportCreateUserExportRequestEmailConfirmationStatePreConfirmed PostPublisherExportCreateUserExportRequestEmailConfirmationState = "pre_confirmed"
	PostPublisherExportCreateUserExportRequestEmailConfirmationStateUnconfirmed  PostPublisherExportCreateUserExportRequestEmailConfirmationState = "unconfirmed"
)

// Defines values for PostPublisherExportCreateUserExportRequestOrderBy.
const (
	PostPublisherExportCreateUserExportRequestOrderByAccessCount          PostPublisherExportCreateUserExportRequestOrderBy = "accessCount"
	PostPublisherExportCreateUserExportRequestOrderByHasIssue             PostPublisherExportCreateUserExportRequestOrderBy = "hasIssue"
	PostPublisherExportCreateUserExportRequestOrderByHasTrial             PostPublisherExportCreateUserExportRequestOrderBy = "hasTrial"
	PostPublisherExportCreateUserExportRequestOrderByHasUnresolvedInquiry PostPublisherExportCreateUserExportRequestOrderBy = "hasUnresolvedInquiry"
	PostPublisherExportCreateUserExportRequestOrderByName                 PostPublisherExportCreateUserExportRequestOrderBy = "name"
	PostPublisherExportCreateUserExportRequestOrderByNextBill             PostPublisherExportCreateUserExportRequestOrderBy = "nextBill"
	PostPublisherExportCreateUserExportRequestOrderBySince                PostPublisherExportCreateUserExportRequestOrderBy = "since"
	PostPublisherExportCreateUserExportRequestOrderBySpentMoney           PostPublisherExportCreateUserExportRequestOrderBy = "spentMoney"
)

// Defines values for PostPublisherExportCreateUserExportRequestOrderDirection.
const (
	PostPublisherExportCreateUserExportRequestOrderDirectionAsc  PostPublisherExportCreateUserExportRequestOrderDirection = "asc"
	PostPublisherExportCreateUserExportRequestOrderDirectionDesc PostPublisherExportCreateUserExportRequestOrderDirection = "desc"
)

// Defines values for PostPublisherExportCreateUserExportRequestSource.
const (
	PostPublisherExportCreateUserExportRequestSourceCF PostPublisherExportCreateUserExportRequestSource = "CF"
	PostPublisherExportCreateUserExportRequestSourceVX PostPublisherExportCreateUserExportRequestSource = "VX"
)

// Defines values for PostPublisherExternalProviderPaymentUpdateErrorCode.
const (
	PostPublisherExternalProviderPaymentUpdateErrorCodeN2   PostPublisherExternalProviderPaymentUpdateErrorCode = 2
	PostPublisherExternalProviderPaymentUpdateErrorCodeN404 PostPublisherExternalProviderPaymentUpdateErrorCode = 404
	PostPublisherExternalProviderPaymentUpdateErrorCodeN602 PostPublisherExternalProviderPaymentUpdateErrorCode = 602
)

// Defines values for PostPublisherGdprDeleteRequestScope.
const (
	PostPublisherGdprDeleteRequestScopeALL PostPublisherGdprDeleteRequestScope = "ALL"
	PostPublisherGdprDeleteRequestScopePII PostPublisherGdprDeleteRequestScope = "PII"
)

// Defines values for PostPublisherGdprExportErrorCode.
const (
	PostPublisherGdprExportErrorCodeN2    PostPublisherGdprExportErrorCode = 2
	PostPublisherGdprExportErrorCodeN2004 PostPublisherGdprExportErrorCode = 2004
	PostPublisherGdprExportErrorCodeN400  PostPublisherGdprExportErrorCode = 400
	PostPublisherGdprExportErrorCodeN401  PostPublisherGdprExportErrorCode = 401
)

// Defines values for PostPublisherGdprExportRequestScope.
const (
	PostPublisherGdprExportRequestScopeALL PostPublisherGdprExportRequestScope = "ALL"
	PostPublisherGdprExportRequestScopePII PostPublisherGdprExportRequestScope = "PII"
)

// Defines values for PostPublisherLicensingContractActivateErrorCode.
const (
	PostPublisherLicensingContractActivateErrorCodeN2     PostPublisherLicensingContractActivateErrorCode = 2
	PostPublisherLicensingContractActivateErrorCodeN61002 PostPublisherLicensingContractActivateErrorCode = 61002
	PostPublisherLicensingContractActivateErrorCodeN61008 PostPublisherLicensingContractActivateErrorCode = 61008
)

// Defines values for PostPublisherLicensingContractCreateErrorCode.
const (
	PostPublisherLicensingContractCreateErrorCodeN2     PostPublisherLicensingContractCreateErrorCode = 2
	PostPublisherLicensingContractCreateErrorCodeN61000 PostPublisherLicensingContractCreateErrorCode = 61000
	PostPublisherLicensingContractCreateErrorCodeN61005 PostPublisherLicensingContractCreateErrorCode = 61005
	PostPublisherLicensingContractCreateErrorCodeN61009 PostPublisherLicensingContractCreateErrorCode = 61009
	PostPublisherLicensingContractCreateErrorCodeN805   PostPublisherLicensingContractCreateErrorCode = 805
)

// Defines values for PostPublisherLicensingContractCreateRequestContractType.
const (
	PostPublisherLicensingContractCreateRequestContractTypeEMAILDOMAINCONTRACT            PostPublisherLicensingContractCreateRequestContractType = "EMAIL_DOMAIN_CONTRACT"
	PostPublisherLicensingContractCreateRequestContractTypeIPRANGECONTRACT                PostPublisherLicensingContractCreateRequestContractType = "IP_RANGE_CONTRACT"
	PostPublisherLicensingContractCreateRequestContractTypeSPECIFICEMAILADDRESSESCONTRACT PostPublisherLicensingContractCreateRequestContractType = "SPECIFIC_EMAIL_ADDRESSES_CONTRACT"
)

// Defines values for PostPublisherLicensingContractDeactivateErrorCode.
const (
	PostPublisherLicensingContractDeactivateErrorCodeN2     PostPublisherLicensingContractDeactivateErrorCode = 2
	PostPublisherLicensingContractDeactivateErrorCodeN61002 PostPublisherLicensingContractDeactivateErrorCode = 61002
)

// Defines values for PostPublisherLicensingContractDomainCreateErrorCode.
const (
	PostPublisherLicensingContractDomainCreateErrorCodeN2     PostPublisherLicensingContractDomainCreateErrorCode = 2
	PostPublisherLicensingContractDomainCreateErrorCodeN61002 PostPublisherLicensingContractDomainCreateErrorCode = 61002
	PostPublisherLicensingContractDomainCreateErrorCodeN61027 PostPublisherLicensingContractDomainCreateErrorCode = 61027
	PostPublisherLicensingContractDomainCreateErrorCodeN61031 PostPublisherLicensingContractDomainCreateErrorCode = 61031
)

// Defines values for PostPublisherLicensingContractDomainUpdateErrorCode.
const (
	PostPublisherLicensingContractDomainUpdateErrorCodeN2     PostPublisherLicensingContractDomainUpdateErrorCode = 2
	PostPublisherLicensingContractDomainUpdateErrorCodeN61002 PostPublisherLicensingContractDomainUpdateErrorCode = 61002
	PostPublisherLicensingContractDomainUpdateErrorCodeN61027 PostPublisherLicensingContractDomainUpdateErrorCode = 61027
	PostPublisherLicensingContractDomainUpdateErrorCodeN61028 PostPublisherLicensingContractDomainUpdateErrorCode = 61028
	PostPublisherLicensingContractDomainUpdateErrorCodeN61029 PostPublisherLicensingContractDomainUpdateErrorCode = 61029
	PostPublisherLicensingContractDomainUpdateErrorCodeN61031 PostPublisherLicensingContractDomainUpdateErrorCode = 61031
)

// Defines values for PostPublisherLicensingContractIpRangeCreateErrorCode.
const (
	PostPublisherLicensingContractIpRangeCreateErrorCodeN2     PostPublisherLicensingContractIpRangeCreateErrorCode = 2
	PostPublisherLicensingContractIpRangeCreateErrorCodeN61002 PostPublisherLicensingContractIpRangeCreateErrorCode = 61002
	PostPublisherLicensingContractIpRangeCreateErrorCodeN61031 PostPublisherLicensingContractIpRangeCreateErrorCode = 61031
	PostPublisherLicensingContractIpRangeCreateErrorCodeN61036 PostPublisherLicensingContractIpRangeCreateErrorCode = 61036
)

// Defines values for PostPublisherLicensingContractIpRangeUpdateErrorCode.
const (
	PostPublisherLicensingContractIpRangeUpdateErrorCodeN2     PostPublisherLicensingContractIpRangeUpdateErrorCode = 2
	PostPublisherLicensingContractIpRangeUpdateErrorCodeN61002 PostPublisherLicensingContractIpRangeUpdateErrorCode = 61002
	PostPublisherLicensingContractIpRangeUpdateErrorCodeN61031 PostPublisherLicensingContractIpRangeUpdateErrorCode = 61031
	PostPublisherLicensingContractIpRangeUpdateErrorCodeN61035 PostPublisherLicensingContractIpRangeUpdateErrorCode = 61035
	PostPublisherLicensingContractIpRangeUpdateErrorCodeN61036 PostPublisherLicensingContractIpRangeUpdateErrorCode = 61036
)

// Defines values for PostPublisherLicensingContractPeriodsActivateErrorCode.
const (
	PostPublisherLicensingContractPeriodsActivateErrorCodeN2     PostPublisherLicensingContractPeriodsActivateErrorCode = 2
	PostPublisherLicensingContractPeriodsActivateErrorCodeN61002 PostPublisherLicensingContractPeriodsActivateErrorCode = 61002
)

// Defines values for PostPublisherLicensingContractRedeemErrorCode.
const (
	PostPublisherLicensingContractRedeemErrorCodeN2 PostPublisherLicensingContractRedeemErrorCode = 2
)

// Defines values for PostPublisherLicensingContractUpdateErrorCode.
const (
	PostPublisherLicensingContractUpdateErrorCodeN2     PostPublisherLicensingContractUpdateErrorCode = 2
	PostPublisherLicensingContractUpdateErrorCodeN61000 PostPublisherLicensingContractUpdateErrorCode = 61000
	PostPublisherLicensingContractUpdateErrorCodeN61002 PostPublisherLicensingContractUpdateErrorCode = 61002
	PostPublisherLicensingContractUpdateErrorCodeN61009 PostPublisherLicensingContractUpdateErrorCode = 61009
	PostPublisherLicensingContractUpdateErrorCodeN61011 PostPublisherLicensingContractUpdateErrorCode = 61011
	PostPublisherLicensingContractUpdateErrorCodeN805   PostPublisherLicensingContractUpdateErrorCode = 805
)

// Defines values for PostPublisherLicensingContractUpdateRequestContractType.
const (
	EMAILDOMAINCONTRACT            PostPublisherLicensingContractUpdateRequestContractType = "EMAIL_DOMAIN_CONTRACT"
	IPRANGECONTRACT                PostPublisherLicensingContractUpdateRequestContractType = "IP_RANGE_CONTRACT"
	SPECIFICEMAILADDRESSESCONTRACT PostPublisherLicensingContractUpdateRequestContractType = "SPECIFIC_EMAIL_ADDRESSES_CONTRACT"
)

// Defines values for PostPublisherLicensingContractUserCreateErrorCode.
const (
	PostPublisherLicensingContractUserCreateErrorCodeN2     PostPublisherLicensingContractUserCreateErrorCode = 2
	PostPublisherLicensingContractUserCreateErrorCodeN61002 PostPublisherLicensingContractUserCreateErrorCode = 61002
	PostPublisherLicensingContractUserCreateErrorCodeN61014 PostPublisherLicensingContractUserCreateErrorCode = 61014
	PostPublisherLicensingContractUserCreateErrorCodeN61031 PostPublisherLicensingContractUserCreateErrorCode = 61031
)

// Defines values for PostPublisherLicensingContractUserUpdateErrorCode.
const (
	PostPublisherLicensingContractUserUpdateErrorCodeN2     PostPublisherLicensingContractUserUpdateErrorCode = 2
	PostPublisherLicensingContractUserUpdateErrorCodeN61002 PostPublisherLicensingContractUserUpdateErrorCode = 61002
	PostPublisherLicensingContractUserUpdateErrorCodeN61014 PostPublisherLicensingContractUserUpdateErrorCode = 61014
	PostPublisherLicensingContractUserUpdateErrorCodeN61020 PostPublisherLicensingContractUserUpdateErrorCode = 61020
	PostPublisherLicensingContractUserUpdateErrorCodeN61022 PostPublisherLicensingContractUserUpdateErrorCode = 61022
	PostPublisherLicensingContractUserUpdateErrorCodeN61031 PostPublisherLicensingContractUserUpdateErrorCode = 61031
)

// Defines values for PostPublisherLicensingLicenseeCreateErrorCode.
const (
	PostPublisherLicensingLicenseeCreateErrorCodeN2     PostPublisherLicensingLicenseeCreateErrorCode = 2
	PostPublisherLicensingLicenseeCreateErrorCodeN61003 PostPublisherLicensingLicenseeCreateErrorCode = 61003
)

// Defines values for PostPublisherLicensingLicenseeUpdateErrorCode.
const (
	PostPublisherLicensingLicenseeUpdateErrorCodeN2     PostPublisherLicensingLicenseeUpdateErrorCode = 2
	PostPublisherLicensingLicenseeUpdateErrorCodeN61005 PostPublisherLicensingLicenseeUpdateErrorCode = 61005
)

// Defines values for PostPublisherLicensingNotificationRuleCreateErrorCode.
const (
	PostPublisherLicensingNotificationRuleCreateErrorCodeN2     PostPublisherLicensingNotificationRuleCreateErrorCode = 2
	PostPublisherLicensingNotificationRuleCreateErrorCodeN61002 PostPublisherLicensingNotificationRuleCreateErrorCode = 61002
	PostPublisherLicensingNotificationRuleCreateErrorCodeN61005 PostPublisherLicensingNotificationRuleCreateErrorCode = 61005
	PostPublisherLicensingNotificationRuleCreateErrorCodeN61013 PostPublisherLicensingNotificationRuleCreateErrorCode = 61013
)

// Defines values for PostPublisherLicensingNotificationRuleCreateRequestCondition.
const (
	PostPublisherLicensingNotificationRuleCreateRequestConditionDROPSBELOW      PostPublisherLicensingNotificationRuleCreateRequestCondition = "DROPS_BELOW"
	PostPublisherLicensingNotificationRuleCreateRequestConditionEXCEEDS         PostPublisherLicensingNotificationRuleCreateRequestCondition = "EXCEEDS"
	PostPublisherLicensingNotificationRuleCreateRequestConditionEXPIRES         PostPublisherLicensingNotificationRuleCreateRequestCondition = "EXPIRES"
	PostPublisherLicensingNotificationRuleCreateRequestConditionHASEXPIRED      PostPublisherLicensingNotificationRuleCreateRequestCondition = "HAS_EXPIRED"
	PostPublisherLicensingNotificationRuleCreateRequestConditionHASOCCURRED     PostPublisherLicensingNotificationRuleCreateRequestCondition = "HAS_OCCURRED"
	PostPublisherLicensingNotificationRuleCreateRequestConditionOCCURS          PostPublisherLicensingNotificationRuleCreateRequestCondition = "OCCURS"
	PostPublisherLicensingNotificationRuleCreateRequestConditionREACHESCAPACITY PostPublisherLicensingNotificationRuleCreateRequestCondition = "REACHES_CAPACITY"
	PostPublisherLicensingNotificationRuleCreateRequestConditionWILLEXPIREIN    PostPublisherLicensingNotificationRuleCreateRequestCondition = "WILL_EXPIRE_IN"
	PostPublisherLicensingNotificationRuleCreateRequestConditionWILLOCCURIN     PostPublisherLicensingNotificationRuleCreateRequestCondition = "WILL_OCCUR_IN"
)

// Defines values for PostPublisherLicensingNotificationRuleCreateRequestParameter.
const (
	PostPublisherLicensingNotificationRuleCreateRequestParameterDATEOFSALE          PostPublisherLicensingNotificationRuleCreateRequestParameter = "DATE_OF_SALE"
	PostPublisherLicensingNotificationRuleCreateRequestParameterOCCUPIEDSEATSNUMBER PostPublisherLicensingNotificationRuleCreateRequestParameter = "OCCUPIED_SEATS_NUMBER"
	PostPublisherLicensingNotificationRuleCreateRequestParameterPERIODOFACCESS      PostPublisherLicensingNotificationRuleCreateRequestParameter = "PERIOD_OF_ACCESS"
)

// Defines values for PostPublisherLicensingNotificationRuleUpdateErrorCode.
const (
	PostPublisherLicensingNotificationRuleUpdateErrorCodeN2     PostPublisherLicensingNotificationRuleUpdateErrorCode = 2
	PostPublisherLicensingNotificationRuleUpdateErrorCodeN61002 PostPublisherLicensingNotificationRuleUpdateErrorCode = 61002
	PostPublisherLicensingNotificationRuleUpdateErrorCodeN61005 PostPublisherLicensingNotificationRuleUpdateErrorCode = 61005
	PostPublisherLicensingNotificationRuleUpdateErrorCodeN61012 PostPublisherLicensingNotificationRuleUpdateErrorCode = 61012
	PostPublisherLicensingNotificationRuleUpdateErrorCodeN61013 PostPublisherLicensingNotificationRuleUpdateErrorCode = 61013
)

// Defines values for PostPublisherLicensingNotificationRuleUpdateRequestCondition.
const (
	PostPublisherLicensingNotificationRuleUpdateRequestConditionDROPSBELOW      PostPublisherLicensingNotificationRuleUpdateRequestCondition = "DROPS_BELOW"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionEXCEEDS         PostPublisherLicensingNotificationRuleUpdateRequestCondition = "EXCEEDS"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionEXPIRES         PostPublisherLicensingNotificationRuleUpdateRequestCondition = "EXPIRES"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionHASEXPIRED      PostPublisherLicensingNotificationRuleUpdateRequestCondition = "HAS_EXPIRED"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionHASOCCURRED     PostPublisherLicensingNotificationRuleUpdateRequestCondition = "HAS_OCCURRED"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionOCCURS          PostPublisherLicensingNotificationRuleUpdateRequestCondition = "OCCURS"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionREACHESCAPACITY PostPublisherLicensingNotificationRuleUpdateRequestCondition = "REACHES_CAPACITY"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionWILLEXPIREIN    PostPublisherLicensingNotificationRuleUpdateRequestCondition = "WILL_EXPIRE_IN"
	PostPublisherLicensingNotificationRuleUpdateRequestConditionWILLOCCURIN     PostPublisherLicensingNotificationRuleUpdateRequestCondition = "WILL_OCCUR_IN"
)

// Defines values for PostPublisherLicensingNotificationRuleUpdateRequestParameter.
const (
	PostPublisherLicensingNotificationRuleUpdateRequestParameterDATEOFSALE          PostPublisherLicensingNotificationRuleUpdateRequestParameter = "DATE_OF_SALE"
	PostPublisherLicensingNotificationRuleUpdateRequestParameterOCCUPIEDSEATSNUMBER PostPublisherLicensingNotificationRuleUpdateRequestParameter = "OCCUPIED_SEATS_NUMBER"
	PostPublisherLicensingNotificationRuleUpdateRequestParameterPERIODOFACCESS      PostPublisherLicensingNotificationRuleUpdateRequestParameter = "PERIOD_OF_ACCESS"
)

// Defines values for PostPublisherLinkedTermConfigurationErrorCode.
const (
	PostPublisherLinkedTermConfigurationErrorCodeN1000 PostPublisherLinkedTermConfigurationErrorCode = 1000
	PostPublisherLinkedTermConfigurationErrorCodeN1001 PostPublisherLinkedTermConfigurationErrorCode = 1001
	PostPublisherLinkedTermConfigurationErrorCodeN1005 PostPublisherLinkedTermConfigurationErrorCode = 1005
	PostPublisherLinkedTermConfigurationErrorCodeN1106 PostPublisherLinkedTermConfigurationErrorCode = 1106
	PostPublisherLinkedTermConfigurationErrorCodeN1107 PostPublisherLinkedTermConfigurationErrorCode = 1107
	PostPublisherLinkedTermConfigurationErrorCodeN1108 PostPublisherLinkedTermConfigurationErrorCode = 1108
	PostPublisherLinkedTermConfigurationErrorCodeN1109 PostPublisherLinkedTermConfigurationErrorCode = 1109
	PostPublisherLinkedTermConfigurationErrorCodeN1111 PostPublisherLinkedTermConfigurationErrorCode = 1111
	PostPublisherLinkedTermConfigurationErrorCodeN1112 PostPublisherLinkedTermConfigurationErrorCode = 1112
	PostPublisherLinkedTermConfigurationErrorCodeN2    PostPublisherLinkedTermConfigurationErrorCode = 2
	PostPublisherLinkedTermConfigurationErrorCodeN402  PostPublisherLinkedTermConfigurationErrorCode = 402
	PostPublisherLinkedTermConfigurationErrorCodeN403  PostPublisherLinkedTermConfigurationErrorCode = 403
	PostPublisherLinkedTermConfigurationErrorCodeN429  PostPublisherLinkedTermConfigurationErrorCode = 429
)

// Defines values for PostPublisherLinkedTermCustomFieldConfigurationErrorCode.
const (
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN1106 PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 1106
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN1114 PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 1114
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN1156 PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 1156
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN2    PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 2
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN402  PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 402
	PostPublisherLinkedTermCustomFieldConfigurationErrorCodeN434  PostPublisherLinkedTermCustomFieldConfigurationErrorCode = 434
)

// Defines values for PostPublisherLinkedTermEventErrorCode.
const (
	PostPublisherLinkedTermEventErrorCodeN1106 PostPublisherLinkedTermEventErrorCode = 1106
	PostPublisherLinkedTermEventErrorCodeN1113 PostPublisherLinkedTermEventErrorCode = 1113
	PostPublisherLinkedTermEventErrorCodeN1114 PostPublisherLinkedTermEventErrorCode = 1114
	PostPublisherLinkedTermEventErrorCodeN1116 PostPublisherLinkedTermEventErrorCode = 1116
	PostPublisherLinkedTermEventErrorCodeN1117 PostPublisherLinkedTermEventErrorCode = 1117
	PostPublisherLinkedTermEventErrorCodeN1118 PostPublisherLinkedTermEventErrorCode = 1118
	PostPublisherLinkedTermEventErrorCodeN1119 PostPublisherLinkedTermEventErrorCode = 1119
	PostPublisherLinkedTermEventErrorCodeN1120 PostPublisherLinkedTermEventErrorCode = 1120
	PostPublisherLinkedTermEventErrorCodeN1121 PostPublisherLinkedTermEventErrorCode = 1121
	PostPublisherLinkedTermEventErrorCodeN1122 PostPublisherLinkedTermEventErrorCode = 1122
	PostPublisherLinkedTermEventErrorCodeN2    PostPublisherLinkedTermEventErrorCode = 2
	PostPublisherLinkedTermEventErrorCodeN402  PostPublisherLinkedTermEventErrorCode = 402
)

// Defines values for PostPublisherOfferCreateErrorCode.
const (
	PostPublisherOfferCreateErrorCodeN2 PostPublisherOfferCreateErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateCreateEmptyErrorCode.
const (
	PostPublisherOfferTemplateCreateEmptyErrorCodeN2 PostPublisherOfferTemplateCreateEmptyErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateCreateEmptyRequestCategoryId.
const (
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdAdblocker       PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "adblocker"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdAffiliate       PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "affiliate"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdCheckout        PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "checkout"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdChurnPrevention PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "churn_prevention"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdExpPianoId      PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "exp_piano_id"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdGtOffer         PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "gt_offer"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdGtTemplate      PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "gt_template"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdLicensing       PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "licensing"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdMetering        PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "metering"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdMyAccount       PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "my_account"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdNewsletter      PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "newsletter"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdOffer           PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "offer"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdPianoId         PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "piano_id"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdPushEnrollment  PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "push_enrollment"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdRegistration    PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "registration"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdSocial          PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "social"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdSystem          PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "system"
	PostPublisherOfferTemplateCreateEmptyRequestCategoryIdUpgradeOffer    PostPublisherOfferTemplateCreateEmptyRequestCategoryId = "upgrade_offer"
)

// Defines values for PostPublisherOfferTemplateCreateErrorCode.
const (
	PostPublisherOfferTemplateCreateErrorCodeN2 PostPublisherOfferTemplateCreateErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateCreateRequestCategoryId.
const (
	PostPublisherOfferTemplateCreateRequestCategoryIdAdblocker       PostPublisherOfferTemplateCreateRequestCategoryId = "adblocker"
	PostPublisherOfferTemplateCreateRequestCategoryIdAffiliate       PostPublisherOfferTemplateCreateRequestCategoryId = "affiliate"
	PostPublisherOfferTemplateCreateRequestCategoryIdCheckout        PostPublisherOfferTemplateCreateRequestCategoryId = "checkout"
	PostPublisherOfferTemplateCreateRequestCategoryIdChurnPrevention PostPublisherOfferTemplateCreateRequestCategoryId = "churn_prevention"
	PostPublisherOfferTemplateCreateRequestCategoryIdExpPianoId      PostPublisherOfferTemplateCreateRequestCategoryId = "exp_piano_id"
	PostPublisherOfferTemplateCreateRequestCategoryIdGtOffer         PostPublisherOfferTemplateCreateRequestCategoryId = "gt_offer"
	PostPublisherOfferTemplateCreateRequestCategoryIdGtTemplate      PostPublisherOfferTemplateCreateRequestCategoryId = "gt_template"
	PostPublisherOfferTemplateCreateRequestCategoryIdLicensing       PostPublisherOfferTemplateCreateRequestCategoryId = "licensing"
	PostPublisherOfferTemplateCreateRequestCategoryIdMetering        PostPublisherOfferTemplateCreateRequestCategoryId = "metering"
	PostPublisherOfferTemplateCreateRequestCategoryIdMyAccount       PostPublisherOfferTemplateCreateRequestCategoryId = "my_account"
	PostPublisherOfferTemplateCreateRequestCategoryIdNewsletter      PostPublisherOfferTemplateCreateRequestCategoryId = "newsletter"
	PostPublisherOfferTemplateCreateRequestCategoryIdOffer           PostPublisherOfferTemplateCreateRequestCategoryId = "offer"
	PostPublisherOfferTemplateCreateRequestCategoryIdPianoId         PostPublisherOfferTemplateCreateRequestCategoryId = "piano_id"
	PostPublisherOfferTemplateCreateRequestCategoryIdPushEnrollment  PostPublisherOfferTemplateCreateRequestCategoryId = "push_enrollment"
	PostPublisherOfferTemplateCreateRequestCategoryIdRegistration    PostPublisherOfferTemplateCreateRequestCategoryId = "registration"
	PostPublisherOfferTemplateCreateRequestCategoryIdSocial          PostPublisherOfferTemplateCreateRequestCategoryId = "social"
	PostPublisherOfferTemplateCreateRequestCategoryIdSystem          PostPublisherOfferTemplateCreateRequestCategoryId = "system"
	PostPublisherOfferTemplateCreateRequestCategoryIdUpgradeOffer    PostPublisherOfferTemplateCreateRequestCategoryId = "upgrade_offer"
)

// Defines values for PostPublisherOfferTemplateInheritedUpdateErrorCode.
const (
	PostPublisherOfferTemplateInheritedUpdateErrorCodeN15506 PostPublisherOfferTemplateInheritedUpdateErrorCode = 15506
	PostPublisherOfferTemplateInheritedUpdateErrorCodeN15601 PostPublisherOfferTemplateInheritedUpdateErrorCode = 15601
	PostPublisherOfferTemplateInheritedUpdateErrorCodeN15603 PostPublisherOfferTemplateInheritedUpdateErrorCode = 15603
	PostPublisherOfferTemplateInheritedUpdateErrorCodeN2     PostPublisherOfferTemplateInheritedUpdateErrorCode = 2
	PostPublisherOfferTemplateInheritedUpdateErrorCodeN707   PostPublisherOfferTemplateInheritedUpdateErrorCode = 707
)

// Defines values for PostPublisherOfferTemplateUpdateContentfieldsErrorCode.
const (
	PostPublisherOfferTemplateUpdateContentfieldsErrorCodeN15601 PostPublisherOfferTemplateUpdateContentfieldsErrorCode = 15601
	PostPublisherOfferTemplateUpdateContentfieldsErrorCodeN15603 PostPublisherOfferTemplateUpdateContentfieldsErrorCode = 15603
	PostPublisherOfferTemplateUpdateContentfieldsErrorCodeN2     PostPublisherOfferTemplateUpdateContentfieldsErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateUpdateErrorCode.
const (
	PostPublisherOfferTemplateUpdateErrorCodeN2 PostPublisherOfferTemplateUpdateErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateUpdateRequestCategoryId.
const (
	PostPublisherOfferTemplateUpdateRequestCategoryIdAdblocker       PostPublisherOfferTemplateUpdateRequestCategoryId = "adblocker"
	PostPublisherOfferTemplateUpdateRequestCategoryIdAffiliate       PostPublisherOfferTemplateUpdateRequestCategoryId = "affiliate"
	PostPublisherOfferTemplateUpdateRequestCategoryIdCheckout        PostPublisherOfferTemplateUpdateRequestCategoryId = "checkout"
	PostPublisherOfferTemplateUpdateRequestCategoryIdChurnPrevention PostPublisherOfferTemplateUpdateRequestCategoryId = "churn_prevention"
	PostPublisherOfferTemplateUpdateRequestCategoryIdExpPianoId      PostPublisherOfferTemplateUpdateRequestCategoryId = "exp_piano_id"
	PostPublisherOfferTemplateUpdateRequestCategoryIdGtOffer         PostPublisherOfferTemplateUpdateRequestCategoryId = "gt_offer"
	PostPublisherOfferTemplateUpdateRequestCategoryIdGtTemplate      PostPublisherOfferTemplateUpdateRequestCategoryId = "gt_template"
	PostPublisherOfferTemplateUpdateRequestCategoryIdLicensing       PostPublisherOfferTemplateUpdateRequestCategoryId = "licensing"
	PostPublisherOfferTemplateUpdateRequestCategoryIdMetering        PostPublisherOfferTemplateUpdateRequestCategoryId = "metering"
	PostPublisherOfferTemplateUpdateRequestCategoryIdMyAccount       PostPublisherOfferTemplateUpdateRequestCategoryId = "my_account"
	PostPublisherOfferTemplateUpdateRequestCategoryIdNewsletter      PostPublisherOfferTemplateUpdateRequestCategoryId = "newsletter"
	PostPublisherOfferTemplateUpdateRequestCategoryIdOffer           PostPublisherOfferTemplateUpdateRequestCategoryId = "offer"
	PostPublisherOfferTemplateUpdateRequestCategoryIdPianoId         PostPublisherOfferTemplateUpdateRequestCategoryId = "piano_id"
	PostPublisherOfferTemplateUpdateRequestCategoryIdPushEnrollment  PostPublisherOfferTemplateUpdateRequestCategoryId = "push_enrollment"
	PostPublisherOfferTemplateUpdateRequestCategoryIdRegistration    PostPublisherOfferTemplateUpdateRequestCategoryId = "registration"
	PostPublisherOfferTemplateUpdateRequestCategoryIdSocial          PostPublisherOfferTemplateUpdateRequestCategoryId = "social"
	PostPublisherOfferTemplateUpdateRequestCategoryIdSystem          PostPublisherOfferTemplateUpdateRequestCategoryId = "system"
	PostPublisherOfferTemplateUpdateRequestCategoryIdUpgradeOffer    PostPublisherOfferTemplateUpdateRequestCategoryId = "upgrade_offer"
)

// Defines values for PostPublisherOfferTemplateUpdatefullErrorCode.
const (
	PostPublisherOfferTemplateUpdatefullErrorCodeN15506 PostPublisherOfferTemplateUpdatefullErrorCode = 15506
	PostPublisherOfferTemplateUpdatefullErrorCodeN15601 PostPublisherOfferTemplateUpdatefullErrorCode = 15601
	PostPublisherOfferTemplateUpdatefullErrorCodeN15603 PostPublisherOfferTemplateUpdatefullErrorCode = 15603
	PostPublisherOfferTemplateUpdatefullErrorCodeN2     PostPublisherOfferTemplateUpdatefullErrorCode = 2
	PostPublisherOfferTemplateUpdatefullErrorCodeN707   PostPublisherOfferTemplateUpdatefullErrorCode = 707
)

// Defines values for PostPublisherOfferTemplateUpdatefullRequestAction.
const (
	LivePreview          PostPublisherOfferTemplateUpdatefullRequestAction = "live_preview"
	NewVersionAndPublish PostPublisherOfferTemplateUpdatefullRequestAction = "new_version_and_publish"
	NewVersionOnly       PostPublisherOfferTemplateUpdatefullRequestAction = "new_version_only"
	Save                 PostPublisherOfferTemplateUpdatefullRequestAction = "save"
)

// Defines values for PostPublisherOfferTemplateUpdatefullRequestCategoryId.
const (
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdAdblocker       PostPublisherOfferTemplateUpdatefullRequestCategoryId = "adblocker"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdAffiliate       PostPublisherOfferTemplateUpdatefullRequestCategoryId = "affiliate"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdCheckout        PostPublisherOfferTemplateUpdatefullRequestCategoryId = "checkout"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdChurnPrevention PostPublisherOfferTemplateUpdatefullRequestCategoryId = "churn_prevention"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdExpPianoId      PostPublisherOfferTemplateUpdatefullRequestCategoryId = "exp_piano_id"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdGtOffer         PostPublisherOfferTemplateUpdatefullRequestCategoryId = "gt_offer"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdGtTemplate      PostPublisherOfferTemplateUpdatefullRequestCategoryId = "gt_template"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdLicensing       PostPublisherOfferTemplateUpdatefullRequestCategoryId = "licensing"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdMetering        PostPublisherOfferTemplateUpdatefullRequestCategoryId = "metering"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdMyAccount       PostPublisherOfferTemplateUpdatefullRequestCategoryId = "my_account"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdNewsletter      PostPublisherOfferTemplateUpdatefullRequestCategoryId = "newsletter"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdOffer           PostPublisherOfferTemplateUpdatefullRequestCategoryId = "offer"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdPianoId         PostPublisherOfferTemplateUpdatefullRequestCategoryId = "piano_id"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdPushEnrollment  PostPublisherOfferTemplateUpdatefullRequestCategoryId = "push_enrollment"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdRegistration    PostPublisherOfferTemplateUpdatefullRequestCategoryId = "registration"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdSocial          PostPublisherOfferTemplateUpdatefullRequestCategoryId = "social"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdSystem          PostPublisherOfferTemplateUpdatefullRequestCategoryId = "system"
	PostPublisherOfferTemplateUpdatefullRequestCategoryIdUpgradeOffer    PostPublisherOfferTemplateUpdatefullRequestCategoryId = "upgrade_offer"
)

// Defines values for PostPublisherOfferTemplateVariantCreateErrorCode.
const (
	PostPublisherOfferTemplateVariantCreateErrorCodeN15601 PostPublisherOfferTemplateVariantCreateErrorCode = 15601
	PostPublisherOfferTemplateVariantCreateErrorCodeN15602 PostPublisherOfferTemplateVariantCreateErrorCode = 15602
	PostPublisherOfferTemplateVariantCreateErrorCodeN2     PostPublisherOfferTemplateVariantCreateErrorCode = 2
)

// Defines values for PostPublisherOfferTemplateVariantUpdateErrorCode.
const (
	PostPublisherOfferTemplateVariantUpdateErrorCodeN15601 PostPublisherOfferTemplateVariantUpdateErrorCode = 15601
	PostPublisherOfferTemplateVariantUpdateErrorCodeN15603 PostPublisherOfferTemplateVariantUpdateErrorCode = 15603
	PostPublisherOfferTemplateVariantUpdateErrorCodeN2     PostPublisherOfferTemplateVariantUpdateErrorCode = 2
)

// Defines values for PostPublisherOfferUpdateErrorCode.
const (
	PostPublisherOfferUpdateErrorCodeN2 PostPublisherOfferUpdateErrorCode = 2
)

// Defines values for PostPublisherPaymentMethodAddErrorCode.
const (
	PostPublisherPaymentMethodAddErrorCodeN2    PostPublisherPaymentMethodAddErrorCode = 2
	PostPublisherPaymentMethodAddErrorCodeN2004 PostPublisherPaymentMethodAddErrorCode = 2004
	PostPublisherPaymentMethodAddErrorCodeN404  PostPublisherPaymentMethodAddErrorCode = 404
	PostPublisherPaymentMethodAddErrorCodeN602  PostPublisherPaymentMethodAddErrorCode = 602
)

// Defines values for PostPublisherPaymentMethodBillingAddressGetErrorCode.
const (
	PostPublisherPaymentMethodBillingAddressGetErrorCodeN13013 PostPublisherPaymentMethodBillingAddressGetErrorCode = 13013
	PostPublisherPaymentMethodBillingAddressGetErrorCodeN31202 PostPublisherPaymentMethodBillingAddressGetErrorCode = 31202
	PostPublisherPaymentMethodBillingAddressGetErrorCodeN404   PostPublisherPaymentMethodBillingAddressGetErrorCode = 404
)

// Defines values for PostPublisherPaymentMethodGmoRefreshErrorCode.
const (
	PostPublisherPaymentMethodGmoRefreshErrorCodeN14102 PostPublisherPaymentMethodGmoRefreshErrorCode = 14102
	PostPublisherPaymentMethodGmoRefreshErrorCodeN2     PostPublisherPaymentMethodGmoRefreshErrorCode = 2
	PostPublisherPaymentMethodGmoRefreshErrorCodeN2004  PostPublisherPaymentMethodGmoRefreshErrorCode = 2004
)

// Defines values for PostPublisherPaymentMethodRemoveErrorCode.
const (
	PostPublisherPaymentMethodRemoveErrorCodeN2    PostPublisherPaymentMethodRemoveErrorCode = 2
	PostPublisherPaymentMethodRemoveErrorCodeN2004 PostPublisherPaymentMethodRemoveErrorCode = 2004
	PostPublisherPaymentMethodRemoveErrorCodeN404  PostPublisherPaymentMethodRemoveErrorCode = 404
	PostPublisherPaymentMethodRemoveErrorCodeN602  PostPublisherPaymentMethodRemoveErrorCode = 602
)

// Defines values for PostPublisherPaymentMethodUpdateErrorCode.
const (
	PostPublisherPaymentMethodUpdateErrorCodeN2    PostPublisherPaymentMethodUpdateErrorCode = 2
	PostPublisherPaymentMethodUpdateErrorCodeN2004 PostPublisherPaymentMethodUpdateErrorCode = 2004
	PostPublisherPaymentMethodUpdateErrorCodeN404  PostPublisherPaymentMethodUpdateErrorCode = 404
	PostPublisherPaymentMethodUpdateErrorCodeN602  PostPublisherPaymentMethodUpdateErrorCode = 602
)

// Defines values for PostPublisherPromotionCodeExportErrorCode.
const (
	PostPublisherPromotionCodeExportErrorCodeN2 PostPublisherPromotionCodeExportErrorCode = 2
)

// Defines values for PostPublisherPromotionCodeExportRequestOrderBy.
const (
	PostPublisherPromotionCodeExportRequestOrderByAssignedEmail PostPublisherPromotionCodeExportRequestOrderBy = "assigned_email"
	PostPublisherPromotionCodeExportRequestOrderByCode          PostPublisherPromotionCodeExportRequestOrderBy = "code"
	PostPublisherPromotionCodeExportRequestOrderByCreateBy      PostPublisherPromotionCodeExportRequestOrderBy = "create_by"
	PostPublisherPromotionCodeExportRequestOrderByCreateDate    PostPublisherPromotionCodeExportRequestOrderBy = "create_date"
	PostPublisherPromotionCodeExportRequestOrderByDeleted       PostPublisherPromotionCodeExportRequestOrderBy = "deleted"
	PostPublisherPromotionCodeExportRequestOrderByPromoCodeId   PostPublisherPromotionCodeExportRequestOrderBy = "promo_code_id"
	PostPublisherPromotionCodeExportRequestOrderByPromotionId   PostPublisherPromotionCodeExportRequestOrderBy = "promotion_id"
	PostPublisherPromotionCodeExportRequestOrderByPubId         PostPublisherPromotionCodeExportRequestOrderBy = "pub_id"
	PostPublisherPromotionCodeExportRequestOrderByReserveBy     PostPublisherPromotionCodeExportRequestOrderBy = "reserve_by"
	PostPublisherPromotionCodeExportRequestOrderByReserveDate   PostPublisherPromotionCodeExportRequestOrderBy = "reserve_date"
	PostPublisherPromotionCodeExportRequestOrderByState         PostPublisherPromotionCodeExportRequestOrderBy = "state"
	PostPublisherPromotionCodeExportRequestOrderByUpdateBy      PostPublisherPromotionCodeExportRequestOrderBy = "update_by"
	PostPublisherPromotionCodeExportRequestOrderByUpdateDate    PostPublisherPromotionCodeExportRequestOrderBy = "update_date"
)

// Defines values for PostPublisherPromotionCodeExportRequestOrderDirection.
const (
	PostPublisherPromotionCodeExportRequestOrderDirectionAsc  PostPublisherPromotionCodeExportRequestOrderDirection = "asc"
	PostPublisherPromotionCodeExportRequestOrderDirectionDesc PostPublisherPromotionCodeExportRequestOrderDirection = "desc"
)

// Defines values for PostPublisherPromotionCodeExportRequestState.
const (
	PostPublisherPromotionCodeExportRequestStateActive                    PostPublisherPromotionCodeExportRequestState = "active"
	PostPublisherPromotionCodeExportRequestStateReservedForDelayedPayment PostPublisherPromotionCodeExportRequestState = "reserved_for_delayed_payment"
	PostPublisherPromotionCodeExportRequestStateReservedForFreeTrial      PostPublisherPromotionCodeExportRequestState = "reserved_for_free_trial"
	PostPublisherPromotionCodeExportRequestStateUsed                      PostPublisherPromotionCodeExportRequestState = "used"
)

// Defines values for PostPublisherPromotionCodeUpdateErrorCode.
const (
	PostPublisherPromotionCodeUpdateErrorCodeN2   PostPublisherPromotionCodeUpdateErrorCode = 2
	PostPublisherPromotionCodeUpdateErrorCodeN401 PostPublisherPromotionCodeUpdateErrorCode = 401
)

// Defines values for PostPublisherPromotionCreateErrorCode.
const (
	PostPublisherPromotionCreateErrorCodeN2    PostPublisherPromotionCreateErrorCode = 2
	PostPublisherPromotionCreateErrorCodeN3000 PostPublisherPromotionCreateErrorCode = 3000
	PostPublisherPromotionCreateErrorCodeN3003 PostPublisherPromotionCreateErrorCode = 3003
	PostPublisherPromotionCreateErrorCodeN3004 PostPublisherPromotionCreateErrorCode = 3004
)

// Defines values for PostPublisherPromotionCreateRequestDiscountType.
const (
	PostPublisherPromotionCreateRequestDiscountTypeFixed      PostPublisherPromotionCreateRequestDiscountType = "fixed"
	PostPublisherPromotionCreateRequestDiscountTypePercentage PostPublisherPromotionCreateRequestDiscountType = "percentage"
)

// Defines values for PostPublisherPromotionCreateRequestTermDependencyType.
const (
	PostPublisherPromotionCreateRequestTermDependencyTypeAll      PostPublisherPromotionCreateRequestTermDependencyType = "all"
	PostPublisherPromotionCreateRequestTermDependencyTypeInclude  PostPublisherPromotionCreateRequestTermDependencyType = "include"
	PostPublisherPromotionCreateRequestTermDependencyTypeUnlocked PostPublisherPromotionCreateRequestTermDependencyType = "unlocked"
)

// Defines values for PostPublisherPromotionExistsErrorCode.
const (
	PostPublisherPromotionExistsErrorCodeN2 PostPublisherPromotionExistsErrorCode = 2
)

// Defines values for PostPublisherPromotionFixedDiscountUpdateErrorCode.
const (
	PostPublisherPromotionFixedDiscountUpdateErrorCodeN2    PostPublisherPromotionFixedDiscountUpdateErrorCode = 2
	PostPublisherPromotionFixedDiscountUpdateErrorCodeN3002 PostPublisherPromotionFixedDiscountUpdateErrorCode = 3002
	PostPublisherPromotionFixedDiscountUpdateErrorCodeN3012 PostPublisherPromotionFixedDiscountUpdateErrorCode = 3012
	PostPublisherPromotionFixedDiscountUpdateErrorCodeN3013 PostPublisherPromotionFixedDiscountUpdateErrorCode = 3013
)

// Defines values for PostPublisherPromotionGenerateErrorCode.
const (
	PostPublisherPromotionGenerateErrorCodeN2 PostPublisherPromotionGenerateErrorCode = 2
)

// Defines values for PostPublisherPromotionUpdateErrorCode.
const (
	PostPublisherPromotionUpdateErrorCodeN2    PostPublisherPromotionUpdateErrorCode = 2
	PostPublisherPromotionUpdateErrorCodeN3000 PostPublisherPromotionUpdateErrorCode = 3000
	PostPublisherPromotionUpdateErrorCodeN3003 PostPublisherPromotionUpdateErrorCode = 3003
	PostPublisherPromotionUpdateErrorCodeN3004 PostPublisherPromotionUpdateErrorCode = 3004
)

// Defines values for PostPublisherPromotionUpdateRequestDiscountType.
const (
	PostPublisherPromotionUpdateRequestDiscountTypeFixed      PostPublisherPromotionUpdateRequestDiscountType = "fixed"
	PostPublisherPromotionUpdateRequestDiscountTypePercentage PostPublisherPromotionUpdateRequestDiscountType = "percentage"
)

// Defines values for PostPublisherPromotionUpdateRequestTermDependencyType.
const (
	PostPublisherPromotionUpdateRequestTermDependencyTypeAll      PostPublisherPromotionUpdateRequestTermDependencyType = "all"
	PostPublisherPromotionUpdateRequestTermDependencyTypeInclude  PostPublisherPromotionUpdateRequestTermDependencyType = "include"
	PostPublisherPromotionUpdateRequestTermDependencyTypeUnlocked PostPublisherPromotionUpdateRequestTermDependencyType = "unlocked"
)

// Defines values for PostPublisherResourceCreateErrorCode.
const (
	PostPublisherResourceCreateErrorCodeN2   PostPublisherResourceCreateErrorCode = 2
	PostPublisherResourceCreateErrorCodeN700 PostPublisherResourceCreateErrorCode = 700
	PostPublisherResourceCreateErrorCodeN802 PostPublisherResourceCreateErrorCode = 802
	PostPublisherResourceCreateErrorCodeN803 PostPublisherResourceCreateErrorCode = 803
	PostPublisherResourceCreateErrorCodeN804 PostPublisherResourceCreateErrorCode = 804
	PostPublisherResourceCreateErrorCodeN820 PostPublisherResourceCreateErrorCode = 820
)

// Defines values for PostPublisherResourceCreateRequestBundleType.
const (
	PostPublisherResourceCreateRequestBundleTypeFixed   PostPublisherResourceCreateRequestBundleType = "fixed"
	PostPublisherResourceCreateRequestBundleTypeFixedV2 PostPublisherResourceCreateRequestBundleType = "fixed_v2"
	PostPublisherResourceCreateRequestBundleTypeTagged  PostPublisherResourceCreateRequestBundleType = "tagged"
)

// Defines values for PostPublisherResourceCreateRequestType.
const (
	PostPublisherResourceCreateRequestTypeBundle   PostPublisherResourceCreateRequestType = "bundle"
	PostPublisherResourceCreateRequestTypePrint    PostPublisherResourceCreateRequestType = "print"
	PostPublisherResourceCreateRequestTypeStandard PostPublisherResourceCreateRequestType = "standard"
)

// Defines values for PostPublisherResourceUpdateErrorCode.
const (
	PostPublisherResourceUpdateErrorCodeN2   PostPublisherResourceUpdateErrorCode = 2
	PostPublisherResourceUpdateErrorCodeN403 PostPublisherResourceUpdateErrorCode = 403
	PostPublisherResourceUpdateErrorCodeN700 PostPublisherResourceUpdateErrorCode = 700
	PostPublisherResourceUpdateErrorCodeN804 PostPublisherResourceUpdateErrorCode = 804
	PostPublisherResourceUpdateErrorCodeN820 PostPublisherResourceUpdateErrorCode = 820
)

// Defines values for PostPublisherScheduleCreateErrorCode.
const (
	PostPublisherScheduleCreateErrorCodeN2     PostPublisherScheduleCreateErrorCode = 2
	PostPublisherScheduleCreateErrorCodeN34008 PostPublisherScheduleCreateErrorCode = 34008
)

// Defines values for PostPublisherScheduleGetErrorCode.
const (
	PostPublisherScheduleGetErrorCodeN2     PostPublisherScheduleGetErrorCode = 2
	PostPublisherScheduleGetErrorCodeN34008 PostPublisherScheduleGetErrorCode = 34008
)

// Defines values for PostPublisherScheduleListErrorCode.
const (
	PostPublisherScheduleListErrorCodeN2     PostPublisherScheduleListErrorCode = 2
	PostPublisherScheduleListErrorCodeN34008 PostPublisherScheduleListErrorCode = 34008
)

// Defines values for PostPublisherScheduleListRequestOrderBy.
const (
	PostPublisherScheduleListRequestOrderByCreate PostPublisherScheduleListRequestOrderBy = "create"
	PostPublisherScheduleListRequestOrderByName   PostPublisherScheduleListRequestOrderBy = "name"
)

// Defines values for PostPublisherScheduleListRequestOrderDirection.
const (
	PostPublisherScheduleListRequestOrderDirectionAsc  PostPublisherScheduleListRequestOrderDirection = "asc"
	PostPublisherScheduleListRequestOrderDirectionDesc PostPublisherScheduleListRequestOrderDirection = "desc"
)

// Defines values for PostPublisherSchedulePeriodAddErrorCode.
const (
	PostPublisherSchedulePeriodAddErrorCodeN2     PostPublisherSchedulePeriodAddErrorCode = 2
	PostPublisherSchedulePeriodAddErrorCodeN34008 PostPublisherSchedulePeriodAddErrorCode = 34008
)

// Defines values for PostPublisherSchedulePeriodDeleteErrorCode.
const (
	PostPublisherSchedulePeriodDeleteErrorCodeN2     PostPublisherSchedulePeriodDeleteErrorCode = 2
	PostPublisherSchedulePeriodDeleteErrorCodeN34008 PostPublisherSchedulePeriodDeleteErrorCode = 34008
	PostPublisherSchedulePeriodDeleteErrorCodeN34012 PostPublisherSchedulePeriodDeleteErrorCode = 34012
)

// Defines values for PostPublisherSchedulePeriodUpdateErrorCode.
const (
	PostPublisherSchedulePeriodUpdateErrorCodeN2     PostPublisherSchedulePeriodUpdateErrorCode = 2
	PostPublisherSchedulePeriodUpdateErrorCodeN34000 PostPublisherSchedulePeriodUpdateErrorCode = 34000
	PostPublisherSchedulePeriodUpdateErrorCodeN34001 PostPublisherSchedulePeriodUpdateErrorCode = 34001
	PostPublisherSchedulePeriodUpdateErrorCodeN34008 PostPublisherSchedulePeriodUpdateErrorCode = 34008
	PostPublisherSchedulePeriodUpdateErrorCodeN34012 PostPublisherSchedulePeriodUpdateErrorCode = 34012
)

// Defines values for PostPublisherScheduleTermsErrorCode.
const (
	PostPublisherScheduleTermsErrorCodeN2     PostPublisherScheduleTermsErrorCode = 2
	PostPublisherScheduleTermsErrorCodeN34008 PostPublisherScheduleTermsErrorCode = 34008
)

// Defines values for PostPublisherScheduleTermsRequestOrderBy.
const (
	PostPublisherScheduleTermsRequestOrderByCreate PostPublisherScheduleTermsRequestOrderBy = "create"
	PostPublisherScheduleTermsRequestOrderByName   PostPublisherScheduleTermsRequestOrderBy = "name"
)

// Defines values for PostPublisherScheduleTermsRequestOrderDirection.
const (
	PostPublisherScheduleTermsRequestOrderDirectionAsc  PostPublisherScheduleTermsRequestOrderDirection = "asc"
	PostPublisherScheduleTermsRequestOrderDirectionDesc PostPublisherScheduleTermsRequestOrderDirection = "desc"
)

// Defines values for PostPublisherScheduleUpdateErrorCode.
const (
	PostPublisherScheduleUpdateErrorCodeN2     PostPublisherScheduleUpdateErrorCode = 2
	PostPublisherScheduleUpdateErrorCodeN34008 PostPublisherScheduleUpdateErrorCode = 34008
)

// Defines values for PostPublisherSubscriptionAddressAssignErrorCode.
const (
	PostPublisherSubscriptionAddressAssignErrorCodeN2   PostPublisherSubscriptionAddressAssignErrorCode = 2
	PostPublisherSubscriptionAddressAssignErrorCodeN612 PostPublisherSubscriptionAddressAssignErrorCode = 612
)

// Defines values for PostPublisherSubscriptionCancelDeferredErrorCode.
const (
	PostPublisherSubscriptionCancelDeferredErrorCodeN2 PostPublisherSubscriptionCancelDeferredErrorCode = 2
)

// Defines values for PostPublisherSubscriptionCancelErrorCode.
const (
	PostPublisherSubscriptionCancelErrorCodeN2    PostPublisherSubscriptionCancelErrorCode = 2
	PostPublisherSubscriptionCancelErrorCodeN8002 PostPublisherSubscriptionCancelErrorCode = 8002
	PostPublisherSubscriptionCancelErrorCodeN8004 PostPublisherSubscriptionCancelErrorCode = 8004
)

// Defines values for PostPublisherSubscriptionCountErrorCode.
const (
	PostPublisherSubscriptionCountErrorCodeN2 PostPublisherSubscriptionCountErrorCode = 2
)

// Defines values for PostPublisherSubscriptionIsPartiallyRefundableErrorCode.
const (
	PostPublisherSubscriptionIsPartiallyRefundableErrorCodeN2 PostPublisherSubscriptionIsPartiallyRefundableErrorCode = 2
)

// Defines values for PostPublisherSubscriptionResumeErrorCode.
const (
	PostPublisherSubscriptionResumeErrorCodeN2 PostPublisherSubscriptionResumeErrorCode = 2
)

// Defines values for PostPublisherSubscriptionShareInviteErrorCode.
const (
	PostPublisherSubscriptionShareInviteErrorCodeN2    PostPublisherSubscriptionShareInviteErrorCode = 2
	PostPublisherSubscriptionShareInviteErrorCodeN8005 PostPublisherSubscriptionShareInviteErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareListErrorCode.
const (
	PostPublisherSubscriptionShareListErrorCodeN1001 PostPublisherSubscriptionShareListErrorCode = 1001
	PostPublisherSubscriptionShareListErrorCodeN2    PostPublisherSubscriptionShareListErrorCode = 2
)

// Defines values for PostPublisherSubscriptionShareListRequestSelectBy.
const (
	PostPublisherSubscriptionShareListRequestSelectByCreate   PostPublisherSubscriptionShareListRequestSelectBy = "create"
	PostPublisherSubscriptionShareListRequestSelectByLastBill PostPublisherSubscriptionShareListRequestSelectBy = "last_bill"
	PostPublisherSubscriptionShareListRequestSelectByNextBill PostPublisherSubscriptionShareListRequestSelectBy = "next_bill"
	PostPublisherSubscriptionShareListRequestSelectByUpdate   PostPublisherSubscriptionShareListRequestSelectBy = "update"
)

// Defines values for PostPublisherSubscriptionShareListRequestStatus.
const (
	PostPublisherSubscriptionShareListRequestStatusActive         PostPublisherSubscriptionShareListRequestStatus = "active"
	PostPublisherSubscriptionShareListRequestStatusCancelled      PostPublisherSubscriptionShareListRequestStatus = "cancelled"
	PostPublisherSubscriptionShareListRequestStatusCompleted      PostPublisherSubscriptionShareListRequestStatus = "completed"
	PostPublisherSubscriptionShareListRequestStatusExpired        PostPublisherSubscriptionShareListRequestStatus = "expired"
	PostPublisherSubscriptionShareListRequestStatusFailedAndRetry PostPublisherSubscriptionShareListRequestStatus = "failedAndRetry"
	PostPublisherSubscriptionShareListRequestStatusPaymentFailure PostPublisherSubscriptionShareListRequestStatus = "paymentFailure"
	PostPublisherSubscriptionShareListRequestStatusRenewed        PostPublisherSubscriptionShareListRequestStatus = "renewed"
	PostPublisherSubscriptionShareListRequestStatusUpgraded       PostPublisherSubscriptionShareListRequestStatus = "upgraded"
)

// Defines values for PostPublisherSubscriptionShareResendErrorCode.
const (
	PostPublisherSubscriptionShareResendErrorCodeN2    PostPublisherSubscriptionShareResendErrorCode = 2
	PostPublisherSubscriptionShareResendErrorCodeN8005 PostPublisherSubscriptionShareResendErrorCode = 8005
	PostPublisherSubscriptionShareResendErrorCodeN8213 PostPublisherSubscriptionShareResendErrorCode = 8213
)

// Defines values for PostPublisherSubscriptionShareRevokeErrorCode.
const (
	PostPublisherSubscriptionShareRevokeErrorCodeN2    PostPublisherSubscriptionShareRevokeErrorCode = 2
	PostPublisherSubscriptionShareRevokeErrorCodeN8005 PostPublisherSubscriptionShareRevokeErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareStartErrorCode.
const (
	PostPublisherSubscriptionShareStartErrorCodeN2    PostPublisherSubscriptionShareStartErrorCode = 2
	PostPublisherSubscriptionShareStartErrorCodeN8005 PostPublisherSubscriptionShareStartErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareStopErrorCode.
const (
	PostPublisherSubscriptionShareStopErrorCodeN2    PostPublisherSubscriptionShareStopErrorCode = 2
	PostPublisherSubscriptionShareStopErrorCodeN8005 PostPublisherSubscriptionShareStopErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareUpdateErrorCode.
const (
	PostPublisherSubscriptionShareUpdateErrorCodeN2    PostPublisherSubscriptionShareUpdateErrorCode = 2
	PostPublisherSubscriptionShareUpdateErrorCodeN8005 PostPublisherSubscriptionShareUpdateErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareUserAddErrorCode.
const (
	PostPublisherSubscriptionShareUserAddErrorCodeN2    PostPublisherSubscriptionShareUserAddErrorCode = 2
	PostPublisherSubscriptionShareUserAddErrorCodeN8005 PostPublisherSubscriptionShareUserAddErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareUserRemoveErrorCode.
const (
	PostPublisherSubscriptionShareUserRemoveErrorCodeN2    PostPublisherSubscriptionShareUserRemoveErrorCode = 2
	PostPublisherSubscriptionShareUserRemoveErrorCodeN8005 PostPublisherSubscriptionShareUserRemoveErrorCode = 8005
)

// Defines values for PostPublisherSubscriptionShareValidateErrorCode.
const (
	PostPublisherSubscriptionShareValidateErrorCodeN2 PostPublisherSubscriptionShareValidateErrorCode = 2
)

// Defines values for PostPublisherSubscriptionStatsErrorCode.
const (
	PostPublisherSubscriptionStatsErrorCodeN2 PostPublisherSubscriptionStatsErrorCode = 2
)

// Defines values for PostPublisherSubscriptionUpdateErrorCode.
const (
	PostPublisherSubscriptionUpdateErrorCodeN2    PostPublisherSubscriptionUpdateErrorCode = 2
	PostPublisherSubscriptionUpdateErrorCodeN8001 PostPublisherSubscriptionUpdateErrorCode = 8001
)

// Defines values for PostPublisherTeamListErrorCode.
const (
	PostPublisherTeamListErrorCodeN2 PostPublisherTeamListErrorCode = 2
)

// Defines values for PostPublisherTeamListRequestPermissions.
const (
	CancelSubscription            PostPublisherTeamListRequestPermissions = "cancel_subscription"
	EditTemplates                 PostPublisherTeamListRequestPermissions = "edit_templates"
	Finance                       PostPublisherTeamListRequestPermissions = "finance"
	FinancialReports              PostPublisherTeamListRequestPermissions = "financial_reports"
	GlobalAdmin                   PostPublisherTeamListRequestPermissions = "global_admin"
	GlobalLibraryManageDeployment PostPublisherTeamListRequestPermissions = "global_library_manage_deployment"
	ManageApi                     PostPublisherTeamListRequestPermissions = "manage_api"
	ManageBusiness                PostPublisherTeamListRequestPermissions = "manage_business"
	ManageCheckoutFlows           PostPublisherTeamListRequestPermissions = "manage_checkout_flows"
	ManageComposer                PostPublisherTeamListRequestPermissions = "manage_composer"
	ManageCookieManager           PostPublisherTeamListRequestPermissions = "manage_cookie_manager"
	ManageCxenseSite              PostPublisherTeamListRequestPermissions = "manage_cxense_site"
	ManageEspAccount              PostPublisherTeamListRequestPermissions = "manage_esp_account"
	ManageEspSite                 PostPublisherTeamListRequestPermissions = "manage_esp_site"
	ManageGlobalCustomFields      PostPublisherTeamListRequestPermissions = "manage_global_custom_fields"
	ManageGlobalExperiences       PostPublisherTeamListRequestPermissions = "manage_global_experiences"
	ManageLocalization            PostPublisherTeamListRequestPermissions = "manage_localization"
	ManageNotifications           PostPublisherTeamListRequestPermissions = "manage_notifications"
	ManageOffers                  PostPublisherTeamListRequestPermissions = "manage_offers"
	ManagePaywalls                PostPublisherTeamListRequestPermissions = "manage_paywalls"
	ManagePromotions              PostPublisherTeamListRequestPermissions = "manage_promotions"
	ManageResources               PostPublisherTeamListRequestPermissions = "manage_resources"
	ManageSiteLicenses            PostPublisherTeamListRequestPermissions = "manage_site_licenses"
	ManageTeam                    PostPublisherTeamListRequestPermissions = "manage_team"
	ManageTemplates               PostPublisherTeamListRequestPermissions = "manage_templates"
	ManageTerms                   PostPublisherTeamListRequestPermissions = "manage_terms"
	ManageUpgradeOptions          PostPublisherTeamListRequestPermissions = "manage_upgrade_options"
	ManageUsers                   PostPublisherTeamListRequestPermissions = "manage_users"
	ManageWebhooks                PostPublisherTeamListRequestPermissions = "manage_webhooks"
	MarketingFull                 PostPublisherTeamListRequestPermissions = "marketing_full"
	MarketingLimited              PostPublisherTeamListRequestPermissions = "marketing_limited"
	NonFinancialReports           PostPublisherTeamListRequestPermissions = "non_financial_reports"
	PublisherAdmin                PostPublisherTeamListRequestPermissions = "publisher_admin"
	RefundPayment                 PostPublisherTeamListRequestPermissions = "refund_payment"
	RevokeAccess                  PostPublisherTeamListRequestPermissions = "revoke_access"
	Support                       PostPublisherTeamListRequestPermissions = "support"
	ViewComposer                  PostPublisherTeamListRequestPermissions = "view_composer"
	ViewGlobalLibrary             PostPublisherTeamListRequestPermissions = "view_global_library"
)

// Defines values for PostPublisherTermChangeCanErrorCode.
const (
	PostPublisherTermChangeCanErrorCodeN1012 PostPublisherTermChangeCanErrorCode = 1012
	PostPublisherTermChangeCanErrorCodeN2    PostPublisherTermChangeCanErrorCode = 2
)

// Defines values for PostPublisherTermChangeCancelErrorCode.
const (
	PostPublisherTermChangeCancelErrorCodeN1012 PostPublisherTermChangeCancelErrorCode = 1012
	PostPublisherTermChangeCancelErrorCodeN2    PostPublisherTermChangeCancelErrorCode = 2
)

// Defines values for PostPublisherTermChangeDoErrorCode.
const (
	PostPublisherTermChangeDoErrorCodeN1012 PostPublisherTermChangeDoErrorCode = 1012
	PostPublisherTermChangeDoErrorCodeN2    PostPublisherTermChangeDoErrorCode = 2
)

// Defines values for PostPublisherTermChangeDoRequestBillingTiming.
const (
	PostPublisherTermChangeDoRequestBillingTimingN0Immediately                 PostPublisherTermChangeDoRequestBillingTiming = "0: immediately"
	PostPublisherTermChangeDoRequestBillingTimingN1EndOfCurrentBillingPeriod   PostPublisherTermChangeDoRequestBillingTiming = "1: end of current billing period"
	PostPublisherTermChangeDoRequestBillingTimingN2NextSellDate                PostPublisherTermChangeDoRequestBillingTiming = "2: next sell date"
	PostPublisherTermChangeDoRequestBillingTimingN3EndOfCurrentScheduledPeriod PostPublisherTermChangeDoRequestBillingTiming = "3: end of current scheduled period"
)

// Defines values for PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode.
const (
	PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCodeN1012 PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode = 1012
	PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCodeN2    PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode = 2
)

// Defines values for PostPublisherTermChangeOptionCreateErrorCode.
const (
	PostPublisherTermChangeOptionCreateErrorCodeN1001 PostPublisherTermChangeOptionCreateErrorCode = 1001
	PostPublisherTermChangeOptionCreateErrorCodeN1062 PostPublisherTermChangeOptionCreateErrorCode = 1062
	PostPublisherTermChangeOptionCreateErrorCodeN1069 PostPublisherTermChangeOptionCreateErrorCode = 1069
	PostPublisherTermChangeOptionCreateErrorCodeN2    PostPublisherTermChangeOptionCreateErrorCode = 2
)

// Defines values for PostPublisherTermChangeOptionCreateRequestBillingTiming.
const (
	PostPublisherTermChangeOptionCreateRequestBillingTimingN0Immediately                 PostPublisherTermChangeOptionCreateRequestBillingTiming = "0: immediately"
	PostPublisherTermChangeOptionCreateRequestBillingTimingN1EndOfCurrentBillingPeriod   PostPublisherTermChangeOptionCreateRequestBillingTiming = "1: end of current billing period"
	PostPublisherTermChangeOptionCreateRequestBillingTimingN2NextSellDate                PostPublisherTermChangeOptionCreateRequestBillingTiming = "2: next sell date"
	PostPublisherTermChangeOptionCreateRequestBillingTimingN3EndOfCurrentScheduledPeriod PostPublisherTermChangeOptionCreateRequestBillingTiming = "3: end of current scheduled period"
)

// Defines values for PostPublisherTermCustomCreateErrorCode.
const (
	PostPublisherTermCustomCreateErrorCodeN1000 PostPublisherTermCustomCreateErrorCode = 1000
	PostPublisherTermCustomCreateErrorCodeN2    PostPublisherTermCustomCreateErrorCode = 2
	PostPublisherTermCustomCreateErrorCodeN403  PostPublisherTermCustomCreateErrorCode = 403
)

// Defines values for PostPublisherTermCustomUpdateErrorCode.
const (
	PostPublisherTermCustomUpdateErrorCodeN1000 PostPublisherTermCustomUpdateErrorCode = 1000
	PostPublisherTermCustomUpdateErrorCodeN1001 PostPublisherTermCustomUpdateErrorCode = 1001
	PostPublisherTermCustomUpdateErrorCodeN1002 PostPublisherTermCustomUpdateErrorCode = 1002
	PostPublisherTermCustomUpdateErrorCodeN1005 PostPublisherTermCustomUpdateErrorCode = 1005
	PostPublisherTermCustomUpdateErrorCodeN2    PostPublisherTermCustomUpdateErrorCode = 2
	PostPublisherTermCustomUpdateErrorCodeN403  PostPublisherTermCustomUpdateErrorCode = 403
)

// Defines values for PostPublisherTermDynamicCreateErrorCode.
const (
	PostPublisherTermDynamicCreateErrorCodeN1000 PostPublisherTermDynamicCreateErrorCode = 1000
	PostPublisherTermDynamicCreateErrorCodeN1006 PostPublisherTermDynamicCreateErrorCode = 1006
	PostPublisherTermDynamicCreateErrorCodeN1093 PostPublisherTermDynamicCreateErrorCode = 1093
	PostPublisherTermDynamicCreateErrorCodeN1094 PostPublisherTermDynamicCreateErrorCode = 1094
	PostPublisherTermDynamicCreateErrorCodeN2    PostPublisherTermDynamicCreateErrorCode = 2
	PostPublisherTermDynamicCreateErrorCodeN402  PostPublisherTermDynamicCreateErrorCode = 402
	PostPublisherTermDynamicCreateErrorCodeN403  PostPublisherTermDynamicCreateErrorCode = 403
	PostPublisherTermDynamicCreateErrorCodeN429  PostPublisherTermDynamicCreateErrorCode = 429
	PostPublisherTermDynamicCreateErrorCodeN441  PostPublisherTermDynamicCreateErrorCode = 441
)

// Defines values for PostPublisherTermDynamicUpdateErrorCode.
const (
	PostPublisherTermDynamicUpdateErrorCodeN1000 PostPublisherTermDynamicUpdateErrorCode = 1000
	PostPublisherTermDynamicUpdateErrorCodeN1001 PostPublisherTermDynamicUpdateErrorCode = 1001
	PostPublisherTermDynamicUpdateErrorCodeN1005 PostPublisherTermDynamicUpdateErrorCode = 1005
	PostPublisherTermDynamicUpdateErrorCodeN1006 PostPublisherTermDynamicUpdateErrorCode = 1006
	PostPublisherTermDynamicUpdateErrorCodeN1093 PostPublisherTermDynamicUpdateErrorCode = 1093
	PostPublisherTermDynamicUpdateErrorCodeN1094 PostPublisherTermDynamicUpdateErrorCode = 1094
	PostPublisherTermDynamicUpdateErrorCodeN2    PostPublisherTermDynamicUpdateErrorCode = 2
	PostPublisherTermDynamicUpdateErrorCodeN402  PostPublisherTermDynamicUpdateErrorCode = 402
	PostPublisherTermDynamicUpdateErrorCodeN403  PostPublisherTermDynamicUpdateErrorCode = 403
	PostPublisherTermDynamicUpdateErrorCodeN429  PostPublisherTermDynamicUpdateErrorCode = 429
	PostPublisherTermDynamicUpdateErrorCodeN441  PostPublisherTermDynamicUpdateErrorCode = 441
)

// Defines values for PostPublisherTermExternalCreateErrorCode.
const (
	PostPublisherTermExternalCreateErrorCodeN1000 PostPublisherTermExternalCreateErrorCode = 1000
	PostPublisherTermExternalCreateErrorCodeN2    PostPublisherTermExternalCreateErrorCode = 2
	PostPublisherTermExternalCreateErrorCodeN403  PostPublisherTermExternalCreateErrorCode = 403
)

// Defines values for PostPublisherTermExternalUpdateErrorCode.
const (
	PostPublisherTermExternalUpdateErrorCodeN1000 PostPublisherTermExternalUpdateErrorCode = 1000
	PostPublisherTermExternalUpdateErrorCodeN1001 PostPublisherTermExternalUpdateErrorCode = 1001
	PostPublisherTermExternalUpdateErrorCodeN1002 PostPublisherTermExternalUpdateErrorCode = 1002
	PostPublisherTermExternalUpdateErrorCodeN1005 PostPublisherTermExternalUpdateErrorCode = 1005
	PostPublisherTermExternalUpdateErrorCodeN2    PostPublisherTermExternalUpdateErrorCode = 2
	PostPublisherTermExternalUpdateErrorCodeN403  PostPublisherTermExternalUpdateErrorCode = 403
)

// Defines values for PostPublisherTermGiftCreateErrorCode.
const (
	PostPublisherTermGiftCreateErrorCodeN1    PostPublisherTermGiftCreateErrorCode = 1
	PostPublisherTermGiftCreateErrorCodeN1000 PostPublisherTermGiftCreateErrorCode = 1000
	PostPublisherTermGiftCreateErrorCodeN1004 PostPublisherTermGiftCreateErrorCode = 1004
	PostPublisherTermGiftCreateErrorCodeN1020 PostPublisherTermGiftCreateErrorCode = 1020
	PostPublisherTermGiftCreateErrorCodeN1021 PostPublisherTermGiftCreateErrorCode = 1021
	PostPublisherTermGiftCreateErrorCodeN2    PostPublisherTermGiftCreateErrorCode = 2
	PostPublisherTermGiftCreateErrorCodeN402  PostPublisherTermGiftCreateErrorCode = 402
	PostPublisherTermGiftCreateErrorCodeN403  PostPublisherTermGiftCreateErrorCode = 403
	PostPublisherTermGiftCreateErrorCodeN407  PostPublisherTermGiftCreateErrorCode = 407
	PostPublisherTermGiftCreateErrorCodeN408  PostPublisherTermGiftCreateErrorCode = 408
	PostPublisherTermGiftCreateErrorCodeN409  PostPublisherTermGiftCreateErrorCode = 409
	PostPublisherTermGiftCreateErrorCodeN410  PostPublisherTermGiftCreateErrorCode = 410
)

// Defines values for PostPublisherTermGiftCreateRequestTermType.
const (
	PostPublisherTermGiftCreateRequestTermTypeScheduled    PostPublisherTermGiftCreateRequestTermType = "scheduled"
	PostPublisherTermGiftCreateRequestTermTypeSubscription PostPublisherTermGiftCreateRequestTermType = "subscription"
)

// Defines values for PostPublisherTermGiftUpdateErrorCode.
const (
	PostPublisherTermGiftUpdateErrorCodeN1    PostPublisherTermGiftUpdateErrorCode = 1
	PostPublisherTermGiftUpdateErrorCodeN1000 PostPublisherTermGiftUpdateErrorCode = 1000
	PostPublisherTermGiftUpdateErrorCodeN1004 PostPublisherTermGiftUpdateErrorCode = 1004
	PostPublisherTermGiftUpdateErrorCodeN1020 PostPublisherTermGiftUpdateErrorCode = 1020
	PostPublisherTermGiftUpdateErrorCodeN1021 PostPublisherTermGiftUpdateErrorCode = 1021
	PostPublisherTermGiftUpdateErrorCodeN2    PostPublisherTermGiftUpdateErrorCode = 2
	PostPublisherTermGiftUpdateErrorCodeN402  PostPublisherTermGiftUpdateErrorCode = 402
	PostPublisherTermGiftUpdateErrorCodeN403  PostPublisherTermGiftUpdateErrorCode = 403
	PostPublisherTermGiftUpdateErrorCodeN407  PostPublisherTermGiftUpdateErrorCode = 407
	PostPublisherTermGiftUpdateErrorCodeN408  PostPublisherTermGiftUpdateErrorCode = 408
	PostPublisherTermGiftUpdateErrorCodeN409  PostPublisherTermGiftUpdateErrorCode = 409
	PostPublisherTermGiftUpdateErrorCodeN410  PostPublisherTermGiftUpdateErrorCode = 410
)

// Defines values for PostPublisherTermGiftUpdateRequestTermType.
const (
	PostPublisherTermGiftUpdateRequestTermTypeScheduled    PostPublisherTermGiftUpdateRequestTermType = "scheduled"
	PostPublisherTermGiftUpdateRequestTermTypeSubscription PostPublisherTermGiftUpdateRequestTermType = "subscription"
)

// Defines values for PostPublisherTermPaymentCreateErrorCode.
const (
	PostPublisherTermPaymentCreateErrorCodeN1000 PostPublisherTermPaymentCreateErrorCode = 1000
	PostPublisherTermPaymentCreateErrorCodeN1004 PostPublisherTermPaymentCreateErrorCode = 1004
	PostPublisherTermPaymentCreateErrorCodeN1011 PostPublisherTermPaymentCreateErrorCode = 1011
	PostPublisherTermPaymentCreateErrorCodeN2    PostPublisherTermPaymentCreateErrorCode = 2
	PostPublisherTermPaymentCreateErrorCodeN403  PostPublisherTermPaymentCreateErrorCode = 403
	PostPublisherTermPaymentCreateErrorCodeN441  PostPublisherTermPaymentCreateErrorCode = 441
)

// Defines values for PostPublisherTermPaymentUpdateErrorCode.
const (
	PostPublisherTermPaymentUpdateErrorCodeN1000 PostPublisherTermPaymentUpdateErrorCode = 1000
	PostPublisherTermPaymentUpdateErrorCodeN1001 PostPublisherTermPaymentUpdateErrorCode = 1001
	PostPublisherTermPaymentUpdateErrorCodeN1002 PostPublisherTermPaymentUpdateErrorCode = 1002
	PostPublisherTermPaymentUpdateErrorCodeN1004 PostPublisherTermPaymentUpdateErrorCode = 1004
	PostPublisherTermPaymentUpdateErrorCodeN1005 PostPublisherTermPaymentUpdateErrorCode = 1005
	PostPublisherTermPaymentUpdateErrorCodeN1011 PostPublisherTermPaymentUpdateErrorCode = 1011
	PostPublisherTermPaymentUpdateErrorCodeN1062 PostPublisherTermPaymentUpdateErrorCode = 1062
	PostPublisherTermPaymentUpdateErrorCodeN2    PostPublisherTermPaymentUpdateErrorCode = 2
	PostPublisherTermPaymentUpdateErrorCodeN403  PostPublisherTermPaymentUpdateErrorCode = 403
	PostPublisherTermPaymentUpdateErrorCodeN441  PostPublisherTermPaymentUpdateErrorCode = 441
	PostPublisherTermPaymentUpdateErrorCodeN950  PostPublisherTermPaymentUpdateErrorCode = 950
)

// Defines values for PostPublisherTermRegistrationCreateErrorCode.
const (
	PostPublisherTermRegistrationCreateErrorCodeN1000 PostPublisherTermRegistrationCreateErrorCode = 1000
	PostPublisherTermRegistrationCreateErrorCodeN1003 PostPublisherTermRegistrationCreateErrorCode = 1003
	PostPublisherTermRegistrationCreateErrorCodeN2    PostPublisherTermRegistrationCreateErrorCode = 2
	PostPublisherTermRegistrationCreateErrorCodeN403  PostPublisherTermRegistrationCreateErrorCode = 403
)

// Defines values for PostPublisherTermRegistrationUpdateErrorCode.
const (
	PostPublisherTermRegistrationUpdateErrorCodeN1000 PostPublisherTermRegistrationUpdateErrorCode = 1000
	PostPublisherTermRegistrationUpdateErrorCodeN1002 PostPublisherTermRegistrationUpdateErrorCode = 1002
	PostPublisherTermRegistrationUpdateErrorCodeN1003 PostPublisherTermRegistrationUpdateErrorCode = 1003
	PostPublisherTermRegistrationUpdateErrorCodeN2    PostPublisherTermRegistrationUpdateErrorCode = 2
	PostPublisherTermRegistrationUpdateErrorCodeN403  PostPublisherTermRegistrationUpdateErrorCode = 403
)

// Defines values for PostPublisherUserAccessActiveCountErrorCode.
const (
	PostPublisherUserAccessActiveCountErrorCodeN2 PostPublisherUserAccessActiveCountErrorCode = 2
)

// Defines values for PostPublisherUserAccessUpdateErrorCode.
const (
	PostPublisherUserAccessUpdateErrorCodeN2 PostPublisherUserAccessUpdateErrorCode = 2
)

// Defines values for PostPublisherUserAddressUpdateErrorCode.
const (
	N2810 PostPublisherUserAddressUpdateErrorCode = 2810
)

// Defines values for PostPublisherUserAppCountErrorCode.
const (
	PostPublisherUserAppCountErrorCodeN2    PostPublisherUserAppCountErrorCode = 2
	PostPublisherUserAppCountErrorCodeN2004 PostPublisherUserAppCountErrorCode = 2004
)

// Defines values for PostPublisherUserBillingAddressCreateErrorCode.
const (
	PostPublisherUserBillingAddressCreateErrorCodeN2004 PostPublisherUserBillingAddressCreateErrorCode = 2004
	PostPublisherUserBillingAddressCreateErrorCodeN2800 PostPublisherUserBillingAddressCreateErrorCode = 2800
	PostPublisherUserBillingAddressCreateErrorCodeN402  PostPublisherUserBillingAddressCreateErrorCode = 402
	PostPublisherUserBillingAddressCreateErrorCodeN404  PostPublisherUserBillingAddressCreateErrorCode = 404
)

// Defines values for PostPublisherUserBillingAddressDeleteErrorCode.
const (
	PostPublisherUserBillingAddressDeleteErrorCodeN2004 PostPublisherUserBillingAddressDeleteErrorCode = 2004
)

// Defines values for PostPublisherUserBillingAddressGetByPaymentErrorCode.
const (
	PostPublisherUserBillingAddressGetByPaymentErrorCodeN2004 PostPublisherUserBillingAddressGetByPaymentErrorCode = 2004
)

// Defines values for PostPublisherUserBillingAddressGetByPaymentInfoErrorCode.
const (
	PostPublisherUserBillingAddressGetByPaymentInfoErrorCodeN2004 PostPublisherUserBillingAddressGetByPaymentInfoErrorCode = 2004
)

// Defines values for PostPublisherUserBillingAddressGetErrorCode.
const (
	PostPublisherUserBillingAddressGetErrorCodeN2004 PostPublisherUserBillingAddressGetErrorCode = 2004
	PostPublisherUserBillingAddressGetErrorCodeN404  PostPublisherUserBillingAddressGetErrorCode = 404
)

// Defines values for PostPublisherUserBillingAddressListErrorCode.
const (
	PostPublisherUserBillingAddressListErrorCodeN2004 PostPublisherUserBillingAddressListErrorCode = 2004
)

// Defines values for PostPublisherUserBulkImportDeleteErrorCode.
const (
	PostPublisherUserBulkImportDeleteErrorCodeN2 PostPublisherUserBulkImportDeleteErrorCode = 2
)

// Defines values for PostPublisherUserBulkImportDownloadErrorCode.
const (
	PostPublisherUserBulkImportDownloadErrorCodeN2 PostPublisherUserBulkImportDownloadErrorCode = 2
)

// Defines values for PostPublisherUserBulkImportListCompletedRequestOrderBy.
const (
	PostPublisherUserBulkImportListCompletedRequestOrderByCompletionDate PostPublisherUserBulkImportListCompletedRequestOrderBy = "completion_date"
	PostPublisherUserBulkImportListCompletedRequestOrderByCreateDate     PostPublisherUserBulkImportListCompletedRequestOrderBy = "create_date"
	PostPublisherUserBulkImportListCompletedRequestOrderByUpdateDate     PostPublisherUserBulkImportListCompletedRequestOrderBy = "update_date"
)

// Defines values for PostPublisherUserBulkImportListCompletedRequestOrderDirection.
const (
	PostPublisherUserBulkImportListCompletedRequestOrderDirectionAsc  PostPublisherUserBulkImportListCompletedRequestOrderDirection = "asc"
	PostPublisherUserBulkImportListCompletedRequestOrderDirectionDesc PostPublisherUserBulkImportListCompletedRequestOrderDirection = "desc"
)

// Defines values for PostPublisherUserCreateErrorCode.
const (
	PostPublisherUserCreateErrorCodeN2    PostPublisherUserCreateErrorCode = 2
	PostPublisherUserCreateErrorCodeN2000 PostPublisherUserCreateErrorCode = 2000
	PostPublisherUserCreateErrorCodeN2001 PostPublisherUserCreateErrorCode = 2001
	PostPublisherUserCreateErrorCodeN2002 PostPublisherUserCreateErrorCode = 2002
	PostPublisherUserCreateErrorCodeN2004 PostPublisherUserCreateErrorCode = 2004
)

// Defines values for PostPublisherUserGetErrorCode.
const (
	PostPublisherUserGetErrorCodeN2    PostPublisherUserGetErrorCode = 2
	PostPublisherUserGetErrorCodeN2004 PostPublisherUserGetErrorCode = 2004
)

// Defines values for PostPublisherUserListAccessesErrorCode.
const (
	PostPublisherUserListAccessesErrorCodeN2 PostPublisherUserListAccessesErrorCode = 2
)

// Defines values for PostPublisherUserListErrorCode.
const (
	PostPublisherUserListErrorCodeN2 PostPublisherUserListErrorCode = 2
)

// Defines values for PostPublisherUserNoteCreateErrorCode.
const (
	PostPublisherUserNoteCreateErrorCodeN2   PostPublisherUserNoteCreateErrorCode = 2
	PostPublisherUserNoteCreateErrorCodeN404 PostPublisherUserNoteCreateErrorCode = 404
)

// Defines values for PostPublisherUserNoteUpdateErrorCode.
const (
	PostPublisherUserNoteUpdateErrorCodeN2   PostPublisherUserNoteUpdateErrorCode = 2
	PostPublisherUserNoteUpdateErrorCodeN404 PostPublisherUserNoteUpdateErrorCode = 404
)

// Defines values for PostPublisherUserRegisterErrorCode.
const (
	PostPublisherUserRegisterErrorCodeN2    PostPublisherUserRegisterErrorCode = 2
	PostPublisherUserRegisterErrorCodeN2000 PostPublisherUserRegisterErrorCode = 2000
	PostPublisherUserRegisterErrorCodeN2002 PostPublisherUserRegisterErrorCode = 2002
	PostPublisherUserRegisterErrorCodeN600  PostPublisherUserRegisterErrorCode = 600
)

// Defines values for PostPublisherUserSearchErrorCode.
const (
	PostPublisherUserSearchErrorCodeN2 PostPublisherUserSearchErrorCode = 2
)

// Defines values for PostPublisherUserSearchRequestConvertedTermSharingType.
const (
	PostPublisherUserSearchRequestConvertedTermSharingTypeAll      PostPublisherUserSearchRequestConvertedTermSharingType = "all"
	PostPublisherUserSearchRequestConvertedTermSharingTypeChildren PostPublisherUserSearchRequestConvertedTermSharingType = "children"
	PostPublisherUserSearchRequestConvertedTermSharingTypeParents  PostPublisherUserSearchRequestConvertedTermSharingType = "parents"
)

// Defines values for PostPublisherUserSearchRequestConvertedTermTypes.
const (
	PostPublisherUserSearchRequestConvertedTermTypesN10EmailDomainContract           PostPublisherUserSearchRequestConvertedTermTypes = "10: Email Domain Contract"
	PostPublisherUserSearchRequestConvertedTermTypesN11IPRangeContract               PostPublisherUserSearchRequestConvertedTermTypes = "11: IP Range Contract"
	PostPublisherUserSearchRequestConvertedTermTypesN12Dynamic                       PostPublisherUserSearchRequestConvertedTermTypes = "12: Dynamic"
	PostPublisherUserSearchRequestConvertedTermTypesN13Linked                        PostPublisherUserSearchRequestConvertedTermTypes = "13: Linked"
	PostPublisherUserSearchRequestConvertedTermTypesN1Payment                        PostPublisherUserSearchRequestConvertedTermTypes = "1: Payment"
	PostPublisherUserSearchRequestConvertedTermTypesN2AdView                         PostPublisherUserSearchRequestConvertedTermTypes = "2: Ad View"
	PostPublisherUserSearchRequestConvertedTermTypesN3Registration                   PostPublisherUserSearchRequestConvertedTermTypes = "3: Registration"
	PostPublisherUserSearchRequestConvertedTermTypesN4Newsletter                     PostPublisherUserSearchRequestConvertedTermTypes = "4: Newsletter"
	PostPublisherUserSearchRequestConvertedTermTypesN5External                       PostPublisherUserSearchRequestConvertedTermTypes = "5: External"
	PostPublisherUserSearchRequestConvertedTermTypesN6Custom                         PostPublisherUserSearchRequestConvertedTermTypes = "6: Custom"
	PostPublisherUserSearchRequestConvertedTermTypesN7AccessGranted                  PostPublisherUserSearchRequestConvertedTermTypes = "7: Access Granted"
	PostPublisherUserSearchRequestConvertedTermTypesN8Gift                           PostPublisherUserSearchRequestConvertedTermTypes = "8: Gift"
	PostPublisherUserSearchRequestConvertedTermTypesN9SpecificEmailAddressesContract PostPublisherUserSearchRequestConvertedTermTypes = "9: Specific Email Addresses Contract"
)

// Defines values for PostPublisherUserSearchRequestEmailConfirmationState.
const (
	PostPublisherUserSearchRequestEmailConfirmationStateConfirmed    PostPublisherUserSearchRequestEmailConfirmationState = "confirmed"
	PostPublisherUserSearchRequestEmailConfirmationStatePreConfirmed PostPublisherUserSearchRequestEmailConfirmationState = "pre_confirmed"
	PostPublisherUserSearchRequestEmailConfirmationStateUnconfirmed  PostPublisherUserSearchRequestEmailConfirmationState = "unconfirmed"
)

// Defines values for PostPublisherUserSearchRequestOrderBy.
const (
	PostPublisherUserSearchRequestOrderByAccessCount          PostPublisherUserSearchRequestOrderBy = "accessCount"
	PostPublisherUserSearchRequestOrderByHasIssue             PostPublisherUserSearchRequestOrderBy = "hasIssue"
	PostPublisherUserSearchRequestOrderByHasTrial             PostPublisherUserSearchRequestOrderBy = "hasTrial"
	PostPublisherUserSearchRequestOrderByHasUnresolvedInquiry PostPublisherUserSearchRequestOrderBy = "hasUnresolvedInquiry"
	PostPublisherUserSearchRequestOrderByName                 PostPublisherUserSearchRequestOrderBy = "name"
	PostPublisherUserSearchRequestOrderByNextBill             PostPublisherUserSearchRequestOrderBy = "nextBill"
	PostPublisherUserSearchRequestOrderBySince                PostPublisherUserSearchRequestOrderBy = "since"
	PostPublisherUserSearchRequestOrderBySpentMoney           PostPublisherUserSearchRequestOrderBy = "spentMoney"
)

// Defines values for PostPublisherUserSearchRequestOrderDirection.
const (
	PostPublisherUserSearchRequestOrderDirectionAsc  PostPublisherUserSearchRequestOrderDirection = "asc"
	PostPublisherUserSearchRequestOrderDirectionDesc PostPublisherUserSearchRequestOrderDirection = "desc"
)

// Defines values for PostPublisherUserSearchRequestSource.
const (
	PostPublisherUserSearchRequestSourceCF PostPublisherUserSearchRequestSource = "CF"
	PostPublisherUserSearchRequestSourceVX PostPublisherUserSearchRequestSource = "VX"
)

// Defines values for PostPublisherUserUpdateErrorCode.
const (
	PostPublisherUserUpdateErrorCodeN2    PostPublisherUserUpdateErrorCode = 2
	PostPublisherUserUpdateErrorCodeN2001 PostPublisherUserUpdateErrorCode = 2001
	PostPublisherUserUpdateErrorCodeN2002 PostPublisherUserUpdateErrorCode = 2002
)

// Defines values for PostPublisherVoucherResendErrorCode.
const (
	PostPublisherVoucherResendErrorCodeN1 PostPublisherVoucherResendErrorCode = 1
	PostPublisherVoucherResendErrorCodeN2 PostPublisherVoucherResendErrorCode = 2
)

// Defines values for PostPublisherWebhookSettingsUpdateErrorCode.
const (
	PostPublisherWebhookSettingsUpdateErrorCodeN2    PostPublisherWebhookSettingsUpdateErrorCode = 2
	PostPublisherWebhookSettingsUpdateErrorCodeN4004 PostPublisherWebhookSettingsUpdateErrorCode = 4004
)

// Defines values for PromoCodeState.
const (
	PromoCodeStateActive                    PromoCodeState = "Active"
	PromoCodeStateReservedForDelayedPayment PromoCodeState = "Reserved for delayed payment"
	PromoCodeStateReservedForFreeTrial      PromoCodeState = "Reserved for free trial"
	PromoCodeStateUsed                      PromoCodeState = "Used"
)

// Defines values for PromoCodeStateValue.
const (
	PromoCodeStateValueActive                    PromoCodeStateValue = "active"
	PromoCodeStateValueReservedForDelayedPayment PromoCodeStateValue = "reserved_for_delayed_payment"
	PromoCodeStateValueReservedForFreeTrial      PromoCodeStateValue = "reserved_for_free_trial"
	PromoCodeStateValueUsed                      PromoCodeStateValue = "used"
)

// Defines values for PromotionDiscountType.
const (
	PromotionDiscountTypeFixed      PromotionDiscountType = "fixed"
	PromotionDiscountTypePercentage PromotionDiscountType = "percentage"
)

// Defines values for PromotionStatus.
const (
	PromotionStatusActive  PromotionStatus = "active"
	PromotionStatusExpired PromotionStatus = "expired"
	PromotionStatusNew     PromotionStatus = "new"
)

// Defines values for PromotionTermDependencyType.
const (
	PromotionTermDependencyTypeAll      PromotionTermDependencyType = "all"
	PromotionTermDependencyTypeInclude  PromotionTermDependencyType = "include"
	PromotionTermDependencyTypeUnlocked PromotionTermDependencyType = "unlocked"
)

// Defines values for ResourceBundleType.
const (
	ResourceBundleTypeFixed     ResourceBundleType = "fixed"
	ResourceBundleTypeFixedV2   ResourceBundleType = "fixed_v2"
	ResourceBundleTypeTagged    ResourceBundleType = "tagged"
	ResourceBundleTypeUndefined ResourceBundleType = "undefined"
)

// Defines values for ResourceBundleTypeLabel.
const (
	ResourceBundleTypeLabelFixed     ResourceBundleTypeLabel = "Fixed"
	ResourceBundleTypeLabelFixed20   ResourceBundleTypeLabel = "Fixed 2.0"
	ResourceBundleTypeLabelTagged    ResourceBundleTypeLabel = "Tagged"
	ResourceBundleTypeLabelUndefined ResourceBundleTypeLabel = "Undefined"
)

// Defines values for ResourceType.
const (
	ResourceTypeBundle   ResourceType = "bundle"
	ResourceTypePrint    ResourceType = "print"
	ResourceTypeStandard ResourceType = "standard"
)

// Defines values for ResourceTypeLabel.
const (
	ResourceTypeLabelBundle   ResourceTypeLabel = "Bundle"
	ResourceTypeLabelPrint    ResourceTypeLabel = "Print"
	ResourceTypeLabelStandard ResourceTypeLabel = "Standard"
)

// Defines values for ResourceDtoBundleType.
const (
	ResourceDtoBundleTypeFixed     ResourceDtoBundleType = "fixed"
	ResourceDtoBundleTypeFixedV2   ResourceDtoBundleType = "fixed_v2"
	ResourceDtoBundleTypeTagged    ResourceDtoBundleType = "tagged"
	ResourceDtoBundleTypeUndefined ResourceDtoBundleType = "undefined"
)

// Defines values for ResourceDtoBundleTypeLabel.
const (
	ResourceDtoBundleTypeLabelFixed     ResourceDtoBundleTypeLabel = "Fixed"
	ResourceDtoBundleTypeLabelFixed20   ResourceDtoBundleTypeLabel = "Fixed 2.0"
	ResourceDtoBundleTypeLabelTagged    ResourceDtoBundleTypeLabel = "Tagged"
	ResourceDtoBundleTypeLabelUndefined ResourceDtoBundleTypeLabel = "Undefined"
)

// Defines values for ResourceDtoType.
const (
	ResourceDtoTypeBundle   ResourceDtoType = "bundle"
	ResourceDtoTypePrint    ResourceDtoType = "print"
	ResourceDtoTypeStandard ResourceDtoType = "standard"
)

// Defines values for ResourceDtoTypeLabel.
const (
	ResourceDtoTypeLabelBundle   ResourceDtoTypeLabel = "Bundle"
	ResourceDtoTypeLabelPrint    ResourceDtoTypeLabel = "Print"
	ResourceDtoTypeLabelStandard ResourceDtoTypeLabel = "Standard"
)

// Defines values for ResourceTagType.
const (
	ResourceTagTypeBundle   ResourceTagType = "Bundle"
	ResourceTagTypeNA       ResourceTagType = "NA"
	ResourceTagTypeStandard ResourceTagType = "Standard"
)

// Defines values for SchedulePeriodStatus.
const (
	ACTIVATED      SchedulePeriodStatus = "ACTIVATED"
	ACTIVE         SchedulePeriodStatus = "ACTIVE"
	DELETED        SchedulePeriodStatus = "DELETED"
	ENDED          SchedulePeriodStatus = "ENDED"
	INACTIVE       SchedulePeriodStatus = "INACTIVE"
	NOTACTIVATED   SchedulePeriodStatus = "NOT_ACTIVATED"
	NOTINITIALIZED SchedulePeriodStatus = "NOT_INITIALIZED"
)

// Defines values for SubscriptionUpgradeStatusStatus.
const (
	SubscriptionUpgradeStatusStatusN0 SubscriptionUpgradeStatusStatus = 0
	SubscriptionUpgradeStatusStatusN1 SubscriptionUpgradeStatusStatus = 1
	SubscriptionUpgradeStatusStatusN2 SubscriptionUpgradeStatusStatus = 2
	SubscriptionUpgradeStatusStatusN3 SubscriptionUpgradeStatusStatus = 3
	SubscriptionUpgradeStatusStatusN4 SubscriptionUpgradeStatusStatus = 4
	SubscriptionUpgradeStatusStatusN5 SubscriptionUpgradeStatusStatus = 5
)

// Defines values for TemplateConfigBoilerplateType.
const (
	TemplateConfigBoilerplateTypeBannerUpgrades                   TemplateConfigBoilerplateType = "Banner - Upgrades"
	TemplateConfigBoilerplateTypeBasicTemplateModal               TemplateConfigBoilerplateType = "Basic template modal"
	TemplateConfigBoilerplateTypeCreditCounter                    TemplateConfigBoilerplateType = "Credit counter"
	TemplateConfigBoilerplateTypeCreditRedemption                 TemplateConfigBoilerplateType = "Credit redemption"
	TemplateConfigBoilerplateTypeFinalConfirmation                TemplateConfigBoilerplateType = "Final confirmation"
	TemplateConfigBoilerplateTypeFrictionlessOffer                TemplateConfigBoilerplateType = "Frictionless Offer"
	TemplateConfigBoilerplateTypeGridModal2Upgrades               TemplateConfigBoilerplateType = "Grid modal 2 - Upgrades"
	TemplateConfigBoilerplateTypeGridModal3Upgrades               TemplateConfigBoilerplateType = "Grid modal 3 - Upgrades"
	TemplateConfigBoilerplateTypeHardAdblockerInterceptModal      TemplateConfigBoilerplateType = "Hard adblocker intercept modal"
	TemplateConfigBoilerplateTypeLinkedInBanner                   TemplateConfigBoilerplateType = "LinkedIn Banner"
	TemplateConfigBoilerplateTypeLinkedInFree                     TemplateConfigBoilerplateType = "LinkedIn Free"
	TemplateConfigBoilerplateTypeLinkedInOffer                    TemplateConfigBoilerplateType = "LinkedIn Offer"
	TemplateConfigBoilerplateTypeLinkedInPremium                  TemplateConfigBoilerplateType = "LinkedIn Premium"
	TemplateConfigBoilerplateTypeLostValueChurnPrevention         TemplateConfigBoilerplateType = "Lost value - Churn prevention"
	TemplateConfigBoilerplateTypeMeterExpiredModal                TemplateConfigBoilerplateType = "Meter expired modal"
	TemplateConfigBoilerplateTypeMeterReminderModal               TemplateConfigBoilerplateType = "Meter reminder modal"
	TemplateConfigBoilerplateTypeNewscycle                        TemplateConfigBoilerplateType = "Newscycle"
	TemplateConfigBoilerplateTypeNewsletterSignupModal            TemplateConfigBoilerplateType = "Newsletter signup modal"
	TemplateConfigBoilerplateTypeOfferGridModal                   TemplateConfigBoilerplateType = "Offer grid modal"
	TemplateConfigBoilerplateTypeOfferListModal                   TemplateConfigBoilerplateType = "Offer list modal"
	TemplateConfigBoilerplateTypeOpenPass                         TemplateConfigBoilerplateType = "OpenPass"
	TemplateConfigBoilerplateTypePushEnrollment                   TemplateConfigBoilerplateType = "Push Enrollment"
	TemplateConfigBoilerplateTypeSiteLicensingLandingPage         TemplateConfigBoilerplateType = "Site Licensing Landing Page"
	TemplateConfigBoilerplateTypeSoftAdblockerInterceptModal      TemplateConfigBoilerplateType = "Soft adblocker intercept modal"
	TemplateConfigBoilerplateTypeSubscriptionModalPrompt1Upgrades TemplateConfigBoilerplateType = "Subscription modal prompt 1  - Upgrades"
	TemplateConfigBoilerplateTypeSubscriptionModalPrompt2Upgrades TemplateConfigBoilerplateType = "Subscription modal prompt 2 - Upgrades"
	TemplateConfigBoilerplateTypeSubscriptionPromptModal          TemplateConfigBoilerplateType = "Subscription prompt modal"
	TemplateConfigBoilerplateTypeUpgradeOffer1                    TemplateConfigBoilerplateType = "Upgrade offer 1"
	TemplateConfigBoilerplateTypeUpgradeOffer2                    TemplateConfigBoilerplateType = "Upgrade offer 2"
	TemplateConfigBoilerplateTypeZuora                            TemplateConfigBoilerplateType = "Zuora"
)

// Defines values for TemplateConfigTemplateType.
const (
	TemplateConfigTemplateTypeAlreadyHasAccess                   TemplateConfigTemplateType = "Already has access"
	TemplateConfigTemplateTypeCheckout                           TemplateConfigTemplateType = "Checkout"
	TemplateConfigTemplateTypeCheckoutComponents                 TemplateConfigTemplateType = "Checkout Components"
	TemplateConfigTemplateTypeCheckoutStyle                      TemplateConfigTemplateType = "Checkout Style"
	TemplateConfigTemplateTypeConfirmationScreen                 TemplateConfigTemplateType = "Confirmation screen"
	TemplateConfigTemplateTypeConsentComponents                  TemplateConfigTemplateType = "Consent Components"
	TemplateConfigTemplateTypeCustomLoginregister                TemplateConfigTemplateType = "Custom login/register"
	TemplateConfigTemplateTypeDefaultOffer                       TemplateConfigTemplateType = "Default Offer"
	TemplateConfigTemplateTypeErrorScreen                        TemplateConfigTemplateType = "Error screen"
	TemplateConfigTemplateTypeExternalVerificationComponents     TemplateConfigTemplateType = "External Verification Components"
	TemplateConfigTemplateTypeFinalConfirmation                  TemplateConfigTemplateType = "Final confirmation"
	TemplateConfigTemplateTypeFutureStartComponents              TemplateConfigTemplateType = "Future Start Components"
	TemplateConfigTemplateTypeGiftComponents                     TemplateConfigTemplateType = "Gift Components"
	TemplateConfigTemplateTypeLostValueOffer                     TemplateConfigTemplateType = "Lost value offer"
	TemplateConfigTemplateTypeMyAccountCashPaymentComponents     TemplateConfigTemplateType = "My Account Cash Payment Components"
	TemplateConfigTemplateTypeMyAccountCommonComponentsTemplates TemplateConfigTemplateType = "My Account common components templates"
	TemplateConfigTemplateTypeMyAccountErrorPageMessage          TemplateConfigTemplateType = "My Account error page message"
	TemplateConfigTemplateTypeMyAccountHelpComponents            TemplateConfigTemplateType = "My Account Help Components"
	TemplateConfigTemplateTypeMyAccountLayout                    TemplateConfigTemplateType = "My Account layout"
	TemplateConfigTemplateTypeMyAccountLibraryComponents         TemplateConfigTemplateType = "My Account Library Components"
	TemplateConfigTemplateTypeMyAccountLicensingComponents       TemplateConfigTemplateType = "My Account Licensing Components"
	TemplateConfigTemplateTypeMyAccountPaymentsComponents        TemplateConfigTemplateType = "My Account Payments Components"
	TemplateConfigTemplateTypeMyAccountPianoIdComponents         TemplateConfigTemplateType = "My Account PianoId Components"
	TemplateConfigTemplateTypeMyAccountStyle                     TemplateConfigTemplateType = "My Account Style"
	TemplateConfigTemplateTypeMyAccountTransactionsComponents    TemplateConfigTemplateType = "My Account Transactions Components"
	TemplateConfigTemplateTypeMyAccountUserProfileComponents     TemplateConfigTemplateType = "My Account User Profile Components"
	TemplateConfigTemplateTypeMyAccountVoucherComponents         TemplateConfigTemplateType = "My Account Voucher Components"
	TemplateConfigTemplateTypeMyAccountWalletComponents          TemplateConfigTemplateType = "My Account Wallet Components"
	TemplateConfigTemplateTypeN3dBankSecureComponents            TemplateConfigTemplateType = "3d Bank secure components"
	TemplateConfigTemplateTypeNewscycleOffer                     TemplateConfigTemplateType = "Newscycle offer"
	TemplateConfigTemplateTypeNewsletterSignup                   TemplateConfigTemplateType = "Newsletter signup"
	TemplateConfigTemplateTypePaymentComponents                  TemplateConfigTemplateType = "Payment Components"
	TemplateConfigTemplateTypePianoID2FADigitalCode              TemplateConfigTemplateType = "Piano ID 2FA Digital code"
	TemplateConfigTemplateTypePianoIDAliasLogin                  TemplateConfigTemplateType = "Piano ID Alias login"
	TemplateConfigTemplateTypePianoIDCustomForm                  TemplateConfigTemplateType = "Piano ID custom form"
	TemplateConfigTemplateTypePianoIDDigitalCode                 TemplateConfigTemplateType = "Piano ID Digital code"
	TemplateConfigTemplateTypePianoIDEmailConfirmationRequired   TemplateConfigTemplateType = "Piano ID email confirmation required"
	TemplateConfigTemplateTypePianoIDEmailConfirmationView       TemplateConfigTemplateType = "Piano ID email confirmation view"
	TemplateConfigTemplateTypePianoIDEmailIsNotConfirmed         TemplateConfigTemplateType = "Piano ID email is not confirmed"
	TemplateConfigTemplateTypePianoIDGenericErrorPage            TemplateConfigTemplateType = "Piano ID generic error page"
	TemplateConfigTemplateTypePianoIDInitiatePasswordReset       TemplateConfigTemplateType = "Piano ID initiate password reset"
	TemplateConfigTemplateTypePianoIDLayout                      TemplateConfigTemplateType = "Piano ID layout"
	TemplateConfigTemplateTypePianoIDLayoutGMSSO                 TemplateConfigTemplateType = "Piano ID layout GM SSO"
	TemplateConfigTemplateTypePianoIDLoginConfirmPage            TemplateConfigTemplateType = "Piano ID login confirm page"
	TemplateConfigTemplateTypePianoIDLoginPage                   TemplateConfigTemplateType = "Piano ID login page"
	TemplateConfigTemplateTypePianoIDNewPasswordPage             TemplateConfigTemplateType = "Piano ID new password page"
	TemplateConfigTemplateTypePianoIDNewsletters                 TemplateConfigTemplateType = "Piano ID newsletters"
	TemplateConfigTemplateTypePianoIDPasswordlessLoginPage       TemplateConfigTemplateType = "Piano ID passwordless login page"
	TemplateConfigTemplateTypePianoIDPhoneNumberIsNotConfirmed   TemplateConfigTemplateType = "Piano ID Phone number is not confirmed"
	TemplateConfigTemplateTypePianoIDPhoneNumberUpdate           TemplateConfigTemplateType = "Piano ID Phone number Update"
	TemplateConfigTemplateTypePianoIDProfileInMyAccount          TemplateConfigTemplateType = "Piano ID profile in My Account"
	TemplateConfigTemplateTypePianoIDRegisterConfirmPage         TemplateConfigTemplateType = "Piano ID register confirm page"
	TemplateConfigTemplateTypePianoIDRegisterPage                TemplateConfigTemplateType = "Piano ID register page"
	TemplateConfigTemplateTypePianoIDSSOConfirmBefore            TemplateConfigTemplateType = "Piano ID SSO confirm before"
	TemplateConfigTemplateTypePianoIDSSOConfirmPage              TemplateConfigTemplateType = "Piano ID SSO confirm page"
	TemplateConfigTemplateTypePrintAddressCollectScreen          TemplateConfigTemplateType = "Print address collect screen"
	TemplateConfigTemplateTypePromotionComponents                TemplateConfigTemplateType = "Promotion Components"
	TemplateConfigTemplateTypeProviderComponents                 TemplateConfigTemplateType = "Provider Components"
	TemplateConfigTemplateTypePushSignup                         TemplateConfigTemplateType = "Push signup"
	TemplateConfigTemplateTypeReactivateSubscriptionComponents   TemplateConfigTemplateType = "Reactivate subscription components"
	TemplateConfigTemplateTypeReceipt                            TemplateConfigTemplateType = "Receipt"
	TemplateConfigTemplateTypeRedemptionComponents               TemplateConfigTemplateType = "Redemption Components"
	TemplateConfigTemplateTypeSharedSubscriptionComponents       TemplateConfigTemplateType = "Shared subscription components"
	TemplateConfigTemplateTypeSiteLicensingContractList          TemplateConfigTemplateType = "Site Licensing Contract List"
	TemplateConfigTemplateTypeSiteLicensingLandingPage           TemplateConfigTemplateType = "Site Licensing Landing Page"
	TemplateConfigTemplateTypeSiteLicensingRedeemResult          TemplateConfigTemplateType = "Site Licensing Redeem Result"
	TemplateConfigTemplateTypeTemplate                           TemplateConfigTemplateType = "Template"
	TemplateConfigTemplateTypeTermComponents                     TemplateConfigTemplateType = "Term Components"
	TemplateConfigTemplateTypeUpgradeAuthenticationComponents    TemplateConfigTemplateType = "Upgrade authentication components"
	TemplateConfigTemplateTypeUpgradeComponents                  TemplateConfigTemplateType = "Upgrade components"
	TemplateConfigTemplateTypeUpgradeOffer                       TemplateConfigTemplateType = "Upgrade offer"
	TemplateConfigTemplateTypeZuoraOffer                         TemplateConfigTemplateType = "Zuora offer"
)

// Defines values for TermExternalApiSource.
const (
	TermExternalApiSourceN1  TermExternalApiSource = 1
	TermExternalApiSourceN10 TermExternalApiSource = 10
	TermExternalApiSourceN2  TermExternalApiSource = 2
	TermExternalApiSourceN3  TermExternalApiSource = 3
	TermExternalApiSourceN4  TermExternalApiSource = 4
	TermExternalApiSourceN5  TermExternalApiSource = 5
	TermExternalApiSourceN6  TermExternalApiSource = 6
	TermExternalApiSourceN7  TermExternalApiSource = 7
	TermExternalApiSourceN8  TermExternalApiSource = 8
	TermExternalApiSourceN9  TermExternalApiSource = 9
)

// Defines values for TermType.
const (
	TermTypeAdview                         TermType = "adview"
	TermTypeCustom                         TermType = "custom"
	TermTypeDynamic                        TermType = "dynamic"
	TermTypeEmailDomainContract            TermType = "email_domain_contract"
	TermTypeExternal                       TermType = "external"
	TermTypeGift                           TermType = "gift"
	TermTypeGrantAccess                    TermType = "grant_access"
	TermTypeIpRangeContract                TermType = "ip_range_contract"
	TermTypeLinked                         TermType = "linked"
	TermTypeNewsletter                     TermType = "newsletter"
	TermTypePayment                        TermType = "payment"
	TermTypeRegistration                   TermType = "registration"
	TermTypeSpecificEmailAddressesContract TermType = "specific_email_addresses_contract"
)

// Defines values for TermTypeName.
const (
	TermTypeNameAccessGranted                  TermTypeName = "Access Granted"
	TermTypeNameAdView                         TermTypeName = "Ad View"
	TermTypeNameCustom                         TermTypeName = "Custom"
	TermTypeNameDynamic                        TermTypeName = "Dynamic"
	TermTypeNameEmailDomainContract            TermTypeName = "Email Domain Contract"
	TermTypeNameExternal                       TermTypeName = "External"
	TermTypeNameGift                           TermTypeName = "Gift"
	TermTypeNameIPRangeContract                TermTypeName = "IP Range Contract"
	TermTypeNameLinked                         TermTypeName = "Linked"
	TermTypeNameNewsletter                     TermTypeName = "Newsletter"
	TermTypeNamePayment                        TermTypeName = "Payment"
	TermTypeNameRegistration                   TermTypeName = "Registration"
	TermTypeNameSpecificEmailAddressesContract TermTypeName = "Specific Email Addresses Contract"
)

// Defines values for TermChangeOptionBillingTiming.
const (
	TermChangeOptionBillingTimingN0 TermChangeOptionBillingTiming = "0"
	TermChangeOptionBillingTimingN1 TermChangeOptionBillingTiming = "1"
	TermChangeOptionBillingTimingN2 TermChangeOptionBillingTiming = "2"
	TermChangeOptionBillingTimingN3 TermChangeOptionBillingTiming = "3"
)

// Defines values for TermConversionType.
const (
	TermConversionTypeAdview                                                     TermConversionType = "Adview"
	TermConversionTypeBill                                                       TermConversionType = "Bill"
	TermConversionTypeCustom                                                     TermConversionType = "Custom"
	TermConversionTypeDeferredDynamicSubscriptionActivation                      TermConversionType = "Deferred dynamic subscription activation"
	TermConversionTypeDeferredPaymentSubscriptionActivation                      TermConversionType = "Deferred payment subscription activation"
	TermConversionTypeDynamicSubscriptionExternalRenewal                         TermConversionType = "Dynamic subscription external renewal"
	TermConversionTypeDynamicSubscriptionExternalRenewalWithGracePeriod          TermConversionType = "Dynamic subscription external renewal with grace period"
	TermConversionTypeDynamicSubscriptionInternalRenewal                         TermConversionType = "Dynamic subscription internal renewal"
	TermConversionTypeDynamicSubscriptionInternalRenewalWithGracePeriod          TermConversionType = "Dynamic subscription internal renewal with grace period"
	TermConversionTypeDynamicTermDeferredPurchase                                TermConversionType = "Dynamic term deferred purchase"
	TermConversionTypeDynamicTermPurchase                                        TermConversionType = "Dynamic term purchase"
	TermConversionTypeExternal                                                   TermConversionType = "External"
	TermConversionTypeExternalRenewal                                            TermConversionType = "External renewal"
	TermConversionTypeFreePromoRedemption                                        TermConversionType = "Free promo redemption"
	TermConversionTypeFreeRenewal                                                TermConversionType = "Free renewal"
	TermConversionTypeGiftPurchased                                              TermConversionType = "Gift purchased"
	TermConversionTypeGiftReceived                                               TermConversionType = "Gift received"
	TermConversionTypeGrantAccess                                                TermConversionType = "Grant access"
	TermConversionTypeLicenseeContractRedemption                                 TermConversionType = "Licensee contract redemption"
	TermConversionTypeLicenseeContractRenewal                                    TermConversionType = "Licensee contract renewal"
	TermConversionTypeLink                                                       TermConversionType = "Link"
	TermConversionTypePayment                                                    TermConversionType = "Payment"
	TermConversionTypePaymentSubscriptionRenewalWithGracePeriod                  TermConversionType = "Payment subscription renewal with grace period"
	TermConversionTypeProvisional                                                TermConversionType = "Provisional"
	TermConversionTypeRegistration                                               TermConversionType = "Registration"
	TermConversionTypeRenewal                                                    TermConversionType = "Renewal"
	TermConversionTypeSharedSubscriptionChildGrandAccess                         TermConversionType = "Shared subscription child grand access"
	TermConversionTypeSharedSubscriptionChildRenew                               TermConversionType = "Shared subscription child renew"
	TermConversionTypeSubscription                                               TermConversionType = "Subscription"
	TermConversionTypeSubscriptionDeferredStart                                  TermConversionType = "Subscription deferred start"
	TermConversionTypeTermConversionToWaitInstantPaymentNotification             TermConversionType = "Term conversion to wait Instant Payment Notification"
	TermConversionTypeTheDynamicSubscriptionHasBeenCreatedAsTheResultOfTheImport TermConversionType = "The dynamic subscription has been created as the result of the import"
	TermConversionTypeUnknown                                                    TermConversionType = "Unknown"
	TermConversionTypeUpgradeTerm                                                TermConversionType = "Upgrade term"
	TermConversionTypeUpgradeTermWithGracePeriod                                 TermConversionType = "Upgrade term with grace period"
	TermConversionTypeUpgradeToDynamicTerm                                       TermConversionType = "Upgrade to dynamic term"
	TermConversionTypeUpgradeToDynamicTermWithGracePeriod                        TermConversionType = "Upgrade to dynamic term with grace period"
)

// Defines values for TermConversionDTOType.
const (
	TermConversionDTOTypeAdview                                                     TermConversionDTOType = "Adview"
	TermConversionDTOTypeBill                                                       TermConversionDTOType = "Bill"
	TermConversionDTOTypeCustom                                                     TermConversionDTOType = "Custom"
	TermConversionDTOTypeDeferredDynamicSubscriptionActivation                      TermConversionDTOType = "Deferred dynamic subscription activation"
	TermConversionDTOTypeDeferredPaymentSubscriptionActivation                      TermConversionDTOType = "Deferred payment subscription activation"
	TermConversionDTOTypeDynamicSubscriptionExternalRenewal                         TermConversionDTOType = "Dynamic subscription external renewal"
	TermConversionDTOTypeDynamicSubscriptionExternalRenewalWithGracePeriod          TermConversionDTOType = "Dynamic subscription external renewal with grace period"
	TermConversionDTOTypeDynamicSubscriptionInternalRenewal                         TermConversionDTOType = "Dynamic subscription internal renewal"
	TermConversionDTOTypeDynamicSubscriptionInternalRenewalWithGracePeriod          TermConversionDTOType = "Dynamic subscription internal renewal with grace period"
	TermConversionDTOTypeDynamicTermDeferredPurchase                                TermConversionDTOType = "Dynamic term deferred purchase"
	TermConversionDTOTypeDynamicTermPurchase                                        TermConversionDTOType = "Dynamic term purchase"
	TermConversionDTOTypeExternal                                                   TermConversionDTOType = "External"
	TermConversionDTOTypeExternalRenewal                                            TermConversionDTOType = "External renewal"
	TermConversionDTOTypeFreePromoRedemption                                        TermConversionDTOType = "Free promo redemption"
	TermConversionDTOTypeFreeRenewal                                                TermConversionDTOType = "Free renewal"
	TermConversionDTOTypeGiftPurchased                                              TermConversionDTOType = "Gift purchased"
	TermConversionDTOTypeGiftReceived                                               TermConversionDTOType = "Gift received"
	TermConversionDTOTypeGrantAccess                                                TermConversionDTOType = "Grant access"
	TermConversionDTOTypeLicenseeContractRedemption                                 TermConversionDTOType = "Licensee contract redemption"
	TermConversionDTOTypeLicenseeContractRenewal                                    TermConversionDTOType = "Licensee contract renewal"
	TermConversionDTOTypeLink                                                       TermConversionDTOType = "Link"
	TermConversionDTOTypePayment                                                    TermConversionDTOType = "Payment"
	TermConversionDTOTypePaymentSubscriptionRenewalWithGracePeriod                  TermConversionDTOType = "Payment subscription renewal with grace period"
	TermConversionDTOTypeProvisional                                                TermConversionDTOType = "Provisional"
	TermConversionDTOTypeRegistration                                               TermConversionDTOType = "Registration"
	TermConversionDTOTypeRenewal                                                    TermConversionDTOType = "Renewal"
	TermConversionDTOTypeSharedSubscriptionChildGrandAccess                         TermConversionDTOType = "Shared subscription child grand access"
	TermConversionDTOTypeSharedSubscriptionChildRenew                               TermConversionDTOType = "Shared subscription child renew"
	TermConversionDTOTypeSubscription                                               TermConversionDTOType = "Subscription"
	TermConversionDTOTypeSubscriptionDeferredStart                                  TermConversionDTOType = "Subscription deferred start"
	TermConversionDTOTypeTermConversionToWaitInstantPaymentNotification             TermConversionDTOType = "Term conversion to wait Instant Payment Notification"
	TermConversionDTOTypeTheDynamicSubscriptionHasBeenCreatedAsTheResultOfTheImport TermConversionDTOType = "The dynamic subscription has been created as the result of the import"
	TermConversionDTOTypeUnknown                                                    TermConversionDTOType = "Unknown"
	TermConversionDTOTypeUpgradeTerm                                                TermConversionDTOType = "Upgrade term"
	TermConversionDTOTypeUpgradeTermWithGracePeriod                                 TermConversionDTOType = "Upgrade term with grace period"
	TermConversionDTOTypeUpgradeToDynamicTerm                                       TermConversionDTOType = "Upgrade to dynamic term"
	TermConversionDTOTypeUpgradeToDynamicTermWithGracePeriod                        TermConversionDTOType = "Upgrade to dynamic term with grace period"
)

// Defines values for TermConversionDataBrowser.
const (
	TermConversionDataBrowserBot     TermConversionDataBrowser = "bot"
	TermConversionDataBrowserChrome  TermConversionDataBrowser = "chrome"
	TermConversionDataBrowserFirefox TermConversionDataBrowser = "firefox"
	TermConversionDataBrowserIe      TermConversionDataBrowser = "ie"
	TermConversionDataBrowserMisc    TermConversionDataBrowser = "misc"
	TermConversionDataBrowserOpera   TermConversionDataBrowser = "opera"
	TermConversionDataBrowserSafari  TermConversionDataBrowser = "safari"
)

// Defines values for TermConversionDataOperatingSystem.
const (
	TermConversionDataOperatingSystemAndroid       TermConversionDataOperatingSystem = "android"
	TermConversionDataOperatingSystemBot           TermConversionDataOperatingSystem = "bot"
	TermConversionDataOperatingSystemIos           TermConversionDataOperatingSystem = "ios"
	TermConversionDataOperatingSystemLinux         TermConversionDataOperatingSystem = "linux"
	TermConversionDataOperatingSystemMac           TermConversionDataOperatingSystem = "mac"
	TermConversionDataOperatingSystemOther         TermConversionDataOperatingSystem = "other"
	TermConversionDataOperatingSystemOtherMobile   TermConversionDataOperatingSystem = "other_mobile"
	TermConversionDataOperatingSystemOthersDesktop TermConversionDataOperatingSystem = "others_desktop"
	TermConversionDataOperatingSystemWindows       TermConversionDataOperatingSystem = "windows"
)

// Defines values for TermConversionDataPlatform.
const (
	Bot         TermConversionDataPlatform = "bot"
	Desktop     TermConversionDataPlatform = "desktop"
	Dmr         TermConversionDataPlatform = "dmr"
	GameConsole TermConversionDataPlatform = "game_console"
	Mobile      TermConversionDataPlatform = "mobile"
	Other       TermConversionDataPlatform = "other"
	Tablet      TermConversionDataPlatform = "tablet"
	Wearable    TermConversionDataPlatform = "wearable"
)

// Defines values for UserAddressHistoryRevisionType.
const (
	UserAddressHistoryRevisionTypeN0 UserAddressHistoryRevisionType = 0
	UserAddressHistoryRevisionTypeN1 UserAddressHistoryRevisionType = 1
)

// Defines values for UserBillingAddressType.
const (
	UserBillingAddressTypeN1 UserBillingAddressType = "1"
	UserBillingAddressTypeN2 UserBillingAddressType = "2"
	UserBillingAddressTypeN3 UserBillingAddressType = "3"
)

// Defines values for UserNoteType.
const (
	Text UserNoteType = "text"
)

// Defines values for UserPaymentSourceId.
const (
	UserPaymentSourceIdN0   UserPaymentSourceId = 0
	UserPaymentSourceIdN1   UserPaymentSourceId = 1
	UserPaymentSourceIdN100 UserPaymentSourceId = 100
	UserPaymentSourceIdN11  UserPaymentSourceId = 11
	UserPaymentSourceIdN12  UserPaymentSourceId = 12
	UserPaymentSourceIdN13  UserPaymentSourceId = 13
	UserPaymentSourceIdN14  UserPaymentSourceId = 14
	UserPaymentSourceIdN15  UserPaymentSourceId = 15
	UserPaymentSourceIdN16  UserPaymentSourceId = 16
	UserPaymentSourceIdN17  UserPaymentSourceId = 17
	UserPaymentSourceIdN18  UserPaymentSourceId = 18
	UserPaymentSourceIdN19  UserPaymentSourceId = 19
	UserPaymentSourceIdN2   UserPaymentSourceId = 2
	UserPaymentSourceIdN20  UserPaymentSourceId = 20
	UserPaymentSourceIdN21  UserPaymentSourceId = 21
	UserPaymentSourceIdN22  UserPaymentSourceId = 22
	UserPaymentSourceIdN23  UserPaymentSourceId = 23
	UserPaymentSourceIdN24  UserPaymentSourceId = 24
	UserPaymentSourceIdN25  UserPaymentSourceId = 25
	UserPaymentSourceIdN26  UserPaymentSourceId = 26
	UserPaymentSourceIdN27  UserPaymentSourceId = 27
	UserPaymentSourceIdN28  UserPaymentSourceId = 28
	UserPaymentSourceIdN29  UserPaymentSourceId = 29
	UserPaymentSourceIdN3   UserPaymentSourceId = 3
	UserPaymentSourceIdN30  UserPaymentSourceId = 30
	UserPaymentSourceIdN31  UserPaymentSourceId = 31
	UserPaymentSourceIdN32  UserPaymentSourceId = 32
	UserPaymentSourceIdN33  UserPaymentSourceId = 33
	UserPaymentSourceIdN34  UserPaymentSourceId = 34
	UserPaymentSourceIdN35  UserPaymentSourceId = 35
	UserPaymentSourceIdN36  UserPaymentSourceId = 36
	UserPaymentSourceIdN37  UserPaymentSourceId = 37
	UserPaymentSourceIdN38  UserPaymentSourceId = 38
	UserPaymentSourceIdN39  UserPaymentSourceId = 39
	UserPaymentSourceIdN4   UserPaymentSourceId = 4
	UserPaymentSourceIdN40  UserPaymentSourceId = 40
	UserPaymentSourceIdN41  UserPaymentSourceId = 41
	UserPaymentSourceIdN42  UserPaymentSourceId = 42
	UserPaymentSourceIdN43  UserPaymentSourceId = 43
	UserPaymentSourceIdN44  UserPaymentSourceId = 44
	UserPaymentSourceIdN45  UserPaymentSourceId = 45
	UserPaymentSourceIdN46  UserPaymentSourceId = 46
	UserPaymentSourceIdN47  UserPaymentSourceId = 47
	UserPaymentSourceIdN48  UserPaymentSourceId = 48
	UserPaymentSourceIdN49  UserPaymentSourceId = 49
	UserPaymentSourceIdN5   UserPaymentSourceId = 5
	UserPaymentSourceIdN50  UserPaymentSourceId = 50
	UserPaymentSourceIdN51  UserPaymentSourceId = 51
	UserPaymentSourceIdN52  UserPaymentSourceId = 52
	UserPaymentSourceIdN53  UserPaymentSourceId = 53
	UserPaymentSourceIdN54  UserPaymentSourceId = 54
	UserPaymentSourceIdN55  UserPaymentSourceId = 55
	UserPaymentSourceIdN56  UserPaymentSourceId = 56
	UserPaymentSourceIdN57  UserPaymentSourceId = 57
	UserPaymentSourceIdN59  UserPaymentSourceId = 59
	UserPaymentSourceIdN6   UserPaymentSourceId = 6
	UserPaymentSourceIdN60  UserPaymentSourceId = 60
	UserPaymentSourceIdN61  UserPaymentSourceId = 61
	UserPaymentSourceIdN62  UserPaymentSourceId = 62
	UserPaymentSourceIdN63  UserPaymentSourceId = 63
	UserPaymentSourceIdN64  UserPaymentSourceId = 64
	UserPaymentSourceIdN65  UserPaymentSourceId = 65
	UserPaymentSourceIdN66  UserPaymentSourceId = 66
	UserPaymentSourceIdN67  UserPaymentSourceId = 67
	UserPaymentSourceIdN68  UserPaymentSourceId = 68
	UserPaymentSourceIdN69  UserPaymentSourceId = 69
	UserPaymentSourceIdN7   UserPaymentSourceId = 7
	UserPaymentSourceIdN70  UserPaymentSourceId = 70
	UserPaymentSourceIdN71  UserPaymentSourceId = 71
	UserPaymentSourceIdN72  UserPaymentSourceId = 72
	UserPaymentSourceIdN73  UserPaymentSourceId = 73
	UserPaymentSourceIdN74  UserPaymentSourceId = 74
	UserPaymentSourceIdN75  UserPaymentSourceId = 75
	UserPaymentSourceIdN77  UserPaymentSourceId = 77
	UserPaymentSourceIdN78  UserPaymentSourceId = 78
	UserPaymentSourceIdN79  UserPaymentSourceId = 79
	UserPaymentSourceIdN8   UserPaymentSourceId = 8
	UserPaymentSourceIdN80  UserPaymentSourceId = 80
	UserPaymentSourceIdN9   UserPaymentSourceId = 9
)

// Defines values for UserPaymentSourceName.
const (
	UserPaymentSourceNameA             UserPaymentSourceName = "A"
	UserPaymentSourceNameAP            UserPaymentSourceName = "AP"
	UserPaymentSourceNameAPBT          UserPaymentSourceName = "APBT"
	UserPaymentSourceNameAPPW          UserPaymentSourceName = "APPW"
	UserPaymentSourceNameAPSS          UserPaymentSourceName = "APSS"
	UserPaymentSourceNameAPSTRP        UserPaymentSourceName = "APSTRP"
	UserPaymentSourceNameBCC           UserPaymentSourceName = "BCC"
	UserPaymentSourceNameBT            UserPaymentSourceName = "BT"
	UserPaymentSourceNameCB            UserPaymentSourceName = "CB"
	UserPaymentSourceNameCGCC          UserPaymentSourceName = "CG_CC"
	UserPaymentSourceNameCHASE         UserPaymentSourceName = "CHASE"
	UserPaymentSourceNameCYBS          UserPaymentSourceName = "CYBS"
	UserPaymentSourceNameCYBSTMS       UserPaymentSourceName = "CYBS_TMS"
	UserPaymentSourceNameDT            UserPaymentSourceName = "DT"
	UserPaymentSourceNameDTAP          UserPaymentSourceName = "DTAP"
	UserPaymentSourceNameDTGP          UserPaymentSourceName = "DTGP"
	UserPaymentSourceNameDTPF          UserPaymentSourceName = "DT_PF"
	UserPaymentSourceNameDTPP          UserPaymentSourceName = "DTPP"
	UserPaymentSourceNameDTTW          UserPaymentSourceName = "DTTW"
	UserPaymentSourceNameDW            UserPaymentSourceName = "DW"
	UserPaymentSourceNameEC            UserPaymentSourceName = "EC"
	UserPaymentSourceNameEDGPW         UserPaymentSourceName = "EDG_PW"
	UserPaymentSourceNameEGN           UserPaymentSourceName = "EGN"
	UserPaymentSourceNameEP            UserPaymentSourceName = "EP"
	UserPaymentSourceNameEPBB          UserPaymentSourceName = "EP_BB"
	UserPaymentSourceNameEPDD          UserPaymentSourceName = "EP_DD"
	UserPaymentSourceNameEPMB          UserPaymentSourceName = "EP_MB"
	UserPaymentSourceNameEPMBWAY       UserPaymentSourceName = "EP_MBWAY"
	UserPaymentSourceNameEPP           UserPaymentSourceName = "EPP"
	UserPaymentSourceNameG             UserPaymentSourceName = "G"
	UserPaymentSourceNameGCDD          UserPaymentSourceName = "GC_DD"
	UserPaymentSourceNameGCDI          UserPaymentSourceName = "GC_DI"
	UserPaymentSourceNameGMO           UserPaymentSourceName = "GMO"
	UserPaymentSourceNameGMOAU         UserPaymentSourceName = "GMO_AU"
	UserPaymentSourceNameGMODCM        UserPaymentSourceName = "GMO_DCM"
	UserPaymentSourceNameGMOSB         UserPaymentSourceName = "GMO_SB"
	UserPaymentSourceNameGPBT          UserPaymentSourceName = "GPBT"
	UserPaymentSourceNameINBAF         UserPaymentSourceName = "IN_BA_F"
	UserPaymentSourceNameINBAS         UserPaymentSourceName = "IN_BA_S"
	UserPaymentSourceNameKLRN          UserPaymentSourceName = "KLRN"
	UserPaymentSourceNameOBI           UserPaymentSourceName = "OBI"
	UserPaymentSourceNameOBIPP         UserPaymentSourceName = "OBI_PP"
	UserPaymentSourceNameOCP           UserPaymentSourceName = "OCP"
	UserPaymentSourceNameONET          UserPaymentSourceName = "ONET"
	UserPaymentSourceNamePPBT          UserPaymentSourceName = "PPBT"
	UserPaymentSourceNamePPCP          UserPaymentSourceName = "PPCP"
	UserPaymentSourceNamePPEC          UserPaymentSourceName = "PP_EC"
	UserPaymentSourceNamePTEZ          UserPaymentSourceName = "PTEZ"
	UserPaymentSourceNamePUARGENTINACC UserPaymentSourceName = "PU_ARGENTINA_CC"
	UserPaymentSourceNamePUBRAZILCC    UserPaymentSourceName = "PU_BRAZIL_CC"
	UserPaymentSourceNamePUBRBB        UserPaymentSourceName = "PU_BR_BB"
	UserPaymentSourceNamePUCHILECC     UserPaymentSourceName = "PU_CHILE_CC"
	UserPaymentSourceNamePUCOLOMBIACC  UserPaymentSourceName = "PU_COLOMBIA_CC"
	UserPaymentSourceNamePUCOPSE       UserPaymentSourceName = "PU_CO_PSE"
	UserPaymentSourceNamePUINCC        UserPaymentSourceName = "PU_IN_CC"
	UserPaymentSourceNamePUINDIACC     UserPaymentSourceName = "PU_INDIA_CC"
	UserPaymentSourceNamePUINNB        UserPaymentSourceName = "PU_IN_NB"
	UserPaymentSourceNamePUINUPI       UserPaymentSourceName = "PU_IN_UPI"
	UserPaymentSourceNamePUPERUCC      UserPaymentSourceName = "PU_PERU_CC"
	UserPaymentSourceNameSONY          UserPaymentSourceName = "SONY"
	UserPaymentSourceNameSPRBN         UserPaymentSourceName = "SPR_BN"
	UserPaymentSourceNameSPRD          UserPaymentSourceName = "SPRD"
	UserPaymentSourceNameSPROP         UserPaymentSourceName = "SPR_OP"
	UserPaymentSourceNameSPRPULAT      UserPaymentSourceName = "SPR_PU_LAT"
	UserPaymentSourceNameSPRSTCC       UserPaymentSourceName = "SPR_ST_CC"
	UserPaymentSourceNameSTRP          UserPaymentSourceName = "STRP"
	UserPaymentSourceNameSTRPEL        UserPaymentSourceName = "STRP_EL"
	UserPaymentSourceNameTP            UserPaymentSourceName = "TP"
	UserPaymentSourceNameVIPPS         UserPaymentSourceName = "VIPPS"
	UserPaymentSourceNameVLG           UserPaymentSourceName = "VLG"
	UserPaymentSourceNameWC            UserPaymentSourceName = "WC"
	UserPaymentSourceNameWPCCTOK       UserPaymentSourceName = "WP_CC_TOK"
	UserPaymentSourceNameWPELV         UserPaymentSourceName = "WP_ELV"
	UserPaymentSourceNameWPHPP         UserPaymentSourceName = "WP_HPP"
	UserPaymentSourceNameWPID          UserPaymentSourceName = "WP_ID"
	UserPaymentSourceNameWPPP          UserPaymentSourceName = "WP_PP"
	UserPaymentSourceNameX             UserPaymentSourceName = "X"
	UserPaymentSourceNameZ             UserPaymentSourceName = "Z"
	UserPaymentSourceNameZLK           UserPaymentSourceName = "ZLK"
)

// Defines values for UserPaymentStatus.
const (
	UserPaymentStatusAborted         UserPaymentStatus = "aborted"
	UserPaymentStatusCanceled        UserPaymentStatus = "canceled"
	UserPaymentStatusCompleted       UserPaymentStatus = "completed"
	UserPaymentStatusDisputed        UserPaymentStatus = "disputed"
	UserPaymentStatusInitiated       UserPaymentStatus = "initiated"
	UserPaymentStatusPending         UserPaymentStatus = "pending"
	UserPaymentStatusRefundRequested UserPaymentStatus = "refund requested"
	UserPaymentStatusRefunded        UserPaymentStatus = "refunded"
	UserPaymentStatusVerified        UserPaymentStatus = "verified"
)

// Defines values for UserPaymentStatusValue.
const (
	UserPaymentStatusValueN0 UserPaymentStatusValue = 0
	UserPaymentStatusValueN1 UserPaymentStatusValue = 1
	UserPaymentStatusValueN2 UserPaymentStatusValue = 2
	UserPaymentStatusValueN3 UserPaymentStatusValue = 3
	UserPaymentStatusValueN4 UserPaymentStatusValue = 4
	UserPaymentStatusValueN5 UserPaymentStatusValue = 5
	UserPaymentStatusValueN6 UserPaymentStatusValue = 6
	UserPaymentStatusValueN7 UserPaymentStatusValue = 7
	UserPaymentStatusValueN8 UserPaymentStatusValue = 8
)

// Defines values for UserPaymentInfoPaymentMethod.
const (
	UserPaymentInfoPaymentMethodACH UserPaymentInfoPaymentMethod = "ACH"
	UserPaymentInfoPaymentMethodBD  UserPaymentInfoPaymentMethod = "BD"
	UserPaymentInfoPaymentMethodBI  UserPaymentInfoPaymentMethod = "BI"
	UserPaymentInfoPaymentMethodBP  UserPaymentInfoPaymentMethod = "BP"
	UserPaymentInfoPaymentMethodBR  UserPaymentInfoPaymentMethod = "BR"
	UserPaymentInfoPaymentMethodCC  UserPaymentInfoPaymentMethod = "CC"
	UserPaymentInfoPaymentMethodD   UserPaymentInfoPaymentMethod = "D"
	UserPaymentInfoPaymentMethodEXT UserPaymentInfoPaymentMethod = "EXT"
	UserPaymentInfoPaymentMethodINV UserPaymentInfoPaymentMethod = "INV"
	UserPaymentInfoPaymentMethodMP  UserPaymentInfoPaymentMethod = "MP"
	UserPaymentInfoPaymentMethodW   UserPaymentInfoPaymentMethod = "W"
)

// Defines values for UserPaymentInfoPaymentType.
const (
	UserPaymentInfoPaymentTypeACCT  UserPaymentInfoPaymentType = "ACCT"
	UserPaymentInfoPaymentTypeACH   UserPaymentInfoPaymentType = "ACH"
	UserPaymentInfoPaymentTypeAIRP  UserPaymentInfoPaymentType = "AIRP"
	UserPaymentInfoPaymentTypeAMEX  UserPaymentInfoPaymentType = "AMEX"
	UserPaymentInfoPaymentTypeAPPAY UserPaymentInfoPaymentType = "APPAY"
	UserPaymentInfoPaymentTypeAUR   UserPaymentInfoPaymentType = "AUR"
	UserPaymentInfoPaymentTypeBACS  UserPaymentInfoPaymentType = "BACS"
	UserPaymentInfoPaymentTypeBANCT UserPaymentInfoPaymentType = "BANCT"
	UserPaymentInfoPaymentTypeBCRD  UserPaymentInfoPaymentType = "BCRD"
	UserPaymentInfoPaymentTypeBCSNZ UserPaymentInfoPaymentType = "BCSNZ"
	UserPaymentInfoPaymentTypeBECS  UserPaymentInfoPaymentType = "BECS"
	UserPaymentInfoPaymentTypeBTLSV UserPaymentInfoPaymentType = "BTLSV"
	UserPaymentInfoPaymentTypeCBA   UserPaymentInfoPaymentType = "CBA"
	UserPaymentInfoPaymentTypeCBL   UserPaymentInfoPaymentType = "CBL"
	UserPaymentInfoPaymentTypeD     UserPaymentInfoPaymentType = "D"
	UserPaymentInfoPaymentTypeDAN   UserPaymentInfoPaymentType = "DAN"
	UserPaymentInfoPaymentTypeDCI   UserPaymentInfoPaymentType = "DCI"
	UserPaymentInfoPaymentTypeER    UserPaymentInfoPaymentType = "ER"
	UserPaymentInfoPaymentTypeEXT   UserPaymentInfoPaymentType = "EXT"
	UserPaymentInfoPaymentTypeGCDD  UserPaymentInfoPaymentType = "GCDD"
	UserPaymentInfoPaymentTypeGCDI  UserPaymentInfoPaymentType = "GCDI"
	UserPaymentInfoPaymentTypeGE    UserPaymentInfoPaymentType = "GE"
	UserPaymentInfoPaymentTypeGGPAY UserPaymentInfoPaymentType = "GGPAY"
	UserPaymentInfoPaymentTypeGMDCM UserPaymentInfoPaymentType = "GMDCM"
	UserPaymentInfoPaymentTypeGMOAU UserPaymentInfoPaymentType = "GMOAU"
	UserPaymentInfoPaymentTypeGMOSB UserPaymentInfoPaymentType = "GMOSB"
	UserPaymentInfoPaymentTypeICRD  UserPaymentInfoPaymentType = "ICRD"
	UserPaymentInfoPaymentTypeIDEAL UserPaymentInfoPaymentType = "IDEAL"
	UserPaymentInfoPaymentTypeINT   UserPaymentInfoPaymentType = "INT"
	UserPaymentInfoPaymentTypeINV   UserPaymentInfoPaymentType = "INV"
	UserPaymentInfoPaymentTypeJCB   UserPaymentInfoPaymentType = "JCB"
	UserPaymentInfoPaymentTypeLAS   UserPaymentInfoPaymentType = "LAS"
	UserPaymentInfoPaymentTypeLINK  UserPaymentInfoPaymentType = "LINK"
	UserPaymentInfoPaymentTypeMAE   UserPaymentInfoPaymentType = "MAE"
	UserPaymentInfoPaymentTypeMBP   UserPaymentInfoPaymentType = "MBP"
	UserPaymentInfoPaymentTypeMC    UserPaymentInfoPaymentType = "MC"
	UserPaymentInfoPaymentTypeMP    UserPaymentInfoPaymentType = "MP"
	UserPaymentInfoPaymentTypeNB    UserPaymentInfoPaymentType = "NB"
	UserPaymentInfoPaymentTypePAD   UserPaymentInfoPaymentType = "PAD"
	UserPaymentInfoPaymentTypePFC   UserPaymentInfoPaymentType = "PFC"
	UserPaymentInfoPaymentTypePP    UserPaymentInfoPaymentType = "PP"
	UserPaymentInfoPaymentTypePPPL  UserPaymentInfoPaymentType = "PPPL"
	UserPaymentInfoPaymentTypeSDD   UserPaymentInfoPaymentType = "SDD"
	UserPaymentInfoPaymentTypeSOFRT UserPaymentInfoPaymentType = "SOFRT"
	UserPaymentInfoPaymentTypeSOLO  UserPaymentInfoPaymentType = "SOLO"
	UserPaymentInfoPaymentTypeTWI   UserPaymentInfoPaymentType = "TWI"
	UserPaymentInfoPaymentTypeU     UserPaymentInfoPaymentType = "U"
	UserPaymentInfoPaymentTypeUAT   UserPaymentInfoPaymentType = "UAT"
	UserPaymentInfoPaymentTypeUNPAY UserPaymentInfoPaymentType = "UNPAY"
	UserPaymentInfoPaymentTypeUSBA  UserPaymentInfoPaymentType = "USBA"
	UserPaymentInfoPaymentTypeV     UserPaymentInfoPaymentType = "V"
	UserPaymentInfoPaymentTypeVENMO UserPaymentInfoPaymentType = "VENMO"
	UserPaymentInfoPaymentTypeVLG   UserPaymentInfoPaymentType = "VLG"
)

// Defines values for UserPaymentRefundDTOStatus.
const (
	UserPaymentRefundDTOStatusAborted         UserPaymentRefundDTOStatus = "aborted"
	UserPaymentRefundDTOStatusCanceled        UserPaymentRefundDTOStatus = "canceled"
	UserPaymentRefundDTOStatusCompleted       UserPaymentRefundDTOStatus = "completed"
	UserPaymentRefundDTOStatusDisputed        UserPaymentRefundDTOStatus = "disputed"
	UserPaymentRefundDTOStatusInitiated       UserPaymentRefundDTOStatus = "initiated"
	UserPaymentRefundDTOStatusPending         UserPaymentRefundDTOStatus = "pending"
	UserPaymentRefundDTOStatusRefundRequested UserPaymentRefundDTOStatus = "refund requested"
	UserPaymentRefundDTOStatusRefunded        UserPaymentRefundDTOStatus = "refunded"
	UserPaymentRefundDTOStatusVerified        UserPaymentRefundDTOStatus = "verified"
)

// Defines values for UserSubscriptionConversionResult.
const (
	UserSubscriptionConversionResultACCEPTED   UserSubscriptionConversionResult = "ACCEPTED"
	UserSubscriptionConversionResultCANCELLED  UserSubscriptionConversionResult = "CANCELLED"
	UserSubscriptionConversionResultEXPIRED    UserSubscriptionConversionResult = "EXPIRED"
	UserSubscriptionConversionResultFAILED     UserSubscriptionConversionResult = "FAILED"
	UserSubscriptionConversionResultNOTCHECKED UserSubscriptionConversionResult = "NOT_CHECKED"
	UserSubscriptionConversionResultREJECTED   UserSubscriptionConversionResult = "REJECTED"
)

// Defines values for UserSubscriptionExternalApiName.
const (
	UserSubscriptionExternalApiNameABRIL              UserSubscriptionExternalApiName = "ABRIL"
	UserSubscriptionExternalApiNameABRILADDRESS       UserSubscriptionExternalApiName = "ABRIL_ADDRESS"
	UserSubscriptionExternalApiNameAPPLEITUNES        UserSubscriptionExternalApiName = "APPLE_ITUNES"
	UserSubscriptionExternalApiNameCDS                UserSubscriptionExternalApiName = "CDS"
	UserSubscriptionExternalApiNameGOOGLEPLAY         UserSubscriptionExternalApiName = "GOOGLE_PLAY"
	UserSubscriptionExternalApiNameNEWSCYCLE          UserSubscriptionExternalApiName = "NEWSCYCLE"
	UserSubscriptionExternalApiNamePAYPALSUBSCRIPTION UserSubscriptionExternalApiName = "PAYPAL_SUBSCRIPTION"
	UserSubscriptionExternalApiNamePSCPROVIDER        UserSubscriptionExternalApiName = "PSC_PROVIDER"
	UserSubscriptionExternalApiNameSWG                UserSubscriptionExternalApiName = "SWG"
	UserSubscriptionExternalApiNameVESTDB             UserSubscriptionExternalApiName = "VESTDB"
)

// Defines values for UserSubscriptionStatus.
const (
	UserSubscriptionStatusActive           UserSubscriptionStatus = "active"
	UserSubscriptionStatusCancelled        UserSubscriptionStatus = "cancelled"
	UserSubscriptionStatusCompleted        UserSubscriptionStatus = "completed"
	UserSubscriptionStatusDeleted          UserSubscriptionStatus = "deleted"
	UserSubscriptionStatusExpired          UserSubscriptionStatus = "expired"
	UserSubscriptionStatusExpiredWithError UserSubscriptionStatus = "expired_with_error"
	UserSubscriptionStatusFailAndRetry     UserSubscriptionStatus = "fail_and_retry"
	UserSubscriptionStatusNotStarted       UserSubscriptionStatus = "not_started"
	UserSubscriptionStatusPending          UserSubscriptionStatus = "pending"
	UserSubscriptionStatusUpgraded         UserSubscriptionStatus = "upgraded"
	UserSubscriptionStatusWaitConfirmed    UserSubscriptionStatus = "wait_confirmed"
)

// Defines values for UserSubscriptionDtoConversionResult.
const (
	UserSubscriptionDtoConversionResultACCEPTED   UserSubscriptionDtoConversionResult = "ACCEPTED"
	UserSubscriptionDtoConversionResultCANCELLED  UserSubscriptionDtoConversionResult = "CANCELLED"
	UserSubscriptionDtoConversionResultEXPIRED    UserSubscriptionDtoConversionResult = "EXPIRED"
	UserSubscriptionDtoConversionResultFAILED     UserSubscriptionDtoConversionResult = "FAILED"
	UserSubscriptionDtoConversionResultNOTCHECKED UserSubscriptionDtoConversionResult = "NOT_CHECKED"
	UserSubscriptionDtoConversionResultREJECTED   UserSubscriptionDtoConversionResult = "REJECTED"
)

// Defines values for UserSubscriptionDtoExternalApiName.
const (
	UserSubscriptionDtoExternalApiNameABRIL              UserSubscriptionDtoExternalApiName = "ABRIL"
	UserSubscriptionDtoExternalApiNameABRILADDRESS       UserSubscriptionDtoExternalApiName = "ABRIL_ADDRESS"
	UserSubscriptionDtoExternalApiNameAPPLEITUNES        UserSubscriptionDtoExternalApiName = "APPLE_ITUNES"
	UserSubscriptionDtoExternalApiNameCDS                UserSubscriptionDtoExternalApiName = "CDS"
	UserSubscriptionDtoExternalApiNameGOOGLEPLAY         UserSubscriptionDtoExternalApiName = "GOOGLE_PLAY"
	UserSubscriptionDtoExternalApiNameNEWSCYCLE          UserSubscriptionDtoExternalApiName = "NEWSCYCLE"
	UserSubscriptionDtoExternalApiNamePAYPALSUBSCRIPTION UserSubscriptionDtoExternalApiName = "PAYPAL_SUBSCRIPTION"
	UserSubscriptionDtoExternalApiNamePSCPROVIDER        UserSubscriptionDtoExternalApiName = "PSC_PROVIDER"
	UserSubscriptionDtoExternalApiNameSWG                UserSubscriptionDtoExternalApiName = "SWG"
	UserSubscriptionDtoExternalApiNameVESTDB             UserSubscriptionDtoExternalApiName = "VESTDB"
)

// Defines values for UserSubscriptionDtoStatus.
const (
	UserSubscriptionDtoStatusA     UserSubscriptionDtoStatus = "A"
	UserSubscriptionDtoStatusC     UserSubscriptionDtoStatus = "C"
	UserSubscriptionDtoStatusD     UserSubscriptionDtoStatus = "D"
	UserSubscriptionDtoStatusE     UserSubscriptionDtoStatus = "E"
	UserSubscriptionDtoStatusEND   UserSubscriptionDtoStatus = "END"
	UserSubscriptionDtoStatusEWE   UserSubscriptionDtoStatus = "EWE"
	UserSubscriptionDtoStatusFAR   UserSubscriptionDtoStatus = "FAR"
	UserSubscriptionDtoStatusNS    UserSubscriptionDtoStatus = "NS"
	UserSubscriptionDtoStatusP     UserSubscriptionDtoStatus = "P"
	UserSubscriptionDtoStatusUPGRD UserSubscriptionDtoStatus = "UPGRD"
	UserSubscriptionDtoStatusWC    UserSubscriptionDtoStatus = "WC"
)

// Defines values for UserSubscriptionDtoStatusLabel.
const (
	UserSubscriptionDtoStatusLabelActive         UserSubscriptionDtoStatusLabel = "Active"
	UserSubscriptionDtoStatusLabelCancelled      UserSubscriptionDtoStatusLabel = "Cancelled"
	UserSubscriptionDtoStatusLabelDeleted        UserSubscriptionDtoStatusLabel = "Deleted"
	UserSubscriptionDtoStatusLabelExpired        UserSubscriptionDtoStatusLabel = "Expired"
	UserSubscriptionDtoStatusLabelNa             UserSubscriptionDtoStatusLabel = "Na"
	UserSubscriptionDtoStatusLabelNotStarted     UserSubscriptionDtoStatusLabel = "Not Started"
	UserSubscriptionDtoStatusLabelPaymentFailure UserSubscriptionDtoStatusLabel = "Payment Failure"
	UserSubscriptionDtoStatusLabelPending        UserSubscriptionDtoStatusLabel = "Pending"
	UserSubscriptionDtoStatusLabelUpgraded       UserSubscriptionDtoStatusLabel = "Upgraded"
	UserSubscriptionDtoStatusLabelWaitConfirmed  UserSubscriptionDtoStatusLabel = "Wait Confirmed"
	UserSubscriptionDtoStatusLabelWontRenew      UserSubscriptionDtoStatusLabel = "Won't Renew"
)

// Defines values for UserSubscriptionDtoType.
const (
	UserSubscriptionDtoTypeAdview                         UserSubscriptionDtoType = "adview"
	UserSubscriptionDtoTypeCustom                         UserSubscriptionDtoType = "custom"
	UserSubscriptionDtoTypeDynamic                        UserSubscriptionDtoType = "dynamic"
	UserSubscriptionDtoTypeEmailDomainContract            UserSubscriptionDtoType = "email_domain_contract"
	UserSubscriptionDtoTypeExternal                       UserSubscriptionDtoType = "external"
	UserSubscriptionDtoTypeGift                           UserSubscriptionDtoType = "gift"
	UserSubscriptionDtoTypeGrantAccess                    UserSubscriptionDtoType = "grant_access"
	UserSubscriptionDtoTypeIpRangeContract                UserSubscriptionDtoType = "ip_range_contract"
	UserSubscriptionDtoTypeLinked                         UserSubscriptionDtoType = "linked"
	UserSubscriptionDtoTypeNewsletter                     UserSubscriptionDtoType = "newsletter"
	UserSubscriptionDtoTypePayment                        UserSubscriptionDtoType = "payment"
	UserSubscriptionDtoTypeRegistration                   UserSubscriptionDtoType = "registration"
	UserSubscriptionDtoTypeSpecificEmailAddressesContract UserSubscriptionDtoType = "specific_email_addresses_contract"
)

// Defines values for UserSubscriptionListItemConversionResult.
const (
	UserSubscriptionListItemConversionResultACCEPTED   UserSubscriptionListItemConversionResult = "ACCEPTED"
	UserSubscriptionListItemConversionResultCANCELLED  UserSubscriptionListItemConversionResult = "CANCELLED"
	UserSubscriptionListItemConversionResultEXPIRED    UserSubscriptionListItemConversionResult = "EXPIRED"
	UserSubscriptionListItemConversionResultFAILED     UserSubscriptionListItemConversionResult = "FAILED"
	UserSubscriptionListItemConversionResultNOTCHECKED UserSubscriptionListItemConversionResult = "NOT_CHECKED"
	UserSubscriptionListItemConversionResultREJECTED   UserSubscriptionListItemConversionResult = "REJECTED"
)

// Defines values for UserSubscriptionListItemExternalApiName.
const (
	ABRIL              UserSubscriptionListItemExternalApiName = "ABRIL"
	ABRILADDRESS       UserSubscriptionListItemExternalApiName = "ABRIL_ADDRESS"
	APPLEITUNES        UserSubscriptionListItemExternalApiName = "APPLE_ITUNES"
	CDS                UserSubscriptionListItemExternalApiName = "CDS"
	GOOGLEPLAY         UserSubscriptionListItemExternalApiName = "GOOGLE_PLAY"
	NEWSCYCLE          UserSubscriptionListItemExternalApiName = "NEWSCYCLE"
	PAYPALSUBSCRIPTION UserSubscriptionListItemExternalApiName = "PAYPAL_SUBSCRIPTION"
	PSCPROVIDER        UserSubscriptionListItemExternalApiName = "PSC_PROVIDER"
	SWG                UserSubscriptionListItemExternalApiName = "SWG"
	VESTDB             UserSubscriptionListItemExternalApiName = "VESTDB"
)

// Defines values for UserSubscriptionListItemStatus.
const (
	UserSubscriptionListItemStatusActive           UserSubscriptionListItemStatus = "active"
	UserSubscriptionListItemStatusCancelled        UserSubscriptionListItemStatus = "cancelled"
	UserSubscriptionListItemStatusCompleted        UserSubscriptionListItemStatus = "completed"
	UserSubscriptionListItemStatusDeleted          UserSubscriptionListItemStatus = "deleted"
	UserSubscriptionListItemStatusExpired          UserSubscriptionListItemStatus = "expired"
	UserSubscriptionListItemStatusExpiredWithError UserSubscriptionListItemStatus = "expired_with_error"
	UserSubscriptionListItemStatusFailAndRetry     UserSubscriptionListItemStatus = "fail_and_retry"
	UserSubscriptionListItemStatusNotStarted       UserSubscriptionListItemStatus = "not_started"
	UserSubscriptionListItemStatusPending          UserSubscriptionListItemStatus = "pending"
	UserSubscriptionListItemStatusUpgraded         UserSubscriptionListItemStatus = "upgraded"
	UserSubscriptionListItemStatusWaitConfirmed    UserSubscriptionListItemStatus = "wait_confirmed"
)

// Defines values for VoucherState.
const (
	VoucherStateAssigned  VoucherState = "assigned"
	VoucherStateDelivered VoucherState = "delivered"
	VoucherStateFailed    VoucherState = "failed"
	VoucherStateRedeemed  VoucherState = "redeemed"
	VoucherStateRedeeming VoucherState = "redeeming"
	VoucherStateRevoked   VoucherState = "revoked"
	VoucherStateSending   VoucherState = "sending"
)

// Defines values for VoucherStateLabel.
const (
	VoucherStateLabelAssigned  VoucherStateLabel = "Assigned"
	VoucherStateLabelDelivered VoucherStateLabel = "Delivered"
	VoucherStateLabelFailed    VoucherStateLabel = "Failed"
	VoucherStateLabelRedeemed  VoucherStateLabel = "Redeemed"
	VoucherStateLabelRedeeming VoucherStateLabel = "Redeeming"
	VoucherStateLabelRevoked   VoucherStateLabel = "Revoked"
	VoucherStateLabelSending   VoucherStateLabel = "Sending"
)

// Defines values for VoucherTermType.
const (
	VoucherTermTypeAdview                         VoucherTermType = "adview"
	VoucherTermTypeCustom                         VoucherTermType = "custom"
	VoucherTermTypeDynamic                        VoucherTermType = "dynamic"
	VoucherTermTypeEmailDomainContract            VoucherTermType = "email_domain_contract"
	VoucherTermTypeExternal                       VoucherTermType = "external"
	VoucherTermTypeGift                           VoucherTermType = "gift"
	VoucherTermTypeGrantAccess                    VoucherTermType = "grant_access"
	VoucherTermTypeIpRangeContract                VoucherTermType = "ip_range_contract"
	VoucherTermTypeLinked                         VoucherTermType = "linked"
	VoucherTermTypeNewsletter                     VoucherTermType = "newsletter"
	VoucherTermTypePayment                        VoucherTermType = "payment"
	VoucherTermTypeRegistration                   VoucherTermType = "registration"
	VoucherTermTypeSpecificEmailAddressesContract VoucherTermType = "specific_email_addresses_contract"
)

// Defines values for WebhookConfigKey.
const (
	WebhookConfigKeyAccessEnded                                 WebhookConfigKey = "access_ended"
	WebhookConfigKeyAccessModified                              WebhookConfigKey = "access_modified"
	WebhookConfigKeyAccessRevoked                               WebhookConfigKey = "access_revoked"
	WebhookConfigKeyAddressUpdated                              WebhookConfigKey = "address_updated"
	WebhookConfigKeyContractCreated                             WebhookConfigKey = "contract_created"
	WebhookConfigKeyContractDeleted                             WebhookConfigKey = "contract_deleted"
	WebhookConfigKeyContractUpdated                             WebhookConfigKey = "contract_updated"
	WebhookConfigKeyContractUserCreated                         WebhookConfigKey = "contract_user_created"
	WebhookConfigKeyCrossAppAccessGranted                       WebhookConfigKey = "cross_app_access_granted"
	WebhookConfigKeyCrossAppAccessModified                      WebhookConfigKey = "cross_app_access_modified"
	WebhookConfigKeyCrossAppAccessRevoked                       WebhookConfigKey = "cross_app_access_revoked"
	WebhookConfigKeyFreeAccessGranted                           WebhookConfigKey = "free_access_granted"
	WebhookConfigKeyFreePromoRedemption                         WebhookConfigKey = "free_promo_redemption"
	WebhookConfigKeyGracePeriodExtensionOnRenewal               WebhookConfigKey = "grace_period_extension_on_renewal"
	WebhookConfigKeyKeyingContentStateUpdated                   WebhookConfigKey = "keying_content_state_updated"
	WebhookConfigKeyLicenseeContractAccessExpired               WebhookConfigKey = "licensee_contract_access_expired"
	WebhookConfigKeyLicenseeContractAutoRenewed                 WebhookConfigKey = "licensee_contract_auto_renewed"
	WebhookConfigKeyLicenseeContractRedeemed                    WebhookConfigKey = "licensee_contract_redeemed"
	WebhookConfigKeyLicenseeContractSubscriptionCanceled        WebhookConfigKey = "licensee_contract_subscription_canceled"
	WebhookConfigKeyLicenseeCreated                             WebhookConfigKey = "licensee_created"
	WebhookConfigKeyLicenseeInviteToContract                    WebhookConfigKey = "licensee_invite_to_contract"
	WebhookConfigKeyLicenseeUpdated                             WebhookConfigKey = "licensee_updated"
	WebhookConfigKeyNewCustomTermConversion                     WebhookConfigKey = "new_custom_term_conversion"
	WebhookConfigKeyNewPurchase                                 WebhookConfigKey = "new_purchase"
	WebhookConfigKeyNewRegistrationConversion                   WebhookConfigKey = "new_registration_conversion"
	WebhookConfigKeyNewSiteLicenseConversion                    WebhookConfigKey = "new_site_license_conversion"
	WebhookConfigKeyPaymentCompleted                            WebhookConfigKey = "payment_completed"
	WebhookConfigKeyPaymentFailed                               WebhookConfigKey = "payment_failed"
	WebhookConfigKeyPaymentInitiated                            WebhookConfigKey = "payment_initiated"
	WebhookConfigKeyPaymentPending                              WebhookConfigKey = "payment_pending"
	WebhookConfigKeyPaymentVerified                             WebhookConfigKey = "payment_verified"
	WebhookConfigKeyPaymentVerifiedByPublisher                  WebhookConfigKey = "payment_verified_by_publisher"
	WebhookConfigKeyPianoIdUserCustomFieldsUpdated              WebhookConfigKey = "piano_id_user_custom_fields_updated"
	WebhookConfigKeyPianoIdUserEmailConfirmed                   WebhookConfigKey = "piano_id_user_email_confirmed"
	WebhookConfigKeyPianoIdUserPasswordUpdated                  WebhookConfigKey = "piano_id_user_password_updated"
	WebhookConfigKeyPscPurchase                                 WebhookConfigKey = "psc_purchase"
	WebhookConfigKeyPurchaseRefund                              WebhookConfigKey = "purchase_refund"
	WebhookConfigKeySharedSubscriptionChild                     WebhookConfigKey = "shared_subscription_child"
	WebhookConfigKeySiteLicenseCanceled                         WebhookConfigKey = "site_license_canceled"
	WebhookConfigKeySiteLicenseExpired                          WebhookConfigKey = "site_license_expired"
	WebhookConfigKeySiteLicenseRenewed                          WebhookConfigKey = "site_license_renewed"
	WebhookConfigKeySubscriptionAccessPeriodActivated           WebhookConfigKey = "subscription_access_period_activated"
	WebhookConfigKeySubscriptionAccessPeriodScheduled           WebhookConfigKey = "subscription_access_period_scheduled"
	WebhookConfigKeySubscriptionAccessPeriodUnscheduled         WebhookConfigKey = "subscription_access_period_unscheduled"
	WebhookConfigKeySubscriptionActivated                       WebhookConfigKey = "subscription_activated"
	WebhookConfigKeySubscriptionAddressUpdated                  WebhookConfigKey = "subscription_address_updated"
	WebhookConfigKeySubscriptionAutoRenewChangedByEndUser       WebhookConfigKey = "subscription_auto_renew_changed_by_end_user"
	WebhookConfigKeySubscriptionAutoRenewDisabled               WebhookConfigKey = "subscription_auto_renew_disabled"
	WebhookConfigKeySubscriptionAutoRenewEnabled                WebhookConfigKey = "subscription_auto_renew_enabled"
	WebhookConfigKeySubscriptionAutoRenewed                     WebhookConfigKey = "subscription_auto_renewed"
	WebhookConfigKeySubscriptionAutoRenewedAuthFailure          WebhookConfigKey = "subscription_auto_renewed_auth_failure"
	WebhookConfigKeySubscriptionAutoRenewedFailure              WebhookConfigKey = "subscription_auto_renewed_failure"
	WebhookConfigKeySubscriptionCanceled                        WebhookConfigKey = "subscription_canceled"
	WebhookConfigKeySubscriptionDeferredCanceled                WebhookConfigKey = "subscription_deferred_canceled"
	WebhookConfigKeySubscriptionDynamicUnlimitedPeriodConverted WebhookConfigKey = "subscription_dynamic_unlimited_period_converted"
	WebhookConfigKeySubscriptionExpired                         WebhookConfigKey = "subscription_expired"
	WebhookConfigKeySubscriptionGracePeriodEnded                WebhookConfigKey = "subscription_grace_period_ended"
	WebhookConfigKeySubscriptionGracePeriodStarted              WebhookConfigKey = "subscription_grace_period_started"
	WebhookConfigKeySubscriptionImported                        WebhookConfigKey = "subscription_imported"
	WebhookConfigKeySubscriptionManuallyRenewed                 WebhookConfigKey = "subscription_manually_renewed"
	WebhookConfigKeySubscriptionNextBillDateUpdated             WebhookConfigKey = "subscription_next_bill_date_updated"
	WebhookConfigKeySubscriptionPaymentMethodUpdated            WebhookConfigKey = "subscription_payment_method_updated"
	WebhookConfigKeySubscriptionRescheduled                     WebhookConfigKey = "subscription_rescheduled"
	WebhookConfigKeySubscriptionResumed                         WebhookConfigKey = "subscription_resumed"
	WebhookConfigKeySubscriptionUpdated                         WebhookConfigKey = "subscription_updated"
	WebhookConfigKeyTermAppliedByPublisher                      WebhookConfigKey = "term_applied_by_publisher"
	WebhookConfigKeyTermChange                                  WebhookConfigKey = "term_change"
	WebhookConfigKeyTermChangeAborted                           WebhookConfigKey = "term_change_aborted"
	WebhookConfigKeyTermChangeCanceled                          WebhookConfigKey = "term_change_canceled"
	WebhookConfigKeyTermChangeFailure                           WebhookConfigKey = "term_change_failure"
	WebhookConfigKeyTermChangeFinished                          WebhookConfigKey = "term_change_finished"
	WebhookConfigKeyTermChangeGracePeriodEnded                  WebhookConfigKey = "term_change_grace_period_ended"
	WebhookConfigKeyTermChangeGracePeriodStarted                WebhookConfigKey = "term_change_grace_period_started"
	WebhookConfigKeyTermChangeResumed                           WebhookConfigKey = "term_change_resumed"
	WebhookConfigKeyTermChangeScheduled                         WebhookConfigKey = "term_change_scheduled"
	WebhookConfigKeyTermChangeSuspended                         WebhookConfigKey = "term_change_suspended"
	WebhookConfigKeyToGifteeVoucherRedeemed                     WebhookConfigKey = "to_giftee_voucher_redeemed"
	WebhookConfigKeyUserAddressUpdated                          WebhookConfigKey = "user_address_updated"
	WebhookConfigKeyUserCreated                                 WebhookConfigKey = "user_created"
	WebhookConfigKeyUserDisabled                                WebhookConfigKey = "user_disabled"
	WebhookConfigKeyUserPaymentMethodNew                        WebhookConfigKey = "user_payment_method_new"
	WebhookConfigKeyUserPaymentMethodUpdate                     WebhookConfigKey = "user_payment_method_update"
	WebhookConfigKeyUserUpdated                                 WebhookConfigKey = "user_updated"
	WebhookConfigKeyVoucherDelivery                             WebhookConfigKey = "voucher_delivery"
	WebhookConfigKeyVoucherPurchase                             WebhookConfigKey = "voucher_purchase"
	WebhookConfigKeyVoucherRevoked                              WebhookConfigKey = "voucher_revoked"
)

// Defines values for WebhookConfigType.
const (
	WebhookConfigTypeAccessGranted                WebhookConfigType = "access_granted"
	WebhookConfigTypeAccessModified               WebhookConfigType = "access_modified"
	WebhookConfigTypeAccessRevoked                WebhookConfigType = "access_revoked"
	WebhookConfigTypeAddressUpdated               WebhookConfigType = "address_updated"
	WebhookConfigTypeContentAlgorithm             WebhookConfigType = "content_algorithm"
	WebhookConfigTypeContractCreated              WebhookConfigType = "contract_created"
	WebhookConfigTypeContractDeleted              WebhookConfigType = "contract_deleted"
	WebhookConfigTypeContractRedeemed             WebhookConfigType = "contract_redeemed"
	WebhookConfigTypeContractRenewed              WebhookConfigType = "contract_renewed"
	WebhookConfigTypeContractUpdated              WebhookConfigType = "contract_updated"
	WebhookConfigTypeContractUserAccessExpired    WebhookConfigType = "contract_user_access_expired"
	WebhookConfigTypeContractUserAccessRevoked    WebhookConfigType = "contract_user_access_revoked"
	WebhookConfigTypeContractUserCreated          WebhookConfigType = "contract_user_created"
	WebhookConfigTypeLicenseeCreated              WebhookConfigType = "licensee_created"
	WebhookConfigTypeLicenseeInviteToContract     WebhookConfigType = "licensee_invite_to_contract"
	WebhookConfigTypeLicenseeUpdated              WebhookConfigType = "licensee_updated"
	WebhookConfigTypePaymentCompleted             WebhookConfigType = "payment_completed"
	WebhookConfigTypePaymentFailed                WebhookConfigType = "payment_failed"
	WebhookConfigTypePaymentInitiated             WebhookConfigType = "payment_initiated"
	WebhookConfigTypePaymentPending               WebhookConfigType = "payment_pending"
	WebhookConfigTypePaymentRefund                WebhookConfigType = "payment_refund"
	WebhookConfigTypeSharedSubscriptionChild      WebhookConfigType = "shared_subscription_child"
	WebhookConfigTypeSubscriptionAutoRenewChanged WebhookConfigType = "subscription_auto_renew_changed"
	WebhookConfigTypeSubscriptionCreated          WebhookConfigType = "subscription_created"
	WebhookConfigTypeSubscriptionEnded            WebhookConfigType = "subscription_ended"
	WebhookConfigTypeSubscriptionRenewal          WebhookConfigType = "subscription_renewal"
	WebhookConfigTypeSubscriptionUpdated          WebhookConfigType = "subscription_updated"
	WebhookConfigTypeTermChange                   WebhookConfigType = "term_change"
	WebhookConfigTypeTermChangeFinished           WebhookConfigType = "term_change_finished"
	WebhookConfigTypeTermChanged                  WebhookConfigType = "term_changed"
	WebhookConfigTypeUserAddressUpdated           WebhookConfigType = "user_address_updated"
	WebhookConfigTypeUserCreated                  WebhookConfigType = "user_created"
	WebhookConfigTypeUserDisabled                 WebhookConfigType = "user_disabled"
	WebhookConfigTypeUserEmailConfirmed           WebhookConfigType = "user_email_confirmed"
	WebhookConfigTypeUserPaymentMethod            WebhookConfigType = "user_payment_method"
	WebhookConfigTypeUserUpdated                  WebhookConfigType = "user_updated"
	WebhookConfigTypeVoucherDelivered             WebhookConfigType = "voucher_delivered"
	WebhookConfigTypeVoucherPurchased             WebhookConfigType = "voucher_purchased"
	WebhookConfigTypeVoucherRedeemed              WebhookConfigType = "voucher_redeemed"
	WebhookConfigTypeVoucherRevoked               WebhookConfigType = "voucher_revoked"
)

// Defines values for WebhookEventStatus.
const (
	WebhookEventStatusFailed    WebhookEventStatus = "failed"
	WebhookEventStatusInactive  WebhookEventStatus = "inactive"
	WebhookEventStatusPending   WebhookEventStatus = "pending"
	WebhookEventStatusSkipped   WebhookEventStatus = "skipped"
	WebhookEventStatusSucceeded WebhookEventStatus = "succeeded"
)

// Defines values for WebhookResponseStatus.
const (
	WebhookResponseStatusFailed    WebhookResponseStatus = "failed"
	WebhookResponseStatusSucceeded WebhookResponseStatus = "succeeded"
)

// Defines values for WebhookStatusStatus.
const (
	WebhookStatusStatusDisabled WebhookStatusStatus = "disabled"
	WebhookStatusStatusFailure  WebhookStatusStatus = "failure"
	WebhookStatusStatusNormal   WebhookStatusStatus = "normal"
)

// Defines values for GetPublisherConsentListParamsType.
const (
	GetPublisherConsentListParamsTypeCheckout     GetPublisherConsentListParamsType = "checkout"
	GetPublisherConsentListParamsTypeRegistration GetPublisherConsentListParamsType = "registration"
)

// Defines values for GetPublisherExportCreateAccessReportExportParamsAccessStatus.
const (
	GetPublisherExportCreateAccessReportExportParamsAccessStatusALL GetPublisherExportCreateAccessReportExportParamsAccessStatus = "ALL"
	GetPublisherExportCreateAccessReportExportParamsAccessStatusAll GetPublisherExportCreateAccessReportExportParamsAccessStatus = "all"
	GetPublisherExportCreateAccessReportExportParamsAccessStatusNo  GetPublisherExportCreateAccessReportExportParamsAccessStatus = "no"
	GetPublisherExportCreateAccessReportExportParamsAccessStatusYes GetPublisherExportCreateAccessReportExportParamsAccessStatus = "yes"
)

// Defines values for GetPublisherExportCreateAccessReportExportParamsTermType.
const (
	GetPublisherExportCreateAccessReportExportParamsTermTypeAdview                         GetPublisherExportCreateAccessReportExportParamsTermType = "adview"
	GetPublisherExportCreateAccessReportExportParamsTermTypeCustom                         GetPublisherExportCreateAccessReportExportParamsTermType = "custom"
	GetPublisherExportCreateAccessReportExportParamsTermTypeDynamic                        GetPublisherExportCreateAccessReportExportParamsTermType = "dynamic"
	GetPublisherExportCreateAccessReportExportParamsTermTypeEmailDomainContract            GetPublisherExportCreateAccessReportExportParamsTermType = "email_domain_contract"
	GetPublisherExportCreateAccessReportExportParamsTermTypeExternal                       GetPublisherExportCreateAccessReportExportParamsTermType = "external"
	GetPublisherExportCreateAccessReportExportParamsTermTypeGift                           GetPublisherExportCreateAccessReportExportParamsTermType = "gift"
	GetPublisherExportCreateAccessReportExportParamsTermTypeGrantAccess                    GetPublisherExportCreateAccessReportExportParamsTermType = "grant_access"
	GetPublisherExportCreateAccessReportExportParamsTermTypeIpRangeContract                GetPublisherExportCreateAccessReportExportParamsTermType = "ip_range_contract"
	GetPublisherExportCreateAccessReportExportParamsTermTypeLinked                         GetPublisherExportCreateAccessReportExportParamsTermType = "linked"
	GetPublisherExportCreateAccessReportExportParamsTermTypeNewsletter                     GetPublisherExportCreateAccessReportExportParamsTermType = "newsletter"
	GetPublisherExportCreateAccessReportExportParamsTermTypePayment                        GetPublisherExportCreateAccessReportExportParamsTermType = "payment"
	GetPublisherExportCreateAccessReportExportParamsTermTypeRegistration                   GetPublisherExportCreateAccessReportExportParamsTermType = "registration"
	GetPublisherExportCreateAccessReportExportParamsTermTypeSpecificEmailAddressesContract GetPublisherExportCreateAccessReportExportParamsTermType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus.
const (
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusAborted         GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "aborted"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusCanceled        GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "canceled"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusCompleted       GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "completed"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusDisputed        GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "disputed"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusInitiated       GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "initiated"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusPending         GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "pending"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusRefundRequested GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "refund requested"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusRefunded        GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "refunded"
	GetPublisherExportCreateAccessReportExportParamsLastPaymentStatusVerified        GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus = "verified"
)

// Defines values for GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus.
const (
	GetPublisherExportCreateAccessReportExportV2ParamsAccessStatusALL GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus = "ALL"
	GetPublisherExportCreateAccessReportExportV2ParamsAccessStatusAll GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus = "all"
	GetPublisherExportCreateAccessReportExportV2ParamsAccessStatusNo  GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus = "no"
	GetPublisherExportCreateAccessReportExportV2ParamsAccessStatusYes GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus = "yes"
)

// Defines values for GetPublisherExportCreateAccessReportExportV2ParamsTermType.
const (
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeAdview                         GetPublisherExportCreateAccessReportExportV2ParamsTermType = "adview"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeCustom                         GetPublisherExportCreateAccessReportExportV2ParamsTermType = "custom"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeDynamic                        GetPublisherExportCreateAccessReportExportV2ParamsTermType = "dynamic"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeEmailDomainContract            GetPublisherExportCreateAccessReportExportV2ParamsTermType = "email_domain_contract"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeExternal                       GetPublisherExportCreateAccessReportExportV2ParamsTermType = "external"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeGift                           GetPublisherExportCreateAccessReportExportV2ParamsTermType = "gift"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeGrantAccess                    GetPublisherExportCreateAccessReportExportV2ParamsTermType = "grant_access"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeIpRangeContract                GetPublisherExportCreateAccessReportExportV2ParamsTermType = "ip_range_contract"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeLinked                         GetPublisherExportCreateAccessReportExportV2ParamsTermType = "linked"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeNewsletter                     GetPublisherExportCreateAccessReportExportV2ParamsTermType = "newsletter"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypePayment                        GetPublisherExportCreateAccessReportExportV2ParamsTermType = "payment"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeRegistration                   GetPublisherExportCreateAccessReportExportV2ParamsTermType = "registration"
	GetPublisherExportCreateAccessReportExportV2ParamsTermTypeSpecificEmailAddressesContract GetPublisherExportCreateAccessReportExportV2ParamsTermType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus.
const (
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusAborted         GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "aborted"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusCanceled        GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "canceled"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusCompleted       GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "completed"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusDisputed        GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "disputed"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusInitiated       GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "initiated"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusPending         GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "pending"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusRefundRequested GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "refund requested"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusRefunded        GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "refunded"
	GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatusVerified        GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus = "verified"
)

// Defines values for GetPublisherExportCreateDailyActivityReportExportParamsTermType.
const (
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeAdview                         GetPublisherExportCreateDailyActivityReportExportParamsTermType = "adview"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeCustom                         GetPublisherExportCreateDailyActivityReportExportParamsTermType = "custom"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeDynamic                        GetPublisherExportCreateDailyActivityReportExportParamsTermType = "dynamic"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeEmailDomainContract            GetPublisherExportCreateDailyActivityReportExportParamsTermType = "email_domain_contract"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeExternal                       GetPublisherExportCreateDailyActivityReportExportParamsTermType = "external"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeGift                           GetPublisherExportCreateDailyActivityReportExportParamsTermType = "gift"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeGrantAccess                    GetPublisherExportCreateDailyActivityReportExportParamsTermType = "grant_access"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeIpRangeContract                GetPublisherExportCreateDailyActivityReportExportParamsTermType = "ip_range_contract"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeLinked                         GetPublisherExportCreateDailyActivityReportExportParamsTermType = "linked"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeNewsletter                     GetPublisherExportCreateDailyActivityReportExportParamsTermType = "newsletter"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypePayment                        GetPublisherExportCreateDailyActivityReportExportParamsTermType = "payment"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeRegistration                   GetPublisherExportCreateDailyActivityReportExportParamsTermType = "registration"
	GetPublisherExportCreateDailyActivityReportExportParamsTermTypeSpecificEmailAddressesContract GetPublisherExportCreateDailyActivityReportExportParamsTermType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherExportCreateMonthlyActivityReportExportParamsTermType.
const (
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeAdview                         GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "adview"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeCustom                         GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "custom"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeDynamic                        GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "dynamic"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeEmailDomainContract            GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "email_domain_contract"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeExternal                       GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "external"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeGift                           GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "gift"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeGrantAccess                    GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "grant_access"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeIpRangeContract                GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "ip_range_contract"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeLinked                         GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "linked"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeNewsletter                     GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "newsletter"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypePayment                        GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "payment"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeRegistration                   GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "registration"
	GetPublisherExportCreateMonthlyActivityReportExportParamsTermTypeSpecificEmailAddressesContract GetPublisherExportCreateMonthlyActivityReportExportParamsTermType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherExportListParamsOrderBy.
const (
	GetPublisherExportListParamsOrderByCompletionDate GetPublisherExportListParamsOrderBy = "completion_date"
	GetPublisherExportListParamsOrderByCreateDate     GetPublisherExportListParamsOrderBy = "create_date"
	GetPublisherExportListParamsOrderByStartDate      GetPublisherExportListParamsOrderBy = "start_date"
	GetPublisherExportListParamsOrderByUpdateDate     GetPublisherExportListParamsOrderBy = "update_date"
)

// Defines values for GetPublisherExportListParamsOrderDirection.
const (
	GetPublisherExportListParamsOrderDirectionAsc  GetPublisherExportListParamsOrderDirection = "asc"
	GetPublisherExportListParamsOrderDirectionDesc GetPublisherExportListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherInquiryAddParamsAction.
const (
	GetPublisherInquiryAddParamsActionDECLINE         GetPublisherInquiryAddParamsAction = "DECLINE"
	GetPublisherInquiryAddParamsActionNOREFUNDGRANT   GetPublisherInquiryAddParamsAction = "NO_REFUND_GRANT"
	GetPublisherInquiryAddParamsActionNOREFUNDREVOKE  GetPublisherInquiryAddParamsAction = "NO_REFUND_REVOKE"
	GetPublisherInquiryAddParamsActionREFUNDGRANT     GetPublisherInquiryAddParamsAction = "REFUND_GRANT"
	GetPublisherInquiryAddParamsActionREFUNDONLY      GetPublisherInquiryAddParamsAction = "REFUND_ONLY"
	GetPublisherInquiryAddParamsActionREFUNDREVOKE    GetPublisherInquiryAddParamsAction = "REFUND_REVOKE"
	GetPublisherInquiryAddParamsActionREPLYONLY       GetPublisherInquiryAddParamsAction = "REPLY_ONLY"
	GetPublisherInquiryAddParamsActionRESOLVE         GetPublisherInquiryAddParamsAction = "RESOLVE"
	GetPublisherInquiryAddParamsActionSUBCANCEL       GetPublisherInquiryAddParamsAction = "SUB_CANCEL"
	GetPublisherInquiryAddParamsActionSUBREFUNDCANCEL GetPublisherInquiryAddParamsAction = "SUB_REFUND_CANCEL"
	GetPublisherInquiryAddParamsActionSUBREFUNDONLY   GetPublisherInquiryAddParamsAction = "SUB_REFUND_ONLY"
)

// Defines values for GetPublisherLicensingContractDomainContractUserListParamsOrderBy.
const (
	GetPublisherLicensingContractDomainContractUserListParamsOrderByEmail  GetPublisherLicensingContractDomainContractUserListParamsOrderBy = "email"
	GetPublisherLicensingContractDomainContractUserListParamsOrderByStatus GetPublisherLicensingContractDomainContractUserListParamsOrderBy = "status"
)

// Defines values for GetPublisherLicensingContractDomainContractUserListParamsOrderDirection.
const (
	GetPublisherLicensingContractDomainContractUserListParamsOrderDirectionAsc  GetPublisherLicensingContractDomainContractUserListParamsOrderDirection = "asc"
	GetPublisherLicensingContractDomainContractUserListParamsOrderDirectionDesc GetPublisherLicensingContractDomainContractUserListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherLicensingContractDomainContractUserListParamsStatusList.
const (
	GetPublisherLicensingContractDomainContractUserListParamsStatusListActive  GetPublisherLicensingContractDomainContractUserListParamsStatusList = "active"
	GetPublisherLicensingContractDomainContractUserListParamsStatusListInvalid GetPublisherLicensingContractDomainContractUserListParamsStatusList = "invalid"
	GetPublisherLicensingContractDomainContractUserListParamsStatusListPending GetPublisherLicensingContractDomainContractUserListParamsStatusList = "pending"
	GetPublisherLicensingContractDomainContractUserListParamsStatusListRevoked GetPublisherLicensingContractDomainContractUserListParamsStatusList = "revoked"
)

// Defines values for GetPublisherLicensingContractDomainListParamsOrderBy.
const (
	Domain GetPublisherLicensingContractDomainListParamsOrderBy = "domain"
	Users  GetPublisherLicensingContractDomainListParamsOrderBy = "users"
)

// Defines values for GetPublisherLicensingContractDomainListParamsOrderDirection.
const (
	GetPublisherLicensingContractDomainListParamsOrderDirectionAsc  GetPublisherLicensingContractDomainListParamsOrderDirection = "asc"
	GetPublisherLicensingContractDomainListParamsOrderDirectionDesc GetPublisherLicensingContractDomainListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherLicensingContractUserListParamsOrderBy.
const (
	GetPublisherLicensingContractUserListParamsOrderByEmail  GetPublisherLicensingContractUserListParamsOrderBy = "email"
	GetPublisherLicensingContractUserListParamsOrderByStatus GetPublisherLicensingContractUserListParamsOrderBy = "status"
)

// Defines values for GetPublisherLicensingContractUserListParamsOrderDirection.
const (
	GetPublisherLicensingContractUserListParamsOrderDirectionAsc  GetPublisherLicensingContractUserListParamsOrderDirection = "asc"
	GetPublisherLicensingContractUserListParamsOrderDirectionDesc GetPublisherLicensingContractUserListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherLicensingContractUserListParamsStatusList.
const (
	GetPublisherLicensingContractUserListParamsStatusListActive  GetPublisherLicensingContractUserListParamsStatusList = "active"
	GetPublisherLicensingContractUserListParamsStatusListInvalid GetPublisherLicensingContractUserListParamsStatusList = "invalid"
	GetPublisherLicensingContractUserListParamsStatusListPending GetPublisherLicensingContractUserListParamsStatusList = "pending"
	GetPublisherLicensingContractUserListParamsStatusListRevoked GetPublisherLicensingContractUserListParamsStatusList = "revoked"
)

// Defines values for PostPublisherLinkedTermEventFormdataBodyType.
const (
	PostPublisherLinkedTermEventFormdataBodyTypeCreate PostPublisherLinkedTermEventFormdataBodyType = "create"
	PostPublisherLinkedTermEventFormdataBodyTypeDelete PostPublisherLinkedTermEventFormdataBodyType = "delete"
	PostPublisherLinkedTermEventFormdataBodyTypeUpdate PostPublisherLinkedTermEventFormdataBodyType = "update"
)

// Defines values for GetPublisherOfferListParamsOrderBy.
const (
	GetPublisherOfferListParamsOrderByAppId      GetPublisherOfferListParamsOrderBy = "appId"
	GetPublisherOfferListParamsOrderByCreateBy   GetPublisherOfferListParamsOrderBy = "createBy"
	GetPublisherOfferListParamsOrderByCreateDate GetPublisherOfferListParamsOrderBy = "createDate"
	GetPublisherOfferListParamsOrderByDeleted    GetPublisherOfferListParamsOrderBy = "deleted"
	GetPublisherOfferListParamsOrderByName       GetPublisherOfferListParamsOrderBy = "name"
	GetPublisherOfferListParamsOrderByOfferId    GetPublisherOfferListParamsOrderBy = "offerId"
	GetPublisherOfferListParamsOrderByPubId      GetPublisherOfferListParamsOrderBy = "pubId"
	GetPublisherOfferListParamsOrderByStatus     GetPublisherOfferListParamsOrderBy = "status"
	GetPublisherOfferListParamsOrderByUpdateBy   GetPublisherOfferListParamsOrderBy = "updateBy"
	GetPublisherOfferListParamsOrderByUpdateDate GetPublisherOfferListParamsOrderBy = "updateDate"
)

// Defines values for GetPublisherOfferListParamsOrderDirection.
const (
	GetPublisherOfferListParamsOrderDirectionAsc  GetPublisherOfferListParamsOrderDirection = "asc"
	GetPublisherOfferListParamsOrderDirectionDesc GetPublisherOfferListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId.
const (
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdAdblocker       GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "adblocker"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdAffiliate       GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "affiliate"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdCheckout        GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "checkout"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdChurnPrevention GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "churn_prevention"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdExpPianoId      GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "exp_piano_id"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdGtOffer         GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "gt_offer"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdGtTemplate      GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "gt_template"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdLicensing       GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "licensing"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdMetering        GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "metering"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdMyAccount       GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "my_account"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdNewsletter      GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "newsletter"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdOffer           GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "offer"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdPianoId         GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "piano_id"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdPushEnrollment  GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "push_enrollment"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdRegistration    GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "registration"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdSocial          GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "social"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdSystem          GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "system"
	GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryIdUpgradeOffer    GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId = "upgrade_offer"
)

// Defines values for GetPublisherOfferTemplateListParamsOrderBy.
const (
	GetPublisherOfferTemplateListParamsOrderByArchivedDate  GetPublisherOfferTemplateListParamsOrderBy = "archived_date"
	GetPublisherOfferTemplateListParamsOrderByCreatedDate   GetPublisherOfferTemplateListParamsOrderBy = "created_date"
	GetPublisherOfferTemplateListParamsOrderByName          GetPublisherOfferTemplateListParamsOrderBy = "name"
	GetPublisherOfferTemplateListParamsOrderByPublishedDate GetPublisherOfferTemplateListParamsOrderBy = "published_date"
	GetPublisherOfferTemplateListParamsOrderByUpdatedDate   GetPublisherOfferTemplateListParamsOrderBy = "updated_date"
)

// Defines values for GetPublisherOfferTemplateListParamsOrderDirection.
const (
	GetPublisherOfferTemplateListParamsOrderDirectionAsc  GetPublisherOfferTemplateListParamsOrderDirection = "asc"
	GetPublisherOfferTemplateListParamsOrderDirectionDesc GetPublisherOfferTemplateListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherOfferTemplateListParamsStatus.
const (
	GetPublisherOfferTemplateListParamsStatusActive   GetPublisherOfferTemplateListParamsStatus = "active"
	GetPublisherOfferTemplateListParamsStatusArchived GetPublisherOfferTemplateListParamsStatus = "archived"
)

// Defines values for GetPublisherOfferTemplateListParamsVariantStatus.
const (
	GetPublisherOfferTemplateListParamsVariantStatusActive   GetPublisherOfferTemplateListParamsVariantStatus = "active"
	GetPublisherOfferTemplateListParamsVariantStatusArchived GetPublisherOfferTemplateListParamsVariantStatus = "archived"
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesParamsOrderBy.
const (
	GetPublisherOfferTemplateListBoilerplatesParamsOrderByArchivedDate  GetPublisherOfferTemplateListBoilerplatesParamsOrderBy = "archived_date"
	GetPublisherOfferTemplateListBoilerplatesParamsOrderByCreatedDate   GetPublisherOfferTemplateListBoilerplatesParamsOrderBy = "created_date"
	GetPublisherOfferTemplateListBoilerplatesParamsOrderByName          GetPublisherOfferTemplateListBoilerplatesParamsOrderBy = "name"
	GetPublisherOfferTemplateListBoilerplatesParamsOrderByPublishedDate GetPublisherOfferTemplateListBoilerplatesParamsOrderBy = "published_date"
	GetPublisherOfferTemplateListBoilerplatesParamsOrderByUpdatedDate   GetPublisherOfferTemplateListBoilerplatesParamsOrderBy = "updated_date"
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection.
const (
	GetPublisherOfferTemplateListBoilerplatesParamsOrderDirectionAsc  GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection = "asc"
	GetPublisherOfferTemplateListBoilerplatesParamsOrderDirectionDesc GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection = "desc"
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesParamsStatus.
const (
	GetPublisherOfferTemplateListBoilerplatesParamsStatusActive   GetPublisherOfferTemplateListBoilerplatesParamsStatus = "active"
	GetPublisherOfferTemplateListBoilerplatesParamsStatusArchived GetPublisherOfferTemplateListBoilerplatesParamsStatus = "archived"
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesParamsTemplateType.
const (
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeAlreadyHasAccess                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "already_has_access"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeAuth                             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "auth"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeBankSecureComponents             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "bank_secure_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeCheckoutStyle                    GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "checkout_style"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeComponents                       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeConfirmation                     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "confirmation"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeConsentComponents                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "consent_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeDefaultOffer                     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "default_offer"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeError                            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "error"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeExternalVerificationComponents   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "external_verification_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeFinalConfirmation                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "final_confirmation"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeFutureStartComponents            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "future_start_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeGiftComponents                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "gift_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeLicensingContractList            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "licensing_contract_list"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeLicensingLandingPage             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "licensing_landing_page"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeLicensingRedeemResult            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "licensing_redeem_result"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeLostValueOffer                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "lost_value_offer"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountApp                     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_app"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountCashPayments            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_cash_payments"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountCommon                  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_common"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountError                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_error"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountHelp                    GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_help"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountLibrary                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_library"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountLicensing               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_licensing"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountPayments                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_payments"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountStyle                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_style"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountTransactions            GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_transactions"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountUserProfile             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_user_profile"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountVoucher                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_voucher"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeMyaccountWallet                  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "myaccount_wallet"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeNewscycleOffer                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "newscycle_offer"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeNewsletterSignup                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "newsletter_signup"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePaymentComponents                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "payment_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoId2faEmailDigitalCode       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_2fa_email_digital_code"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdAliasLogin                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_alias_login"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdCustomForm                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_custom_form"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdCustomFormExp             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_custom_form_exp"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdDigitalCode               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_digital_code"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdEmailConfirmation         GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_email_confirmation"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdEmailConfirmationRequired GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_email_confirmation_required"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdEmailIsNotConfirmed       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_email_is_not_confirmed"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdErrorPage                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_error_page"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdInitiatePasswordReset     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_initiate_password_reset"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdLayout                    GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_layout"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdLayoutGmSso               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_layout_gm_sso"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdLogin                     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_login"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdLoginConfirm              GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_login_confirm"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdMyAccount                 GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_my_account"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdNewPassword               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_new_password"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdNewsletters               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_newsletters"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdPasswordlessConfirmation  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_passwordless_confirmation"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdPhoneIsNotConfirmed       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_phone_is_not_confirmed"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdPhoneUpdate               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_phone_update"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdProfile                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_profile"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdRegister                  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_register"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdRegisterConfirm           GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_register_confirm"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdRegistrationExp           GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_registration_exp"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdSsoConfirm                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_sso_confirm"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePianoIdSsoConfirmBefore          GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "piano_id_sso_confirm_before"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePrintAddressComponents           GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "print_address_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePromoComponents                  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "promo_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeProviderComponents               GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "provider_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypePushSignup                       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "push_signup"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeReactivateSubscription           GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "reactivate_subscription"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeReceiptTemplate                  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "receipt_template"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeRedemptionComponents             GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "redemption_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeSharedSubscriptionComponents     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "shared_subscription_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeStates                           GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "states"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeTemplate                         GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "template"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeTemplateInteraction              GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "template_interaction"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeTermComponents                   GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "term_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeUpgradeAuthenticationComponents  GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "upgrade_authentication_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeUpgradeComponents                GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "upgrade_components"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeUpgradeOffer                     GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "upgrade_offer"
	GetPublisherOfferTemplateListBoilerplatesParamsTemplateTypeZuoraOffer                       GetPublisherOfferTemplateListBoilerplatesParamsTemplateType = "zuora_offer"
)

// Defines values for GetPublisherOfferTemplateListBoilerplatesParamsCategories.
const (
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesAdblocker       GetPublisherOfferTemplateListBoilerplatesParamsCategories = "adblocker"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesAffiliate       GetPublisherOfferTemplateListBoilerplatesParamsCategories = "affiliate"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesCheckout        GetPublisherOfferTemplateListBoilerplatesParamsCategories = "checkout"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesChurnPrevention GetPublisherOfferTemplateListBoilerplatesParamsCategories = "churn_prevention"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesExpPianoId      GetPublisherOfferTemplateListBoilerplatesParamsCategories = "exp_piano_id"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesGtOffer         GetPublisherOfferTemplateListBoilerplatesParamsCategories = "gt_offer"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesGtTemplate      GetPublisherOfferTemplateListBoilerplatesParamsCategories = "gt_template"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesLicensing       GetPublisherOfferTemplateListBoilerplatesParamsCategories = "licensing"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesMetering        GetPublisherOfferTemplateListBoilerplatesParamsCategories = "metering"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesMyAccount       GetPublisherOfferTemplateListBoilerplatesParamsCategories = "my_account"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesNewsletter      GetPublisherOfferTemplateListBoilerplatesParamsCategories = "newsletter"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesOffer           GetPublisherOfferTemplateListBoilerplatesParamsCategories = "offer"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesPianoId         GetPublisherOfferTemplateListBoilerplatesParamsCategories = "piano_id"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesPushEnrollment  GetPublisherOfferTemplateListBoilerplatesParamsCategories = "push_enrollment"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesRegistration    GetPublisherOfferTemplateListBoilerplatesParamsCategories = "registration"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesSocial          GetPublisherOfferTemplateListBoilerplatesParamsCategories = "social"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesSystem          GetPublisherOfferTemplateListBoilerplatesParamsCategories = "system"
	GetPublisherOfferTemplateListBoilerplatesParamsCategoriesUpgradeOffer    GetPublisherOfferTemplateListBoilerplatesParamsCategories = "upgrade_offer"
)

// Defines values for GetPublisherOfferTemplateListByCategoryParamsStatus.
const (
	GetPublisherOfferTemplateListByCategoryParamsStatusActive   GetPublisherOfferTemplateListByCategoryParamsStatus = "active"
	GetPublisherOfferTemplateListByCategoryParamsStatusArchived GetPublisherOfferTemplateListByCategoryParamsStatus = "archived"
)

// Defines values for GetPublisherOfferTemplateListByCategoryParamsTemplateType.
const (
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeAlreadyHasAccess                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "already_has_access"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeAuth                             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "auth"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeBankSecureComponents             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "bank_secure_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeCheckoutStyle                    GetPublisherOfferTemplateListByCategoryParamsTemplateType = "checkout_style"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeComponents                       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeConfirmation                     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "confirmation"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeConsentComponents                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "consent_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeDefaultOffer                     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "default_offer"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeError                            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "error"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeExternalVerificationComponents   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "external_verification_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeFinalConfirmation                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "final_confirmation"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeFutureStartComponents            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "future_start_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeGiftComponents                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "gift_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeLicensingContractList            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "licensing_contract_list"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeLicensingLandingPage             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "licensing_landing_page"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeLicensingRedeemResult            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "licensing_redeem_result"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeLostValueOffer                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "lost_value_offer"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountApp                     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_app"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountCashPayments            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_cash_payments"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountCommon                  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_common"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountError                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_error"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountHelp                    GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_help"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountLibrary                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_library"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountLicensing               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_licensing"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountPayments                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_payments"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountStyle                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_style"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountTransactions            GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_transactions"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountUserProfile             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_user_profile"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountVoucher                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_voucher"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeMyaccountWallet                  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "myaccount_wallet"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeNewscycleOffer                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "newscycle_offer"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeNewsletterSignup                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "newsletter_signup"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePaymentComponents                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "payment_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoId2faEmailDigitalCode       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_2fa_email_digital_code"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdAliasLogin                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_alias_login"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdCustomForm                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_custom_form"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdCustomFormExp             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_custom_form_exp"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdDigitalCode               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_digital_code"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdEmailConfirmation         GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_email_confirmation"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdEmailConfirmationRequired GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_email_confirmation_required"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdEmailIsNotConfirmed       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_email_is_not_confirmed"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdErrorPage                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_error_page"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdInitiatePasswordReset     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_initiate_password_reset"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdLayout                    GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_layout"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdLayoutGmSso               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_layout_gm_sso"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdLogin                     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_login"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdLoginConfirm              GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_login_confirm"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdMyAccount                 GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_my_account"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdNewPassword               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_new_password"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdNewsletters               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_newsletters"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdPasswordlessConfirmation  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_passwordless_confirmation"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdPhoneIsNotConfirmed       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_phone_is_not_confirmed"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdPhoneUpdate               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_phone_update"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdProfile                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_profile"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdRegister                  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_register"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdRegisterConfirm           GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_register_confirm"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdRegistrationExp           GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_registration_exp"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdSsoConfirm                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_sso_confirm"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePianoIdSsoConfirmBefore          GetPublisherOfferTemplateListByCategoryParamsTemplateType = "piano_id_sso_confirm_before"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePrintAddressComponents           GetPublisherOfferTemplateListByCategoryParamsTemplateType = "print_address_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePromoComponents                  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "promo_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeProviderComponents               GetPublisherOfferTemplateListByCategoryParamsTemplateType = "provider_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypePushSignup                       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "push_signup"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeReactivateSubscription           GetPublisherOfferTemplateListByCategoryParamsTemplateType = "reactivate_subscription"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeReceiptTemplate                  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "receipt_template"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeRedemptionComponents             GetPublisherOfferTemplateListByCategoryParamsTemplateType = "redemption_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeSharedSubscriptionComponents     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "shared_subscription_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeStates                           GetPublisherOfferTemplateListByCategoryParamsTemplateType = "states"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeTemplate                         GetPublisherOfferTemplateListByCategoryParamsTemplateType = "template"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeTemplateInteraction              GetPublisherOfferTemplateListByCategoryParamsTemplateType = "template_interaction"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeTermComponents                   GetPublisherOfferTemplateListByCategoryParamsTemplateType = "term_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeUpgradeAuthenticationComponents  GetPublisherOfferTemplateListByCategoryParamsTemplateType = "upgrade_authentication_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeUpgradeComponents                GetPublisherOfferTemplateListByCategoryParamsTemplateType = "upgrade_components"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeUpgradeOffer                     GetPublisherOfferTemplateListByCategoryParamsTemplateType = "upgrade_offer"
	GetPublisherOfferTemplateListByCategoryParamsTemplateTypeZuoraOffer                       GetPublisherOfferTemplateListByCategoryParamsTemplateType = "zuora_offer"
)

// Defines values for GetPublisherOfferTemplateListByCategoryParamsCategories.
const (
	GetPublisherOfferTemplateListByCategoryParamsCategoriesAdblocker       GetPublisherOfferTemplateListByCategoryParamsCategories = "adblocker"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesAffiliate       GetPublisherOfferTemplateListByCategoryParamsCategories = "affiliate"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesCheckout        GetPublisherOfferTemplateListByCategoryParamsCategories = "checkout"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesChurnPrevention GetPublisherOfferTemplateListByCategoryParamsCategories = "churn_prevention"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesExpPianoId      GetPublisherOfferTemplateListByCategoryParamsCategories = "exp_piano_id"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesGtOffer         GetPublisherOfferTemplateListByCategoryParamsCategories = "gt_offer"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesGtTemplate      GetPublisherOfferTemplateListByCategoryParamsCategories = "gt_template"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesLicensing       GetPublisherOfferTemplateListByCategoryParamsCategories = "licensing"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesMetering        GetPublisherOfferTemplateListByCategoryParamsCategories = "metering"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesMyAccount       GetPublisherOfferTemplateListByCategoryParamsCategories = "my_account"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesNewsletter      GetPublisherOfferTemplateListByCategoryParamsCategories = "newsletter"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesOffer           GetPublisherOfferTemplateListByCategoryParamsCategories = "offer"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesPianoId         GetPublisherOfferTemplateListByCategoryParamsCategories = "piano_id"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesPushEnrollment  GetPublisherOfferTemplateListByCategoryParamsCategories = "push_enrollment"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesRegistration    GetPublisherOfferTemplateListByCategoryParamsCategories = "registration"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesSocial          GetPublisherOfferTemplateListByCategoryParamsCategories = "social"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesSystem          GetPublisherOfferTemplateListByCategoryParamsCategories = "system"
	GetPublisherOfferTemplateListByCategoryParamsCategoriesUpgradeOffer    GetPublisherOfferTemplateListByCategoryParamsCategories = "upgrade_offer"
)

// Defines values for GetPublisherOfferTemplateListByCategoryParamsOrderBy.
const (
	GetPublisherOfferTemplateListByCategoryParamsOrderByArchivedDate  GetPublisherOfferTemplateListByCategoryParamsOrderBy = "archived_date"
	GetPublisherOfferTemplateListByCategoryParamsOrderByCreatedDate   GetPublisherOfferTemplateListByCategoryParamsOrderBy = "created_date"
	GetPublisherOfferTemplateListByCategoryParamsOrderByName          GetPublisherOfferTemplateListByCategoryParamsOrderBy = "name"
	GetPublisherOfferTemplateListByCategoryParamsOrderByPublishedDate GetPublisherOfferTemplateListByCategoryParamsOrderBy = "published_date"
	GetPublisherOfferTemplateListByCategoryParamsOrderByUpdatedDate   GetPublisherOfferTemplateListByCategoryParamsOrderBy = "updated_date"
)

// Defines values for GetPublisherOfferTemplateListByCategoryParamsOrderDirection.
const (
	GetPublisherOfferTemplateListByCategoryParamsOrderDirectionAsc  GetPublisherOfferTemplateListByCategoryParamsOrderDirection = "asc"
	GetPublisherOfferTemplateListByCategoryParamsOrderDirectionDesc GetPublisherOfferTemplateListByCategoryParamsOrderDirection = "desc"
)

// Defines values for GetPublisherPromotionCodeCountParamsState.
const (
	GetPublisherPromotionCodeCountParamsStateActive GetPublisherPromotionCodeCountParamsState = "active"
	GetPublisherPromotionCodeCountParamsStateUsed   GetPublisherPromotionCodeCountParamsState = "used"
)

// Defines values for GetPublisherPromotionCodeListParamsState.
const (
	GetPublisherPromotionCodeListParamsStateActive                    GetPublisherPromotionCodeListParamsState = "active"
	GetPublisherPromotionCodeListParamsStateReservedForDelayedPayment GetPublisherPromotionCodeListParamsState = "reserved_for_delayed_payment"
	GetPublisherPromotionCodeListParamsStateReservedForFreeTrial      GetPublisherPromotionCodeListParamsState = "reserved_for_free_trial"
	GetPublisherPromotionCodeListParamsStateUsed                      GetPublisherPromotionCodeListParamsState = "used"
)

// Defines values for GetPublisherPromotionCodeListParamsOrderBy.
const (
	GetPublisherPromotionCodeListParamsOrderByAssignedEmail GetPublisherPromotionCodeListParamsOrderBy = "assigned_email"
	GetPublisherPromotionCodeListParamsOrderByCode          GetPublisherPromotionCodeListParamsOrderBy = "code"
	GetPublisherPromotionCodeListParamsOrderByCreateBy      GetPublisherPromotionCodeListParamsOrderBy = "create_by"
	GetPublisherPromotionCodeListParamsOrderByCreateDate    GetPublisherPromotionCodeListParamsOrderBy = "create_date"
	GetPublisherPromotionCodeListParamsOrderByDeleted       GetPublisherPromotionCodeListParamsOrderBy = "deleted"
	GetPublisherPromotionCodeListParamsOrderByPromoCodeId   GetPublisherPromotionCodeListParamsOrderBy = "promo_code_id"
	GetPublisherPromotionCodeListParamsOrderByPromotionId   GetPublisherPromotionCodeListParamsOrderBy = "promotion_id"
	GetPublisherPromotionCodeListParamsOrderByPubId         GetPublisherPromotionCodeListParamsOrderBy = "pub_id"
	GetPublisherPromotionCodeListParamsOrderByReserveBy     GetPublisherPromotionCodeListParamsOrderBy = "reserve_by"
	GetPublisherPromotionCodeListParamsOrderByReserveDate   GetPublisherPromotionCodeListParamsOrderBy = "reserve_date"
	GetPublisherPromotionCodeListParamsOrderByState         GetPublisherPromotionCodeListParamsOrderBy = "state"
	GetPublisherPromotionCodeListParamsOrderByUpdateBy      GetPublisherPromotionCodeListParamsOrderBy = "update_by"
	GetPublisherPromotionCodeListParamsOrderByUpdateDate    GetPublisherPromotionCodeListParamsOrderBy = "update_date"
)

// Defines values for GetPublisherPromotionCodeListParamsOrderDirection.
const (
	GetPublisherPromotionCodeListParamsOrderDirectionAsc  GetPublisherPromotionCodeListParamsOrderDirection = "asc"
	GetPublisherPromotionCodeListParamsOrderDirectionDesc GetPublisherPromotionCodeListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherPromotionCountParamsExpired.
const (
	GetPublisherPromotionCountParamsExpiredActive     GetPublisherPromotionCountParamsExpired = "active"
	GetPublisherPromotionCountParamsExpiredAll        GetPublisherPromotionCountParamsExpired = "all"
	GetPublisherPromotionCountParamsExpiredExpired    GetPublisherPromotionCountParamsExpired = "expired"
	GetPublisherPromotionCountParamsExpiredNotStarted GetPublisherPromotionCountParamsExpired = "not_started"
)

// Defines values for GetPublisherPromotionListParamsExpired.
const (
	GetPublisherPromotionListParamsExpiredActive     GetPublisherPromotionListParamsExpired = "active"
	GetPublisherPromotionListParamsExpiredAll        GetPublisherPromotionListParamsExpired = "all"
	GetPublisherPromotionListParamsExpiredExpired    GetPublisherPromotionListParamsExpired = "expired"
	GetPublisherPromotionListParamsExpiredNotStarted GetPublisherPromotionListParamsExpired = "not_started"
)

// Defines values for GetPublisherPromotionListParamsOrderBy.
const (
	GetPublisherPromotionListParamsOrderByEndDate       GetPublisherPromotionListParamsOrderBy = "end_date"
	GetPublisherPromotionListParamsOrderByName          GetPublisherPromotionListParamsOrderBy = "name"
	GetPublisherPromotionListParamsOrderByPromotionCode GetPublisherPromotionListParamsOrderBy = "promotion_code"
	GetPublisherPromotionListParamsOrderByStartDate     GetPublisherPromotionListParamsOrderBy = "start_date"
	GetPublisherPromotionListParamsOrderByUses          GetPublisherPromotionListParamsOrderBy = "uses"
)

// Defines values for GetPublisherPromotionListParamsOrderDirection.
const (
	GetPublisherPromotionListParamsOrderDirectionAsc  GetPublisherPromotionListParamsOrderDirection = "asc"
	GetPublisherPromotionListParamsOrderDirectionDesc GetPublisherPromotionListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherPromotionTermListParamsOrderBy.
const (
	GetPublisherPromotionTermListParamsOrderByAppId                      GetPublisherPromotionTermListParamsOrderBy = "app_id"
	GetPublisherPromotionTermListParamsOrderByDefaultCountryId           GetPublisherPromotionTermListParamsOrderBy = "default_country_id"
	GetPublisherPromotionTermListParamsOrderByDeleted                    GetPublisherPromotionTermListParamsOrderBy = "deleted"
	GetPublisherPromotionTermListParamsOrderByDeliveryZoneId             GetPublisherPromotionTermListParamsOrderBy = "delivery_zone_id"
	GetPublisherPromotionTermListParamsOrderByDescription                GetPublisherPromotionTermListParamsOrderBy = "description"
	GetPublisherPromotionTermListParamsOrderByFallbackTermId             GetPublisherPromotionTermListParamsOrderBy = "fallback_term_id"
	GetPublisherPromotionTermListParamsOrderByIsCheckoutSupported        GetPublisherPromotionTermListParamsOrderBy = "is_checkout_supported"
	GetPublisherPromotionTermListParamsOrderByName                       GetPublisherPromotionTermListParamsOrderBy = "name"
	GetPublisherPromotionTermListParamsOrderByPaymentAllowCollectAddress GetPublisherPromotionTermListParamsOrderBy = "payment_allow_collect_address"
	GetPublisherPromotionTermListParamsOrderByPubId                      GetPublisherPromotionTermListParamsOrderBy = "pub_id"
	GetPublisherPromotionTermListParamsOrderByResourceId                 GetPublisherPromotionTermListParamsOrderBy = "resource_id"
	GetPublisherPromotionTermListParamsOrderByTM                         GetPublisherPromotionTermListParamsOrderBy = "TM"
	GetPublisherPromotionTermListParamsOrderByTermId                     GetPublisherPromotionTermListParamsOrderBy = "term_id"
	GetPublisherPromotionTermListParamsOrderByType                       GetPublisherPromotionTermListParamsOrderBy = "type"
	GetPublisherPromotionTermListParamsOrderByVerificationPeriod         GetPublisherPromotionTermListParamsOrderBy = "verification_period"
	GetPublisherPromotionTermListParamsOrderByVerifyOnRenewal            GetPublisherPromotionTermListParamsOrderBy = "verify_on_renewal"
)

// Defines values for GetPublisherPromotionTermListParamsOrderDirection.
const (
	GetPublisherPromotionTermListParamsOrderDirectionAsc  GetPublisherPromotionTermListParamsOrderDirection = "asc"
	GetPublisherPromotionTermListParamsOrderDirectionDesc GetPublisherPromotionTermListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherResourceBundleMembersParamsOrderBy.
const (
	GetPublisherResourceBundleMembersParamsOrderByAppId          GetPublisherResourceBundleMembersParamsOrderBy = "app_id"
	GetPublisherResourceBundleMembersParamsOrderByBundleType     GetPublisherResourceBundleMembersParamsOrderBy = "bundle_type"
	GetPublisherResourceBundleMembersParamsOrderByCreateBy       GetPublisherResourceBundleMembersParamsOrderBy = "create_by"
	GetPublisherResourceBundleMembersParamsOrderByCreateDate     GetPublisherResourceBundleMembersParamsOrderBy = "create_date"
	GetPublisherResourceBundleMembersParamsOrderByDeleted        GetPublisherResourceBundleMembersParamsOrderBy = "deleted"
	GetPublisherResourceBundleMembersParamsOrderByDescription    GetPublisherResourceBundleMembersParamsOrderBy = "description"
	GetPublisherResourceBundleMembersParamsOrderByDisabled       GetPublisherResourceBundleMembersParamsOrderBy = "disabled"
	GetPublisherResourceBundleMembersParamsOrderByExternalId     GetPublisherResourceBundleMembersParamsOrderBy = "external_id"
	GetPublisherResourceBundleMembersParamsOrderByImageUrl       GetPublisherResourceBundleMembersParamsOrderBy = "image_url"
	GetPublisherResourceBundleMembersParamsOrderByIsFbiaResource GetPublisherResourceBundleMembersParamsOrderBy = "is_fbia_resource"
	GetPublisherResourceBundleMembersParamsOrderByName           GetPublisherResourceBundleMembersParamsOrderBy = "name"
	GetPublisherResourceBundleMembersParamsOrderByPublishDate    GetPublisherResourceBundleMembersParamsOrderBy = "publish_date"
	GetPublisherResourceBundleMembersParamsOrderByResourceId     GetPublisherResourceBundleMembersParamsOrderBy = "resource_id"
	GetPublisherResourceBundleMembersParamsOrderByResourceUrl    GetPublisherResourceBundleMembersParamsOrderBy = "resource_url"
	GetPublisherResourceBundleMembersParamsOrderByRid            GetPublisherResourceBundleMembersParamsOrderBy = "rid"
	GetPublisherResourceBundleMembersParamsOrderByRidHash        GetPublisherResourceBundleMembersParamsOrderBy = "rid_hash"
	GetPublisherResourceBundleMembersParamsOrderByType           GetPublisherResourceBundleMembersParamsOrderBy = "type"
	GetPublisherResourceBundleMembersParamsOrderByUpdateBy       GetPublisherResourceBundleMembersParamsOrderBy = "update_by"
	GetPublisherResourceBundleMembersParamsOrderByUpdateDate     GetPublisherResourceBundleMembersParamsOrderBy = "update_date"
)

// Defines values for GetPublisherResourceBundleMembersParamsOrderDirection.
const (
	GetPublisherResourceBundleMembersParamsOrderDirectionAsc  GetPublisherResourceBundleMembersParamsOrderDirection = "asc"
	GetPublisherResourceBundleMembersParamsOrderDirectionDesc GetPublisherResourceBundleMembersParamsOrderDirection = "desc"
)

// Defines values for GetPublisherResourceListParamsOrderBy.
const (
	GetPublisherResourceListParamsOrderByBundleType  GetPublisherResourceListParamsOrderBy = "bundle_type"
	GetPublisherResourceListParamsOrderByCreateDate  GetPublisherResourceListParamsOrderBy = "create_date"
	GetPublisherResourceListParamsOrderByDeleted     GetPublisherResourceListParamsOrderBy = "deleted"
	GetPublisherResourceListParamsOrderByDescription GetPublisherResourceListParamsOrderBy = "description"
	GetPublisherResourceListParamsOrderByName        GetPublisherResourceListParamsOrderBy = "name"
	GetPublisherResourceListParamsOrderByPublishDate GetPublisherResourceListParamsOrderBy = "publish_date"
	GetPublisherResourceListParamsOrderByRid         GetPublisherResourceListParamsOrderBy = "rid"
	GetPublisherResourceListParamsOrderByType        GetPublisherResourceListParamsOrderBy = "type"
	GetPublisherResourceListParamsOrderByUpdateDate  GetPublisherResourceListParamsOrderBy = "update_date"
)

// Defines values for GetPublisherResourceListParamsOrderDirection.
const (
	GetPublisherResourceListParamsOrderDirectionAsc  GetPublisherResourceListParamsOrderDirection = "asc"
	GetPublisherResourceListParamsOrderDirectionDesc GetPublisherResourceListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherResourceListParamsType.
const (
	GetPublisherResourceListParamsTypeBundle   GetPublisherResourceListParamsType = "bundle"
	GetPublisherResourceListParamsTypeNA       GetPublisherResourceListParamsType = "NA"
	GetPublisherResourceListParamsTypePrint    GetPublisherResourceListParamsType = "print"
	GetPublisherResourceListParamsTypeStandard GetPublisherResourceListParamsType = "standard"
)

// Defines values for GetPublisherResourceTagBundlesParamsOrderBy.
const (
	GetPublisherResourceTagBundlesParamsOrderByAppId          GetPublisherResourceTagBundlesParamsOrderBy = "app_id"
	GetPublisherResourceTagBundlesParamsOrderByBundleType     GetPublisherResourceTagBundlesParamsOrderBy = "bundle_type"
	GetPublisherResourceTagBundlesParamsOrderByCreateBy       GetPublisherResourceTagBundlesParamsOrderBy = "create_by"
	GetPublisherResourceTagBundlesParamsOrderByCreateDate     GetPublisherResourceTagBundlesParamsOrderBy = "create_date"
	GetPublisherResourceTagBundlesParamsOrderByDeleted        GetPublisherResourceTagBundlesParamsOrderBy = "deleted"
	GetPublisherResourceTagBundlesParamsOrderByDescription    GetPublisherResourceTagBundlesParamsOrderBy = "description"
	GetPublisherResourceTagBundlesParamsOrderByDisabled       GetPublisherResourceTagBundlesParamsOrderBy = "disabled"
	GetPublisherResourceTagBundlesParamsOrderByExternalId     GetPublisherResourceTagBundlesParamsOrderBy = "external_id"
	GetPublisherResourceTagBundlesParamsOrderByImageUrl       GetPublisherResourceTagBundlesParamsOrderBy = "image_url"
	GetPublisherResourceTagBundlesParamsOrderByIsFbiaResource GetPublisherResourceTagBundlesParamsOrderBy = "is_fbia_resource"
	GetPublisherResourceTagBundlesParamsOrderByName           GetPublisherResourceTagBundlesParamsOrderBy = "name"
	GetPublisherResourceTagBundlesParamsOrderByPublishDate    GetPublisherResourceTagBundlesParamsOrderBy = "publish_date"
	GetPublisherResourceTagBundlesParamsOrderByResourceId     GetPublisherResourceTagBundlesParamsOrderBy = "resource_id"
	GetPublisherResourceTagBundlesParamsOrderByResourceUrl    GetPublisherResourceTagBundlesParamsOrderBy = "resource_url"
	GetPublisherResourceTagBundlesParamsOrderByRid            GetPublisherResourceTagBundlesParamsOrderBy = "rid"
	GetPublisherResourceTagBundlesParamsOrderByRidHash        GetPublisherResourceTagBundlesParamsOrderBy = "rid_hash"
	GetPublisherResourceTagBundlesParamsOrderByType           GetPublisherResourceTagBundlesParamsOrderBy = "type"
	GetPublisherResourceTagBundlesParamsOrderByUpdateBy       GetPublisherResourceTagBundlesParamsOrderBy = "update_by"
	GetPublisherResourceTagBundlesParamsOrderByUpdateDate     GetPublisherResourceTagBundlesParamsOrderBy = "update_date"
)

// Defines values for GetPublisherResourceTagBundlesParamsOrderDirection.
const (
	GetPublisherResourceTagBundlesParamsOrderDirectionAsc  GetPublisherResourceTagBundlesParamsOrderDirection = "asc"
	GetPublisherResourceTagBundlesParamsOrderDirectionDesc GetPublisherResourceTagBundlesParamsOrderDirection = "desc"
)

// Defines values for GetPublisherResourceTagBundlesParamsType.
const (
	GetPublisherResourceTagBundlesParamsTypeBundle   GetPublisherResourceTagBundlesParamsType = "bundle"
	GetPublisherResourceTagBundlesParamsTypeNA       GetPublisherResourceTagBundlesParamsType = "NA"
	GetPublisherResourceTagBundlesParamsTypePrint    GetPublisherResourceTagBundlesParamsType = "print"
	GetPublisherResourceTagBundlesParamsTypeStandard GetPublisherResourceTagBundlesParamsType = "standard"
)

// Defines values for GetPublisherResourceTagCreateParamsType.
const (
	GetPublisherResourceTagCreateParamsTypeFixedBundle GetPublisherResourceTagCreateParamsType = "fixed_bundle"
	GetPublisherResourceTagCreateParamsTypeStandard    GetPublisherResourceTagCreateParamsType = "standard"
)

// Defines values for GetPublisherResourceUserListParamsOrderBy.
const (
	GetPublisherResourceUserListParamsOrderByCreated GetPublisherResourceUserListParamsOrderBy = "created"
	GetPublisherResourceUserListParamsOrderByEmail   GetPublisherResourceUserListParamsOrderBy = "email"
	GetPublisherResourceUserListParamsOrderByFname   GetPublisherResourceUserListParamsOrderBy = "fname"
	GetPublisherResourceUserListParamsOrderByLname   GetPublisherResourceUserListParamsOrderBy = "lname"
	GetPublisherResourceUserListParamsOrderByName    GetPublisherResourceUserListParamsOrderBy = "name"
	GetPublisherResourceUserListParamsOrderByUid     GetPublisherResourceUserListParamsOrderBy = "uid"
)

// Defines values for GetPublisherResourceUserListParamsOrderDirection.
const (
	GetPublisherResourceUserListParamsOrderDirectionAsc  GetPublisherResourceUserListParamsOrderDirection = "asc"
	GetPublisherResourceUserListParamsOrderDirectionDesc GetPublisherResourceUserListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherSubscriptionListParamsType.
const (
	GetPublisherSubscriptionListParamsTypeActive           GetPublisherSubscriptionListParamsType = "active"
	GetPublisherSubscriptionListParamsTypeCancelled        GetPublisherSubscriptionListParamsType = "cancelled"
	GetPublisherSubscriptionListParamsTypeCompleted        GetPublisherSubscriptionListParamsType = "completed"
	GetPublisherSubscriptionListParamsTypeDeleted          GetPublisherSubscriptionListParamsType = "deleted"
	GetPublisherSubscriptionListParamsTypeExpired          GetPublisherSubscriptionListParamsType = "expired"
	GetPublisherSubscriptionListParamsTypeExpiredWithError GetPublisherSubscriptionListParamsType = "expired_with_error"
	GetPublisherSubscriptionListParamsTypeFailAndRetry     GetPublisherSubscriptionListParamsType = "fail_and_retry"
	GetPublisherSubscriptionListParamsTypeNotStarted       GetPublisherSubscriptionListParamsType = "not_started"
	GetPublisherSubscriptionListParamsTypePending          GetPublisherSubscriptionListParamsType = "pending"
	GetPublisherSubscriptionListParamsTypeUpgraded         GetPublisherSubscriptionListParamsType = "upgraded"
	GetPublisherSubscriptionListParamsTypeWaitConfirmed    GetPublisherSubscriptionListParamsType = "wait_confirmed"
)

// Defines values for GetPublisherSubscriptionListParamsSelectBy.
const (
	GetPublisherSubscriptionListParamsSelectByCreate   GetPublisherSubscriptionListParamsSelectBy = "create"
	GetPublisherSubscriptionListParamsSelectByLastBill GetPublisherSubscriptionListParamsSelectBy = "last_bill"
	GetPublisherSubscriptionListParamsSelectByNextBill GetPublisherSubscriptionListParamsSelectBy = "next_bill"
	GetPublisherSubscriptionListParamsSelectByUpdate   GetPublisherSubscriptionListParamsSelectBy = "update"
)

// Defines values for GetPublisherSubscriptionListParamsStatus.
const (
	GetPublisherSubscriptionListParamsStatusActive         GetPublisherSubscriptionListParamsStatus = "active"
	GetPublisherSubscriptionListParamsStatusCancelled      GetPublisherSubscriptionListParamsStatus = "cancelled"
	GetPublisherSubscriptionListParamsStatusCompleted      GetPublisherSubscriptionListParamsStatus = "completed"
	GetPublisherSubscriptionListParamsStatusExpired        GetPublisherSubscriptionListParamsStatus = "expired"
	GetPublisherSubscriptionListParamsStatusFailedAndRetry GetPublisherSubscriptionListParamsStatus = "failedAndRetry"
	GetPublisherSubscriptionListParamsStatusPaymentFailure GetPublisherSubscriptionListParamsStatus = "paymentFailure"
	GetPublisherSubscriptionListParamsStatusRenewed        GetPublisherSubscriptionListParamsStatus = "renewed"
	GetPublisherSubscriptionListParamsStatusUpgraded       GetPublisherSubscriptionListParamsStatus = "upgraded"
)

// Defines values for GetPublisherSubscriptionSearchParamsOrderBy.
const (
	NextBillDate       GetPublisherSubscriptionSearchParamsOrderBy = "next_bill_date"
	StartDate          GetPublisherSubscriptionSearchParamsOrderBy = "start_date"
	SubscriptionStatus GetPublisherSubscriptionSearchParamsOrderBy = "subscription_status"
)

// Defines values for GetPublisherSubscriptionSearchParamsOrderDirection.
const (
	GetPublisherSubscriptionSearchParamsOrderDirectionAsc  GetPublisherSubscriptionSearchParamsOrderDirection = "asc"
	GetPublisherSubscriptionSearchParamsOrderDirectionDesc GetPublisherSubscriptionSearchParamsOrderDirection = "desc"
)

// Defines values for GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses.
const (
	GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatusesActive         GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses = "active"
	GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatusesFailedAndRetry GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses = "failedAndRetry"
)

// Defines values for GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses.
const (
	Cancelled      GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses = "cancelled"
	Completed      GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses = "completed"
	Expired        GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses = "expired"
	PaymentFailure GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses = "paymentFailure"
	Upgraded       GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses = "upgraded"
)

// Defines values for GetPublisherSubscriptionSearchParamsUpdatedSubscriptionsStatuses.
const (
	Renewed GetPublisherSubscriptionSearchParamsUpdatedSubscriptionsStatuses = "renewed"
)

// Defines values for GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes.
const (
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesAdview                         GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "adview"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesCustom                         GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "custom"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesDynamic                        GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "dynamic"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesEmailDomainContract            GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "email_domain_contract"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesExternal                       GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "external"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesGift                           GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "gift"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesGrantAccess                    GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "grant_access"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesIpRangeContract                GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "ip_range_contract"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesLinked                         GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "linked"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesNewsletter                     GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "newsletter"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesPayment                        GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "payment"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesRegistration                   GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "registration"
	GetPublisherSubscriptionSearchParamsSubscriptionsTermTypesSpecificEmailAddressesContract GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes = "specific_email_addresses_contract"
)

// Defines values for GetPublisherTermApplicableParamsOrderBy.
const (
	GetPublisherTermApplicableParamsOrderByAdviewAccessPeriod           GetPublisherTermApplicableParamsOrderBy = "adview_access_period"
	GetPublisherTermApplicableParamsOrderByAdviewVastUrl                GetPublisherTermApplicableParamsOrderBy = "adview_vast_url"
	GetPublisherTermApplicableParamsOrderByAppId                        GetPublisherTermApplicableParamsOrderBy = "app_id"
	GetPublisherTermApplicableParamsOrderByCreateBy                     GetPublisherTermApplicableParamsOrderBy = "create_by"
	GetPublisherTermApplicableParamsOrderByCreateDate                   GetPublisherTermApplicableParamsOrderBy = "create_date"
	GetPublisherTermApplicableParamsOrderByCustomDefaultAccessPeriod    GetPublisherTermApplicableParamsOrderBy = "custom_default_access_period"
	GetPublisherTermApplicableParamsOrderByCustomRequireUser            GetPublisherTermApplicableParamsOrderBy = "custom_require_user"
	GetPublisherTermApplicableParamsOrderByDefaultCountryId             GetPublisherTermApplicableParamsOrderBy = "default_country_id"
	GetPublisherTermApplicableParamsOrderByDeleted                      GetPublisherTermApplicableParamsOrderBy = "deleted"
	GetPublisherTermApplicableParamsOrderByDescription                  GetPublisherTermApplicableParamsOrderBy = "description"
	GetPublisherTermApplicableParamsOrderByEvtBillingPlan               GetPublisherTermApplicableParamsOrderBy = "evt_billing_plan"
	GetPublisherTermApplicableParamsOrderByEvtItunesBundleId            GetPublisherTermApplicableParamsOrderBy = "evt_itunes_bundle_id"
	GetPublisherTermApplicableParamsOrderByEvtItunesProductId           GetPublisherTermApplicableParamsOrderBy = "evt_itunes_product_id"
	GetPublisherTermApplicableParamsOrderByFallbackTermId               GetPublisherTermApplicableParamsOrderBy = "fallback_term_id"
	GetPublisherTermApplicableParamsOrderByGatedGracePeriod             GetPublisherTermApplicableParamsOrderBy = "gated_grace_period"
	GetPublisherTermApplicableParamsOrderByIsCheckoutSupported          GetPublisherTermApplicableParamsOrderBy = "is_checkout_supported"
	GetPublisherTermApplicableParamsOrderByName                         GetPublisherTermApplicableParamsOrderBy = "name"
	GetPublisherTermApplicableParamsOrderByPaymentAllowCollectAddress   GetPublisherTermApplicableParamsOrderBy = "payment_allow_collect_address"
	GetPublisherTermApplicableParamsOrderByPaymentAllowGift             GetPublisherTermApplicableParamsOrderBy = "payment_allow_gift"
	GetPublisherTermApplicableParamsOrderByPaymentAllowPromoCodes       GetPublisherTermApplicableParamsOrderBy = "payment_allow_promo_codes"
	GetPublisherTermApplicableParamsOrderByPaymentAllowRenewDays        GetPublisherTermApplicableParamsOrderBy = "payment_allow_renew_days"
	GetPublisherTermApplicableParamsOrderByPaymentBillingPlan           GetPublisherTermApplicableParamsOrderBy = "payment_billing_plan"
	GetPublisherTermApplicableParamsOrderByPaymentCurrency              GetPublisherTermApplicableParamsOrderBy = "payment_currency"
	GetPublisherTermApplicableParamsOrderByPaymentForceAutoRenew        GetPublisherTermApplicableParamsOrderBy = "payment_force_auto_renew"
	GetPublisherTermApplicableParamsOrderByPaymentNewCustomersOnly      GetPublisherTermApplicableParamsOrderBy = "payment_new_customers_only"
	GetPublisherTermApplicableParamsOrderByPaymentRenewGracePeriod      GetPublisherTermApplicableParamsOrderBy = "payment_renew_grace_period"
	GetPublisherTermApplicableParamsOrderByPaymentTrialNewCustomersOnly GetPublisherTermApplicableParamsOrderBy = "payment_trial_new_customers_only"
	GetPublisherTermApplicableParamsOrderByPubId                        GetPublisherTermApplicableParamsOrderBy = "pub_id"
	GetPublisherTermApplicableParamsOrderByRegistrationAccessPeriod     GetPublisherTermApplicableParamsOrderBy = "registration_access_period"
	GetPublisherTermApplicableParamsOrderByRegistrationGracePeriod      GetPublisherTermApplicableParamsOrderBy = "registration_grace_period"
	GetPublisherTermApplicableParamsOrderByResourceId                   GetPublisherTermApplicableParamsOrderBy = "resource_id"
	GetPublisherTermApplicableParamsOrderByTermId                       GetPublisherTermApplicableParamsOrderBy = "term_id"
	GetPublisherTermApplicableParamsOrderByType                         GetPublisherTermApplicableParamsOrderBy = "type"
	GetPublisherTermApplicableParamsOrderByUpdateBy                     GetPublisherTermApplicableParamsOrderBy = "update_by"
	GetPublisherTermApplicableParamsOrderByUpdateDate                   GetPublisherTermApplicableParamsOrderBy = "update_date"
	GetPublisherTermApplicableParamsOrderByVerificationPeriod           GetPublisherTermApplicableParamsOrderBy = "verification_period"
	GetPublisherTermApplicableParamsOrderByVerifyOnRenewal              GetPublisherTermApplicableParamsOrderBy = "verify_on_renewal"
	GetPublisherTermApplicableParamsOrderByVoucheringPolicyId           GetPublisherTermApplicableParamsOrderBy = "vouchering_policy_id"
)

// Defines values for GetPublisherTermApplicableParamsOrderDirection.
const (
	GetPublisherTermApplicableParamsOrderDirectionAsc  GetPublisherTermApplicableParamsOrderDirection = "asc"
	GetPublisherTermApplicableParamsOrderDirectionDesc GetPublisherTermApplicableParamsOrderDirection = "desc"
)

// Defines values for GetPublisherTermCountParamsIncludeType.
const (
	GetPublisherTermCountParamsIncludeTypeAdview                         GetPublisherTermCountParamsIncludeType = "adview"
	GetPublisherTermCountParamsIncludeTypeCustom                         GetPublisherTermCountParamsIncludeType = "custom"
	GetPublisherTermCountParamsIncludeTypeDynamic                        GetPublisherTermCountParamsIncludeType = "dynamic"
	GetPublisherTermCountParamsIncludeTypeEmailDomainContract            GetPublisherTermCountParamsIncludeType = "email_domain_contract"
	GetPublisherTermCountParamsIncludeTypeExternal                       GetPublisherTermCountParamsIncludeType = "external"
	GetPublisherTermCountParamsIncludeTypeGift                           GetPublisherTermCountParamsIncludeType = "gift"
	GetPublisherTermCountParamsIncludeTypeGrantAccess                    GetPublisherTermCountParamsIncludeType = "grant_access"
	GetPublisherTermCountParamsIncludeTypeIpRangeContract                GetPublisherTermCountParamsIncludeType = "ip_range_contract"
	GetPublisherTermCountParamsIncludeTypeLinked                         GetPublisherTermCountParamsIncludeType = "linked"
	GetPublisherTermCountParamsIncludeTypeNewsletter                     GetPublisherTermCountParamsIncludeType = "newsletter"
	GetPublisherTermCountParamsIncludeTypePayment                        GetPublisherTermCountParamsIncludeType = "payment"
	GetPublisherTermCountParamsIncludeTypeRegistration                   GetPublisherTermCountParamsIncludeType = "registration"
	GetPublisherTermCountParamsIncludeTypeSpecificEmailAddressesContract GetPublisherTermCountParamsIncludeType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherTermCountParamsExcludeType.
const (
	Adview                         GetPublisherTermCountParamsExcludeType = "adview"
	Custom                         GetPublisherTermCountParamsExcludeType = "custom"
	Dynamic                        GetPublisherTermCountParamsExcludeType = "dynamic"
	EmailDomainContract            GetPublisherTermCountParamsExcludeType = "email_domain_contract"
	External                       GetPublisherTermCountParamsExcludeType = "external"
	Gift                           GetPublisherTermCountParamsExcludeType = "gift"
	GrantAccess                    GetPublisherTermCountParamsExcludeType = "grant_access"
	IpRangeContract                GetPublisherTermCountParamsExcludeType = "ip_range_contract"
	Linked                         GetPublisherTermCountParamsExcludeType = "linked"
	Newsletter                     GetPublisherTermCountParamsExcludeType = "newsletter"
	Payment                        GetPublisherTermCountParamsExcludeType = "payment"
	Registration                   GetPublisherTermCountParamsExcludeType = "registration"
	SpecificEmailAddressesContract GetPublisherTermCountParamsExcludeType = "specific_email_addresses_contract"
)

// Defines values for GetPublisherTermCountParamsResourceType.
const (
	GetPublisherTermCountParamsResourceTypeBundle   GetPublisherTermCountParamsResourceType = "bundle"
	GetPublisherTermCountParamsResourceTypePrint    GetPublisherTermCountParamsResourceType = "print"
	GetPublisherTermCountParamsResourceTypeStandard GetPublisherTermCountParamsResourceType = "standard"
)

// Defines values for GetPublisherTermCountParamsSource.
const (
	Abril              GetPublisherTermCountParamsSource = "abril"
	AbrilAddress       GetPublisherTermCountParamsSource = "abril_address"
	AppleItunes        GetPublisherTermCountParamsSource = "apple_itunes"
	Cds                GetPublisherTermCountParamsSource = "cds"
	GooglePlay         GetPublisherTermCountParamsSource = "google_play"
	Newscycle          GetPublisherTermCountParamsSource = "newscycle"
	PaypalSubscription GetPublisherTermCountParamsSource = "paypal_subscription"
	PscProvider        GetPublisherTermCountParamsSource = "psc_provider"
	Swg                GetPublisherTermCountParamsSource = "swg"
	Vestdb             GetPublisherTermCountParamsSource = "vestdb"
)

// Defines values for GetPublisherUserEmailListParamsOrderBy.
const (
	DateCreated GetPublisherUserEmailListParamsOrderBy = "date_created"
	DateOpened  GetPublisherUserEmailListParamsOrderBy = "date_opened"
	MailLogId   GetPublisherUserEmailListParamsOrderBy = "mail_log_id"
)

// Defines values for GetPublisherUserEmailListParamsOrderDirection.
const (
	GetPublisherUserEmailListParamsOrderDirectionAsc  GetPublisherUserEmailListParamsOrderDirection = "asc"
	GetPublisherUserEmailListParamsOrderDirectionDesc GetPublisherUserEmailListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherUserNoteListParamsOrderBy.
const (
	GetPublisherUserNoteListParamsOrderByCreateDate GetPublisherUserNoteListParamsOrderBy = "create_date"
	GetPublisherUserNoteListParamsOrderByUpdateDate GetPublisherUserNoteListParamsOrderBy = "update_date"
	GetPublisherUserNoteListParamsOrderByUserNoteId GetPublisherUserNoteListParamsOrderBy = "user_note_id"
)

// Defines values for GetPublisherUserNoteListParamsOrderDirection.
const (
	GetPublisherUserNoteListParamsOrderDirectionAsc  GetPublisherUserNoteListParamsOrderDirection = "asc"
	GetPublisherUserNoteListParamsOrderDirectionDesc GetPublisherUserNoteListParamsOrderDirection = "desc"
)

// Defines values for GetPublisherWebhookResponseListParamsOrderBy.
const (
	CreateDate GetPublisherWebhookResponseListParamsOrderBy = "create_date"
)

// Defines values for GetPublisherWebhookResponseListParamsOrderDirection.
const (
	GetPublisherWebhookResponseListParamsOrderDirectionAsc  GetPublisherWebhookResponseListParamsOrderDirection = "asc"
	GetPublisherWebhookResponseListParamsOrderDirectionDesc GetPublisherWebhookResponseListParamsOrderDirection = "desc"
)

// Access defines model for Access.
type Access struct {
	// AccessId The access ID
	AccessId string `json:"access_id"`

	// CanRevokeAccess Whether the access can be revoked ("true" or "false")
	CanRevokeAccess bool `json:"can_revoke_access"`

	// ExpireDate The expire date of the access item; null means unlimited
	ExpireDate int `json:"expire_date"`

	// Granted Whether the access is granted
	Granted bool `json:"granted"`

	// ParentAccessId The parent access ID (for accesses to bundled resources)
	ParentAccessId string   `json:"parent_access_id"`
	Resource       Resource `json:"resource"`

	// Revoked Whether the access is revoked
	Revoked bool `json:"revoked"`

	// StartDate The start date.
	StartDate int  `json:"start_date"`
	User      User `json:"user"`
}

// AccessArrayResult defines model for AccessArrayResult.
type AccessArrayResult struct {
	Access []Access `json:"Access"`
}

// AccessDTO defines model for AccessDTO.
type AccessDTO struct {
	// AccessId The access ID
	AccessId string `json:"access_id"`

	// CanRevokeAccess Whether the access can be revoked ("true" or "false")
	CanRevokeAccess bool `json:"can_revoke_access"`

	// CustomData Custom data
	CustomData string `json:"custom_data"`

	// ExpireDate The expire date of the access item; null means unlimited
	ExpireDate int `json:"expire_date"`

	// Granted Granted == true if the user has access
	Granted bool `json:"granted"`

	// ParentAccessId The parent access ID (for accesses to bundled resources)
	ParentAccessId string      `json:"parent_access_id"`
	Resource       ResourceDto `json:"resource"`

	// StartDate The start date.
	StartDate int     `json:"start_date"`
	User      UserDto `json:"user"`
}

// AccessDTOArrayResult defines model for AccessDTOArrayResult.
type AccessDTOArrayResult struct {
	AccessDTO []AccessDTO `json:"AccessDTO"`
}

// AccessDTOResult defines model for AccessDTOResult.
type AccessDTOResult struct {
	AccessDTO AccessDTO `json:"AccessDTO"`
}

// AccessResult defines model for AccessResult.
type AccessResult struct {
	Access Access `json:"Access"`
}

// AdvancedOptions defines model for AdvancedOptions.
type AdvancedOptions struct {
	ShowOptions []string `json:"show_options"`
}

// AfcConfiguration defines model for AfcConfiguration.
type AfcConfiguration struct {
	// AfcClientId AFC Client ID
	AfcClientId string `json:"afc_client_id"`

	// AfcClientProfileId AFC Client profile ID
	AfcClientProfileId string `json:"afc_client_profile_id"`

	// AfcPassword AFC Password
	AfcPassword string `json:"afc_password"`

	// AfcUsername AFC Username
	AfcUsername string `json:"afc_username"`
}

// AfcConfigurationResult defines model for AfcConfigurationResult.
type AfcConfigurationResult struct {
	AfcConfiguration AfcConfiguration `json:"AfcConfiguration"`
}

// App defines model for App.
type App struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ApiToken API token (empty for security reasons)
	ApiToken string `json:"api_token"`

	// DefaultLang The default language
	DefaultLang string `json:"default_lang"`

	// Details The application details
	Details *string `json:"details"`

	// Email Email address associated with this app
	Email string `json:"email"`

	// EmailLang The email language
	EmailLang string `json:"email_lang"`

	// Logo1 Primary image displayed within the dashboard
	Logo1 string `json:"logo1"`

	// Logo2 Secondary image dispalyed within the ticket
	Logo2 *string `json:"logo2"`

	// Name The application name
	Name string `json:"name"`

	// PrivateKey The app's private key (empty for security reasons)
	PrivateKey string `json:"private_key"`

	// State Current state of the app
	State AppState `json:"state"`

	// Url The application website
	Url string `json:"url"`

	// UserProvider The user token provider
	UserProvider AppUserProvider `json:"user_provider"`
}

// AppState Current state of the app
type AppState string

// AppUserProvider The user token provider
type AppUserProvider string

// AppArrayResult defines model for AppArrayResult.
type AppArrayResult struct {
	Apps []App `json:"apps"`
}

// AppFeatures defines model for AppFeatures.
type AppFeatures struct {
	Composer Composer `json:"composer"`

	// IsCheckoutAuthenticationInSeparateState Whether checkout authentication in separate state
	IsCheckoutAuthenticationInSeparateState bool `json:"is_checkout_authentication_in_separate_state"`

	// IsPaymentMockEnabled Whether a mock provider is enabled instead of real payment providers
	IsPaymentMockEnabled bool `json:"is_payment_mock_enabled"`

	// IsPublisherDashboardLocalizationEnabled Whether publisher dashboard localization is enabled
	IsPublisherDashboardLocalizationEnabled bool                     `json:"is_publisher_dashboard_localization_enabled"`
	MyAccount                               MyAccount                `json:"my_account"`
	RedemptionPage                          RedemptionPage           `json:"redemption_page"`
	SubscriptionRestrictions                SubscriptionRestrictions `json:"subscription_restrictions"`
}

// AppFeaturesResult defines model for AppFeaturesResult.
type AppFeaturesResult struct {
	AppFeatures *AppFeatures `json:"app_features,omitempty"`
}

// AppResourceCount defines model for AppResourceCount.
type AppResourceCount struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ResourceCount The resource count of the app
	ResourceCount int32 `json:"resource_count"`
}

// AppResourceCountArrayResult defines model for AppResourceCountArrayResult.
type AppResourceCountArrayResult struct {
	AppResourceCount []AppResourceCount `json:"AppResourceCount"`
}

// AppResult defines model for AppResult.
type AppResult struct {
	App App `json:"app"`
}

// BooleanResult defines model for BooleanResult.
type BooleanResult struct {
	Data bool `json:"data"`
}

// BulkUserImport defines model for BulkUserImport.
type BulkUserImport struct {
	// BulkUserImportCompleted The time stamp of the bulk user import completion
	BulkUserImportCompleted int `json:"bulk_user_import_completed"`

	// BulkUserImportCreated The time stamp of when the request for the bulk user import was created
	BulkUserImportCreated int `json:"bulk_user_import_created"`

	// BulkUserImportId The ID of the bulk user import
	BulkUserImportId string `json:"bulk_user_import_id"`
}

// BulkUserImportArrayResult defines model for BulkUserImportArrayResult.
type BulkUserImportArrayResult struct {
	BulkUserImport []BulkUserImport `json:"BulkUserImport"`
}

// BulkUserImportProcessingRequestDto defines model for BulkUserImportProcessingRequestDto.
type BulkUserImportProcessingRequestDto struct {
	// BulkUserImportCreated The time stamp of when the request for the bulk user import was created
	BulkUserImportCreated int `json:"bulk_user_import_created"`

	// BulkUserImportId The ID of the bulk user import
	BulkUserImportId string `json:"bulk_user_import_id"`

	// BulkUserImportProcessedUserCount The count of users in progress
	BulkUserImportProcessedUserCount int32 `json:"bulk_user_import_processed_user_count"`

	// BulkUserImportTotalUserCount The total user count of the bulk user import
	BulkUserImportTotalUserCount int32 `json:"bulk_user_import_total_user_count"`
}

// BulkUserImportProcessingRequestDtoArrayResult defines model for BulkUserImportProcessingRequestDtoArrayResult.
type BulkUserImportProcessingRequestDtoArrayResult struct {
	BulkUserImportProcessingRequestDto []BulkUserImportProcessingRequestDto `json:"BulkUserImportProcessingRequestDto"`
}

// CommentAction defines model for CommentAction.
type CommentAction struct {
	// Caption Caption of inquiry action
	Caption CommentActionCaption `json:"caption"`

	// Id The inquiry action ID
	Id string `json:"id"`
}

// CommentActionCaption Caption of inquiry action
type CommentActionCaption string

// CommentActionArrayResult defines model for CommentActionArrayResult.
type CommentActionArrayResult struct {
	CommentAction []CommentAction `json:"CommentAction"`
}

// Composer defines model for Composer.
type Composer struct {
	// Enabled Whether the property is enabled
	Enabled bool `json:"enabled"`
}

// ConfigurationPropertyMetadata defines model for ConfigurationPropertyMetadata.
type ConfigurationPropertyMetadata struct {
	// Attributes Web UI controls attributes for building markup
	Attributes string `json:"attributes"`

	// Name The name
	Name       string                          `json:"name"`
	Properties []ConfigurationPropertyMetadata `json:"properties"`

	// ValidationRules Validation rules for front side properties validation
	ValidationRules string `json:"validation_rules"`
}

// Consent defines model for Consent.
type Consent struct {
	// ConsentId The consent ID
	ConsentId string `json:"consent_id"`

	// DisplayText The displayed text of the consent box
	DisplayText string `json:"display_text"`

	// Enabled Whether the consent box is enabled
	Enabled bool `json:"enabled"`

	// ErrorMessage The consent box error message
	ErrorMessage string `json:"error_message"`

	// FieldId The ID of the consent box field
	FieldId string `json:"field_id"`

	// FieldIdEnabled Whether the field ID can be edited
	FieldIdEnabled bool `json:"field_id_enabled"`

	// FieldName The name of the consent box field
	FieldName string `json:"field_name"`

	// PreChecked Whether the consent box is pre-checked
	PreChecked bool `json:"pre_checked"`

	// Required Whether the consent box is required
	Required bool `json:"required"`

	// Type The consent box type ("registration" or "checkout")
	Type ConsentType `json:"type"`
}

// ConsentType The consent box type ("registration" or "checkout")
type ConsentType string

// ConsentArrayResult defines model for ConsentArrayResult.
type ConsentArrayResult struct {
	Consents []Consent `json:"Consents"`
}

// ConsentBoxEntry defines model for ConsentBoxEntry.
type ConsentBoxEntry struct {
	// CreateDate The date when the entry was created
	CreateDate int `json:"create_date"`

	// DisplayText The displayed text of the consent box
	DisplayText string `json:"display_text"`

	// Entry Whether the user checked the consent box
	Entry bool `json:"entry"`

	// FieldName The name of the consent box field
	FieldName string `json:"field_name"`

	// Type The consent box type ("registration" or "checkout")
	Type ConsentBoxEntryType `json:"type"`
}

// ConsentBoxEntryType The consent box type ("registration" or "checkout")
type ConsentBoxEntryType string

// ConsentBoxEntryArrayResult defines model for ConsentBoxEntryArrayResult.
type ConsentBoxEntryArrayResult struct {
	ConsentBoxEntry []ConsentBoxEntry `json:"ConsentBoxEntry"`
}

// ConsentResult defines model for ConsentResult.
type ConsentResult struct {
	Consent Consent `json:"Consent"`
}

// Contract defines model for Contract.
type Contract struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractConversionsCount The count of conversions for the contract
	ContractConversionsCount int32 `json:"contract_conversions_count"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractIsActive Whether the contract is active
	ContractIsActive bool             `json:"contract_is_active"`
	ContractPeriods  []SchedulePeriod `json:"contract_periods"`

	// ContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
	ContractType ContractContractType `json:"contract_type"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Description The description
	Description *string `json:"description"`

	// IsHardSeatsLimitType The seats limit type ("FALSE": a notification is sent if the number of seats is exceeded, "TRUE": no user can access if the number of seats is exceeded)
	IsHardSeatsLimitType bool `json:"is_hard_seats_limit_type"`

	// LandingPageUrl The relative URL of the contract. It will be appended to the licensing base URL to get the complete landing page URL
	LandingPageUrl string `json:"landing_page_url"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// Name The name
	Name string `json:"name"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`

	// SeatsNumber The number of users who can access this contract
	SeatsNumber int32 `json:"seats_number"`
}

// ContractContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
type ContractContractType string

// ContractArrayResult defines model for ContractArrayResult.
type ContractArrayResult struct {
	Contract []Contract `json:"Contract"`
}

// ContractDomain defines model for ContractDomain.
type ContractDomain struct {
	// ActiveContractUsersCount The count of contract users in the "ACTIVE" status
	ActiveContractUsersCount int32 `json:"active_contract_users_count"`

	// ContractDomainId The public ID of the contract domain
	ContractDomainId string `json:"contract_domain_id"`

	// ContractDomainValue The domain value for the contract domain
	ContractDomainValue string `json:"contract_domain_value"`

	// ContractUsersCount The count of contract users
	ContractUsersCount int32 `json:"contract_users_count"`

	// Status The status of the contract domain
	Status ContractDomainStatus `json:"status"`
}

// ContractDomainStatus The status of the contract domain
type ContractDomainStatus string

// ContractDomainArrayResult defines model for ContractDomainArrayResult.
type ContractDomainArrayResult struct {
	ContractDomain []ContractDomain `json:"ContractDomain"`
}

// ContractDomainResult defines model for ContractDomainResult.
type ContractDomainResult struct {
	ContractDomain ContractDomain `json:"ContractDomain"`
}

// ContractIpRange defines model for ContractIpRange.
type ContractIpRange struct {
	// ContractIpRangeId The public ID of the contract ip range
	ContractIpRangeId string `json:"contract_ip_range_id"`

	// IpRange Start of contract IP address range
	IpRange string `json:"ip_range"`

	// Status The status of the contract ip range
	Status ContractIpRangeStatus `json:"status"`
}

// ContractIpRangeStatus The status of the contract ip range
type ContractIpRangeStatus string

// ContractIpRangeArrayResult defines model for ContractIpRangeArrayResult.
type ContractIpRangeArrayResult struct {
	ContractIpRange []ContractIpRange `json:"ContractIpRange"`
}

// ContractIpRangeResult defines model for ContractIpRangeResult.
type ContractIpRangeResult struct {
	ContractIpRange ContractIpRange `json:"ContractIpRange"`
}

// ContractResult defines model for ContractResult.
type ContractResult struct {
	Contract *Contract `json:"Contract,omitempty"`
}

// ContractUser defines model for ContractUser.
type ContractUser struct {
	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Status The status of the user access redemption
	Status ContractUserStatus `json:"status"`
}

// ContractUserStatus The status of the user access redemption
type ContractUserStatus string

// ContractUserArrayResult defines model for ContractUserArrayResult.
type ContractUserArrayResult struct {
	ContractUser []ContractUser `json:"ContractUser"`
}

// ContractUserResult defines model for ContractUserResult.
type ContractUserResult struct {
	ContractUser ContractUser `json:"ContractUser"`
}

// Country defines model for Country.
type Country struct {
	// CountryCode The country code
	CountryCode string `json:"country_code"`

	// CountryId The country ID
	CountryId string `json:"country_id"`

	// CountryName The country name
	CountryName string   `json:"country_name"`
	Regions     []Region `json:"regions"`
}

// CountrySimpleModel defines model for CountrySimpleModel.
type CountrySimpleModel struct {
	// CountryCode The country code
	CountryCode string `json:"country_code"`

	// PubId Public ID
	PubId string `json:"pub_id"`
}

// CreditGuardStoredFields defines model for CreditGuardStoredFields.
type CreditGuardStoredFields struct {
	// AuthNumber Auth number
	AuthNumber string `json:"auth_number"`

	// CardAcquirer Card acquirer
	CardAcquirer string `json:"card_acquirer"`

	// CardExpiration Card expiration
	CardExpiration string `json:"card_expiration"`

	// CardId Card id
	CardId string `json:"card_id"`

	// CardMask Card mask
	CardMask string `json:"card_mask"`

	// CgUid shovar
	CgUid string `json:"cg_uid"`

	// Shovar shovar
	Shovar string `json:"shovar"`

	// SlaveTerminalNumber Slave terminal number
	SlaveTerminalNumber string `json:"slave_terminal_number"`

	// SlaveTerminalSequence Slave terminal sequence
	SlaveTerminalSequence string `json:"slave_terminal_sequence"`

	// TerminalNumber Terminal Number
	TerminalNumber string `json:"terminal_number"`

	// UserData1 User data 1
	UserData1 string `json:"user_data_1"`

	// UserData10 User data 10
	UserData10 string `json:"user_data_10"`

	// UserData2 User data 2
	UserData2 string `json:"user_data_2"`

	// UserData3 User data 3
	UserData3 string `json:"user_data_3"`

	// UserData4 User data 4
	UserData4 string `json:"user_data_4"`

	// UserData5 User data 5
	UserData5 string `json:"user_data_5"`

	// UserData6 User data 6
	UserData6 string `json:"user_data_6"`

	// UserData7 User data 7
	UserData7 string `json:"user_data_7"`

	// UserData8 User data 8
	UserData8 string `json:"user_data_8"`

	// UserData9 User data 9
	UserData9 string `json:"user_data_9"`
}

// DeliveryZone defines model for DeliveryZone.
type DeliveryZone struct {
	Countries []Country `json:"countries"`

	// DeliveryZoneId The delivery zone ID
	DeliveryZoneId string `json:"delivery_zone_id"`

	// DeliveryZoneName The delivery zone name
	DeliveryZoneName string      `json:"delivery_zone_name"`
	Terms            []TermBrief `json:"terms"`
}

// EraseContractUser defines model for EraseContractUser.
type EraseContractUser struct {
	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`
}

// EraseConversion defines model for EraseConversion.
type EraseConversion struct {
	// Browser The browser with which the conversion was made
	Browser string `json:"browser"`

	// Experience The term conversion xperience
	Experience string `json:"experience"`

	// GeoLocation Geo location
	GeoLocation string `json:"geo_location"`

	// TermConversionId The term conversion ID
	TermConversionId string `json:"term_conversion_id"`

	// UserAddress The address of the user who made the conversion
	UserAddress string `json:"user_address"`

	// Zone zone
	Zone string `json:"zone"`
}

// EraseSubscription defines model for EraseSubscription.
type EraseSubscription struct {
	// SubscriptionId Subscription id
	SubscriptionId string `json:"subscription_id"`
}

// EraseTransaction defines model for EraseTransaction.
type EraseTransaction struct {
	// SenderEmail The transaction sender's email
	SenderEmail string `json:"sender_email"`

	// TrackingId The transaction tracking ID
	TrackingId string `json:"tracking_id"`
}

// EraseUser defines model for EraseUser.
type EraseUser struct {
	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// EraseUserAddress defines model for EraseUserAddress.
type EraseUserAddress struct {
	// AdditionalFields The additional address fields (json)
	AdditionalFields string `json:"additional_fields"`

	// Address1 The user's first address
	Address1 string `json:"address1"`

	// Address2 The user's second address
	Address2 string `json:"address2"`

	// City The name of the city
	City string `json:"city"`

	// CompanyName company_name
	CompanyName string `json:"company_name"`

	// CountryName The country name
	CountryName string `json:"country_name"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Phone The user's phone
	Phone string `json:"phone"`

	// PostalCode The user's postal code
	PostalCode string `json:"postal_code"`

	// RegionCode The code of the country region
	RegionCode string `json:"region_code"`

	// RegionId The ID of the country region
	RegionId string `json:"region_id"`

	// RegionName The name of the country region
	RegionName string `json:"region_name"`

	// UserAddressId The public ID of the user address
	UserAddressId string `json:"user_address_id"`
}

// EraseUserPayment defines model for EraseUserPayment.
type EraseUserPayment struct {
	// Address address
	Address string `json:"address"`

	// BillingRegion The billing region
	BillingRegion string `json:"billing_region"`

	// GeoLocation The geo location of the user who effected the payment
	GeoLocation string `json:"geo_location"`

	// GeoLocationCountry The geo location country of the user who made the payment
	GeoLocationCountry string `json:"geo_location_country"`

	// Name The user payment name
	Name string `json:"name"`

	// ResidenceRegion The residence region
	ResidenceRegion string `json:"residence_region"`

	// Tax The user payment tax
	Tax string `json:"tax"`

	// UiCaption The ui caption
	UiCaption string `json:"ui_caption"`

	// UserPaymentId The user payment ID
	UserPaymentId string `json:"user_payment_id"`
}

// EraseUserPaymentInfo defines model for EraseUserPaymentInfo.
type EraseUserPaymentInfo struct {
	// AccountNumber Transaction account number
	AccountNumber string `json:"account_number"`

	// BillingZipCode The transaction billing zip code
	BillingZipCode string `json:"billing_zip_code"`

	// ExternalTransactionId The external transaction ID for the payment method (user payment info)
	ExternalTransactionId string `json:"external_transaction_id"`

	// FundingSource Transaction funding source
	FundingSource string `json:"funding_source"`

	// PinCode Transaction pin code
	PinCode string `json:"pin_code"`

	// ProviderFields Transaction provider stored fields
	ProviderFields string `json:"provider_fields"`

	// ResidenceCountry The transaction residence country
	ResidenceCountry string `json:"residence_country"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiNickname The card nickname
	UpiNickname string `json:"upi_nickname"`

	// UpiPostalCode The postal code of the card
	UpiPostalCode string `json:"upi_postal_code"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// EraseUserResponse defines model for EraseUserResponse.
type EraseUserResponse struct {
	Addresses      []EraseUserAddress             `json:"addresses"`
	ContractUsers  []EraseContractUser            `json:"contract_users"`
	Conversions    []EraseConversion              `json:"conversions"`
	Payments       []EraseUserPayment             `json:"payments"`
	SharedAccounts []EraseUserSubscriptionAccount `json:"shared_accounts"`
	Subscriptions  []EraseSubscription            `json:"subscriptions"`
	Transactions   []EraseTransaction             `json:"transactions"`
	Upis           []EraseUserPaymentInfo         `json:"upis"`
	User           EraseUser                      `json:"user"`
}

// EraseUserResponseResult defines model for EraseUserResponseResult.
type EraseUserResponseResult struct {
	EraseUserResponse EraseUserResponse `json:"EraseUserResponse"`
}

// EraseUserSubscriptionAccount defines model for EraseUserSubscriptionAccount.
type EraseUserSubscriptionAccount struct {
	// ChildUserAccessId User access ID of an access granted via shared subscription mechanism
	ChildUserAccessId string `json:"child_user_access_id"`

	// SubscriptionId The user subscription ID of a parent subscription
	SubscriptionId string `json:"subscription_id"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ErrorCodes defines model for ErrorCodes.
type ErrorCodes struct {
	Error  *ErrorCode   `json:"error,omitempty"`
	Errors *[]ErrorCode `json:"errors,omitempty"`
}

// ExperienceMetadata defines model for ExperienceMetadata.
type ExperienceMetadata struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CreateBy The user who created the object
	CreateBy string `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description Experience description
	Description string `json:"description"`

	// ExperienceId Experience identifier
	ExperienceId string `json:"experience_id"`

	// HierarchyType Experience hierarchy type
	HierarchyType string `json:"hierarchy_type"`

	// MajorVersion Experience active major version
	MajorVersion int32 `json:"major_version"`

	// MinorVersion Experience active minor version
	MinorVersion int32 `json:"minor_version"`

	// ParentId Global experience public id using which was created current experience
	ParentId string `json:"parent_id"`

	// Schedule Experience schedule in JSON format
	Schedule string `json:"schedule"`

	// Status Experience status
	Status string `json:"status"`

	// Title Experience title
	Title string `json:"title"`

	// Type Experience type ("site" or "mobile")
	Type string `json:"type"`

	// UpdateBy The last user to update the object
	UpdateBy string `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// ExperienceMetadataArrayResult defines model for ExperienceMetadataArrayResult.
type ExperienceMetadataArrayResult struct {
	Data *[]ExperienceMetadata `json:"data,omitempty"`
}

// Export defines model for Export.
type Export struct {
	// ExportCompleted Time stamp of the downloadable report completion
	ExportCompleted int `json:"export_completed"`

	// ExportCreated Time stamp of the downloadable report creation
	ExportCreated int `json:"export_created"`

	// ExportId The ID of the downloadable report (can be retrieved with <a href="https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Flist">/publisher/export/list</a>)
	ExportId string `json:"export_id"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// ExportPercentage The percentage of the downloadable report completion
	ExportPercentage int32 `json:"export_percentage"`

	// ExportRecords The number of records in the downloadable report
	ExportRecords int32 `json:"export_records"`

	// ExportRepeatable Whether report generation can be restarted (click "Run again" in Dashboard or use <a href = "https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Frun">/publisher/export/run</a>)
	ExportRepeatable bool `json:"export_repeatable"`

	// ExportStatus Downloadable report completion status
	ExportStatus ExportExportStatus `json:"export_status"`

	// ExportUpdated The time stamp of the last update for the downloadable report
	ExportUpdated int `json:"export_updated"`

	// FilterData Filter data
	FilterData string `json:"filter_data"`

	// ReportType The report type
	ReportType ExportReportType `json:"report_type"`
}

// ExportExportStatus Downloadable report completion status
type ExportExportStatus string

// ExportReportType The report type
type ExportReportType string

// ExportArrayResult defines model for ExportArrayResult.
type ExportArrayResult struct {
	Export []Export `json:"Export"`
}

// ExportResult defines model for ExportResult.
type ExportResult struct {
	Export Export `json:"Export"`
}

// ExternalAPIField defines model for ExternalAPIField.
type ExternalAPIField struct {
	// DefaultValue Default value for the field. It will be pre-entered on the form
	DefaultValue *string `json:"default_value"`

	// Description The field description, some information about what information should be entered
	Description string `json:"description"`

	// Editable Whether the object is editable
	Editable string `json:"editable"`

	// FieldName The name of the field to be used to submit to the external system
	FieldName string `json:"field_name"`

	// FieldTitle The title of the field to be displayed to the user
	FieldTitle string `json:"field_title"`

	// Hidden Whether the field will be submitted hiddenly from the user, default value is required
	Hidden bool `json:"hidden"`

	// Mandatory Whether the field is required
	Mandatory bool `json:"mandatory"`

	// Order Field order in the list
	Order int32 `json:"order"`

	// Type Field type
	Type ExternalAPIFieldType `json:"type"`
}

// ExternalAPIFieldType Field type
type ExternalAPIFieldType string

// ExternalCss defines model for ExternalCss.
type ExternalCss struct {
	// ExternalCssId The external CSS ID
	ExternalCssId string `json:"external_css_id"`

	// Position The position
	Position int32 `json:"position"`

	// Status The status of the external CSS of the template("active" or "inactive")
	Status ExternalCssStatus `json:"status"`

	// Title The title
	Title string `json:"title"`

	// Url The URL of the page
	Url string `json:"url"`
}

// ExternalCssStatus The status of the external CSS of the template("active" or "inactive")
type ExternalCssStatus string

// ExternalTerm The variant of Term for [external service term](https://docs.piano.io/external-service-term/)
type ExternalTerm struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress bool `json:"collect_address"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Description The description of the term
	Description string `json:"description"`

	// EvtFixedTimeAccessPeriod The period to grant access for (in days)
	EvtFixedTimeAccessPeriod *int32 `json:"evt_fixed_time_access_period"`

	// EvtGooglePlayProductId Google Play's product ID
	EvtGooglePlayProductId *string `json:"evt_google_play_product_id"`

	// EvtGracePeriod The External API grace period for Apple Subscribing Inside the App feature
	EvtGracePeriod int32 `json:"evt_grace_period"`

	// EvtItunesBundleId iTunes's bundle ID
	EvtItunesBundleId string `json:"evt_itunes_bundle_id"`

	// EvtItunesProductId iTunes's product ID
	EvtItunesProductId string `json:"evt_itunes_product_id"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32             `json:"evt_verification_period"`
	ExternalApiFormFields []ExternalAPIField `json:"external_api_form_fields"`

	// ExternalApiId The ID of the external API configuration
	ExternalApiId string `json:"external_api_id"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName string `json:"external_api_name"`

	// ExternalApiSource The source of the external API configuration
	ExternalApiSource ExternalTermExternalApiSource `json:"external_api_source"`

	// Name The term name
	Name     string   `json:"name"`
	Resource Resource `json:"resource"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// Type The term type
	Type ExternalTermType `json:"type"`

	// TypeName The term type name
	TypeName ExternalTermTypeName `json:"type_name"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// ExternalTermExternalApiSource The source of the external API configuration
type ExternalTermExternalApiSource int32

// ExternalTermType The term type
type ExternalTermType string

// ExternalTermTypeName The term type name
type ExternalTermTypeName string

// ExternalTermResult defines model for ExternalTermResult.
type ExternalTermResult struct {
	// Term The variant of Term for [external service term](https://docs.piano.io/external-service-term/)
	Term ExternalTerm `json:"term"`
}

// GenericErrorResponse defines model for GenericErrorResponse.
type GenericErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetPublisherAdblockerGetError defines model for GetPublisherAdblockerGetError.
type GetPublisherAdblockerGetError struct {
	// Code - 402: Invalid aid
	//
	// - 2: Access denied
	//
	Code             GetPublisherAdblockerGetErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherAdblockerGetErrorCode - 402: Invalid aid
//
// - 2: Access denied
type GetPublisherAdblockerGetErrorCode int

// GetPublisherAppCurrenciesError defines model for GetPublisherAppCurrenciesError.
type GetPublisherAppCurrenciesError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherAppCurrenciesErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherAppCurrenciesErrorCode - 2: Access denied
type GetPublisherAppCurrenciesErrorCode int

// GetPublisherAppFeaturesGetError defines model for GetPublisherAppFeaturesGetError.
type GetPublisherAppFeaturesGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherAppFeaturesGetErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherAppFeaturesGetErrorCode - 2: Access denied
type GetPublisherAppFeaturesGetErrorCode int

// GetPublisherAppGetError defines model for GetPublisherAppGetError.
type GetPublisherAppGetError struct {
	// Code - 402: Invalid aid
	//
	// - 2: Access denied
	//
	Code             GetPublisherAppGetErrorCode `json:"code"`
	LocalizedMessage *string                     `json:"localizedMessage,omitempty"`
	Message          *string                     `json:"message,omitempty"`
}

// GetPublisherAppGetErrorCode - 402: Invalid aid
//
// - 2: Access denied
type GetPublisherAppGetErrorCode int

// GetPublisherAppListError defines model for GetPublisherAppListError.
type GetPublisherAppListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherAppListErrorCode `json:"code"`
	LocalizedMessage *string                      `json:"localizedMessage,omitempty"`
	Message          *string                      `json:"message,omitempty"`
}

// GetPublisherAppListErrorCode - 2: Access denied
type GetPublisherAppListErrorCode int

// GetPublisherConsentGetError defines model for GetPublisherConsentGetError.
type GetPublisherConsentGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherConsentGetErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherConsentGetErrorCode - 2: Access denied
type GetPublisherConsentGetErrorCode int

// GetPublisherConsentListError defines model for GetPublisherConsentListError.
type GetPublisherConsentListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherConsentListErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherConsentListErrorCode - 2: Access denied
type GetPublisherConsentListErrorCode int

// GetPublisherConversionCountError defines model for GetPublisherConversionCountError.
type GetPublisherConversionCountError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             GetPublisherConversionCountErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherConversionCountErrorCode - 2: Access denied
//
// - 1001: Term not found
type GetPublisherConversionCountErrorCode int

// GetPublisherConversionDataGetError defines model for GetPublisherConversionDataGetError.
type GetPublisherConversionDataGetError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherConversionDataGetErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherConversionDataGetErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherConversionDataGetErrorCode int

// GetPublisherConversionGetError defines model for GetPublisherConversionGetError.
type GetPublisherConversionGetError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherConversionGetErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherConversionGetErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherConversionGetErrorCode int

// GetPublisherConversionLastAccessError defines model for GetPublisherConversionLastAccessError.
type GetPublisherConversionLastAccessError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherConversionLastAccessErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// GetPublisherConversionLastAccessErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherConversionLastAccessErrorCode int

// GetPublisherConversionListError defines model for GetPublisherConversionListError.
type GetPublisherConversionListError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             GetPublisherConversionListErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherConversionListErrorCode - 2: Access denied
//
// - 1001: Term not found
type GetPublisherConversionListErrorCode int

// GetPublisherExperienceMetadataListError defines model for GetPublisherExperienceMetadataListError.
type GetPublisherExperienceMetadataListError struct {
	// Code - 402: Invalid aid
	//
	// - 2: Access denied
	//
	Code             GetPublisherExperienceMetadataListErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherExperienceMetadataListErrorCode - 402: Invalid aid
//
// - 2: Access denied
type GetPublisherExperienceMetadataListErrorCode int

// GetPublisherExportCreateAccessReportExportError defines model for GetPublisherExportCreateAccessReportExportError.
type GetPublisherExportCreateAccessReportExportError struct {
	// Code - 11003: Parameters of the filter can't be mapped
	//
	Code             GetPublisherExportCreateAccessReportExportErrorCode `json:"code"`
	LocalizedMessage *string                                             `json:"localizedMessage,omitempty"`
	Message          *string                                             `json:"message,omitempty"`
}

// GetPublisherExportCreateAccessReportExportErrorCode - 11003: Parameters of the filter can't be mapped
type GetPublisherExportCreateAccessReportExportErrorCode int

// GetPublisherExportCreateAccessReportExportV2Error defines model for GetPublisherExportCreateAccessReportExportV2Error.
type GetPublisherExportCreateAccessReportExportV2Error struct {
	// Code - 11003: Parameters of the filter can't be mapped
	//
	Code             GetPublisherExportCreateAccessReportExportV2ErrorCode `json:"code"`
	LocalizedMessage *string                                               `json:"localizedMessage,omitempty"`
	Message          *string                                               `json:"message,omitempty"`
}

// GetPublisherExportCreateAccessReportExportV2ErrorCode - 11003: Parameters of the filter can't be mapped
type GetPublisherExportCreateAccessReportExportV2ErrorCode int

// GetPublisherExportCreateDailyActivityReportExportError defines model for GetPublisherExportCreateDailyActivityReportExportError.
type GetPublisherExportCreateDailyActivityReportExportError struct {
	// Code - 11003: Parameters of the filter can't be mapped
	//
	Code             GetPublisherExportCreateDailyActivityReportExportErrorCode `json:"code"`
	LocalizedMessage *string                                                    `json:"localizedMessage,omitempty"`
	Message          *string                                                    `json:"message,omitempty"`
}

// GetPublisherExportCreateDailyActivityReportExportErrorCode - 11003: Parameters of the filter can't be mapped
type GetPublisherExportCreateDailyActivityReportExportErrorCode int

// GetPublisherExportCreateMonthlyActivityReportExportError defines model for GetPublisherExportCreateMonthlyActivityReportExportError.
type GetPublisherExportCreateMonthlyActivityReportExportError struct {
	// Code - 11003: Parameters of the filter can't be mapped
	//
	Code             GetPublisherExportCreateMonthlyActivityReportExportErrorCode `json:"code"`
	LocalizedMessage *string                                                      `json:"localizedMessage,omitempty"`
	Message          *string                                                      `json:"message,omitempty"`
}

// GetPublisherExportCreateMonthlyActivityReportExportErrorCode - 11003: Parameters of the filter can't be mapped
type GetPublisherExportCreateMonthlyActivityReportExportErrorCode int

// GetPublisherExportCreateTermChangeReportExportError defines model for GetPublisherExportCreateTermChangeReportExportError.
type GetPublisherExportCreateTermChangeReportExportError struct {
	// Code - 11003: Parameters of the filter can't be mapped
	//
	Code             GetPublisherExportCreateTermChangeReportExportErrorCode `json:"code"`
	LocalizedMessage *string                                                 `json:"localizedMessage,omitempty"`
	Message          *string                                                 `json:"message,omitempty"`
}

// GetPublisherExportCreateTermChangeReportExportErrorCode - 11003: Parameters of the filter can't be mapped
type GetPublisherExportCreateTermChangeReportExportErrorCode int

// GetPublisherExportDeleteError defines model for GetPublisherExportDeleteError.
type GetPublisherExportDeleteError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherExportDeleteErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherExportDeleteErrorCode - 2: Access denied
type GetPublisherExportDeleteErrorCode int

// GetPublisherExportDownloadError defines model for GetPublisherExportDownloadError.
type GetPublisherExportDownloadError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherExportDownloadErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherExportDownloadErrorCode - 2: Access denied
type GetPublisherExportDownloadErrorCode int

// GetPublisherExportGetError defines model for GetPublisherExportGetError.
type GetPublisherExportGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherExportGetErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// GetPublisherExportGetErrorCode - 2: Access denied
type GetPublisherExportGetErrorCode int

// GetPublisherExportRunError defines model for GetPublisherExportRunError.
type GetPublisherExportRunError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	// - 11001: Export not completed yet
	//
	// - 11005: Export of this type can't be re-run
	//
	Code             GetPublisherExportRunErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// GetPublisherExportRunErrorCode - 2: Access denied
//
// - 404: Not found
//
// - 11001: Export not completed yet
//
// - 11005: Export of this type can't be re-run
type GetPublisherExportRunErrorCode int

// GetPublisherInquiryAddError defines model for GetPublisherInquiryAddError.
type GetPublisherInquiryAddError struct {
	// Code - 12005: You cannot comment on a resolved inquiry
	//
	// - 12006: The limit of comments has been reached
	//
	// - 1: Internal error
	//
	// - 12002: Action not found
	//
	// - 12004: The comment exceeded 3000 characters
	//
	// - 12003: The comment is required
	//
	// - 2: Access denied
	//
	Code             GetPublisherInquiryAddErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherInquiryAddErrorCode - 12005: You cannot comment on a resolved inquiry
//
// - 12006: The limit of comments has been reached
//
// - 1: Internal error
//
// - 12002: Action not found
//
// - 12004: The comment exceeded 3000 characters
//
// - 12003: The comment is required
//
// - 2: Access denied
type GetPublisherInquiryAddErrorCode int

// GetPublisherInquiryCommentsError defines model for GetPublisherInquiryCommentsError.
type GetPublisherInquiryCommentsError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherInquiryCommentsErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherInquiryCommentsErrorCode - 2: Access denied
type GetPublisherInquiryCommentsErrorCode int

// GetPublisherInquiryDetailsError defines model for GetPublisherInquiryDetailsError.
type GetPublisherInquiryDetailsError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherInquiryDetailsErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherInquiryDetailsErrorCode - 2: Access denied
type GetPublisherInquiryDetailsErrorCode int

// GetPublisherInquiryInquiryActionsError defines model for GetPublisherInquiryInquiryActionsError.
type GetPublisherInquiryInquiryActionsError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherInquiryInquiryActionsErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherInquiryInquiryActionsErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherInquiryInquiryActionsErrorCode int

// GetPublisherInquiryLastCommentError defines model for GetPublisherInquiryLastCommentError.
type GetPublisherInquiryLastCommentError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherInquiryLastCommentErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// GetPublisherInquiryLastCommentErrorCode - 2: Access denied
type GetPublisherInquiryLastCommentErrorCode int

// GetPublisherInquiryListError defines model for GetPublisherInquiryListError.
type GetPublisherInquiryListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherInquiryListErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherInquiryListErrorCode - 2: Access denied
type GetPublisherInquiryListErrorCode int

// GetPublisherInquiryUnresolvedCountError defines model for GetPublisherInquiryUnresolvedCountError.
type GetPublisherInquiryUnresolvedCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherInquiryUnresolvedCountErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherInquiryUnresolvedCountErrorCode - 2: Access denied
type GetPublisherInquiryUnresolvedCountErrorCode int

// GetPublisherLicensingContractDomainContractUserListError defines model for GetPublisherLicensingContractDomainContractUserListError.
type GetPublisherLicensingContractDomainContractUserListError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	// - 61028: Contract domain not found
	//
	Code             GetPublisherLicensingContractDomainContractUserListErrorCode `json:"code"`
	LocalizedMessage *string                                                      `json:"localizedMessage,omitempty"`
	Message          *string                                                      `json:"message,omitempty"`
}

// GetPublisherLicensingContractDomainContractUserListErrorCode - 2: Access denied
//
// - 61002: Contract not found
//
// - 61028: Contract domain not found
type GetPublisherLicensingContractDomainContractUserListErrorCode int

// GetPublisherLicensingContractDomainListError defines model for GetPublisherLicensingContractDomainListError.
type GetPublisherLicensingContractDomainListError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	Code             GetPublisherLicensingContractDomainListErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// GetPublisherLicensingContractDomainListErrorCode - 2: Access denied
//
// - 61002: Contract not found
type GetPublisherLicensingContractDomainListErrorCode int

// GetPublisherLicensingContractGetError defines model for GetPublisherLicensingContractGetError.
type GetPublisherLicensingContractGetError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	Code             GetPublisherLicensingContractGetErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// GetPublisherLicensingContractGetErrorCode - 2: Access denied
//
// - 61002: Contract not found
type GetPublisherLicensingContractGetErrorCode int

// GetPublisherLicensingContractIpRangeListError defines model for GetPublisherLicensingContractIpRangeListError.
type GetPublisherLicensingContractIpRangeListError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	Code             GetPublisherLicensingContractIpRangeListErrorCode `json:"code"`
	LocalizedMessage *string                                           `json:"localizedMessage,omitempty"`
	Message          *string                                           `json:"message,omitempty"`
}

// GetPublisherLicensingContractIpRangeListErrorCode - 2: Access denied
//
// - 61002: Contract not found
type GetPublisherLicensingContractIpRangeListErrorCode int

// GetPublisherLicensingContractListError defines model for GetPublisherLicensingContractListError.
type GetPublisherLicensingContractListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherLicensingContractListErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherLicensingContractListErrorCode - 2: Access denied
type GetPublisherLicensingContractListErrorCode int

// GetPublisherLicensingContractUserListError defines model for GetPublisherLicensingContractUserListError.
type GetPublisherLicensingContractUserListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherLicensingContractUserListErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// GetPublisherLicensingContractUserListErrorCode - 2: Access denied
type GetPublisherLicensingContractUserListErrorCode int

// GetPublisherLicensingLicenseeCountError defines model for GetPublisherLicensingLicenseeCountError.
type GetPublisherLicensingLicenseeCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherLicensingLicenseeCountErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherLicensingLicenseeCountErrorCode - 2: Access denied
type GetPublisherLicensingLicenseeCountErrorCode int

// GetPublisherLicensingLicenseeGetError defines model for GetPublisherLicensingLicenseeGetError.
type GetPublisherLicensingLicenseeGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherLicensingLicenseeGetErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// GetPublisherLicensingLicenseeGetErrorCode - 2: Access denied
type GetPublisherLicensingLicenseeGetErrorCode int

// GetPublisherLicensingLicenseeListError defines model for GetPublisherLicensingLicenseeListError.
type GetPublisherLicensingLicenseeListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherLicensingLicenseeListErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherLicensingLicenseeListErrorCode - 2: Access denied
type GetPublisherLicensingLicenseeListErrorCode int

// GetPublisherLicensingNotificationListError defines model for GetPublisherLicensingNotificationListError.
type GetPublisherLicensingNotificationListError struct {
	// Code - 2: Access denied
	//
	// - 61005: Licensee not found
	//
	Code             GetPublisherLicensingNotificationListErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// GetPublisherLicensingNotificationListErrorCode - 2: Access denied
//
// - 61005: Licensee not found
type GetPublisherLicensingNotificationListErrorCode int

// GetPublisherLicensingNotificationRuleListError defines model for GetPublisherLicensingNotificationRuleListError.
type GetPublisherLicensingNotificationRuleListError struct {
	// Code - 2: Access denied
	//
	// - 61005: Licensee not found
	//
	Code             GetPublisherLicensingNotificationRuleListErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// GetPublisherLicensingNotificationRuleListErrorCode - 2: Access denied
//
// - 61005: Licensee not found
type GetPublisherLicensingNotificationRuleListErrorCode int

// GetPublisherLicensingScheduleContractsError defines model for GetPublisherLicensingScheduleContractsError.
type GetPublisherLicensingScheduleContractsError struct {
	// Code - 2: Access denied
	//
	// - 61011: Schedule not found
	//
	Code             GetPublisherLicensingScheduleContractsErrorCode `json:"code"`
	LocalizedMessage *string                                         `json:"localizedMessage,omitempty"`
	Message          *string                                         `json:"message,omitempty"`
}

// GetPublisherLicensingScheduleContractsErrorCode - 2: Access denied
//
// - 61011: Schedule not found
type GetPublisherLicensingScheduleContractsErrorCode int

// GetPublisherOfferCountError defines model for GetPublisherOfferCountError.
type GetPublisherOfferCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferCountErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherOfferCountErrorCode - 2: Access denied
type GetPublisherOfferCountErrorCode int

// GetPublisherOfferGetError defines model for GetPublisherOfferGetError.
type GetPublisherOfferGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferGetErrorCode `json:"code"`
	LocalizedMessage *string                       `json:"localizedMessage,omitempty"`
	Message          *string                       `json:"message,omitempty"`
}

// GetPublisherOfferGetErrorCode - 2: Access denied
type GetPublisherOfferGetErrorCode int

// GetPublisherOfferListError defines model for GetPublisherOfferListError.
type GetPublisherOfferListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferListErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// GetPublisherOfferListErrorCode - 2: Access denied
type GetPublisherOfferListErrorCode int

// GetPublisherOfferTemplateConvertBoilerplateToTemplateError defines model for GetPublisherOfferTemplateConvertBoilerplateToTemplateError.
type GetPublisherOfferTemplateConvertBoilerplateToTemplateError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCode `json:"code"`
	LocalizedMessage *string                                                        `json:"localizedMessage,omitempty"`
	Message          *string                                                        `json:"message,omitempty"`
}

// GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCode - 2: Access denied
type GetPublisherOfferTemplateConvertBoilerplateToTemplateErrorCode int

// GetPublisherOfferTemplateCountError defines model for GetPublisherOfferTemplateCountError.
type GetPublisherOfferTemplateCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateCountErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// GetPublisherOfferTemplateCountErrorCode - 2: Access denied
type GetPublisherOfferTemplateCountErrorCode int

// GetPublisherOfferTemplateDefaultCodeError defines model for GetPublisherOfferTemplateDefaultCodeError.
type GetPublisherOfferTemplateDefaultCodeError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateDefaultCodeErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// GetPublisherOfferTemplateDefaultCodeErrorCode - 2: Access denied
type GetPublisherOfferTemplateDefaultCodeErrorCode int

// GetPublisherOfferTemplateDuplicateError defines model for GetPublisherOfferTemplateDuplicateError.
type GetPublisherOfferTemplateDuplicateError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateDuplicateErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherOfferTemplateDuplicateErrorCode - 2: Access denied
type GetPublisherOfferTemplateDuplicateErrorCode int

// GetPublisherOfferTemplateGetError defines model for GetPublisherOfferTemplateGetError.
type GetPublisherOfferTemplateGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateGetErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// GetPublisherOfferTemplateGetErrorCode - 2: Access denied
type GetPublisherOfferTemplateGetErrorCode int

// GetPublisherOfferTemplateGetHistoryError defines model for GetPublisherOfferTemplateGetHistoryError.
type GetPublisherOfferTemplateGetHistoryError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateGetHistoryErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// GetPublisherOfferTemplateGetHistoryErrorCode - 2: Access denied
type GetPublisherOfferTemplateGetHistoryErrorCode int

// GetPublisherOfferTemplateInheritedCountError defines model for GetPublisherOfferTemplateInheritedCountError.
type GetPublisherOfferTemplateInheritedCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateInheritedCountErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// GetPublisherOfferTemplateInheritedCountErrorCode - 2: Access denied
type GetPublisherOfferTemplateInheritedCountErrorCode int

// GetPublisherOfferTemplateListBoilerplatesError defines model for GetPublisherOfferTemplateListBoilerplatesError.
type GetPublisherOfferTemplateListBoilerplatesError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateListBoilerplatesErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// GetPublisherOfferTemplateListBoilerplatesErrorCode - 2: Access denied
type GetPublisherOfferTemplateListBoilerplatesErrorCode int

// GetPublisherOfferTemplateListByCategoryError defines model for GetPublisherOfferTemplateListByCategoryError.
type GetPublisherOfferTemplateListByCategoryError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateListByCategoryErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// GetPublisherOfferTemplateListByCategoryErrorCode - 2: Access denied
type GetPublisherOfferTemplateListByCategoryErrorCode int

// GetPublisherOfferTemplateListError defines model for GetPublisherOfferTemplateListError.
type GetPublisherOfferTemplateListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateListErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherOfferTemplateListErrorCode - 2: Access denied
type GetPublisherOfferTemplateListErrorCode int

// GetPublisherOfferTemplateMakeGlobalError defines model for GetPublisherOfferTemplateMakeGlobalError.
type GetPublisherOfferTemplateMakeGlobalError struct {
	// Code - 411: Merchant with given id is not found
	//
	// - 2: Access denied
	//
	Code             GetPublisherOfferTemplateMakeGlobalErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// GetPublisherOfferTemplateMakeGlobalErrorCode - 411: Merchant with given id is not found
//
// - 2: Access denied
type GetPublisherOfferTemplateMakeGlobalErrorCode int

// GetPublisherOfferTemplateVariantDuplicateError defines model for GetPublisherOfferTemplateVariantDuplicateError.
type GetPublisherOfferTemplateVariantDuplicateError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateVariantDuplicateErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// GetPublisherOfferTemplateVariantDuplicateErrorCode - 2: Access denied
type GetPublisherOfferTemplateVariantDuplicateErrorCode int

// GetPublisherOfferTemplateVariantGetError defines model for GetPublisherOfferTemplateVariantGetError.
type GetPublisherOfferTemplateVariantGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTemplateVariantGetErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// GetPublisherOfferTemplateVariantGetErrorCode - 2: Access denied
type GetPublisherOfferTemplateVariantGetErrorCode int

// GetPublisherOfferTermListError defines model for GetPublisherOfferTermListError.
type GetPublisherOfferTermListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTermListErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherOfferTermListErrorCode - 2: Access denied
type GetPublisherOfferTermListErrorCode int

// GetPublisherOfferTermOfferListError defines model for GetPublisherOfferTermOfferListError.
type GetPublisherOfferTermOfferListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherOfferTermOfferListErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// GetPublisherOfferTermOfferListErrorCode - 2: Access denied
type GetPublisherOfferTermOfferListErrorCode int

// GetPublisherPaymentGetError defines model for GetPublisherPaymentGetError.
type GetPublisherPaymentGetError struct {
	// Code - 2: Access denied
	//
	// - 400: Invalid request parameters
	//
	Code             GetPublisherPaymentGetErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherPaymentGetErrorCode - 2: Access denied
//
// - 400: Invalid request parameters
type GetPublisherPaymentGetErrorCode int

// GetPublisherPaymentIsPartialRefundError defines model for GetPublisherPaymentIsPartialRefundError.
type GetPublisherPaymentIsPartialRefundError struct {
	// Code - 2: Access denied
	//
	// - 400: Invalid request parameters
	//
	Code             GetPublisherPaymentIsPartialRefundErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherPaymentIsPartialRefundErrorCode - 2: Access denied
//
// - 400: Invalid request parameters
type GetPublisherPaymentIsPartialRefundErrorCode int

// GetPublisherPaymentMethodGetError defines model for GetPublisherPaymentMethodGetError.
type GetPublisherPaymentMethodGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPaymentMethodGetErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// GetPublisherPaymentMethodGetErrorCode - 2: Access denied
type GetPublisherPaymentMethodGetErrorCode int

// GetPublisherPaymentRefundError defines model for GetPublisherPaymentRefundError.
type GetPublisherPaymentRefundError struct {
	// Code - 2: Access denied
	//
	// - 400: Invalid request parameters
	//
	// - 14001: Refund failed. %s
	//
	// - 14002: Wrong refunded amount
	//
	Code             GetPublisherPaymentRefundErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherPaymentRefundErrorCode - 2: Access denied
//
// - 400: Invalid request parameters
//
// - 14001: Refund failed. %s
//
// - 14002: Wrong refunded amount
type GetPublisherPaymentRefundErrorCode int

// GetPublisherPromotionCodeCountError defines model for GetPublisherPromotionCodeCountError.
type GetPublisherPromotionCodeCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionCodeCountErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// GetPublisherPromotionCodeCountErrorCode - 2: Access denied
type GetPublisherPromotionCodeCountErrorCode int

// GetPublisherPromotionCodeCreateError defines model for GetPublisherPromotionCodeCreateError.
type GetPublisherPromotionCodeCreateError struct {
	// Code - 2: Access denied
	//
	// - 401: Invalid user
	//
	// - 3005: Promotion limit exhausted
	//
	Code             GetPublisherPromotionCodeCreateErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// GetPublisherPromotionCodeCreateErrorCode - 2: Access denied
//
// - 401: Invalid user
//
// - 3005: Promotion limit exhausted
type GetPublisherPromotionCodeCreateErrorCode int

// GetPublisherPromotionCodeGetError defines model for GetPublisherPromotionCodeGetError.
type GetPublisherPromotionCodeGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionCodeGetErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// GetPublisherPromotionCodeGetErrorCode - 2: Access denied
type GetPublisherPromotionCodeGetErrorCode int

// GetPublisherPromotionCodeListError defines model for GetPublisherPromotionCodeListError.
type GetPublisherPromotionCodeListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionCodeListErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherPromotionCodeListErrorCode - 2: Access denied
type GetPublisherPromotionCodeListErrorCode int

// GetPublisherPromotionCountError defines model for GetPublisherPromotionCountError.
type GetPublisherPromotionCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionCountErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherPromotionCountErrorCode - 2: Access denied
type GetPublisherPromotionCountErrorCode int

// GetPublisherPromotionFixedDiscountAddError defines model for GetPublisherPromotionFixedDiscountAddError.
type GetPublisherPromotionFixedDiscountAddError struct {
	// Code - 3012: Invalid currency for fixed discount
	//
	// - 3002: Invalid amount for fixed discount
	//
	// - 3015: Fixed discount for specified currency already exists
	//
	// - 2: Access denied
	//
	// - 3013: Currency doesn't belong application
	//
	Code             GetPublisherPromotionFixedDiscountAddErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// GetPublisherPromotionFixedDiscountAddErrorCode - 3012: Invalid currency for fixed discount
//
// - 3002: Invalid amount for fixed discount
//
// - 3015: Fixed discount for specified currency already exists
//
// - 2: Access denied
//
// - 3013: Currency doesn't belong application
type GetPublisherPromotionFixedDiscountAddErrorCode int

// GetPublisherPromotionGetError defines model for GetPublisherPromotionGetError.
type GetPublisherPromotionGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionGetErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherPromotionGetErrorCode - 2: Access denied
type GetPublisherPromotionGetErrorCode int

// GetPublisherPromotionListError defines model for GetPublisherPromotionListError.
type GetPublisherPromotionListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionListErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherPromotionListErrorCode - 2: Access denied
type GetPublisherPromotionListErrorCode int

// GetPublisherPromotionTermListError defines model for GetPublisherPromotionTermListError.
type GetPublisherPromotionTermListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherPromotionTermListErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherPromotionTermListErrorCode - 2: Access denied
type GetPublisherPromotionTermListErrorCode int

// GetPublisherPromotionTotalError defines model for GetPublisherPromotionTotalError.
type GetPublisherPromotionTotalError struct {
	// Code - 2: Access denied
	//
	// - 16001: Specified currency code doesn't conform to ISO 4217 standard
	//
	Code             GetPublisherPromotionTotalErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherPromotionTotalErrorCode - 2: Access denied
//
// - 16001: Specified currency code doesn't conform to ISO 4217 standard
type GetPublisherPromotionTotalErrorCode int

// GetPublisherResourceBundleMembersError defines model for GetPublisherResourceBundleMembersError.
type GetPublisherResourceBundleMembersError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceBundleMembersErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherResourceBundleMembersErrorCode - 2: Access denied
type GetPublisherResourceBundleMembersErrorCode int

// GetPublisherResourceCountError defines model for GetPublisherResourceCountError.
type GetPublisherResourceCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceCountErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherResourceCountErrorCode - 2: Access denied
type GetPublisherResourceCountErrorCode int

// GetPublisherResourceCrossAppCountError defines model for GetPublisherResourceCrossAppCountError.
type GetPublisherResourceCrossAppCountError struct {
	// Code - 2: Access denied
	//
	// - 411: Merchant with given id is not found
	//
	Code             GetPublisherResourceCrossAppCountErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherResourceCrossAppCountErrorCode - 2: Access denied
//
// - 411: Merchant with given id is not found
type GetPublisherResourceCrossAppCountErrorCode int

// GetPublisherResourceGetError defines model for GetPublisherResourceGetError.
type GetPublisherResourceGetError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherResourceGetErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherResourceGetErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherResourceGetErrorCode int

// GetPublisherResourceListError defines model for GetPublisherResourceListError.
type GetPublisherResourceListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceListErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherResourceListErrorCode - 2: Access denied
type GetPublisherResourceListErrorCode int

// GetPublisherResourceStatsListError defines model for GetPublisherResourceStatsListError.
type GetPublisherResourceStatsListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceStatsListErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherResourceStatsListErrorCode - 2: Access denied
type GetPublisherResourceStatsListErrorCode int

// GetPublisherResourceTagBundlesError defines model for GetPublisherResourceTagBundlesError.
type GetPublisherResourceTagBundlesError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceTagBundlesErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// GetPublisherResourceTagBundlesErrorCode - 2: Access denied
type GetPublisherResourceTagBundlesErrorCode int

// GetPublisherResourceTagCreateError defines model for GetPublisherResourceTagCreateError.
type GetPublisherResourceTagCreateError struct {
	// Code - 2: Access denied
	//
	// - 700: Invalid resource tag name
	//
	// - 701: Resource tag already exists
	//
	Code             GetPublisherResourceTagCreateErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// GetPublisherResourceTagCreateErrorCode - 2: Access denied
//
// - 700: Invalid resource tag name
//
// - 701: Resource tag already exists
type GetPublisherResourceTagCreateErrorCode int

// GetPublisherResourceTagGetError defines model for GetPublisherResourceTagGetError.
type GetPublisherResourceTagGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceTagGetErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherResourceTagGetErrorCode - 2: Access denied
type GetPublisherResourceTagGetErrorCode int

// GetPublisherResourceTagListError defines model for GetPublisherResourceTagListError.
type GetPublisherResourceTagListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceTagListErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherResourceTagListErrorCode - 2: Access denied
type GetPublisherResourceTagListErrorCode int

// GetPublisherResourceUserListError defines model for GetPublisherResourceUserListError.
type GetPublisherResourceUserListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherResourceUserListErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// GetPublisherResourceUserListErrorCode - 2: Access denied
type GetPublisherResourceUserListErrorCode int

// GetPublisherSubscriptionGetError defines model for GetPublisherSubscriptionGetError.
type GetPublisherSubscriptionGetError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             GetPublisherSubscriptionGetErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherSubscriptionGetErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type GetPublisherSubscriptionGetErrorCode int

// GetPublisherTermApplicableError defines model for GetPublisherTermApplicableError.
type GetPublisherTermApplicableError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             GetPublisherTermApplicableErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherTermApplicableErrorCode - 2: Access denied
//
// - 1001: Term not found
type GetPublisherTermApplicableErrorCode int

// GetPublisherTermCountError defines model for GetPublisherTermCountError.
type GetPublisherTermCountError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherTermCountErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// GetPublisherTermCountErrorCode - 2: Access denied
type GetPublisherTermCountErrorCode int

// GetPublisherTermGetError defines model for GetPublisherTermGetError.
type GetPublisherTermGetError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             GetPublisherTermGetErrorCode `json:"code"`
	LocalizedMessage *string                      `json:"localizedMessage,omitempty"`
	Message          *string                      `json:"message,omitempty"`
}

// GetPublisherTermGetErrorCode - 2: Access denied
//
// - 1001: Term not found
type GetPublisherTermGetErrorCode int

// GetPublisherTermStatsListError defines model for GetPublisherTermStatsListError.
type GetPublisherTermStatsListError struct {
	// Code - 2: Access denied
	//
	// - 16001: Specified currency code doesn't conform to ISO 4217 standard
	//
	Code             GetPublisherTermStatsListErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherTermStatsListErrorCode - 2: Access denied
//
// - 16001: Specified currency code doesn't conform to ISO 4217 standard
type GetPublisherTermStatsListErrorCode int

// GetPublisherTestUserRefError defines model for GetPublisherTestUserRefError.
type GetPublisherTestUserRefError struct {
	// Code - 2002: Invalid email.
	//
	// - 7004: Could not find user for uid: %s and email: %s
	//
	// - 7007: The user ref is expired
	//
	// - 2001: Invalid uid
	//
	// - 7006: This type of encoding is not allowed
	//
	Code             GetPublisherTestUserRefErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherTestUserRefErrorCode - 2002: Invalid email.
//
// - 7004: Could not find user for uid: %s and email: %s
//
// - 7007: The user ref is expired
//
// - 2001: Invalid uid
//
// - 7006: This type of encoding is not allowed
type GetPublisherTestUserRefErrorCode int

// GetPublisherUserAccessCheckError defines model for GetPublisherUserAccessCheckError.
type GetPublisherUserAccessCheckError struct {
	// Code - 2: Access denied
	//
	// - 2001: Invalid uid
	//
	Code             GetPublisherUserAccessCheckErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherUserAccessCheckErrorCode - 2: Access denied
//
// - 2001: Invalid uid
type GetPublisherUserAccessCheckErrorCode int

// GetPublisherUserAccessGrantError defines model for GetPublisherUserAccessGrantError.
type GetPublisherUserAccessGrantError struct {
	// Code - 805: Couldn't find resource. You can try another name/RID or create one.
	//
	// - 406: Invalid expiration.
	//
	// - 5002: User not found for email %s.
	//
	// - 401: Invalid user
	//
	// - 2: Access denied
	//
	// - 5001: Either the `user_id` or the `emails` parameter should be specified.
	//
	Code             GetPublisherUserAccessGrantErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherUserAccessGrantErrorCode - 805: Couldn't find resource. You can try another name/RID or create one.
//
// - 406: Invalid expiration.
//
// - 5002: User not found for email %s.
//
// - 401: Invalid user
//
// - 2: Access denied
//
// - 5001: Either the `user_id` or the `emails` parameter should be specified.
type GetPublisherUserAccessGrantErrorCode int

// GetPublisherUserAccessGrantToUsersError defines model for GetPublisherUserAccessGrantToUsersError.
type GetPublisherUserAccessGrantToUsersError struct {
	// Code - 2: Access denied
	//
	// - 805: Couldn't find resource. You can try another name/RID or create one.
	//
	Code             GetPublisherUserAccessGrantToUsersErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// GetPublisherUserAccessGrantToUsersErrorCode - 2: Access denied
//
// - 805: Couldn't find resource. You can try another name/RID or create one.
type GetPublisherUserAccessGrantToUsersErrorCode int

// GetPublisherUserAccessListError defines model for GetPublisherUserAccessListError.
type GetPublisherUserAccessListError struct {
	// Code - 2: Access denied
	//
	// - 2001: Invalid uid
	//
	Code             GetPublisherUserAccessListErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// GetPublisherUserAccessListErrorCode - 2: Access denied
//
// - 2001: Invalid uid
type GetPublisherUserAccessListErrorCode int

// GetPublisherUserAccessRevokeError defines model for GetPublisherUserAccessRevokeError.
type GetPublisherUserAccessRevokeError struct {
	// Code - 2: Access denied
	//
	// - 5003: Invalid access id
	//
	// - 5007: This access is associated with a subscription, and it can be managed via subscription only.
	//
	Code             GetPublisherUserAccessRevokeErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// GetPublisherUserAccessRevokeErrorCode - 2: Access denied
//
// - 5003: Invalid access id
//
// - 5007: This access is associated with a subscription, and it can be managed via subscription only.
type GetPublisherUserAccessRevokeErrorCode int

// GetPublisherUserEmailGetError defines model for GetPublisherUserEmailGetError.
type GetPublisherUserEmailGetError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherUserEmailGetErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherUserEmailGetErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherUserEmailGetErrorCode int

// GetPublisherUserEmailListError defines model for GetPublisherUserEmailListError.
type GetPublisherUserEmailListError struct {
	// Code - 2: Access denied
	//
	// - 2001: Invalid uid
	//
	Code             GetPublisherUserEmailListErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherUserEmailListErrorCode - 2: Access denied
//
// - 2001: Invalid uid
type GetPublisherUserEmailListErrorCode int

// GetPublisherUserNoteGetError defines model for GetPublisherUserNoteGetError.
type GetPublisherUserNoteGetError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             GetPublisherUserNoteGetErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherUserNoteGetErrorCode - 2: Access denied
//
// - 404: Not found
type GetPublisherUserNoteGetErrorCode int

// GetPublisherUserNoteListError defines model for GetPublisherUserNoteListError.
type GetPublisherUserNoteListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherUserNoteListErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// GetPublisherUserNoteListErrorCode - 2: Access denied
type GetPublisherUserNoteListErrorCode int

// GetPublisherVoucherGetError defines model for GetPublisherVoucherGetError.
type GetPublisherVoucherGetError struct {
	// Code - 2: Access denied
	//
	// - 7108: Voucher not found by ID
	//
	Code             GetPublisherVoucherGetErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherVoucherGetErrorCode - 2: Access denied
//
// - 7108: Voucher not found by ID
type GetPublisherVoucherGetErrorCode int

// GetPublisherVoucherListError defines model for GetPublisherVoucherListError.
type GetPublisherVoucherListError struct {
	// Code - 1: Internal error
	//
	// - 2: Access denied
	//
	Code             GetPublisherVoucherListErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherVoucherListErrorCode - 1: Internal error
//
// - 2: Access denied
type GetPublisherVoucherListErrorCode int

// GetPublisherWebhookEventsError defines model for GetPublisherWebhookEventsError.
type GetPublisherWebhookEventsError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherWebhookEventsErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherWebhookEventsErrorCode - 2: Access denied
type GetPublisherWebhookEventsErrorCode int

// GetPublisherWebhookGetError defines model for GetPublisherWebhookGetError.
type GetPublisherWebhookGetError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherWebhookGetErrorCode `json:"code"`
	LocalizedMessage *string                         `json:"localizedMessage,omitempty"`
	Message          *string                         `json:"message,omitempty"`
}

// GetPublisherWebhookGetErrorCode - 2: Access denied
type GetPublisherWebhookGetErrorCode int

// GetPublisherWebhookResponseListError defines model for GetPublisherWebhookResponseListError.
type GetPublisherWebhookResponseListError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherWebhookResponseListErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// GetPublisherWebhookResponseListErrorCode - 2: Access denied
type GetPublisherWebhookResponseListErrorCode int

// GetPublisherWebhookResponseResendError defines model for GetPublisherWebhookResponseResendError.
type GetPublisherWebhookResponseResendError struct {
	// Code - 2: Access denied
	//
	// - 4002: Cannot send webhook for app that does not have webhooks endpoint or not activated
	//
	Code             GetPublisherWebhookResponseResendErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// GetPublisherWebhookResponseResendErrorCode - 2: Access denied
//
// - 4002: Cannot send webhook for app that does not have webhooks endpoint or not activated
type GetPublisherWebhookResponseResendErrorCode int

// GetPublisherWebhookSettingsError defines model for GetPublisherWebhookSettingsError.
type GetPublisherWebhookSettingsError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherWebhookSettingsErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// GetPublisherWebhookSettingsErrorCode - 2: Access denied
type GetPublisherWebhookSettingsErrorCode int

// GetPublisherWebhookSkipError defines model for GetPublisherWebhookSkipError.
type GetPublisherWebhookSkipError struct {
	// Code - 2: Access denied
	//
	// - 4006: Can't skip webhook
	//
	Code             GetPublisherWebhookSkipErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// GetPublisherWebhookSkipErrorCode - 2: Access denied
//
// - 4006: Can't skip webhook
type GetPublisherWebhookSkipErrorCode int

// GetPublisherWebhookStatusError defines model for GetPublisherWebhookStatusError.
type GetPublisherWebhookStatusError struct {
	// Code - 2: Access denied
	//
	Code             GetPublisherWebhookStatusErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// GetPublisherWebhookStatusErrorCode - 2: Access denied
type GetPublisherWebhookStatusErrorCode int

// InquiryComment defines model for InquiryComment.
type InquiryComment struct {
	// CommentId The inquiry comment ID
	CommentId string `json:"comment_id"`

	// CreateDate The creation date
	CreateDate string `json:"create_date"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// Internal The internal comment
	Internal string `json:"internal"`

	// Message The message
	Message string `json:"message"`

	// Name The name
	Name string `json:"name"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// SubmitterType The submitter type
	SubmitterType InquiryCommentSubmitterType `json:"submitter_type"`
	User          User                        `json:"user"`
}

// InquiryCommentSubmitterType The submitter type
type InquiryCommentSubmitterType int32

// InquiryCommentArrayResult defines model for InquiryCommentArrayResult.
type InquiryCommentArrayResult struct {
	InquiryComment []InquiryComment `json:"InquiryComment"`
}

// IntegerResult defines model for IntegerResult.
type IntegerResult struct {
	Data int `json:"data"`
}

// Licensee defines model for Licensee.
type Licensee struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description of the licensee
	Description *string `json:"description"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// LogoUrl A relative URL of the licensee's logo
	LogoUrl  *string           `json:"logo_url"`
	Managers []LicenseeManager `json:"managers"`

	// Name The name of the licensee
	Name            string                   `json:"name"`
	Representatives []LicenseeRepresentative `json:"representatives"`
}

// LicenseeArrayResult defines model for LicenseeArrayResult.
type LicenseeArrayResult struct {
	Licensee []Licensee `json:"Licensee"`
}

// LicenseeManager defines model for LicenseeManager.
type LicenseeManager struct {
	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// LicenseeNotification defines model for LicenseeNotification.
type LicenseeNotification struct {
	// Condition The notification rule condition
	Condition LicenseeNotificationCondition `json:"condition"`

	// ConditionValue The value of the notification rule condition
	ConditionValue int32 `json:"condition_value"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// Message The message
	Message string `json:"message"`

	// NotificationId The notification ID
	NotificationId string `json:"notification_id"`

	// Parameter The notification rule parameter
	Parameter LicenseeNotificationParameter `json:"parameter"`
}

// LicenseeNotificationCondition The notification rule condition
type LicenseeNotificationCondition string

// LicenseeNotificationParameter The notification rule parameter
type LicenseeNotificationParameter string

// LicenseeNotificationArrayResult defines model for LicenseeNotificationArrayResult.
type LicenseeNotificationArrayResult struct {
	LicenseeNotification []LicenseeNotification `json:"LicenseeNotification"`
}

// LicenseeNotificationRule defines model for LicenseeNotificationRule.
type LicenseeNotificationRule struct {
	// Condition The notification rule condition
	Condition LicenseeNotificationRuleCondition `json:"condition"`

	// ConditionValue The value of the notification rule condition
	ConditionValue int32    `json:"condition_value"`
	ContractIdList []string `json:"contract_id_list"`

	// IsForAllContracts Whether the notification rule works for all contracts
	IsForAllContracts bool `json:"is_for_all_contracts"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// NotificationRuleId The notification rule ID
	NotificationRuleId string `json:"notification_rule_id"`

	// Parameter The notification rule parameter
	Parameter LicenseeNotificationRuleParameter `json:"parameter"`
}

// LicenseeNotificationRuleCondition The notification rule condition
type LicenseeNotificationRuleCondition string

// LicenseeNotificationRuleParameter The notification rule parameter
type LicenseeNotificationRuleParameter string

// LicenseeNotificationRuleArrayResult defines model for LicenseeNotificationRuleArrayResult.
type LicenseeNotificationRuleArrayResult struct {
	LicenseeNotificationRule []LicenseeNotificationRule `json:"LicenseeNotificationRule"`
}

// LicenseeNotificationRuleResult defines model for LicenseeNotificationRuleResult.
type LicenseeNotificationRuleResult struct {
	LicenseeNotificationRule LicenseeNotificationRule `json:"LicenseeNotificationRule"`
}

// LicenseeRepresentative defines model for LicenseeRepresentative.
type LicenseeRepresentative struct {
	// Email The user's email address (single)
	Email string `json:"email"`
}

// LicenseeResult defines model for LicenseeResult.
type LicenseeResult struct {
	Licensee Licensee `json:"licensee"`
}

// LightOffer defines model for LightOffer.
type LightOffer struct {
	// Name The offer name
	Name string `json:"name"`

	// OfferId The offer ID
	OfferId string `json:"offer_id"`
}

// MailLog defines model for MailLog.
type MailLog struct {
	App App `json:"app"`

	// Body Body
	Body string `json:"body"`

	// CreateDate The creation date
	CreateDate string `json:"create_date"`

	// EmailId Email id
	EmailId string `json:"email_id"`

	// EmailName Email name
	EmailName string `json:"email_name"`

	// OpenDate Date opened
	OpenDate string `json:"open_date"`

	// Recipient Recipient
	Recipient string `json:"recipient"`

	// RejectReason Reject reason
	RejectReason string `json:"reject_reason"`

	// ReplyTo Reply to
	ReplyTo string `json:"reply_to"`

	// Sender Sender
	Sender string `json:"sender"`

	// Status Status
	Status MailLogStatus `json:"status"`

	// StatusLocalized Status localized
	StatusLocalized string `json:"status_localized"`

	// Subject Subject
	Subject string `json:"subject"`
	User    User   `json:"user"`
}

// MailLogStatus Status
type MailLogStatus string

// MailLogArrayResult defines model for MailLogArrayResult.
type MailLogArrayResult struct {
	MailLog []MailLog `json:"MailLog"`
}

// MailLogResult defines model for MailLogResult.
type MailLogResult struct {
	MailLog MailLog `json:"MailLog"`
}

// MyAccount defines model for MyAccount.
type MyAccount struct {
	// Enabled Whether the property is enabled
	Enabled bool `json:"enabled"`
}

// OfferModel defines model for OfferModel.
type OfferModel struct {
	// Aid The application ID
	Aid      string `json:"aid"`
	CreateBy User   `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Name The offer name
	Name string `json:"name"`

	// OfferId The offer ID
	OfferId string `json:"offer_id"`

	// Status The offer status
	Status   OfferModelStatus `json:"status"`
	Terms    []Term           `json:"terms"`
	UpdateBy User             `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// OfferModelStatus The offer status
type OfferModelStatus string

// OfferModelArrayResult defines model for OfferModelArrayResult.
type OfferModelArrayResult struct {
	OfferModel []OfferModel `json:"OfferModel"`
}

// OfferModelResult defines model for OfferModelResult.
type OfferModelResult struct {
	OfferModel OfferModel `json:"OfferModel"`
}

// OfferTemplate defines model for OfferTemplate.
type OfferTemplate struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// AppName The application name
	AppName    string `json:"app_name"`
	ArchivedBy User   `json:"archived_by"`

	// ArchivedDate The archived date
	ArchivedDate int `json:"archived_date"`

	// BoilerplateType The boilerplate type
	BoilerplateType OfferTemplateBoilerplateType `json:"boilerplate_type"`

	// BoilerplateTypeId The ID of the boilerplate type
	BoilerplateTypeId OfferTemplateBoilerplateTypeId `json:"boilerplate_type_id"`

	// CanBeGlobal Whether the object can be converted to global
	CanBeGlobal bool `json:"can_be_global"`

	// CategoryId The category ID
	CategoryId       OfferTemplateCategoryId     `json:"category_id"`
	ContentFieldList []OfferTemplateContentField `json:"content_field_list"`

	// CountVariants The number of the template variants
	CountVariants int32 `json:"count_variants"`
	CreateBy      User  `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The description
	Description string `json:"description"`

	// IsGlobal Whether the object is a global template
	IsGlobal bool `json:"is_global"`

	// IsInherited Whether the object is an inherited template
	IsInherited bool `json:"is_inherited"`

	// IsPublished Published or not
	IsPublished bool `json:"is_published"`

	// LiveThumbnailImageUrl The URL of the live thumbnail image
	LiveThumbnailImageUrl string `json:"live_thumbnail_image_url"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// PublishDate publish_date
	PublishDate int `json:"publish_date"`

	// Status The status
	Status OfferTemplateStatus `json:"status"`

	// ThumbnailImageUrl The URL of the thumbnail image
	ThumbnailImageUrl string `json:"thumbnail_image_url"`

	// TokenType Is template token type
	TokenType OfferTemplateTokenType `json:"token_type"`

	// Type The type
	Type OfferTemplateType `json:"type"`

	// TypeId The type
	TypeId   OfferTemplateTypeId `json:"type_id"`
	UpdateBy User                `json:"update_by"`

	// UpdateDate The update date
	UpdateDate  int                    `json:"update_date"`
	VariantList []OfferTemplateVariant `json:"variant_list"`

	// Version The version
	Version int32 `json:"version"`
}

// OfferTemplateBoilerplateType The boilerplate type
type OfferTemplateBoilerplateType string

// OfferTemplateBoilerplateTypeId The ID of the boilerplate type
type OfferTemplateBoilerplateTypeId string

// OfferTemplateCategoryId The category ID
type OfferTemplateCategoryId string

// OfferTemplateStatus The status
type OfferTemplateStatus string

// OfferTemplateTokenType Is template token type
type OfferTemplateTokenType string

// OfferTemplateType The type
type OfferTemplateType string

// OfferTemplateTypeId The type
type OfferTemplateTypeId string

// OfferTemplateArrayResult defines model for OfferTemplateArrayResult.
type OfferTemplateArrayResult struct {
	OfferTemplate []OfferTemplate `json:"OfferTemplate"`
}

// OfferTemplateCategories defines model for OfferTemplateCategories.
type OfferTemplateCategories struct {
	// CategoryId The category ID
	CategoryId OfferTemplateCategoriesCategoryId `json:"category_id"`

	// CategoryIdLocalized The localized category ID
	CategoryIdLocalized string `json:"category_id_localized"`

	// CountTemplates The number of templates in the category
	CountTemplates      int32           `json:"count_templates"`
	OfferTemplateModels []OfferTemplate `json:"offer_template_models"`
}

// OfferTemplateCategoriesCategoryId The category ID
type OfferTemplateCategoriesCategoryId string

// OfferTemplateCategoriesArrayResult defines model for OfferTemplateCategoriesArrayResult.
type OfferTemplateCategoriesArrayResult struct {
	OfferTemplateCategories []OfferTemplateCategories `json:"OfferTemplateCategories"`
}

// OfferTemplateContentField defines model for OfferTemplateContentField.
type OfferTemplateContentField struct {
	// ContentFieldId The content field ID
	ContentFieldId string `json:"content_field_id"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The description
	Description string `json:"description"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `json:"offer_template_variant_id"`

	// Value The content field value
	Value string `json:"value"`
}

// OfferTemplateHistories defines model for OfferTemplateHistories.
type OfferTemplateHistories struct {
	HistoryList []OfferTemplateHistory `json:"history_list"`
}

// OfferTemplateHistoriesResult defines model for OfferTemplateHistoriesResult.
type OfferTemplateHistoriesResult struct {
	OfferTemplateHistories OfferTemplateHistories `json:"OfferTemplateHistories"`
}

// OfferTemplateHistory defines model for OfferTemplateHistory.
type OfferTemplateHistory struct {
	// HistoryComment The template history comment
	HistoryComment string `json:"history_comment"`

	// HistoryContent The history content
	HistoryContent string                    `json:"history_content"`
	HistoryList    []OfferTemplateSubHistory `json:"history_list"`

	// OfferTemplateHistoryEvent The template history event
	OfferTemplateHistoryEvent string `json:"offer_template_history_event"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`
}

// OfferTemplateSubHistory defines model for OfferTemplateSubHistory.
type OfferTemplateSubHistory struct {
	// HistoryContent The history content
	HistoryContent string `json:"history_content"`

	// OfferTemplateHistoryEvent The template history event
	OfferTemplateHistoryEvent string `json:"offer_template_history_event"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `json:"offer_template_variant_id"`

	// OfferTemplateVersionId The ID of the template version ID
	OfferTemplateVersionId string `json:"offer_template_version_id"`
}

// OfferTemplateVariant defines model for OfferTemplateVariant.
type OfferTemplateVariant struct {
	ArchivedBy TemplateUserModel `json:"archived_by"`

	// ArchivedDate The archived date
	ArchivedDate     int                         `json:"archived_date"`
	ContentFieldList []OfferTemplateContentField `json:"content_field_list"`
	CreateBy         TemplateUserModel           `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The description
	Description string `json:"description"`

	// IsInherited Whether the object is an inherited template
	IsInherited bool `json:"is_inherited"`

	// LiveThumbnailImageUrl The URL of the live thumbnail image
	LiveThumbnailImageUrl string `json:"live_thumbnail_image_url"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `json:"offer_template_variant_id"`

	// Status The status
	Status   OfferTemplateVariantStatus `json:"status"`
	UpdateBy TemplateUserModel          `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// OfferTemplateVariantStatus The status
type OfferTemplateVariantStatus string

// OfferTemplateVariantResult defines model for OfferTemplateVariantResult.
type OfferTemplateVariantResult struct {
	OfferTemplateVariant OfferTemplateVariant `json:"OfferTemplateVariant"`
}

// OfferTemplateVersion defines model for OfferTemplateVersion.
type OfferTemplateVersion struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BoilerplateType The boilerplate type
	BoilerplateType OfferTemplateVersionBoilerplateType `json:"boilerplate_type"`

	// BoilerplateTypeId The ID of the boilerplate type
	BoilerplateTypeId OfferTemplateVersionBoilerplateTypeId `json:"boilerplate_type_id"`

	// CategoryId The category ID
	CategoryId OfferTemplateVersionCategoryId `json:"category_id"`

	// Content1Type HTML
	Content1Type string `json:"content1_type"`

	// Content1Value content1_value
	Content1Value string `json:"content1_value"`

	// Content2Type CSS
	Content2Type string `json:"content2_type"`

	// Content2Value content2_value
	Content2Value string `json:"content2_value"`

	// Content3Type JS/JSON
	Content3Type string `json:"content3_type"`

	// Content3Value content3_value
	Content3Value    string                      `json:"content3_value"`
	ContentFieldList []OfferTemplateContentField `json:"content_field_list"`
	CreateBy         User                        `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The description
	Description     string        `json:"description"`
	ExternalCssList []ExternalCss `json:"external_css_list"`

	// HasPreview Whether the template has a preview
	HasPreview bool `json:"has_preview"`

	// IsGlobal Whether the object is a global template
	IsGlobal bool `json:"is_global"`

	// IsInherited Whether the object is an inherited template
	IsInherited bool `json:"is_inherited"`

	// LiveThumbnailImageUrl The URL of the live thumbnail image
	LiveThumbnailImageUrl string `json:"live_thumbnail_image_url"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// PublishDate publish_date
	PublishDate int `json:"publish_date"`

	// Published Whether the template is published
	Published bool `json:"published"`

	// Status status
	Status OfferTemplateVersionStatus `json:"status"`

	// ThumbnailImageUrl The URL of the thumbnail image
	ThumbnailImageUrl string `json:"thumbnail_image_url"`

	// TokenType Is template token type
	TokenType OfferTemplateVersionTokenType `json:"token_type"`

	// Type The type
	Type OfferTemplateVersionType `json:"type"`

	// TypeId The template type ID
	TypeId   OfferTemplateVersionTypeId `json:"type_id"`
	UpdateBy User                       `json:"update_by"`

	// UpdateDate The update date
	UpdateDate  int                    `json:"update_date"`
	VariantList []OfferTemplateVariant `json:"variant_list"`

	// Version The template version
	Version int32 `json:"version"`
}

// OfferTemplateVersionBoilerplateType The boilerplate type
type OfferTemplateVersionBoilerplateType string

// OfferTemplateVersionBoilerplateTypeId The ID of the boilerplate type
type OfferTemplateVersionBoilerplateTypeId string

// OfferTemplateVersionCategoryId The category ID
type OfferTemplateVersionCategoryId string

// OfferTemplateVersionStatus status
type OfferTemplateVersionStatus string

// OfferTemplateVersionTokenType Is template token type
type OfferTemplateVersionTokenType string

// OfferTemplateVersionType The type
type OfferTemplateVersionType string

// OfferTemplateVersionTypeId The template type ID
type OfferTemplateVersionTypeId string

// OfferTemplateVersionResult defines model for OfferTemplateVersionResult.
type OfferTemplateVersionResult struct {
	OfferTemplateVersion OfferTemplateVersion `json:"OfferTemplateVersion"`
}

// PaymentBillingPlanTable defines model for PaymentBillingPlanTable.
type PaymentBillingPlanTable struct {
	// Billing payment condition such as "one payment of $99.99" or "$119.99 per year"
	Billing       *string `json:"billing,omitempty"`
	BillingInfo   *string `json:"billingInfo,omitempty"`
	BillingPeriod *string `json:"billingPeriod,omitempty"`
	Currency      *string `json:"currency,omitempty"`
	Cycles        *string `json:"cycles,omitempty"`

	// Date Payment billing plan table date for humans
	// such as "Today" or "Apr 17, 2026"
	Date *string `json:"date,omitempty"`

	// DateValue Payment billing plan table date in timestamp
	DateValue        *int    `json:"dateValue,omitempty"`
	Duration         *string `json:"duration,omitempty"`
	IsFree           *string `json:"isFree,omitempty"`
	IsFreeTrial      *string `json:"isFreeTrial,omitempty"`
	IsPayWhatYouWant *string `json:"isPayWhatYouWant,omitempty"`
	IsTrial          *string `json:"isTrial,omitempty"`
	Period           *string `json:"period,omitempty"`

	// Price price with currency unit symbol
	Price                  *string  `json:"price,omitempty"`
	PriceAndTax            *float64 `json:"priceAndTax,omitempty"`
	PriceAndTaxInMinorUnit *float32 `json:"priceAndTaxInMinorUnit,omitempty"`

	// PriceChargedStr price with currency unit symbol
	PriceChargedStr *string  `json:"priceChargedStr,omitempty"`
	PriceValue      *float64 `json:"priceValue,omitempty"`

	// ShortPeriod human readable billing period in shorter expression such as /yr
	ShortPeriod  *string `json:"shortPeriod,omitempty"`
	TotalBilling *string `json:"totalBilling,omitempty"`
}

// PaymentInquiry defines model for PaymentInquiry.
type PaymentInquiry struct {
	App App `json:"app"`

	// Category The inquiry category
	Category string `json:"category"`

	// CreateDate The creation date
	CreateDate string `json:"create_date"`

	// Currency The user payment currency
	Currency string `json:"currency"`

	// ExpireDate The new expire date
	ExpireDate      string           `json:"expire_date"`
	InquiryComments []InquiryComment `json:"inquiry_comments"`

	// InquiryReason The inquiry reason
	InquiryReason string `json:"inquiry_reason"`

	// IsAccessExpired Whether the access is expired
	IsAccessExpired bool `json:"is_access_expired"`

	// IsAccessRevoked Whether the access is revoked
	IsAccessRevoked bool `json:"is_access_revoked"`

	// IsAccessUnlimited Whether the access is unlimited
	IsAccessUnlimited bool `json:"is_access_unlimited"`

	// PaymentInquiryId The public ID of the inquiry (not only about payments)
	PaymentInquiryId string `json:"payment_inquiry_id"`

	// RefundAmount The user payment amount refunded, before tax
	RefundAmount string `json:"refund_amount"`

	// RefundAmountRecalculated Refund amount was recalculated before
	RefundAmountRecalculated bool `json:"refund_amount_recalculated"`

	// RefundedDate The refund date
	RefundedDate string   `json:"refunded_date"`
	Resource     Resource `json:"resource"`

	// Source The source
	Source string `json:"source"`

	// SpentMoney The money spent
	SpentMoney float64 `json:"spent_money"`

	// SpentMoneyDisplay Spent money text
	SpentMoneyDisplay string `json:"spent_money_display"`

	// StartDate The start date.
	StartDate string `json:"start_date"`

	// State The inquiry state
	State PaymentInquiryState `json:"state"`

	// TransactionDate The transaction date
	TransactionDate string `json:"transaction_date"`

	// TransactionId The transaction ID
	TransactionId string `json:"transaction_id"`
	UpdateStateBy User   `json:"update_state_by"`

	// UpdateStateDate The date when the state was updated
	UpdateStateDate string `json:"update_state_date"`
}

// PaymentInquiryState The inquiry state
type PaymentInquiryState int32

// PaymentInquiryArrayResult defines model for PaymentInquiryArrayResult.
type PaymentInquiryArrayResult struct {
	PaymentInquiry []PaymentInquiry `json:"PaymentInquiry"`
}

// PaymentInquiryResult defines model for PaymentInquiryResult.
type PaymentInquiryResult struct {
	PaymentInquiry PaymentInquiry `json:"PaymentInquiry"`
}

// Period defines model for Period.
type Period struct {
	// BeginDate The date when the period begins
	BeginDate int `json:"begin_date"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// EndDate The date when the period ends
	EndDate int `json:"end_date"`

	// IsActive Whether the period is active. A period is in the Active state when the sell date is passed but the end date is not reached
	IsActive bool `json:"is_active"`

	// IsSaleStarted Whether sale is started for the period
	IsSaleStarted bool `json:"is_sale_started"`

	// Name The period name
	Name string `json:"name"`

	// PeriodId The period ID
	PeriodId string `json:"period_id"`

	// SellDate The sell date of the period
	SellDate int `json:"sell_date"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// PeriodArrayResult defines model for PeriodArrayResult.
type PeriodArrayResult struct {
	Period []Period `json:"Period"`
}

// PeriodResult defines model for PeriodResult.
type PeriodResult struct {
	Period Period `json:"Period"`
}

// PostPublisherConversionCustomCreateError defines model for PostPublisherConversionCustomCreateError.
type PostPublisherConversionCustomCreateError struct {
	// Code - 1002: Invalid term type
	//
	// - 401: Invalid user
	//
	// - 1003: Access period must be greater than or equal to 0
	//
	// - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             PostPublisherConversionCustomCreateErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherConversionCustomCreateErrorCode - 1002: Invalid term type
//
// - 401: Invalid user
//
// - 1003: Access period must be greater than or equal to 0
//
// - 2: Access denied
//
// - 1001: Term not found
type PostPublisherConversionCustomCreateErrorCode int

// PostPublisherConversionCustomCreateRequest defines model for PostPublisherConversionCustomCreateRequest.
type PostPublisherConversionCustomCreateRequest struct {
	// AccessPeriod The duration of the access being provided
	AccessPeriod *int32 `json:"access_period,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// BrowserId The unique browser ID
	BrowserId *string `json:"browser_id,omitempty"`

	// ContentAuthor The author of the content
	ContentAuthor *string `json:"content_author,omitempty"`

	// ContentCreated When the content was published
	ContentCreated *string `json:"content_created,omitempty"`

	// ContentSection The section for the content
	ContentSection *string `json:"content_section,omitempty"`

	// ContentType The type of the content
	ContentType *string `json:"content_type,omitempty"`

	// CookieConsents The conversion consents in JSON format
	CookieConsents *string `json:"cookie_consents,omitempty"`

	// CustomParams The custom parameters (any key-value pairs) to save; the value should be a valid JSON object)
	CustomParams *string `json:"custom_params,omitempty"`

	// ExtendExisting Whether to extend the existing access
	ExtendExisting *bool `json:"extend_existing,omitempty"`

	// PageTitle Page title
	PageTitle *string `json:"page_title,omitempty"`

	// PreviousUserSegments Previous C1X user segments
	PreviousUserSegments *string `json:"previous_user_segments,omitempty"`

	// Referer The page referer
	Referer *string `json:"referer,omitempty"`

	// Tags Comma-separated list of The tags of the page
	Tags *string `json:"tags,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TrackingId The conversion ID to track in external systems
	TrackingId *string `json:"tracking_id,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UnlimitedAccess Whether to provide unlimited access
	UnlimitedAccess *bool `json:"unlimited_access,omitempty"`

	// Url The URL of the page
	Url *string `json:"url,omitempty"`

	// UserState User state
	UserState *PostPublisherConversionCustomCreateRequestUserState `json:"user_state,omitempty"`
}

// PostPublisherConversionCustomCreateRequestUserState User state
type PostPublisherConversionCustomCreateRequestUserState string

// PostPublisherConversionExternalCreateError defines model for PostPublisherConversionExternalCreateError.
type PostPublisherConversionExternalCreateError struct {
	// Code - 1002: Invalid term type
	//
	// - 401: Invalid user
	//
	// - 1003: Access period must be greater than or equal to 0
	//
	// - 10001: Can't parse fields
	//
	// - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             PostPublisherConversionExternalCreateErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherConversionExternalCreateErrorCode - 1002: Invalid term type
//
// - 401: Invalid user
//
// - 1003: Access period must be greater than or equal to 0
//
// - 10001: Can't parse fields
//
// - 2: Access denied
//
// - 1001: Term not found
type PostPublisherConversionExternalCreateErrorCode int

// PostPublisherConversionExternalCreateRequest defines model for PostPublisherConversionExternalCreateRequest.
type PostPublisherConversionExternalCreateRequest struct {
	// AccessTo access_to
	AccessTo *int `json:"access_to,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// BrowserId The unique browser ID
	BrowserId *string `json:"browser_id,omitempty"`

	// CheckValidity Whether to check the validity of the passed values ("TRUE") or use them forcely ("FALSE", not recommended, may result in unverified subscriptions)
	CheckValidity *bool `json:"check_validity,omitempty"`

	// ContentAuthor The author of the content
	ContentAuthor *string `json:"content_author,omitempty"`

	// ContentCreated When the content was published
	ContentCreated *string `json:"content_created,omitempty"`

	// ContentSection The section for the content
	ContentSection *string `json:"content_section,omitempty"`

	// ContentType The type of the content
	ContentType *string `json:"content_type,omitempty"`

	// CookieConsents The conversion consents in JSON format
	CookieConsents *string `json:"cookie_consents,omitempty"`

	// CustomParams The custom parameters (any key-value pairs) to save; the value should be a valid JSON object)
	CustomParams *string `json:"custom_params,omitempty"`

	// Fields A JSON object defining what fields have to be checked with the external API
	Fields string `json:"fields"`

	// PageTitle Page title
	PageTitle *string `json:"page_title,omitempty"`

	// PreviousUserSegments Previous C1X user segments
	PreviousUserSegments *string `json:"previous_user_segments,omitempty"`

	// Referer The page referer
	Referer *string `json:"referer,omitempty"`

	// Tags Comma-separated list of The tags of the page
	Tags *string `json:"tags,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TrackingId The conversion ID to track in external systems
	TrackingId *string `json:"tracking_id,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`

	// Url The URL of the page
	Url *string `json:"url,omitempty"`

	// UserState User state
	UserState *PostPublisherConversionExternalCreateRequestUserState `json:"user_state,omitempty"`
}

// PostPublisherConversionExternalCreateRequestUserState User state
type PostPublisherConversionExternalCreateRequestUserState string

// PostPublisherConversionLogRequest defines model for PostPublisherConversionLogRequest.
type PostPublisherConversionLogRequest struct {
	// Amount The conversion amount
	Amount *float32 `json:"amount,omitempty"`

	// BrowserId The unique browser ID
	BrowserId *string `json:"browser_id,omitempty"`

	// ContentAuthor The author of the content
	ContentAuthor *string `json:"content_author,omitempty"`

	// ContentCreated When the content was published
	ContentCreated *string `json:"content_created,omitempty"`

	// ContentSection The section for the content
	ContentSection *string `json:"content_section,omitempty"`

	// ContentType The type of the content
	ContentType *string `json:"content_type,omitempty"`

	// ConversionCategory The conversion category
	ConversionCategory *PostPublisherConversionLogRequestConversionCategory `json:"conversion_category,omitempty"`

	// CookieConsents The conversion consents in JSON format
	CookieConsents *string `json:"cookie_consents,omitempty"`

	// Currency The conversion currency under the ISO 4217 standard
	Currency *string `json:"currency,omitempty"`

	// CustomParams The custom parameters (any key-value pairs) to save; the value should be a valid JSON object)
	CustomParams *string `json:"custom_params,omitempty"`

	// PageTitle Page title
	PageTitle *string `json:"page_title,omitempty"`

	// PreviousUserSegments Previous C1X user segments
	PreviousUserSegments *string `json:"previous_user_segments,omitempty"`

	// Referer The page referer
	Referer *string `json:"referer,omitempty"`

	// StepNumber The step of the external checkout as defined by the client
	StepNumber *int32 `json:"step_number,omitempty"`

	// Tags Comma-separated list of The tags of the page
	Tags *string `json:"tags,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TermName The term name
	TermName string `json:"term_name"`

	// TrackingId The conversion ID to track in external systems
	TrackingId string `json:"tracking_id"`

	// Url The URL of the page
	Url *string `json:"url,omitempty"`

	// UserState User state
	UserState *PostPublisherConversionLogRequestUserState `json:"user_state,omitempty"`
}

// PostPublisherConversionLogRequestConversionCategory The conversion category
type PostPublisherConversionLogRequestConversionCategory string

// PostPublisherConversionLogRequestUserState User state
type PostPublisherConversionLogRequestUserState string

// PostPublisherConversionRegistrationCreateError defines model for PostPublisherConversionRegistrationCreateError.
type PostPublisherConversionRegistrationCreateError struct {
	// Code - 1008: Conversion rejected by grace period
	//
	// - 1002: Invalid term type
	//
	// - 1010: Already registered on this site
	//
	// - 1009: Already have access to this resource
	//
	// - 404: Not found
	//
	// - 2: Access denied
	//
	Code             PostPublisherConversionRegistrationCreateErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// PostPublisherConversionRegistrationCreateErrorCode - 1008: Conversion rejected by grace period
//
// - 1002: Invalid term type
//
// - 1010: Already registered on this site
//
// - 1009: Already have access to this resource
//
// - 404: Not found
//
// - 2: Access denied
type PostPublisherConversionRegistrationCreateErrorCode int

// PostPublisherConversionRegistrationCreateRequest defines model for PostPublisherConversionRegistrationCreateRequest.
type PostPublisherConversionRegistrationCreateRequest struct {
	// AccessStartDate The access start date (unix)
	AccessStartDate *int `json:"access_start_date,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// CreateDate The creation date
	CreateDate *int `json:"create_date,omitempty"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`

	// PageviewId The pageview ID, can be retrieved from cookies through JS SDK
	PageviewId *string `json:"pageview_id,omitempty"`

	// Tbc Piano's browser cookie containing the browser ID which can also be retrieved through JS SDK
	Tbc *string `json:"tbc,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherExportCreateAamDailyError defines model for PostPublisherExportCreateAamDailyError.
type PostPublisherExportCreateAamDailyError struct {
	// Code - 2: Access denied
	//
	// - 302: Start of time period should be equal or less than end for %s
	//
	// - 11004: End date of period should be less than today
	//
	Code             PostPublisherExportCreateAamDailyErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// PostPublisherExportCreateAamDailyErrorCode - 2: Access denied
//
// - 302: Start of time period should be equal or less than end for %s
//
// - 11004: End date of period should be less than today
type PostPublisherExportCreateAamDailyErrorCode int

// PostPublisherExportCreateAamDailyRequest defines model for PostPublisherExportCreateAamDailyRequest.
type PostPublisherExportCreateAamDailyRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom The first date of the report range
	DateFrom int `json:"date_from"`

	// DateTo The last date of the report range
	DateTo int `json:"date_to"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// Snowflake Enable snowflake
	Snowflake *bool `json:"snowflake,omitempty"`
}

// PostPublisherExportCreateAamMonthlyError defines model for PostPublisherExportCreateAamMonthlyError.
type PostPublisherExportCreateAamMonthlyError struct {
	// Code - 2: Access denied
	//
	// - 302: Start of time period should be equal or less than end for %s
	//
	// - 11004: End date of period should be less than today
	//
	Code             PostPublisherExportCreateAamMonthlyErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherExportCreateAamMonthlyErrorCode - 2: Access denied
//
// - 302: Start of time period should be equal or less than end for %s
//
// - 11004: End date of period should be less than today
type PostPublisherExportCreateAamMonthlyErrorCode int

// PostPublisherExportCreateAamMonthlyRequest defines model for PostPublisherExportCreateAamMonthlyRequest.
type PostPublisherExportCreateAamMonthlyRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom The first date of the report range
	DateFrom int `json:"date_from"`

	// DateTo The last date of the report range
	DateTo int `json:"date_to"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// Snowflake Enable snowflake
	Snowflake *bool `json:"snowflake,omitempty"`
}

// PostPublisherExportCreateAamMonthlyV2Error defines model for PostPublisherExportCreateAamMonthlyV2Error.
type PostPublisherExportCreateAamMonthlyV2Error struct {
	// Code - 2: Access denied
	//
	// - 302: Start of time period should be equal or less than end for %s
	//
	// - 11004: End date of period should be less than today
	//
	// - 11006: Wrong date format for %s. Correct date format is "yyyy-MM-dd"
	//
	Code             PostPublisherExportCreateAamMonthlyV2ErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherExportCreateAamMonthlyV2ErrorCode - 2: Access denied
//
// - 302: Start of time period should be equal or less than end for %s
//
// - 11004: End date of period should be less than today
//
// - 11006: Wrong date format for %s. Correct date format is "yyyy-MM-dd"
type PostPublisherExportCreateAamMonthlyV2ErrorCode int

// PostPublisherExportCreateAamMonthlyV2Request defines model for PostPublisherExportCreateAamMonthlyV2Request.
type PostPublisherExportCreateAamMonthlyV2Request struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom Date in the YYYY-MM-DD format
	DateFrom string `json:"date_from"`

	// DateTo Date in the YYYY-MM-DD format
	DateTo string `json:"date_to"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// Snowflake Enable snowflake
	Snowflake *bool `json:"snowflake,omitempty"`
}

// PostPublisherExportCreateSubscriptionDetailsReportError defines model for PostPublisherExportCreateSubscriptionDetailsReportError.
type PostPublisherExportCreateSubscriptionDetailsReportError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateSubscriptionDetailsReportErrorCode `json:"code"`
	LocalizedMessage *string                                                     `json:"localizedMessage,omitempty"`
	Message          *string                                                     `json:"message,omitempty"`
}

// PostPublisherExportCreateSubscriptionDetailsReportErrorCode - 2: Access denied
type PostPublisherExportCreateSubscriptionDetailsReportErrorCode int

// PostPublisherExportCreateSubscriptionDetailsReportRequest defines model for PostPublisherExportCreateSubscriptionDetailsReportRequest.
type PostPublisherExportCreateSubscriptionDetailsReportRequest struct {
	// ActiveNowSubscriptionsStatuses Comma-separated list of Statuses for new subscriptions search (active, failedAndRetry), required parameter search_active_now_subscriptions
	ActiveNowSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses `json:"active_now_subscriptions_statuses,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// InactiveSubscriptionsStatuses Comma-separated list of Statuses for inactive subscriptions search (cancelled, paymentFailure, expired, completed, upgraded), required parameter search_inactive_subscriptions
	InactiveSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses `json:"inactive_subscriptions_statuses,omitempty"`

	// NewSubscriptionsCreatedFrom Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedFrom *int `json:"new_subscriptions_created_from,omitempty"`

	// NewSubscriptionsCreatedTo Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedTo *int `json:"new_subscriptions_created_to,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// SearchActiveNowSubscriptions Search for active subscriptions
	SearchActiveNowSubscriptions *bool `json:"search_active_now_subscriptions,omitempty"`

	// SearchAutoRenewingSubscriptions Is filter by auto renewing subscriptions enabled
	SearchAutoRenewingSubscriptions *bool `json:"search_auto_renewing_subscriptions,omitempty"`

	// SearchInactiveSubscriptions Search for inactive subscriptions
	SearchInactiveSubscriptions *bool `json:"search_inactive_subscriptions,omitempty"`

	// SearchNewSubscriptions Search for new subscriptions
	SearchNewSubscriptions *bool `json:"search_new_subscriptions,omitempty"`

	// SearchSubscriptionsByNextBillingDate Is filter by next billing date enabled
	SearchSubscriptionsByNextBillingDate *bool `json:"search_subscriptions_by_next_billing_date,omitempty"`

	// SearchSubscriptionsByTerms Is filter by terms enabled
	SearchSubscriptionsByTerms *bool `json:"search_subscriptions_by_terms,omitempty"`

	// SearchUpdatedSubscriptions Search for updated subscriptions
	SearchUpdatedSubscriptions *bool `json:"search_updated_subscriptions,omitempty"`

	// SubscriptionsAutoRenewing Search for auto-renewing subscriptions, search_auto_renewing_subscriptions should be "TRUE"
	SubscriptionsAutoRenewing *bool `json:"subscriptions_auto_renewing,omitempty"`

	// SubscriptionsInactiveFrom Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveFrom *int `json:"subscriptions_inactive_from,omitempty"`

	// SubscriptionsInactiveTo Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveTo *int `json:"subscriptions_inactive_to,omitempty"`

	// SubscriptionsNextBillingDateFrom Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateFrom *int `json:"subscriptions_next_billing_date_from,omitempty"`

	// SubscriptionsNextBillingDateTo Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateTo *int `json:"subscriptions_next_billing_date_to,omitempty"`

	// SubscriptionsTermTypes Comma-separated list of Subscription term type list (payment, external, gift), search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTermTypes *PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes `json:"subscriptions_term_types,omitempty"`

	// SubscriptionsTerms Comma-separated list of Subscription term pubId list, search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTerms *string `json:"subscriptions_terms,omitempty"`

	// SubscriptionsUpdatedFrom Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedFrom *int `json:"subscriptions_updated_from,omitempty"`

	// SubscriptionsUpdatedTo Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedTo *int `json:"subscriptions_updated_to,omitempty"`

	// UpdatedSubscriptionsStatuses Comma-separated list of Status for updated subscriptions search (renewed), search_updated_subscriptions should be "TRUE"
	UpdatedSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatuses `json:"updated_subscriptions_statuses,omitempty"`
}

// PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses Comma-separated list of Statuses for new subscriptions search (active, failedAndRetry), required parameter search_active_now_subscriptions
type PostPublisherExportCreateSubscriptionDetailsReportRequestActiveNowSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses Comma-separated list of Statuses for inactive subscriptions search (cancelled, paymentFailure, expired, completed, upgraded), required parameter search_inactive_subscriptions
type PostPublisherExportCreateSubscriptionDetailsReportRequestInactiveSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes Comma-separated list of Subscription term type list (payment, external, gift), search_subscriptions_by_terms should be "TRUE"
type PostPublisherExportCreateSubscriptionDetailsReportRequestSubscriptionsTermTypes string

// PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatuses Comma-separated list of Status for updated subscriptions search (renewed), search_updated_subscriptions should be "TRUE"
type PostPublisherExportCreateSubscriptionDetailsReportRequestUpdatedSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionDetailsReportV2Error defines model for PostPublisherExportCreateSubscriptionDetailsReportV2Error.
type PostPublisherExportCreateSubscriptionDetailsReportV2Error struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCode `json:"code"`
	LocalizedMessage *string                                                       `json:"localizedMessage,omitempty"`
	Message          *string                                                       `json:"message,omitempty"`
}

// PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCode - 2: Access denied
type PostPublisherExportCreateSubscriptionDetailsReportV2ErrorCode int

// PostPublisherExportCreateSubscriptionDetailsReportV2Request defines model for PostPublisherExportCreateSubscriptionDetailsReportV2Request.
type PostPublisherExportCreateSubscriptionDetailsReportV2Request struct {
	// ActiveNowSubscriptionsStatuses Comma-separated list of Statuses for new subscriptions search (active, failedAndRetry), required parameter search_active_now_subscriptions
	ActiveNowSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses `json:"active_now_subscriptions_statuses,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// InactiveSubscriptionsStatuses Comma-separated list of Statuses for inactive subscriptions search (cancelled, paymentFailure, expired, completed, upgraded), required parameter search_inactive_subscriptions
	InactiveSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses `json:"inactive_subscriptions_statuses,omitempty"`

	// NewSubscriptionsCreatedFrom Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedFrom *int `json:"new_subscriptions_created_from,omitempty"`

	// NewSubscriptionsCreatedTo Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedTo *int `json:"new_subscriptions_created_to,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// SearchActiveNowSubscriptions Search for active subscriptions
	SearchActiveNowSubscriptions *bool `json:"search_active_now_subscriptions,omitempty"`

	// SearchAutoRenewingSubscriptions Is filter by auto renewing subscriptions enabled
	SearchAutoRenewingSubscriptions *bool `json:"search_auto_renewing_subscriptions,omitempty"`

	// SearchInactiveSubscriptions Search for inactive subscriptions
	SearchInactiveSubscriptions *bool `json:"search_inactive_subscriptions,omitempty"`

	// SearchNewSubscriptions Search for new subscriptions
	SearchNewSubscriptions *bool `json:"search_new_subscriptions,omitempty"`

	// SearchSubscriptionsByNextBillingDate Is filter by next billing date enabled
	SearchSubscriptionsByNextBillingDate *bool `json:"search_subscriptions_by_next_billing_date,omitempty"`

	// SearchSubscriptionsByTerms Is filter by terms enabled
	SearchSubscriptionsByTerms *bool `json:"search_subscriptions_by_terms,omitempty"`

	// SearchUpdatedSubscriptions Search for updated subscriptions
	SearchUpdatedSubscriptions *bool `json:"search_updated_subscriptions,omitempty"`

	// SubscriptionsAutoRenewing Search for auto-renewing subscriptions, search_auto_renewing_subscriptions should be "TRUE"
	SubscriptionsAutoRenewing *bool `json:"subscriptions_auto_renewing,omitempty"`

	// SubscriptionsInactiveFrom Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveFrom *int `json:"subscriptions_inactive_from,omitempty"`

	// SubscriptionsInactiveTo Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveTo *int `json:"subscriptions_inactive_to,omitempty"`

	// SubscriptionsNextBillingDateFrom Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateFrom *int `json:"subscriptions_next_billing_date_from,omitempty"`

	// SubscriptionsNextBillingDateTo Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateTo *int `json:"subscriptions_next_billing_date_to,omitempty"`

	// SubscriptionsTermTypes Comma-separated list of Subscription term type list (payment, external, gift), search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTermTypes *PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes `json:"subscriptions_term_types,omitempty"`

	// SubscriptionsTerms Comma-separated list of Subscription term pubId list, search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTerms *string `json:"subscriptions_terms,omitempty"`

	// SubscriptionsUpdatedFrom Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedFrom *int `json:"subscriptions_updated_from,omitempty"`

	// SubscriptionsUpdatedTo Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedTo *int `json:"subscriptions_updated_to,omitempty"`

	// UpdatedSubscriptionsStatuses Comma-separated list of Status for updated subscriptions search (renewed), search_updated_subscriptions should be "TRUE"
	UpdatedSubscriptionsStatuses *PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatuses `json:"updated_subscriptions_statuses,omitempty"`
}

// PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses Comma-separated list of Statuses for new subscriptions search (active, failedAndRetry), required parameter search_active_now_subscriptions
type PostPublisherExportCreateSubscriptionDetailsReportV2RequestActiveNowSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses Comma-separated list of Statuses for inactive subscriptions search (cancelled, paymentFailure, expired, completed, upgraded), required parameter search_inactive_subscriptions
type PostPublisherExportCreateSubscriptionDetailsReportV2RequestInactiveSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes Comma-separated list of Subscription term type list (payment, external, gift), search_subscriptions_by_terms should be "TRUE"
type PostPublisherExportCreateSubscriptionDetailsReportV2RequestSubscriptionsTermTypes string

// PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatuses Comma-separated list of Status for updated subscriptions search (renewed), search_updated_subscriptions should be "TRUE"
type PostPublisherExportCreateSubscriptionDetailsReportV2RequestUpdatedSubscriptionsStatuses string

// PostPublisherExportCreateSubscriptionSummaryReportError defines model for PostPublisherExportCreateSubscriptionSummaryReportError.
type PostPublisherExportCreateSubscriptionSummaryReportError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateSubscriptionSummaryReportErrorCode `json:"code"`
	LocalizedMessage *string                                                     `json:"localizedMessage,omitempty"`
	Message          *string                                                     `json:"message,omitempty"`
}

// PostPublisherExportCreateSubscriptionSummaryReportErrorCode - 2: Access denied
type PostPublisherExportCreateSubscriptionSummaryReportErrorCode int

// PostPublisherExportCreateSubscriptionSummaryReportRequest defines model for PostPublisherExportCreateSubscriptionSummaryReportRequest.
type PostPublisherExportCreateSubscriptionSummaryReportRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom The first date of the report range
	DateFrom int `json:"date_from"`

	// DateTo The last date of the report range
	DateTo int `json:"date_to"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`
}

// PostPublisherExportCreateTransactionsReportError defines model for PostPublisherExportCreateTransactionsReportError.
type PostPublisherExportCreateTransactionsReportError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateTransactionsReportErrorCode `json:"code"`
	LocalizedMessage *string                                              `json:"localizedMessage,omitempty"`
	Message          *string                                              `json:"message,omitempty"`
}

// PostPublisherExportCreateTransactionsReportErrorCode - 2: Access denied
type PostPublisherExportCreateTransactionsReportErrorCode int

// PostPublisherExportCreateTransactionsReportRequest defines model for PostPublisherExportCreateTransactionsReportRequest.
type PostPublisherExportCreateTransactionsReportRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom Date from
	DateFrom *int `json:"date_from,omitempty"`

	// DateTo Date to
	DateTo *int `json:"date_to,omitempty"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// OrderBy Field to order by. Possible values: payment_date
	OrderBy *PostPublisherExportCreateTransactionsReportRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction. Possible values: asc, desc
	OrderDirection *PostPublisherExportCreateTransactionsReportRequestOrderDirection `json:"order_direction,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// TransactionsType The transactions type ("all", "purchases", or "refunds")
	TransactionsType *PostPublisherExportCreateTransactionsReportRequestTransactionsType `json:"transactions_type,omitempty"`
}

// PostPublisherExportCreateTransactionsReportRequestOrderBy Field to order by. Possible values: payment_date
type PostPublisherExportCreateTransactionsReportRequestOrderBy string

// PostPublisherExportCreateTransactionsReportRequestOrderDirection Order direction. Possible values: asc, desc
type PostPublisherExportCreateTransactionsReportRequestOrderDirection string

// PostPublisherExportCreateTransactionsReportRequestTransactionsType The transactions type ("all", "purchases", or "refunds")
type PostPublisherExportCreateTransactionsReportRequestTransactionsType string

// PostPublisherExportCreateTransactionsReportV2Error defines model for PostPublisherExportCreateTransactionsReportV2Error.
type PostPublisherExportCreateTransactionsReportV2Error struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateTransactionsReportV2ErrorCode `json:"code"`
	LocalizedMessage *string                                                `json:"localizedMessage,omitempty"`
	Message          *string                                                `json:"message,omitempty"`
}

// PostPublisherExportCreateTransactionsReportV2ErrorCode - 2: Access denied
type PostPublisherExportCreateTransactionsReportV2ErrorCode int

// PostPublisherExportCreateTransactionsReportV2Request defines model for PostPublisherExportCreateTransactionsReportV2Request.
type PostPublisherExportCreateTransactionsReportV2Request struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom Date from
	DateFrom *int `json:"date_from,omitempty"`

	// DateTo Date to
	DateTo *int `json:"date_to,omitempty"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// OrderBy Field to order by. Possible values: payment_date
	OrderBy *PostPublisherExportCreateTransactionsReportV2RequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction. Possible values: asc, desc
	OrderDirection *PostPublisherExportCreateTransactionsReportV2RequestOrderDirection `json:"order_direction,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// TransactionsType The transactions type ("all", "purchases", or "refunds")
	TransactionsType *PostPublisherExportCreateTransactionsReportV2RequestTransactionsType `json:"transactions_type,omitempty"`
}

// PostPublisherExportCreateTransactionsReportV2RequestOrderBy Field to order by. Possible values: payment_date
type PostPublisherExportCreateTransactionsReportV2RequestOrderBy string

// PostPublisherExportCreateTransactionsReportV2RequestOrderDirection Order direction. Possible values: asc, desc
type PostPublisherExportCreateTransactionsReportV2RequestOrderDirection string

// PostPublisherExportCreateTransactionsReportV2RequestTransactionsType The transactions type ("all", "purchases", or "refunds")
type PostPublisherExportCreateTransactionsReportV2RequestTransactionsType string

// PostPublisherExportCreateUserExportError defines model for PostPublisherExportCreateUserExportError.
type PostPublisherExportCreateUserExportError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherExportCreateUserExportErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherExportCreateUserExportErrorCode - 2: Access denied
type PostPublisherExportCreateUserExportErrorCode int

// PostPublisherExportCreateUserExportRequest defines model for PostPublisherExportCreateUserExportRequest.
type PostPublisherExportCreateUserExportRequest struct {
	// AccessFrom Finds users who have any ACTIVE access from this date
	AccessFrom *int `json:"access_from,omitempty"`

	// AccessToResources Comma-separated list of Finds users who have access to these resources (enter the resource IDs here)
	AccessToResources *string `json:"access_to_resources,omitempty"`

	// AccessUntil Finds users who have any access until this date
	AccessUntil *int `json:"access_until,omitempty"`

	// ActiveSubscriptionToResources Comma-separated list of Finds users who have active subscriptions to these resources (enter the RIDs here)
	ActiveSubscriptionToResources *string `json:"active_subscription_to_resources,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// BillingFailureFrom Finds users who had problems with auto renewal of subscriptions on or after this date
	BillingFailureFrom *int `json:"billing_failure_from,omitempty"`

	// BillingFailureUntil Finds users who had problems with auto renewal of a subscription on or before this date
	BillingFailureUntil *int `json:"billing_failure_until,omitempty"`

	// ConsentChecked Finds users who have checked consents
	ConsentChecked *bool `json:"consent_checked,omitempty"`

	// ConsentHasData Finds users who accepted any consents; if this parameter is FALSE, selected_consents_map and consent_has_data are ignored
	ConsentHasData *bool `json:"consent_has_data,omitempty"`

	// ConvertedTermFrom Finds users converted on any term from this date
	ConvertedTermFrom *int `json:"converted_term_from,omitempty"`

	// ConvertedTermSharingType Finds users who converted on any term and have this sharing type
	ConvertedTermSharingType *PostPublisherExportCreateUserExportRequestConvertedTermSharingType `json:"converted_term_sharing_type,omitempty"`

	// ConvertedTermTypes Comma-separated list of Finds users who converted on specific types of terms: 0 (N/A), 1 (payment), 2 (ad view), 3 (registration), 4 (newsletter), 5 (external), 6 (custom), 7 (access granted), and 8 (gift)
	ConvertedTermTypes *PostPublisherExportCreateUserExportRequestConvertedTermTypes `json:"converted_term_types,omitempty"`

	// ConvertedTermUntil Finds users who converted on any term until this date
	ConvertedTermUntil *int `json:"converted_term_until,omitempty"`

	// ConvertedTerms Comma-separated list of Finds users who have converted on these terms (enter the term IDs here)
	ConvertedTerms *string `json:"converted_terms,omitempty"`

	// CreditCardWillExpire Finds users whose cards will expire on these dates
	CreditCardWillExpire *string `json:"credit_card_will_expire,omitempty"`

	// CustomFields Finds users with these custom fields
	CustomFields *string `json:"custom_fields,omitempty"`

	// Data Defines the search data
	Data *string `json:"data,omitempty"`

	// DataType Comma-separated list of Defines the search field
	DataType *string `json:"data_type,omitempty"`

	// Email Finds users whose emails contain this keyword
	Email *string `json:"email,omitempty"`

	// EmailConfirmationState Finds users with a specific email confirmation state
	EmailConfirmationState *PostPublisherExportCreateUserExportRequestEmailConfirmationState `json:"email_confirmation_state,omitempty"`

	// ExportAllCustomFields Export all the custom fields
	ExportAllCustomFields *bool `json:"export_all_custom_fields,omitempty"`

	// ExportCustomFields Comma-separated list of List the names of the custom fields to include in the report
	ExportCustomFields *string `json:"export_custom_fields,omitempty"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// HadBillingFailure Finds users who had any problems with billing.
	HadBillingFailure *bool `json:"had_billing_failure,omitempty"`

	// HasAccess Finds users who currently have any type of access (access that is not expired or will never expire)
	HasAccess *bool `json:"has_access,omitempty"`

	// HasActiveSubscription Finds users who have an active subscription; set the field to TRUE  to get only active users
	HasActiveSubscription *bool `json:"has_active_subscription,omitempty"`

	// HasAnySubscriptions Finds users with subscriptions, including expired and canceled ones
	HasAnySubscriptions *bool `json:"has_any_subscriptions,omitempty"`

	// HasConversionTerm Finds users who have converted on any term
	HasConversionTerm *bool `json:"has_conversion_term,omitempty"`

	// HasConversionTermType Finds users who have conversion terms for these term types
	HasConversionTermType *bool `json:"has_conversion_term_type,omitempty"`

	// HasData Finds users with any data
	HasData *bool `json:"has_data,omitempty"`

	// HasEmailConfirmationRequired Finds users who either validated their email
	HasEmailConfirmationRequired *bool `json:"has_emailConfirmation_required,omitempty"`

	// HasLastAccessTime Finds users who have some last access time
	HasLastAccessTime *bool `json:"has_last_access_time,omitempty"`

	// HasLicensingContractRedemptions Finds users who redeemed a licensing contract
	HasLicensingContractRedemptions *bool `json:"has_licensing_contract_redemptions,omitempty"`

	// HasPayment Finds users who have made any payment. Refunded payments are not taken into account. So if user had a payment and refunded it, he will not presented in the result list.
	HasPayment *bool `json:"has_payment,omitempty"`

	// HasReceivedResponseInquiry Finds users with inquiries that were responded to
	HasReceivedResponseInquiry *bool `json:"has_received_response_inquiry,omitempty"`

	// HasRedeemedPromotion Finds users who have ever used promo codes
	HasRedeemedPromotion *bool `json:"has_redeemed_promotion,omitempty"`

	// HasResolvedInquiry Finds users with resolved inquiries
	HasResolvedInquiry *bool `json:"has_resolved_inquiry,omitempty"`

	// HasSubmittedInquiry Finds users who submitted inquiries
	HasSubmittedInquiry *bool `json:"has_submitted_inquiry,omitempty"`

	// HasSubscriptionStarts Finds users who have a started subscription
	HasSubscriptionStarts *bool `json:"has_subscription_starts,omitempty"`

	// HasSubscriptionWillExpire Finds users who have a subscription that will expire
	HasSubscriptionWillExpire *bool `json:"has_subscription_will_expire,omitempty"`

	// HasSubscriptionWillRenew Finds users who have a subscription with enabled auto renewal
	HasSubscriptionWillRenew *bool `json:"has_subscription_will_renew,omitempty"`

	// HasTrialPeriod Finds users who has ever used trial period
	HasTrialPeriod *bool `json:"has_trial_period,omitempty"`

	// HasUnresolvedInquiry Finds users with unresolved inquiries
	HasUnresolvedInquiry *bool `json:"has_unresolved_inquiry,omitempty"`

	// IncludeNotes Whether to include notes about users in the report
	IncludeNotes *bool `json:"include_notes,omitempty"`

	// IncludeTrialRedemptions Finds users who redeemed a promotion, including promotions redeemed when signing up for a free trial; in such cases, the promotion was not applied within the period of your search but was applied as soon as the trial period ended
	IncludeTrialRedemptions *bool `json:"include_trial_redemptions,omitempty"`

	// InvertCreditCardWillExpire Finds users whose cards will expire in selected dates
	InvertCreditCardWillExpire *bool `json:"invert_credit_card_will_expire,omitempty"`

	// LastAccessTimeFrom Finds users whose last access time was on or after this date
	LastAccessTimeFrom *int `json:"last_access_time_from,omitempty"`

	// LastAccessTimeUntil Finds users whose last access time was on or before this date
	LastAccessTimeUntil *int `json:"last_access_time_until,omitempty"`

	// LicensingContractRedeemedFrom Finds users who redeemed licensing contracts on or after this date
	LicensingContractRedeemedFrom *int `json:"licensing_contract_redeemed_from,omitempty"`

	// LicensingContractRedeemedUntil Finds users who redeemed licensing contracts on or before this date
	LicensingContractRedeemedUntil *int `json:"licensing_contract_redeemed_until,omitempty"`

	// Name Finds users whose names start with this keyword
	Name *string `json:"name,omitempty"`

	// OrderBy Field to order by
	OrderBy *PostPublisherExportCreateUserExportRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherExportCreateUserExportRequestOrderDirection `json:"order_direction,omitempty"`

	// PaymentMethods Comma-separated list of Find users who have used specific payment methods.The accepted values for each type of payment method: 1 (PayPal), 4 (BrainTree), 8 (AmazonMWS), 11 (PayPalBT), 19 (EdgilPayway).
	PaymentMethods *int `json:"payment_methods,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// ReceivedResponseFrom Finds users with inquiries responded to on or after this date
	ReceivedResponseFrom *int `json:"received_response_from,omitempty"`

	// ReceivedResponseUntil Finds users with inquiries responded to on or before this date
	ReceivedResponseUntil *int `json:"received_response_until,omitempty"`

	// RedeemedPromotionFrom Finds users who redeemed on any promotion on or after this date
	RedeemedPromotionFrom *int `json:"redeemed_promotion_from,omitempty"`

	// RedeemedPromotionUntil Finds users who have redeemed on any promotion on or before this date
	RedeemedPromotionUntil *int `json:"redeemed_promotion_until,omitempty"`

	// RedeemedPromotions Comma-separated list of Finds users who redeemed these promotions (enter promotion IDs from "Manage→Promotions" in Piano Dashboard). "has_redeemed_promotions" must be "TRUE".
	RedeemedPromotions *string `json:"redeemed_promotions,omitempty"`

	// RegisteredFrom Finds users registered from this date
	RegisteredFrom *int `json:"registered_from,omitempty"`

	// RegisteredUntil Finds users  registered until this date
	RegisteredUntil *int `json:"registered_until,omitempty"`

	// ResolvedInquiryFrom Finds users with inquiries resolved on or after this date
	ResolvedInquiryFrom *int `json:"resolved_inquiry_from,omitempty"`

	// ResolvedInquiryUntil Finds users with inquiries resolved on or before this date
	ResolvedInquiryUntil *int `json:"resolved_inquiry_until,omitempty"`

	// SelectedConsentsMap Comma-separated list of Finds users with these consents (enter the consent public IDs here); the specified values will be used along with the consent_checked parameter
	SelectedConsentsMap *string `json:"selected_consents_map,omitempty"`

	// SelectedContracts Comma-separated list of Finds users who redeemed licenses with these contracts (enter the term IDs here).
	SelectedContracts *string `json:"selected_contracts,omitempty"`

	// SelectedLicensees Comma-separated list of Finds users who redeemed licensing contracts with these licensees (enter the license IDs here)
	SelectedLicensees *string `json:"selected_licensees,omitempty"`

	// Source The data source for user searching: VX or CF (ID custom fields)
	Source *PostPublisherExportCreateUserExportRequestSource `json:"source,omitempty"`

	// SpentFromDate Finds users who made a purchase on or after this date
	SpentFromDate *int `json:"spent_from_date,omitempty"`

	// SpentMoneyCurrency Selects the currency of the payments to take into account; formatted as per ISO 4217 (Ex: USD).
	SpentMoneyCurrency *string `json:"spent_money_currency,omitempty"`

	// SpentMoneyFrom Finds users who spent more than this sum across all of their purchases and conversions; this value is formatted as decimal (e.g., 10.03. to represent $10.03 or £10.03 or €10.03)
	SpentMoneyFrom *float32 `json:"spent_money_from,omitempty"`

	// SpentMoneyUntil Finds users who spent less than this sum across all of their purchases and conversions; this value is formatted as a decimal (e.g., 10.03. to represent $10.03 or £10.03 or €10.03)
	SpentMoneyUntil *float32 `json:"spent_money_until,omitempty"`

	// SpentUntilDate Finds users who made a purchase on or before this date
	SpentUntilDate *int `json:"spent_until_date,omitempty"`

	// SubmittedInquiryFrom Finds users with inquiries submitted on or after this date
	SubmittedInquiryFrom *int `json:"submitted_inquiry_from,omitempty"`

	// SubmittedInquiryUntil Finds users with inquiries submitted on or before this date
	SubmittedInquiryUntil *int `json:"submitted_inquiry_until,omitempty"`

	// SubscriptionExpireFrom Finds users who have a subscription expiring on or after this date; this parameter needs the has_subscription_will_expire parameter to be TRUE
	SubscriptionExpireFrom *int `json:"subscription_expire_from,omitempty"`

	// SubscriptionExpireUntil Finds users who have any subscription expiring on or before this date; this parameter needs the has_subscription_will_expire parameter to be TRUE
	SubscriptionExpireUntil *int `json:"subscription_expire_until,omitempty"`

	// SubscriptionRenewFrom Finds users who have a subscription renewing on or after this date; this parameter needs the has_subscription_will_renew parameter to be TRUE
	SubscriptionRenewFrom *int `json:"subscription_renew_from,omitempty"`

	// SubscriptionRenewUntil Finds users who have a subscription renewing on or before this date; this parameter needs the has_subscription_will_renew parameter to be TRUE
	SubscriptionRenewUntil *int `json:"subscription_renew_until,omitempty"`

	// SubscriptionStartFrom Finds users who have a subscription starting on or after this date; this parameter needs the has_subscription_starts parameter to be TRUE
	SubscriptionStartFrom *int `json:"subscription_start_from,omitempty"`

	// SubscriptionStartUntil Finds users who have any subscription that started on or before this date; this parameter needs the has_subscription_starts parameter to be TRUE
	SubscriptionStartUntil *int `json:"subscription_start_until,omitempty"`

	// TrialExpireFrom Finds users who have any trial subscription expiring on or after this date.
	TrialExpireFrom *int `json:"trial_expire_from,omitempty"`

	// TrialExpireUntil Finds users who have a trial subscription expiring on or after this date
	TrialExpireUntil *int `json:"trial_expire_until,omitempty"`

	// TrialPeriodIsActive Finds users who currently have trial subscriptions
	TrialPeriodIsActive *bool `json:"trial_period_is_active,omitempty"`

	// UpiExtCustomerId Finds users who have these external customer IDs
	UpiExtCustomerId *string `json:"upi_ext_customer_id,omitempty"`
}

// PostPublisherExportCreateUserExportRequestConvertedTermSharingType Finds users who converted on any term and have this sharing type
type PostPublisherExportCreateUserExportRequestConvertedTermSharingType string

// PostPublisherExportCreateUserExportRequestConvertedTermTypes Comma-separated list of Finds users who converted on specific types of terms: 0 (N/A), 1 (payment), 2 (ad view), 3 (registration), 4 (newsletter), 5 (external), 6 (custom), 7 (access granted), and 8 (gift)
type PostPublisherExportCreateUserExportRequestConvertedTermTypes string

// PostPublisherExportCreateUserExportRequestEmailConfirmationState Finds users with a specific email confirmation state
type PostPublisherExportCreateUserExportRequestEmailConfirmationState string

// PostPublisherExportCreateUserExportRequestOrderBy Field to order by
type PostPublisherExportCreateUserExportRequestOrderBy string

// PostPublisherExportCreateUserExportRequestOrderDirection Order direction (asc/desc)
type PostPublisherExportCreateUserExportRequestOrderDirection string

// PostPublisherExportCreateUserExportRequestSource The data source for user searching: VX or CF (ID custom fields)
type PostPublisherExportCreateUserExportRequestSource string

// PostPublisherExternalProviderPaymentUpdateError defines model for PostPublisherExternalProviderPaymentUpdateError.
type PostPublisherExternalProviderPaymentUpdateError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	// - 602: Invalid app id '%s'
	//
	Code             PostPublisherExternalProviderPaymentUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                             `json:"localizedMessage,omitempty"`
	Message          *string                                             `json:"message,omitempty"`
}

// PostPublisherExternalProviderPaymentUpdateErrorCode - 2: Access denied
//
// - 404: Not found
//
// - 602: Invalid app id '%s'
type PostPublisherExternalProviderPaymentUpdateErrorCode int

// PostPublisherExternalProviderPaymentUpdateRequest defines model for PostPublisherExternalProviderPaymentUpdateRequest.
type PostPublisherExternalProviderPaymentUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ErrorCode The error code from the external system that was a reason of user_payment failure
	ErrorCode *string `json:"error_code,omitempty"`

	// ErrorMessage The human-readable error message that explains the error_code
	ErrorMessage *string `json:"error_message,omitempty"`

	// Status The status that current user_payment status should be updated to. Possible values: "pending", "completed", "canceled"
	Status string `json:"status"`

	// UserPaymentId The user payment ID
	UserPaymentId string `json:"user_payment_id"`
}

// PostPublisherGdprDeleteAnonRequest defines model for PostPublisherGdprDeleteAnonRequest.
type PostPublisherGdprDeleteAnonRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BrowserId The unique browser ID
	BrowserId string `json:"browser_id"`
}

// PostPublisherGdprDeleteRequest defines model for PostPublisherGdprDeleteRequest.
type PostPublisherGdprDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Scope The scope of the erase-user data (<a href="https://docs.piano.io/data-security-faqs/#q1">"PII"</a>, "ALL")
	Scope PostPublisherGdprDeleteRequestScope `json:"scope"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherGdprDeleteRequestScope The scope of the erase-user data (<a href="https://docs.piano.io/data-security-faqs/#q1">"PII"</a>, "ALL")
type PostPublisherGdprDeleteRequestScope string

// PostPublisherGdprExportError defines model for PostPublisherGdprExportError.
type PostPublisherGdprExportError struct {
	// Code - 2: Access denied
	//
	// - 400: Invalid request parameters
	//
	// - 401: Invalid user
	//
	// - 2004: User not found
	//
	Code             PostPublisherGdprExportErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// PostPublisherGdprExportErrorCode - 2: Access denied
//
// - 400: Invalid request parameters
//
// - 401: Invalid user
//
// - 2004: User not found
type PostPublisherGdprExportErrorCode int

// PostPublisherGdprExportRequest defines model for PostPublisherGdprExportRequest.
type PostPublisherGdprExportRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Scope The scope of the erase-user data (<a href="https://docs.piano.io/data-security-faqs/#q1">"PII"</a>, "ALL")
	Scope PostPublisherGdprExportRequestScope `json:"scope"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherGdprExportRequestScope The scope of the erase-user data (<a href="https://docs.piano.io/data-security-faqs/#q1">"PII"</a>, "ALL")
type PostPublisherGdprExportRequestScope string

// PostPublisherLicensingContractActivateError defines model for PostPublisherLicensingContractActivateError.
type PostPublisherLicensingContractActivateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	// - 61008: Contract has no schedule
	//
	Code             PostPublisherLicensingContractActivateErrorCode `json:"code"`
	LocalizedMessage *string                                         `json:"localizedMessage,omitempty"`
	Message          *string                                         `json:"message,omitempty"`
}

// PostPublisherLicensingContractActivateErrorCode - 2: Access denied
//
// - 61002: Contract not found
//
// - 61008: Contract has no schedule
type PostPublisherLicensingContractActivateErrorCode int

// PostPublisherLicensingContractActivateRequest defines model for PostPublisherLicensingContractActivateRequest.
type PostPublisherLicensingContractActivateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractArchiveRequest defines model for PostPublisherLicensingContractArchiveRequest.
type PostPublisherLicensingContractArchiveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractCreateError defines model for PostPublisherLicensingContractCreateError.
type PostPublisherLicensingContractCreateError struct {
	// Code - 61009: Contract has non unique landing page url
	//
	// - 61005: Licensee not found
	//
	// - 805: Couldn't find resource. You can try another name/RID or create one.
	//
	// - 61000: Contract with same ID already exists
	//
	// - 2: Access denied
	//
	Code             PostPublisherLicensingContractCreateErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLicensingContractCreateErrorCode - 61009: Contract has non unique landing page url
//
// - 61005: Licensee not found
//
// - 805: Couldn't find resource. You can try another name/RID or create one.
//
// - 61000: Contract with same ID already exists
//
// - 2: Access denied
type PostPublisherLicensingContractCreateErrorCode int

// PostPublisherLicensingContractCreateRequest defines model for PostPublisherLicensingContractCreateRequest.
type PostPublisherLicensingContractCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractName The contract name
	ContractName string `json:"contract_name"`

	// ContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
	ContractType PostPublisherLicensingContractCreateRequestContractType `json:"contract_type"`

	// IsHardSeatsLimitType The seats limit type ("FALSE": a notification is sent if the number of seats is exceeded, "TRUE": no user can access if the number of seats is exceeded)
	IsHardSeatsLimitType bool `json:"is_hard_seats_limit_type"`

	// LandingPageUrl The relative URL of the contract. It will be appended to the licensing base URL to get the complete landing page URL
	LandingPageUrl *string `json:"landing_page_url,omitempty"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// SeatsNumber The number of users who can access this contract
	SeatsNumber int32 `json:"seats_number"`
}

// PostPublisherLicensingContractCreateRequestContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
type PostPublisherLicensingContractCreateRequestContractType string

// PostPublisherLicensingContractDeactivateError defines model for PostPublisherLicensingContractDeactivateError.
type PostPublisherLicensingContractDeactivateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	Code             PostPublisherLicensingContractDeactivateErrorCode `json:"code"`
	LocalizedMessage *string                                           `json:"localizedMessage,omitempty"`
	Message          *string                                           `json:"message,omitempty"`
}

// PostPublisherLicensingContractDeactivateErrorCode - 2: Access denied
//
// - 61002: Contract not found
type PostPublisherLicensingContractDeactivateErrorCode int

// PostPublisherLicensingContractDeactivateRequest defines model for PostPublisherLicensingContractDeactivateRequest.
type PostPublisherLicensingContractDeactivateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractDomainCreateError defines model for PostPublisherLicensingContractDomainCreateError.
type PostPublisherLicensingContractDomainCreateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	// - 61027: This domain has already been included in the contract
	//
	// - 61031: Action is forbid for this type of contract
	//
	Code             PostPublisherLicensingContractDomainCreateErrorCode `json:"code"`
	LocalizedMessage *string                                             `json:"localizedMessage,omitempty"`
	Message          *string                                             `json:"message,omitempty"`
}

// PostPublisherLicensingContractDomainCreateErrorCode - 2: Access denied
//
// - 61002: Contract not found
//
// - 61027: This domain has already been included in the contract
//
// - 61031: Action is forbid for this type of contract
type PostPublisherLicensingContractDomainCreateErrorCode int

// PostPublisherLicensingContractDomainCreateRequest defines model for PostPublisherLicensingContractDomainCreateRequest.
type PostPublisherLicensingContractDomainCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractDomainValue The domain value for the contract domain
	ContractDomainValue string `json:"contract_domain_value"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractDomainRemoveAndRevokeRequest defines model for PostPublisherLicensingContractDomainRemoveAndRevokeRequest.
type PostPublisherLicensingContractDomainRemoveAndRevokeRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractDomainId The public ID of the contract domain
	ContractDomainId string `json:"contract_domain_id"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`
}

// PostPublisherLicensingContractDomainRemoveRequest defines model for PostPublisherLicensingContractDomainRemoveRequest.
type PostPublisherLicensingContractDomainRemoveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractDomainId The public ID of the contract domain
	ContractDomainId string `json:"contract_domain_id"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`
}

// PostPublisherLicensingContractDomainUpdateError defines model for PostPublisherLicensingContractDomainUpdateError.
type PostPublisherLicensingContractDomainUpdateError struct {
	// Code - 61029: Contract domain has active users
	//
	// - 61028: Contract domain not found
	//
	// - 61027: This domain has already been included in the contract
	//
	// - 61002: Contract not found
	//
	// - 61031: Action is forbid for this type of contract
	//
	// - 2: Access denied
	//
	Code             PostPublisherLicensingContractDomainUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                             `json:"localizedMessage,omitempty"`
	Message          *string                                             `json:"message,omitempty"`
}

// PostPublisherLicensingContractDomainUpdateErrorCode - 61029: Contract domain has active users
//
// - 61028: Contract domain not found
//
// - 61027: This domain has already been included in the contract
//
// - 61002: Contract not found
//
// - 61031: Action is forbid for this type of contract
//
// - 2: Access denied
type PostPublisherLicensingContractDomainUpdateErrorCode int

// PostPublisherLicensingContractDomainUpdateRequest defines model for PostPublisherLicensingContractDomainUpdateRequest.
type PostPublisherLicensingContractDomainUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractDomainId The public ID of the contract domain
	ContractDomainId string `json:"contract_domain_id"`

	// ContractDomainValue The domain value for the contract domain
	ContractDomainValue string `json:"contract_domain_value"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractIpRangeCreateError defines model for PostPublisherLicensingContractIpRangeCreateError.
type PostPublisherLicensingContractIpRangeCreateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	// - 61031: Action is forbid for this type of contract
	//
	// - 61036: This host IP or domain has already been included in the contract
	//
	Code             PostPublisherLicensingContractIpRangeCreateErrorCode `json:"code"`
	LocalizedMessage *string                                              `json:"localizedMessage,omitempty"`
	Message          *string                                              `json:"message,omitempty"`
}

// PostPublisherLicensingContractIpRangeCreateErrorCode - 2: Access denied
//
// - 61002: Contract not found
//
// - 61031: Action is forbid for this type of contract
//
// - 61036: This host IP or domain has already been included in the contract
type PostPublisherLicensingContractIpRangeCreateErrorCode int

// PostPublisherLicensingContractIpRangeCreateRequest defines model for PostPublisherLicensingContractIpRangeCreateRequest.
type PostPublisherLicensingContractIpRangeCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// IpRange Start of contract IP address range
	IpRange string `json:"ip_range"`
}

// PostPublisherLicensingContractIpRangeRemoveRequest defines model for PostPublisherLicensingContractIpRangeRemoveRequest.
type PostPublisherLicensingContractIpRangeRemoveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractIpRangeId The public ID of the contract ip range
	ContractIpRangeId string `json:"contract_ip_range_id"`
}

// PostPublisherLicensingContractIpRangeUpdateError defines model for PostPublisherLicensingContractIpRangeUpdateError.
type PostPublisherLicensingContractIpRangeUpdateError struct {
	// Code - 61002: Contract not found
	//
	// - 61031: Action is forbid for this type of contract
	//
	// - 61036: This host IP or domain has already been included in the contract
	//
	// - 61035: Contract ip range not found
	//
	// - 2: Access denied
	//
	Code             PostPublisherLicensingContractIpRangeUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                              `json:"localizedMessage,omitempty"`
	Message          *string                                              `json:"message,omitempty"`
}

// PostPublisherLicensingContractIpRangeUpdateErrorCode - 61002: Contract not found
//
// - 61031: Action is forbid for this type of contract
//
// - 61036: This host IP or domain has already been included in the contract
//
// - 61035: Contract ip range not found
//
// - 2: Access denied
type PostPublisherLicensingContractIpRangeUpdateErrorCode int

// PostPublisherLicensingContractIpRangeUpdateRequest defines model for PostPublisherLicensingContractIpRangeUpdateRequest.
type PostPublisherLicensingContractIpRangeUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractIpRangeId The public ID of the contract ip range
	ContractIpRangeId string `json:"contract_ip_range_id"`

	// IpRange Start of contract IP address range
	IpRange string `json:"ip_range"`
}

// PostPublisherLicensingContractPeriodsActivateError defines model for PostPublisherLicensingContractPeriodsActivateError.
type PostPublisherLicensingContractPeriodsActivateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	Code             PostPublisherLicensingContractPeriodsActivateErrorCode `json:"code"`
	LocalizedMessage *string                                                `json:"localizedMessage,omitempty"`
	Message          *string                                                `json:"message,omitempty"`
}

// PostPublisherLicensingContractPeriodsActivateErrorCode - 2: Access denied
//
// - 61002: Contract not found
type PostPublisherLicensingContractPeriodsActivateErrorCode int

// PostPublisherLicensingContractPeriodsActivateRequest defines model for PostPublisherLicensingContractPeriodsActivateRequest.
type PostPublisherLicensingContractPeriodsActivateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`
}

// PostPublisherLicensingContractRedeemError defines model for PostPublisherLicensingContractRedeemError.
type PostPublisherLicensingContractRedeemError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherLicensingContractRedeemErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLicensingContractRedeemErrorCode - 2: Access denied
type PostPublisherLicensingContractRedeemErrorCode int

// PostPublisherLicensingContractRedeemRequest defines model for PostPublisherLicensingContractRedeemRequest.
type PostPublisherLicensingContractRedeemRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherLicensingContractUpdateError defines model for PostPublisherLicensingContractUpdateError.
type PostPublisherLicensingContractUpdateError struct {
	// Code - 805: Couldn't find resource. You can try another name/RID or create one.
	//
	// - 61009: Contract has non unique landing page url
	//
	// - 61002: Contract not found
	//
	// - 61011: Schedule not found
	//
	// - 61000: Contract with same ID already exists
	//
	// - 2: Access denied
	//
	Code             PostPublisherLicensingContractUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLicensingContractUpdateErrorCode - 805: Couldn't find resource. You can try another name/RID or create one.
//
// - 61009: Contract has non unique landing page url
//
// - 61002: Contract not found
//
// - 61011: Schedule not found
//
// - 61000: Contract with same ID already exists
//
// - 2: Access denied
type PostPublisherLicensingContractUpdateErrorCode int

// PostPublisherLicensingContractUpdateRequest defines model for PostPublisherLicensingContractUpdateRequest.
type PostPublisherLicensingContractUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractDescription The contract description
	ContractDescription *string `json:"contract_description,omitempty"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractName The contract name
	ContractName string `json:"contract_name"`

	// ContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
	ContractType PostPublisherLicensingContractUpdateRequestContractType `json:"contract_type"`

	// IsHardSeatsLimitType The seats limit type ("FALSE": a notification is sent if the number of seats is exceeded, "TRUE": no user can access if the number of seats is exceeded)
	IsHardSeatsLimitType bool `json:"is_hard_seats_limit_type"`

	// LandingPageUrl The relative URL of the contract. It will be appended to the licensing base URL to get the complete landing page URL
	LandingPageUrl string `json:"landing_page_url"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// ScheduleId The contract schedule ID
	ScheduleId *string `json:"schedule_id,omitempty"`

	// SeatsNumber The number of users who can access this contract
	SeatsNumber int32 `json:"seats_number"`
}

// PostPublisherLicensingContractUpdateRequestContractType The contract type ("SPECIFIC_EMAIL_ADDRESSES_CONTRACT" or "EMAIL_DOMAIN_CONTRACT" or "IP_RANGE_CONTRACT")
type PostPublisherLicensingContractUpdateRequestContractType string

// PostPublisherLicensingContractUserCreateError defines model for PostPublisherLicensingContractUserCreateError.
type PostPublisherLicensingContractUserCreateError struct {
	// Code - 2: Access denied
	//
	// - 61002: Contract not found
	//
	// - 61014: This user has already been included in this contract
	//
	// - 61031: Action is forbid for this type of contract
	//
	Code             PostPublisherLicensingContractUserCreateErrorCode `json:"code"`
	LocalizedMessage *string                                           `json:"localizedMessage,omitempty"`
	Message          *string                                           `json:"message,omitempty"`
}

// PostPublisherLicensingContractUserCreateErrorCode - 2: Access denied
//
// - 61002: Contract not found
//
// - 61014: This user has already been included in this contract
//
// - 61031: Action is forbid for this type of contract
type PostPublisherLicensingContractUserCreateErrorCode int

// PostPublisherLicensingContractUserCreateRequest defines model for PostPublisherLicensingContractUserCreateRequest.
type PostPublisherLicensingContractUserCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`
}

// PostPublisherLicensingContractUserInviteRequest defines model for PostPublisherLicensingContractUserInviteRequest.
type PostPublisherLicensingContractUserInviteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`
}

// PostPublisherLicensingContractUserRemoveAndRevokeRequest defines model for PostPublisherLicensingContractUserRemoveAndRevokeRequest.
type PostPublisherLicensingContractUserRemoveAndRevokeRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`
}

// PostPublisherLicensingContractUserRemoveRequest defines model for PostPublisherLicensingContractUserRemoveRequest.
type PostPublisherLicensingContractUserRemoveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`
}

// PostPublisherLicensingContractUserRestoreRequest defines model for PostPublisherLicensingContractUserRestoreRequest.
type PostPublisherLicensingContractUserRestoreRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`
}

// PostPublisherLicensingContractUserRevokeRequest defines model for PostPublisherLicensingContractUserRevokeRequest.
type PostPublisherLicensingContractUserRevokeRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`
}

// PostPublisherLicensingContractUserUpdateError defines model for PostPublisherLicensingContractUserUpdateError.
type PostPublisherLicensingContractUserUpdateError struct {
	// Code - 61014: This user has already been included in this contract
	//
	// - 61002: Contract not found
	//
	// - 61031: Action is forbid for this type of contract
	//
	// - 61022: Forbid to change email while contract user not pending
	//
	// - 2: Access denied
	//
	// - 61020: Licensee contract user not found
	//
	Code             PostPublisherLicensingContractUserUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                           `json:"localizedMessage,omitempty"`
	Message          *string                                           `json:"message,omitempty"`
}

// PostPublisherLicensingContractUserUpdateErrorCode - 61014: This user has already been included in this contract
//
// - 61002: Contract not found
//
// - 61031: Action is forbid for this type of contract
//
// - 61022: Forbid to change email while contract user not pending
//
// - 2: Access denied
//
// - 61020: Licensee contract user not found
type PostPublisherLicensingContractUserUpdateErrorCode int

// PostPublisherLicensingContractUserUpdateRequest defines model for PostPublisherLicensingContractUserUpdateRequest.
type PostPublisherLicensingContractUserUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `json:"contract_id"`

	// ContractUserId The contract user's public ID
	ContractUserId string `json:"contract_user_id"`

	// ContractUserSessionId The ID of the session where contract users are being changed; determined by the client
	ContractUserSessionId *string `json:"contract_user_session_id,omitempty"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`
}

// PostPublisherLicensingLicenseeArchiveRequest defines model for PostPublisherLicensingLicenseeArchiveRequest.
type PostPublisherLicensingLicenseeArchiveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`
}

// PostPublisherLicensingLicenseeCreateError defines model for PostPublisherLicensingLicenseeCreateError.
type PostPublisherLicensingLicenseeCreateError struct {
	// Code - 2: Access denied
	//
	// - 61003: Licensee with same ID already exists
	//
	Code             PostPublisherLicensingLicenseeCreateErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLicensingLicenseeCreateErrorCode - 2: Access denied
//
// - 61003: Licensee with same ID already exists
type PostPublisherLicensingLicenseeCreateErrorCode int

// PostPublisherLicensingLicenseeCreateRequest defines model for PostPublisherLicensingLicenseeCreateRequest.
type PostPublisherLicensingLicenseeCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description of the licensee
	Description *string `json:"description,omitempty"`

	// LogoUrl A relative URL of the licensee's logo
	LogoUrl *string `json:"logo_url,omitempty"`

	// ManagerUids Comma-separated list of The UIDs of the licensee's managers
	ManagerUids string `json:"manager_uids"`

	// Name The name of the licensee
	Name string `json:"name"`

	// Representatives A JSON array with the licensee's representatives
	Representatives *string `json:"representatives,omitempty"`
}

// PostPublisherLicensingLicenseeUpdateError defines model for PostPublisherLicensingLicenseeUpdateError.
type PostPublisherLicensingLicenseeUpdateError struct {
	// Code - 2: Access denied
	//
	// - 61005: Licensee not found
	//
	Code             PostPublisherLicensingLicenseeUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLicensingLicenseeUpdateErrorCode - 2: Access denied
//
// - 61005: Licensee not found
type PostPublisherLicensingLicenseeUpdateErrorCode int

// PostPublisherLicensingLicenseeUpdateRequest defines model for PostPublisherLicensingLicenseeUpdateRequest.
type PostPublisherLicensingLicenseeUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description of the licensee
	Description *string `json:"description,omitempty"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// LogoUrl A relative URL of the licensee's logo
	LogoUrl *string `json:"logo_url,omitempty"`

	// ManagerUids Comma-separated list of manager_uids
	ManagerUids string `json:"manager_uids"`

	// Name The name of the licensee
	Name string `json:"name"`

	// Representatives A JSON array with the licensee's representatives
	Representatives *string `json:"representatives,omitempty"`
}

// PostPublisherLicensingNotificationRuleArchiveRequest defines model for PostPublisherLicensingNotificationRuleArchiveRequest.
type PostPublisherLicensingNotificationRuleArchiveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// NotificationRuleId The notification rule ID
	NotificationRuleId string `json:"notification_rule_id"`
}

// PostPublisherLicensingNotificationRuleCreateError defines model for PostPublisherLicensingNotificationRuleCreateError.
type PostPublisherLicensingNotificationRuleCreateError struct {
	// Code - 2: Access denied
	//
	// - 61005: Licensee not found
	//
	// - 61013: Notification rule contains errors
	//
	// - 61002: Contract not found
	//
	Code             PostPublisherLicensingNotificationRuleCreateErrorCode `json:"code"`
	LocalizedMessage *string                                               `json:"localizedMessage,omitempty"`
	Message          *string                                               `json:"message,omitempty"`
}

// PostPublisherLicensingNotificationRuleCreateErrorCode - 2: Access denied
//
// - 61005: Licensee not found
//
// - 61013: Notification rule contains errors
//
// - 61002: Contract not found
type PostPublisherLicensingNotificationRuleCreateErrorCode int

// PostPublisherLicensingNotificationRuleCreateRequest defines model for PostPublisherLicensingNotificationRuleCreateRequest.
type PostPublisherLicensingNotificationRuleCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Condition condition
	Condition PostPublisherLicensingNotificationRuleCreateRequestCondition `json:"condition"`

	// ConditionValue The value of the notification rule condition
	ConditionValue *int32 `json:"condition_value,omitempty"`

	// ContractIdList A JSON with the public IDs of the contracts
	ContractIdList *string `json:"contract_id_list,omitempty"`

	// IsForAllContracts Whether the notification rule works for all contracts
	IsForAllContracts bool `json:"is_for_all_contracts"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// Parameter The notification rule parameter
	Parameter PostPublisherLicensingNotificationRuleCreateRequestParameter `json:"parameter"`
}

// PostPublisherLicensingNotificationRuleCreateRequestCondition condition
type PostPublisherLicensingNotificationRuleCreateRequestCondition string

// PostPublisherLicensingNotificationRuleCreateRequestParameter The notification rule parameter
type PostPublisherLicensingNotificationRuleCreateRequestParameter string

// PostPublisherLicensingNotificationRuleUpdateError defines model for PostPublisherLicensingNotificationRuleUpdateError.
type PostPublisherLicensingNotificationRuleUpdateError struct {
	// Code - 61005: Licensee not found
	//
	// - 61012: Notification rule not found
	//
	// - 61002: Contract not found
	//
	// - 61013: Notification rule contains errors
	//
	// - 2: Access denied
	//
	Code             PostPublisherLicensingNotificationRuleUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                               `json:"localizedMessage,omitempty"`
	Message          *string                                               `json:"message,omitempty"`
}

// PostPublisherLicensingNotificationRuleUpdateErrorCode - 61005: Licensee not found
//
// - 61012: Notification rule not found
//
// - 61002: Contract not found
//
// - 61013: Notification rule contains errors
//
// - 2: Access denied
type PostPublisherLicensingNotificationRuleUpdateErrorCode int

// PostPublisherLicensingNotificationRuleUpdateRequest defines model for PostPublisherLicensingNotificationRuleUpdateRequest.
type PostPublisherLicensingNotificationRuleUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Condition condition
	Condition PostPublisherLicensingNotificationRuleUpdateRequestCondition `json:"condition"`

	// ConditionValue The value of the notification rule condition
	ConditionValue *int32 `json:"condition_value,omitempty"`

	// ContractIdList A JSON with the public IDs of the contracts
	ContractIdList *string `json:"contract_id_list,omitempty"`

	// IsForAllContracts Whether the notification rule works for all contracts
	IsForAllContracts bool `json:"is_for_all_contracts"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `json:"licensee_id"`

	// NotificationRuleId The notification rule ID
	NotificationRuleId string `json:"notification_rule_id"`

	// Parameter The notification rule parameter
	Parameter PostPublisherLicensingNotificationRuleUpdateRequestParameter `json:"parameter"`
}

// PostPublisherLicensingNotificationRuleUpdateRequestCondition condition
type PostPublisherLicensingNotificationRuleUpdateRequestCondition string

// PostPublisherLicensingNotificationRuleUpdateRequestParameter The notification rule parameter
type PostPublisherLicensingNotificationRuleUpdateRequestParameter string

// PostPublisherLicensingScheduleContractPeriodsActivateRequest defines model for PostPublisherLicensingScheduleContractPeriodsActivateRequest.
type PostPublisherLicensingScheduleContractPeriodsActivateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`
}

// PostPublisherLinkedTermConfigurationError defines model for PostPublisherLinkedTermConfigurationError.
type PostPublisherLinkedTermConfigurationError struct {
	// Code - 1106: Linked term feature is disabled.
	//
	// - 402: Invalid aid
	//
	// - 1112: Subscription management URL is invalid.
	//
	// - 1109: Product ID length is limited to %s characters.
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1111: The combination of product IDs has duplicate product IDs.
	//
	// - 1005: Cannot update a term that has conversions
	//
	// - 1107: External product IDs are required.
	//
	// - 1001: Term not found
	//
	// - 403: Invalid rid
	//
	// - 1108: A combination of product IDs can’t include more than %s IDs.
	//
	// - 429: Term name is empty
	//
	// - 2: Access denied
	//
	Code             PostPublisherLinkedTermConfigurationErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherLinkedTermConfigurationErrorCode - 1106: Linked term feature is disabled.
//
// - 402: Invalid aid
//
// - 1112: Subscription management URL is invalid.
//
// - 1109: Product ID length is limited to %s characters.
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1111: The combination of product IDs has duplicate product IDs.
//
// - 1005: Cannot update a term that has conversions
//
// - 1107: External product IDs are required.
//
// - 1001: Term not found
//
// - 403: Invalid rid
//
// - 1108: A combination of product IDs can’t include more than %s IDs.
//
// - 429: Term name is empty
//
// - 2: Access denied
type PostPublisherLinkedTermConfigurationErrorCode int

// PostPublisherLinkedTermCustomFieldConfigurationError defines model for PostPublisherLinkedTermCustomFieldConfigurationError.
type PostPublisherLinkedTermCustomFieldConfigurationError struct {
	// Code - 1106: Linked term feature is disabled.
	//
	// - 434: Can’t process empty request
	//
	// - 1114: '%s' cannot be empty.
	//
	// - 2: Access denied
	//
	// - 1156: custom_fields contains field %s with incorrect type param. Type should be one of: %s.
	//
	// - 402: Invalid aid
	//
	Code             PostPublisherLinkedTermCustomFieldConfigurationErrorCode `json:"code"`
	LocalizedMessage *string                                                  `json:"localizedMessage,omitempty"`
	Message          *string                                                  `json:"message,omitempty"`
}

// PostPublisherLinkedTermCustomFieldConfigurationErrorCode - 1106: Linked term feature is disabled.
//
// - 434: Can’t process empty request
//
// - 1114: '%s' cannot be empty.
//
// - 2: Access denied
//
// - 1156: custom_fields contains field %s with incorrect type param. Type should be one of: %s.
//
// - 402: Invalid aid
type PostPublisherLinkedTermCustomFieldConfigurationErrorCode int

// PostPublisherLinkedTermEventError defines model for PostPublisherLinkedTermEventError.
type PostPublisherLinkedTermEventError struct {
	// Code - 1116: Source and destination product_id combinations can’t be the same during upgrade.
	//
	// - 1106: Linked term feature is disabled.
	//
	// - 1118: Provided '%s' already exists.
	//
	// - 1114: '%s' cannot be empty.
	//
	// - 1119: User '%s' already has access to the provided resource.
	//
	// - 1120: The length of the '%s' is exceeded.
	//
	// - 1122: '%s' value must be greater or equal to 0 and contain exactly 2 decimals.
	//
	// - 1121: '%s' value must be a positive integer value.
	//
	// - 1117: Provided '%s' was not found.
	//
	// - 402: Invalid aid
	//
	// - 1113: Invalid event type. Event type should be one of: create, upgrade, delete.
	//
	// - 2: Access denied
	//
	Code             PostPublisherLinkedTermEventErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// PostPublisherLinkedTermEventErrorCode - 1116: Source and destination product_id combinations can’t be the same during upgrade.
//
// - 1106: Linked term feature is disabled.
//
// - 1118: Provided '%s' already exists.
//
// - 1114: '%s' cannot be empty.
//
// - 1119: User '%s' already has access to the provided resource.
//
// - 1120: The length of the '%s' is exceeded.
//
// - 1122: '%s' value must be greater or equal to 0 and contain exactly 2 decimals.
//
// - 1121: '%s' value must be a positive integer value.
//
// - 1117: Provided '%s' was not found.
//
// - 402: Invalid aid
//
// - 1113: Invalid event type. Event type should be one of: create, upgrade, delete.
//
// - 2: Access denied
type PostPublisherLinkedTermEventErrorCode int

// PostPublisherOfferCreateError defines model for PostPublisherOfferCreateError.
type PostPublisherOfferCreateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherOfferCreateErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// PostPublisherOfferCreateErrorCode - 2: Access denied
type PostPublisherOfferCreateErrorCode int

// PostPublisherOfferCreateRequest defines model for PostPublisherOfferCreateRequest.
type PostPublisherOfferCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Name The offer name
	Name string `json:"name"`
}

// PostPublisherOfferDeleteRequest defines model for PostPublisherOfferDeleteRequest.
type PostPublisherOfferDeleteRequest struct {
	// OfferId The offer ID
	OfferId string `json:"offer_id"`
}

// PostPublisherOfferTemplateCreateEmptyError defines model for PostPublisherOfferTemplateCreateEmptyError.
type PostPublisherOfferTemplateCreateEmptyError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherOfferTemplateCreateEmptyErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherOfferTemplateCreateEmptyErrorCode - 2: Access denied
type PostPublisherOfferTemplateCreateEmptyErrorCode int

// PostPublisherOfferTemplateCreateEmptyRequest defines model for PostPublisherOfferTemplateCreateEmptyRequest.
type PostPublisherOfferTemplateCreateEmptyRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CategoryId The category ID
	CategoryId *PostPublisherOfferTemplateCreateEmptyRequestCategoryId `json:"category_id,omitempty"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// Name The name
	Name string `json:"name"`
}

// PostPublisherOfferTemplateCreateEmptyRequestCategoryId The category ID
type PostPublisherOfferTemplateCreateEmptyRequestCategoryId string

// PostPublisherOfferTemplateCreateError defines model for PostPublisherOfferTemplateCreateError.
type PostPublisherOfferTemplateCreateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherOfferTemplateCreateErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherOfferTemplateCreateErrorCode - 2: Access denied
type PostPublisherOfferTemplateCreateErrorCode int

// PostPublisherOfferTemplateCreateRequest defines model for PostPublisherOfferTemplateCreateRequest.
type PostPublisherOfferTemplateCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CategoryId The category ID
	CategoryId *PostPublisherOfferTemplateCreateRequestCategoryId `json:"category_id,omitempty"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// Name The name
	Name string `json:"name"`
}

// PostPublisherOfferTemplateCreateRequestCategoryId The category ID
type PostPublisherOfferTemplateCreateRequestCategoryId string

// PostPublisherOfferTemplateDeleteRequest defines model for PostPublisherOfferTemplateDeleteRequest.
type PostPublisherOfferTemplateDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`
}

// PostPublisherOfferTemplateInheritedUpdateError defines model for PostPublisherOfferTemplateInheritedUpdateError.
type PostPublisherOfferTemplateInheritedUpdateError struct {
	// Code - 707: Persist problem with <t> tags: "%s"
	//
	// - 2: Access denied
	//
	// - 15506: Template version is deleted
	//
	// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
	//
	// - 15601: Content field has non-unique name: %s
	//
	Code             PostPublisherOfferTemplateInheritedUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// PostPublisherOfferTemplateInheritedUpdateErrorCode - 707: Persist problem with <t> tags: "%s"
//
// - 2: Access denied
//
// - 15506: Template version is deleted
//
// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
//
// - 15601: Content field has non-unique name: %s
type PostPublisherOfferTemplateInheritedUpdateErrorCode int

// PostPublisherOfferTemplateInheritedUpdateRequest defines model for PostPublisherOfferTemplateInheritedUpdateRequest.
type PostPublisherOfferTemplateInheritedUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContentFieldList A list of the content fields in the JSON format. Example: [{"contentFieldId":"id","name":"name","description":"description","value":"value","deleted":false}]
	ContentFieldList *string `json:"content_field_list,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// IsValidate Whether to perform a check before saving
	IsValidate *bool `json:"is_validate,omitempty"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`
}

// PostPublisherOfferTemplateUpdateContentfieldsError defines model for PostPublisherOfferTemplateUpdateContentfieldsError.
type PostPublisherOfferTemplateUpdateContentfieldsError struct {
	// Code - 2: Access denied
	//
	// - 15601: Content field has non-unique name: %s
	//
	// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
	//
	Code             PostPublisherOfferTemplateUpdateContentfieldsErrorCode `json:"code"`
	LocalizedMessage *string                                                `json:"localizedMessage,omitempty"`
	Message          *string                                                `json:"message,omitempty"`
}

// PostPublisherOfferTemplateUpdateContentfieldsErrorCode - 2: Access denied
//
// - 15601: Content field has non-unique name: %s
//
// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
type PostPublisherOfferTemplateUpdateContentfieldsErrorCode int

// PostPublisherOfferTemplateUpdateContentfieldsRequest defines model for PostPublisherOfferTemplateUpdateContentfieldsRequest.
type PostPublisherOfferTemplateUpdateContentfieldsRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContentFieldList A list of the content fields in the JSON format. Example: [{"contentFieldId":"id","name":"name","description":"description","value":"value","deleted":false}]
	ContentFieldList string `json:"content_field_list"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// IsValidate Whether to perform a check before saving
	IsValidate *bool `json:"is_validate,omitempty"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// VariantList The template variants in the JSON format. Example:[{ "pubId": "id", "name": "name", "description": "description", "variantContentFields": [{ "contentFieldId": "id", "name": "name", "description": "description", "value": "value", "deleted": false }] }]
	VariantList string `json:"variant_list"`
}

// PostPublisherOfferTemplateUpdateError defines model for PostPublisherOfferTemplateUpdateError.
type PostPublisherOfferTemplateUpdateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherOfferTemplateUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherOfferTemplateUpdateErrorCode - 2: Access denied
type PostPublisherOfferTemplateUpdateErrorCode int

// PostPublisherOfferTemplateUpdateRequest defines model for PostPublisherOfferTemplateUpdateRequest.
type PostPublisherOfferTemplateUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CategoryId The category ID
	CategoryId *PostPublisherOfferTemplateUpdateRequestCategoryId `json:"category_id,omitempty"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// ThumbnailImageUrl The URL of the thumbnail image
	ThumbnailImageUrl *string `json:"thumbnail_image_url,omitempty"`
}

// PostPublisherOfferTemplateUpdateRequestCategoryId The category ID
type PostPublisherOfferTemplateUpdateRequestCategoryId string

// PostPublisherOfferTemplateUpdatefullError defines model for PostPublisherOfferTemplateUpdatefullError.
type PostPublisherOfferTemplateUpdatefullError struct {
	// Code - 707: Persist problem with <t> tags: "%s"
	//
	// - 2: Access denied
	//
	// - 15506: Template version is deleted
	//
	// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
	//
	// - 15601: Content field has non-unique name: %s
	//
	Code             PostPublisherOfferTemplateUpdatefullErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherOfferTemplateUpdatefullErrorCode - 707: Persist problem with <t> tags: "%s"
//
// - 2: Access denied
//
// - 15506: Template version is deleted
//
// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
//
// - 15601: Content field has non-unique name: %s
type PostPublisherOfferTemplateUpdatefullErrorCode int

// PostPublisherOfferTemplateUpdatefullRequest defines model for PostPublisherOfferTemplateUpdatefullRequest.
type PostPublisherOfferTemplateUpdatefullRequest struct {
	// Action A required parameter. The template-save action
	Action *PostPublisherOfferTemplateUpdatefullRequestAction `json:"action,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// CategoryId The category ID
	CategoryId PostPublisherOfferTemplateUpdatefullRequestCategoryId `json:"category_id"`

	// Content1Type HTML
	Content1Type *string `json:"content1_type,omitempty"`

	// Content1Value The content1 value
	Content1Value *string `json:"content1_value,omitempty"`

	// Content2Type CSS
	Content2Type *string `json:"content2_type,omitempty"`

	// Content2Value The content2 value
	Content2Value *string `json:"content2_value,omitempty"`

	// Content3Type JS/JSON
	Content3Type *string `json:"content3_type,omitempty"`

	// Content3Value The content3 value
	Content3Value *string `json:"content3_value,omitempty"`

	// ContentFieldList A list of the content fields in the JSON format. Example: [{"contentFieldId":"id","name":"name","description":"description","value":"value","deleted":false}]
	ContentFieldList *string `json:"content_field_list,omitempty"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// ExternalCssList An external CSS list in the JSON format. Example: [{"pubId":"id","position":0,"title":"title","url":"url","status":"active"}]where "pubId" is "externalCssId" from "publisher/offer/template/get".
	ExternalCssList *string `json:"external_css_list,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// IsValidate Whether to perform a check before saving
	IsValidate *bool `json:"is_validate,omitempty"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// ThumbnailImageUrl The URL of the thumbnail image
	ThumbnailImageUrl *string `json:"thumbnail_image_url,omitempty"`

	// Version The template version
	Version *int64 `json:"version,omitempty"`

	// VersionName The version name
	VersionName *string `json:"version_name,omitempty"`
}

// PostPublisherOfferTemplateUpdatefullRequestAction A required parameter. The template-save action
type PostPublisherOfferTemplateUpdatefullRequestAction string

// PostPublisherOfferTemplateUpdatefullRequestCategoryId The category ID
type PostPublisherOfferTemplateUpdatefullRequestCategoryId string

// PostPublisherOfferTemplateVariantCreateError defines model for PostPublisherOfferTemplateVariantCreateError.
type PostPublisherOfferTemplateVariantCreateError struct {
	// Code - 2: Access denied
	//
	// - 15601: Content field has non-unique name: %s
	//
	// - 15602: First it needs to create at least one of the content field
	//
	Code             PostPublisherOfferTemplateVariantCreateErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// PostPublisherOfferTemplateVariantCreateErrorCode - 2: Access denied
//
// - 15601: Content field has non-unique name: %s
//
// - 15602: First it needs to create at least one of the content field
type PostPublisherOfferTemplateVariantCreateErrorCode int

// PostPublisherOfferTemplateVariantCreateRequest defines model for PostPublisherOfferTemplateVariantCreateRequest.
type PostPublisherOfferTemplateVariantCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`
}

// PostPublisherOfferTemplateVariantDeleteRequest defines model for PostPublisherOfferTemplateVariantDeleteRequest.
type PostPublisherOfferTemplateVariantDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `json:"offer_template_variant_id"`
}

// PostPublisherOfferTemplateVariantUpdateError defines model for PostPublisherOfferTemplateVariantUpdateError.
type PostPublisherOfferTemplateVariantUpdateError struct {
	// Code - 2: Access denied
	//
	// - 15601: Content field has non-unique name: %s
	//
	// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
	//
	Code             PostPublisherOfferTemplateVariantUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// PostPublisherOfferTemplateVariantUpdateErrorCode - 2: Access denied
//
// - 15601: Content field has non-unique name: %s
//
// - 15603: Length of content field name must be less than 100 characters and can contain only letters, digits, dashes, dots, spaces and underscores.
type PostPublisherOfferTemplateVariantUpdateErrorCode int

// PostPublisherOfferTemplateVariantUpdateRequest defines model for PostPublisherOfferTemplateVariantUpdateRequest.
type PostPublisherOfferTemplateVariantUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ContentFieldList A list of the content fields in the JSON format. Example: [{"contentFieldId":"id","name":"name","description":"description","value":"value","deleted":false}]
	ContentFieldList *string `json:"content_field_list,omitempty"`

	// Description The description
	Description *string `json:"description,omitempty"`

	// HistoryComment The template history comment
	HistoryComment *string `json:"history_comment,omitempty"`

	// IsValidate Whether to perform a check before saving
	IsValidate *bool `json:"is_validate,omitempty"`

	// Name The name
	Name string `json:"name"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `json:"offer_template_variant_id"`
}

// PostPublisherOfferTermAddRequest defines model for PostPublisherOfferTermAddRequest.
type PostPublisherOfferTermAddRequest struct {
	// OfferId The offer ID
	OfferId string `json:"offer_id"`

	// TermId Comma-separated list of The term ID
	TermId string `json:"term_id"`
}

// PostPublisherOfferTermRemoveRequest defines model for PostPublisherOfferTermRemoveRequest.
type PostPublisherOfferTermRemoveRequest struct {
	// OfferId The offer ID
	OfferId string `json:"offer_id"`

	// TermId Comma-separated list of The term ID
	TermId string `json:"term_id"`
}

// PostPublisherOfferTermReorderRequest defines model for PostPublisherOfferTermReorderRequest.
type PostPublisherOfferTermReorderRequest struct {
	// OfferId The offer ID
	OfferId string `json:"offer_id"`

	// TermId Comma-separated list of The term ID
	TermId string `json:"term_id"`
}

// PostPublisherOfferUpdateError defines model for PostPublisherOfferUpdateError.
type PostPublisherOfferUpdateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherOfferUpdateErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// PostPublisherOfferUpdateErrorCode - 2: Access denied
type PostPublisherOfferUpdateErrorCode int

// PostPublisherOfferUpdateRequest defines model for PostPublisherOfferUpdateRequest.
type PostPublisherOfferUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Name The offer name
	Name string `json:"name"`

	// OfferId The offer ID
	OfferId string `json:"offer_id"`
}

// PostPublisherPaymentMethodAddError defines model for PostPublisherPaymentMethodAddError.
type PostPublisherPaymentMethodAddError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	// - 2004: User not found
	//
	// - 602: Invalid app id '%s'
	//
	Code             PostPublisherPaymentMethodAddErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherPaymentMethodAddErrorCode - 2: Access denied
//
// - 404: Not found
//
// - 2004: User not found
//
// - 602: Invalid app id '%s'
type PostPublisherPaymentMethodAddErrorCode int

// PostPublisherPaymentMethodAddRequest defines model for PostPublisherPaymentMethodAddRequest.
type PostPublisherPaymentMethodAddRequest struct {
	// AdditionalInfo A JSON object that contains additional information required by providers. Example: Document number, Document Type, Account number or something else that is also required
	AdditionalInfo *string `json:"additional_info,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// ExpirationMonth The payment method expiration month
	ExpirationMonth *int32 `json:"expiration_month,omitempty"`

	// ExpirationYear The payment method expiration year
	ExpirationYear *int32 `json:"expiration_year,omitempty"`

	// IssuerCountry The payment method issuer country
	IssuerCountry *string `json:"issuer_country,omitempty"`

	// LastFourDigits The payment method last four digits
	LastFourDigits *string `json:"last_four_digits,omitempty"`

	// SetAsDefault Set this payment method as the default method and apply it to all active subscriptions
	SetAsDefault *bool `json:"set_as_default,omitempty"`

	// SourceId The payment provider source ID
	SourceId int32 `json:"source_id"`

	// Token The payment method token
	Token string `json:"token"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UserBillingAddress A JSON object containing the user's billing address
	UserBillingAddress *string `json:"user_billing_address,omitempty"`
}

// PostPublisherPaymentMethodBillingAddressApplyToAllRequest defines model for PostPublisherPaymentMethodBillingAddressApplyToAllRequest.
type PostPublisherPaymentMethodBillingAddressApplyToAllRequest struct {
	// AddressPubId The public ID of the address
	AddressPubId string `json:"address_pub_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherPaymentMethodBillingAddressAttachRequest defines model for PostPublisherPaymentMethodBillingAddressAttachRequest.
type PostPublisherPaymentMethodBillingAddressAttachRequest struct {
	// AddressPubId The public ID of the address
	AddressPubId string `json:"address_pub_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid *string `json:"uid,omitempty"`

	// UpiIdentifier The payment method ID
	UpiIdentifier string `json:"upi_identifier"`
}

// PostPublisherPaymentMethodBillingAddressDetachRequest defines model for PostPublisherPaymentMethodBillingAddressDetachRequest.
type PostPublisherPaymentMethodBillingAddressDetachRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid *string `json:"uid,omitempty"`

	// UpiIdentifier The payment method ID
	UpiIdentifier string `json:"upi_identifier"`
}

// PostPublisherPaymentMethodBillingAddressGetError defines model for PostPublisherPaymentMethodBillingAddressGetError.
type PostPublisherPaymentMethodBillingAddressGetError struct {
	// Code - 13013: Payment method was not found. Id = '%s'
	//
	// - 31202: Error 31202
	//
	// - 404: Not found
	//
	Code             PostPublisherPaymentMethodBillingAddressGetErrorCode `json:"code"`
	LocalizedMessage *string                                              `json:"localizedMessage,omitempty"`
	Message          *string                                              `json:"message,omitempty"`
}

// PostPublisherPaymentMethodBillingAddressGetErrorCode - 13013: Payment method was not found. Id = '%s'
//
// - 31202: Error 31202
//
// - 404: Not found
type PostPublisherPaymentMethodBillingAddressGetErrorCode int

// PostPublisherPaymentMethodBillingAddressGetRequest defines model for PostPublisherPaymentMethodBillingAddressGetRequest.
type PostPublisherPaymentMethodBillingAddressGetRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid *string `json:"uid,omitempty"`

	// UpiIdentifier The payment method ID
	UpiIdentifier string `json:"upi_identifier"`
}

// PostPublisherPaymentMethodGmoRefreshError defines model for PostPublisherPaymentMethodGmoRefreshError.
type PostPublisherPaymentMethodGmoRefreshError struct {
	// Code - 2: Access denied
	//
	// - 2004: User not found
	//
	// - 14102: Configuration for pay source not found
	//
	Code             PostPublisherPaymentMethodGmoRefreshErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherPaymentMethodGmoRefreshErrorCode - 2: Access denied
//
// - 2004: User not found
//
// - 14102: Configuration for pay source not found
type PostPublisherPaymentMethodGmoRefreshErrorCode int

// PostPublisherPaymentMethodGmoRefreshRequest defines model for PostPublisherPaymentMethodGmoRefreshRequest.
type PostPublisherPaymentMethodGmoRefreshRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtPaymentId The external payment ID for the payment method (user payment info)
	UpiExtPaymentId string `json:"upi_ext_payment_id"`
}

// PostPublisherPaymentMethodRemoveError defines model for PostPublisherPaymentMethodRemoveError.
type PostPublisherPaymentMethodRemoveError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	// - 2004: User not found
	//
	// - 602: Invalid app id '%s'
	//
	Code             PostPublisherPaymentMethodRemoveErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherPaymentMethodRemoveErrorCode - 2: Access denied
//
// - 404: Not found
//
// - 2004: User not found
//
// - 602: Invalid app id '%s'
type PostPublisherPaymentMethodRemoveErrorCode int

// PostPublisherPaymentMethodRemoveRequest defines model for PostPublisherPaymentMethodRemoveRequest.
type PostPublisherPaymentMethodRemoveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// PaymentMethodId The payment method id
	PaymentMethodId string `json:"payment_method_id"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherPaymentMethodUpdateError defines model for PostPublisherPaymentMethodUpdateError.
type PostPublisherPaymentMethodUpdateError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	// - 2004: User not found
	//
	// - 602: Invalid app id '%s'
	//
	Code             PostPublisherPaymentMethodUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherPaymentMethodUpdateErrorCode - 2: Access denied
//
// - 404: Not found
//
// - 2004: User not found
//
// - 602: Invalid app id '%s'
type PostPublisherPaymentMethodUpdateErrorCode int

// PostPublisherPaymentMethodUpdateRequest defines model for PostPublisherPaymentMethodUpdateRequest.
type PostPublisherPaymentMethodUpdateRequest struct {
	// AdditionalInfo A JSON object that contains additional information required by providers. Example: Document number, Document Type, Account number or something else that is also required
	AdditionalInfo *string `json:"additional_info,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// ExpirationMonth The payment method expiration month
	ExpirationMonth *int32 `json:"expiration_month,omitempty"`

	// ExpirationYear The payment method expiration year
	ExpirationYear *int32 `json:"expiration_year,omitempty"`

	// IssuerCountry The payment method issuer country
	IssuerCountry *string `json:"issuer_country,omitempty"`

	// LastFourDigits The payment method last four digits
	LastFourDigits *string `json:"last_four_digits,omitempty"`

	// PaymentMethodId The payment method id
	PaymentMethodId *string `json:"payment_method_id,omitempty"`

	// SetAsDefault Set this payment method as the default method and apply it to all active subscriptions
	SetAsDefault *bool `json:"set_as_default,omitempty"`

	// Token The payment method token
	Token *string `json:"token,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UserBillingAddress A JSON object containing the user's billing address
	UserBillingAddress *string `json:"user_billing_address,omitempty"`
}

// PostPublisherPaymentProviderConfigurationSetVisibilityRequest defines model for PostPublisherPaymentProviderConfigurationSetVisibilityRequest.
type PostPublisherPaymentProviderConfigurationSetVisibilityRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ConfigurationId The ID of the payment provider configuration
	ConfigurationId string `json:"configuration_id"`

	// IsVisible Is configuration visible on checkout
	IsVisible bool `json:"is_visible"`
}

// PostPublisherPromotionCodeDeleteRequest defines model for PostPublisherPromotionCodeDeleteRequest.
type PostPublisherPromotionCodeDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// PromoCodeId Comma-separated list of The promo code ID
	PromoCodeId string `json:"promo_code_id"`
}

// PostPublisherPromotionCodeExportError defines model for PostPublisherPromotionCodeExportError.
type PostPublisherPromotionCodeExportError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherPromotionCodeExportErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherPromotionCodeExportErrorCode - 2: Access denied
type PostPublisherPromotionCodeExportErrorCode int

// PostPublisherPromotionCodeExportRequest defines model for PostPublisherPromotionCodeExportRequest.
type PostPublisherPromotionCodeExportRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ExportName The downloadable report name
	ExportName string `json:"export_name"`

	// OrderBy Field to order by
	OrderBy *PostPublisherPromotionCodeExportRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherPromotionCodeExportRequestOrderDirection `json:"order_direction,omitempty"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// State Comma-separated list of The promo code state
	State *PostPublisherPromotionCodeExportRequestState `json:"state,omitempty"`
}

// PostPublisherPromotionCodeExportRequestOrderBy Field to order by
type PostPublisherPromotionCodeExportRequestOrderBy string

// PostPublisherPromotionCodeExportRequestOrderDirection Order direction (asc/desc)
type PostPublisherPromotionCodeExportRequestOrderDirection string

// PostPublisherPromotionCodeExportRequestState Comma-separated list of The promo code state
type PostPublisherPromotionCodeExportRequestState string

// PostPublisherPromotionCodeUpdateError defines model for PostPublisherPromotionCodeUpdateError.
type PostPublisherPromotionCodeUpdateError struct {
	// Code - 2: Access denied
	//
	// - 401: Invalid user
	//
	Code             PostPublisherPromotionCodeUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                   `json:"localizedMessage,omitempty"`
	Message          *string                                   `json:"message,omitempty"`
}

// PostPublisherPromotionCodeUpdateErrorCode - 2: Access denied
//
// - 401: Invalid user
type PostPublisherPromotionCodeUpdateErrorCode int

// PostPublisherPromotionCodeUpdateRequest defines model for PostPublisherPromotionCodeUpdateRequest.
type PostPublisherPromotionCodeUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Code The promo code itself
	Code string `json:"code"`

	// PromoCodeId The promo code ID
	PromoCodeId string `json:"promo_code_id"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`
}

// PostPublisherPromotionCreateError defines model for PostPublisherPromotionCreateError.
type PostPublisherPromotionCreateError struct {
	// Code - 2: Access denied
	//
	// - 3000: Percentage discount required
	//
	// - 3003: Invalid period
	//
	// - 3004: Invalid promo code settings. The fixed promo code param and the promo code prefix cannot set together.
	//
	Code             PostPublisherPromotionCreateErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// PostPublisherPromotionCreateErrorCode - 2: Access denied
//
// - 3000: Percentage discount required
//
// - 3003: Invalid period
//
// - 3004: Invalid promo code settings. The fixed promo code param and the promo code prefix cannot set together.
type PostPublisherPromotionCreateErrorCode int

// PostPublisherPromotionCreateRequest defines model for PostPublisherPromotionCreateRequest.
type PostPublisherPromotionCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ApplyToAllBillingPeriods Whether to apply the promotion discount to all billing periods ("TRUE")or the first billing period only ("FALSE")
	ApplyToAllBillingPeriods *bool `json:"apply_to_all_billing_periods,omitempty"`

	// BillingPeriodLimit Promotion discount applies to number of billing periods
	BillingPeriodLimit *int32 `json:"billing_period_limit,omitempty"`

	// CanBeAppliedOnRenewal Whether the promotion can be applied on renewal
	CanBeAppliedOnRenewal *bool `json:"can_be_applied_on_renewal,omitempty"`

	// DiscountType The promotion discount type
	DiscountType *PostPublisherPromotionCreateRequestDiscountType `json:"discount_type,omitempty"`

	// EndDate The end date
	EndDate *int `json:"end_date,omitempty"`

	// FixedPromotionCode The fixed value for all the promotion codes
	FixedPromotionCode *string `json:"fixed_promotion_code,omitempty"`

	// Name The promotion name
	Name string `json:"name"`

	// NeverAllowZero Never allow the value of checkout to be zero
	NeverAllowZero *bool `json:"never_allow_zero,omitempty"`

	// NewCustomersOnly Whether the promotion allows new customers only
	NewCustomersOnly bool `json:"new_customers_only"`

	// PercentageDiscount The promotion discount, percentage
	PercentageDiscount *float32 `json:"percentage_discount,omitempty"`

	// PromotionCodePrefix The prefix for all the codes
	PromotionCodePrefix *string `json:"promotion_code_prefix,omitempty"`

	// StartDate The start date.
	StartDate *int `json:"start_date,omitempty"`

	// TermDependencyType The type of dependency to terms
	TermDependencyType *PostPublisherPromotionCreateRequestTermDependencyType `json:"term_dependency_type,omitempty"`

	// UnlimitedUses Whether to allow unlimited uses
	UnlimitedUses *bool `json:"unlimited_uses,omitempty"`

	// UsesAllowed The number of uses allowed by the promotion
	UsesAllowed *int32 `json:"uses_allowed,omitempty"`
}

// PostPublisherPromotionCreateRequestDiscountType The promotion discount type
type PostPublisherPromotionCreateRequestDiscountType string

// PostPublisherPromotionCreateRequestTermDependencyType The type of dependency to terms
type PostPublisherPromotionCreateRequestTermDependencyType string

// PostPublisherPromotionDeleteRequest defines model for PostPublisherPromotionDeleteRequest.
type PostPublisherPromotionDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`
}

// PostPublisherPromotionExistsError defines model for PostPublisherPromotionExistsError.
type PostPublisherPromotionExistsError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherPromotionExistsErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// PostPublisherPromotionExistsErrorCode - 2: Access denied
type PostPublisherPromotionExistsErrorCode int

// PostPublisherPromotionExistsRequest defines model for PostPublisherPromotionExistsRequest.
type PostPublisherPromotionExistsRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`
}

// PostPublisherPromotionFixedDiscountDeleteRequest defines model for PostPublisherPromotionFixedDiscountDeleteRequest.
type PostPublisherPromotionFixedDiscountDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// FixedDiscountId The fixed discount ID
	FixedDiscountId string `json:"fixed_discount_id"`
}

// PostPublisherPromotionFixedDiscountUpdateError defines model for PostPublisherPromotionFixedDiscountUpdateError.
type PostPublisherPromotionFixedDiscountUpdateError struct {
	// Code - 2: Access denied
	//
	// - 3013: Currency doesn't belong application
	//
	// - 3002: Invalid amount for fixed discount
	//
	// - 3012: Invalid currency for fixed discount
	//
	Code             PostPublisherPromotionFixedDiscountUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                            `json:"localizedMessage,omitempty"`
	Message          *string                                            `json:"message,omitempty"`
}

// PostPublisherPromotionFixedDiscountUpdateErrorCode - 2: Access denied
//
// - 3013: Currency doesn't belong application
//
// - 3002: Invalid amount for fixed discount
//
// - 3012: Invalid currency for fixed discount
type PostPublisherPromotionFixedDiscountUpdateErrorCode int

// PostPublisherPromotionFixedDiscountUpdateRequest defines model for PostPublisherPromotionFixedDiscountUpdateRequest.
type PostPublisherPromotionFixedDiscountUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Amount The fixed discount amount
	Amount float32 `json:"amount"`

	// Currency The currency of the fixed discount
	Currency string `json:"currency"`

	// FixedDiscountId The fixed discount ID
	FixedDiscountId string `json:"fixed_discount_id"`
}

// PostPublisherPromotionGenerateError defines model for PostPublisherPromotionGenerateError.
type PostPublisherPromotionGenerateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherPromotionGenerateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherPromotionGenerateErrorCode - 2: Access denied
type PostPublisherPromotionGenerateErrorCode int

// PostPublisherPromotionGenerateRequest defines model for PostPublisherPromotionGenerateRequest.
type PostPublisherPromotionGenerateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Amount The number of promotion codes to generate
	Amount *int64 `json:"amount,omitempty"`

	// AssetId The asset ID
	AssetId *string `json:"asset_id,omitempty"`

	// FixedPromotionCode The fixed value for all the promotion codes
	FixedPromotionCode *string `json:"fixed_promotion_code,omitempty"`

	// PromotionCodePrefix The prefix for all the codes
	PromotionCodePrefix *string `json:"promotion_code_prefix,omitempty"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`
}

// PostPublisherPromotionTermAddRequest defines model for PostPublisherPromotionTermAddRequest.
type PostPublisherPromotionTermAddRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherPromotionTermDeleteRequest defines model for PostPublisherPromotionTermDeleteRequest.
type PostPublisherPromotionTermDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherPromotionUpdateError defines model for PostPublisherPromotionUpdateError.
type PostPublisherPromotionUpdateError struct {
	// Code - 2: Access denied
	//
	// - 3000: Percentage discount required
	//
	// - 3003: Invalid period
	//
	// - 3004: Invalid promo code settings. The fixed promo code param and the promo code prefix cannot set together.
	//
	Code             PostPublisherPromotionUpdateErrorCode `json:"code"`
	LocalizedMessage *string                               `json:"localizedMessage,omitempty"`
	Message          *string                               `json:"message,omitempty"`
}

// PostPublisherPromotionUpdateErrorCode - 2: Access denied
//
// - 3000: Percentage discount required
//
// - 3003: Invalid period
//
// - 3004: Invalid promo code settings. The fixed promo code param and the promo code prefix cannot set together.
type PostPublisherPromotionUpdateErrorCode int

// PostPublisherPromotionUpdateRequest defines model for PostPublisherPromotionUpdateRequest.
type PostPublisherPromotionUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ApplyToAllBillingPeriods Whether to apply the promotion discount to all billing periods ("TRUE")or the first billing period only ("FALSE")
	ApplyToAllBillingPeriods *bool `json:"apply_to_all_billing_periods,omitempty"`

	// BillingPeriodLimit Promotion discount applies to number of billing periods
	BillingPeriodLimit *int32 `json:"billing_period_limit,omitempty"`

	// CanBeAppliedOnRenewal Whether the promotion can be applied on renewal
	CanBeAppliedOnRenewal *bool `json:"can_be_applied_on_renewal,omitempty"`

	// DiscountType The promotion discount type
	DiscountType PostPublisherPromotionUpdateRequestDiscountType `json:"discount_type"`

	// EndDate The end date
	EndDate *int `json:"end_date,omitempty"`

	// FixedPromotionCode The fixed value for all the promotion codes
	FixedPromotionCode *string `json:"fixed_promotion_code,omitempty"`

	// Name The promotion name
	Name string `json:"name"`

	// NeverAllowZero Never allow the value of checkout to be zero
	NeverAllowZero *bool `json:"never_allow_zero,omitempty"`

	// NewCustomersOnly Whether the promotion allows new customers only
	NewCustomersOnly *bool `json:"new_customers_only,omitempty"`

	// PercentageDiscount The promotion discount, percentage
	PercentageDiscount *float32 `json:"percentage_discount,omitempty"`

	// PromotionCodePrefix The prefix for all the codes
	PromotionCodePrefix *string `json:"promotion_code_prefix,omitempty"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// StartDate The start date.
	StartDate *int `json:"start_date,omitempty"`

	// TermDependencyType The type of dependency to terms
	TermDependencyType *PostPublisherPromotionUpdateRequestTermDependencyType `json:"term_dependency_type,omitempty"`

	// UnlimitedUses Whether to allow unlimited uses
	UnlimitedUses *bool `json:"unlimited_uses,omitempty"`

	// UsesAllowed The number of uses allowed by the promotion
	UsesAllowed *int32 `json:"uses_allowed,omitempty"`
}

// PostPublisherPromotionUpdateRequestDiscountType The promotion discount type
type PostPublisherPromotionUpdateRequestDiscountType string

// PostPublisherPromotionUpdateRequestTermDependencyType The type of dependency to terms
type PostPublisherPromotionUpdateRequestTermDependencyType string

// PostPublisherResourceCreateError defines model for PostPublisherResourceCreateError.
type PostPublisherResourceCreateError struct {
	// Code - 804: Invalid bundle type
	//
	// - 802: Name is required.
	//
	// - 803: Invalid resource type
	//
	// - 700: Invalid resource tag name
	//
	// - 2: Access denied
	//
	// - 820: Resource already exists.
	//
	Code             PostPublisherResourceCreateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherResourceCreateErrorCode - 804: Invalid bundle type
//
// - 802: Name is required.
//
// - 803: Invalid resource type
//
// - 700: Invalid resource tag name
//
// - 2: Access denied
//
// - 820: Resource already exists.
type PostPublisherResourceCreateErrorCode int

// PostPublisherResourceCreateRequest defines model for PostPublisherResourceCreateRequest.
type PostPublisherResourceCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BundleType The resource bundle type
	BundleType *PostPublisherResourceCreateRequestBundleType `json:"bundle_type,omitempty"`

	// Description The resource description
	Description *string `json:"description,omitempty"`

	// ExternalId The external ID; defined by the client
	ExternalId *string `json:"external_id,omitempty"`

	// ImageUrl The URL of the resource image
	ImageUrl *string `json:"image_url,omitempty"`

	// Name The name
	Name string `json:"name"`

	// PublishDate The publish date
	PublishDate *int `json:"publish_date,omitempty"`

	// ResourceTagId Comma-separated list of The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId *string `json:"resource_tag_id,omitempty"`

	// ResourceUrl The URL of the resource
	ResourceUrl *string `json:"resource_url,omitempty"`

	// Rid The resource ID
	Rid *string `json:"rid,omitempty"`

	// Type The type of the resource (0: Standard, 4: Bundle)
	Type *PostPublisherResourceCreateRequestType `json:"type,omitempty"`
}

// PostPublisherResourceCreateRequestBundleType The resource bundle type
type PostPublisherResourceCreateRequestBundleType string

// PostPublisherResourceCreateRequestType The type of the resource (0: Standard, 4: Bundle)
type PostPublisherResourceCreateRequestType string

// PostPublisherResourceDeleteRequest defines model for PostPublisherResourceDeleteRequest.
type PostPublisherResourceDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherResourceTagAttachRequest defines model for PostPublisherResourceTagAttachRequest.
type PostPublisherResourceTagAttachRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ResourceTagId The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId string `json:"resource_tag_id"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherResourceTagDeleteRequest defines model for PostPublisherResourceTagDeleteRequest.
type PostPublisherResourceTagDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ResourceTagId The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId string `json:"resource_tag_id"`
}

// PostPublisherResourceTagDetachRequest defines model for PostPublisherResourceTagDetachRequest.
type PostPublisherResourceTagDetachRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ResourceTagId The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId string `json:"resource_tag_id"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherResourceUpdateError defines model for PostPublisherResourceUpdateError.
type PostPublisherResourceUpdateError struct {
	// Code - 804: Invalid bundle type
	//
	// - 403: Invalid rid
	//
	// - 700: Invalid resource tag name
	//
	// - 2: Access denied
	//
	// - 820: Resource already exists.
	//
	Code             PostPublisherResourceUpdateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherResourceUpdateErrorCode - 804: Invalid bundle type
//
// - 403: Invalid rid
//
// - 700: Invalid resource tag name
//
// - 2: Access denied
//
// - 820: Resource already exists.
type PostPublisherResourceUpdateErrorCode int

// PostPublisherResourceUpdateRequest defines model for PostPublisherResourceUpdateRequest.
type PostPublisherResourceUpdateRequest struct {
	// AddTermId Comma-separated list of The term IDs to add to
	AddTermId *string `json:"add_term_id,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// DelTermId Comma-separated list of The term IDs to delete from
	DelTermId *string `json:"del_term_id,omitempty"`

	// Description The resource description
	Description *string `json:"description,omitempty"`

	// Disabled Whether the object is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// ExternalId The external ID; defined by the client
	ExternalId *string `json:"external_id,omitempty"`

	// FixedBundleRid Comma-separated list of For fixed bundles. The RIDs of the resources included in this fixed-bundle resource. Please specify relevant resources even if you don't want to update them. To update, enter both existing and new resources
	FixedBundleRid *string `json:"fixed_bundle_rid,omitempty"`

	// ImageUrl The URL of the resource image
	ImageUrl *string `json:"image_url,omitempty"`

	// IncludedRid Comma-separated list of The RIDs of the fixed bundles containing this resource. Please specify relevant bundles even if you don't want to update them. To update, enter both existing and new bundles
	IncludedRid *string `json:"included_rid,omitempty"`

	// IncludedTagId Comma-separated list of The IDs of the included resources
	IncludedTagId *string `json:"included_tag_id,omitempty"`

	// IncludedTagName Comma-separated list of The names of the included tags
	IncludedTagName *string `json:"included_tag_name,omitempty"`

	// IsFbiaResource Enable the resource for Facebook Subscriptions in Instant Articles
	IsFbiaResource *bool `json:"is_fbia_resource,omitempty"`

	// Name The name
	Name *string `json:"name,omitempty"`

	// NewRid The new resource ID
	NewRid *string `json:"new_rid,omitempty"`

	// PublishDate The publish date
	PublishDate *int `json:"publish_date,omitempty"`

	// ResourceUrl The URL of the resource
	ResourceUrl *string `json:"resource_url,omitempty"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherScheduleCreateError defines model for PostPublisherScheduleCreateError.
type PostPublisherScheduleCreateError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherScheduleCreateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherScheduleCreateErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherScheduleCreateErrorCode int

// PostPublisherScheduleCreateRequest defines model for PostPublisherScheduleCreateRequest.
type PostPublisherScheduleCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Name The name
	Name string `json:"name"`
}

// PostPublisherScheduleDeleteRequest defines model for PostPublisherScheduleDeleteRequest.
type PostPublisherScheduleDeleteRequest struct {
	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`
}

// PostPublisherScheduleGetError defines model for PostPublisherScheduleGetError.
type PostPublisherScheduleGetError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherScheduleGetErrorCode `json:"code"`
	LocalizedMessage *string                           `json:"localizedMessage,omitempty"`
	Message          *string                           `json:"message,omitempty"`
}

// PostPublisherScheduleGetErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherScheduleGetErrorCode int

// PostPublisherScheduleGetRequest defines model for PostPublisherScheduleGetRequest.
type PostPublisherScheduleGetRequest struct {
	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`
}

// PostPublisherScheduleListError defines model for PostPublisherScheduleListError.
type PostPublisherScheduleListError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherScheduleListErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// PostPublisherScheduleListErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherScheduleListErrorCode int

// PostPublisherScheduleListRequest defines model for PostPublisherScheduleListRequest.
type PostPublisherScheduleListRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`

	// OrderBy Field to order by
	OrderBy *PostPublisherScheduleListRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherScheduleListRequestOrderDirection `json:"order_direction,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`
}

// PostPublisherScheduleListRequestOrderBy Field to order by
type PostPublisherScheduleListRequestOrderBy string

// PostPublisherScheduleListRequestOrderDirection Order direction (asc/desc)
type PostPublisherScheduleListRequestOrderDirection string

// PostPublisherSchedulePeriodAddError defines model for PostPublisherSchedulePeriodAddError.
type PostPublisherSchedulePeriodAddError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherSchedulePeriodAddErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherSchedulePeriodAddErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherSchedulePeriodAddErrorCode int

// PostPublisherSchedulePeriodAddRequest defines model for PostPublisherSchedulePeriodAddRequest.
type PostPublisherSchedulePeriodAddRequest struct {
	// BeginDate The date when the period begins
	BeginDate int `json:"begin_date"`

	// EndDate The date when the period ends
	EndDate int `json:"end_date"`

	// Name The period name
	Name string `json:"name"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`

	// SellDate The sell date of the period
	SellDate int `json:"sell_date"`
}

// PostPublisherSchedulePeriodDeleteError defines model for PostPublisherSchedulePeriodDeleteError.
type PostPublisherSchedulePeriodDeleteError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	// - 34012: Invalid period '%s'. Period conflicts with terms: %s
	//
	Code             PostPublisherSchedulePeriodDeleteErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// PostPublisherSchedulePeriodDeleteErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
//
// - 34012: Invalid period '%s'. Period conflicts with terms: %s
type PostPublisherSchedulePeriodDeleteErrorCode int

// PostPublisherSchedulePeriodDeleteRequest defines model for PostPublisherSchedulePeriodDeleteRequest.
type PostPublisherSchedulePeriodDeleteRequest struct {
	// PeriodId The period ID
	PeriodId string `json:"period_id"`
}

// PostPublisherSchedulePeriodUpdateError defines model for PostPublisherSchedulePeriodUpdateError.
type PostPublisherSchedulePeriodUpdateError struct {
	// Code - 34000: Period '%s' has invalid start and end dates
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	// - 34001: Date of sale should be before start date of period '%s'
	//
	// - 2: Access denied
	//
	// - 34012: Invalid period '%s'. Period conflicts with terms: %s
	//
	Code             PostPublisherSchedulePeriodUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// PostPublisherSchedulePeriodUpdateErrorCode - 34000: Period '%s' has invalid start and end dates
//
// - 34008: Schedule term functionality is unavailable for application
//
// - 34001: Date of sale should be before start date of period '%s'
//
// - 2: Access denied
//
// - 34012: Invalid period '%s'. Period conflicts with terms: %s
type PostPublisherSchedulePeriodUpdateErrorCode int

// PostPublisherSchedulePeriodUpdateRequest defines model for PostPublisherSchedulePeriodUpdateRequest.
type PostPublisherSchedulePeriodUpdateRequest struct {
	// BeginDate The date when the period begins
	BeginDate int `json:"begin_date"`

	// EndDate The date when the period ends
	EndDate int `json:"end_date"`

	// Name The period name
	Name string `json:"name"`

	// PeriodId The period ID
	PeriodId string `json:"period_id"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`

	// SellDate The sell date of the period
	SellDate int `json:"sell_date"`
}

// PostPublisherScheduleTermsError defines model for PostPublisherScheduleTermsError.
type PostPublisherScheduleTermsError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherScheduleTermsErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// PostPublisherScheduleTermsErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherScheduleTermsErrorCode int

// PostPublisherScheduleTermsRequest defines model for PostPublisherScheduleTermsRequest.
type PostPublisherScheduleTermsRequest struct {
	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`

	// OrderBy Field to order by
	OrderBy *PostPublisherScheduleTermsRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherScheduleTermsRequestOrderDirection `json:"order_direction,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`
}

// PostPublisherScheduleTermsRequestOrderBy Field to order by
type PostPublisherScheduleTermsRequestOrderBy string

// PostPublisherScheduleTermsRequestOrderDirection Order direction (asc/desc)
type PostPublisherScheduleTermsRequestOrderDirection string

// PostPublisherScheduleUpdateError defines model for PostPublisherScheduleUpdateError.
type PostPublisherScheduleUpdateError struct {
	// Code - 2: Access denied
	//
	// - 34008: Schedule term functionality is unavailable for application
	//
	Code             PostPublisherScheduleUpdateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherScheduleUpdateErrorCode - 2: Access denied
//
// - 34008: Schedule term functionality is unavailable for application
type PostPublisherScheduleUpdateErrorCode int

// PostPublisherScheduleUpdateRequest defines model for PostPublisherScheduleUpdateRequest.
type PostPublisherScheduleUpdateRequest struct {
	// Name The schedule name
	Name string `json:"name"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`
}

// PostPublisherSubscriptionAddressAssignError defines model for PostPublisherSubscriptionAddressAssignError.
type PostPublisherSubscriptionAddressAssignError struct {
	// Code - 2: Access denied
	//
	// - 612: App not configured to update user address
	//
	Code             PostPublisherSubscriptionAddressAssignErrorCode `json:"code"`
	LocalizedMessage *string                                         `json:"localizedMessage,omitempty"`
	Message          *string                                         `json:"message,omitempty"`
}

// PostPublisherSubscriptionAddressAssignErrorCode - 2: Access denied
//
// - 612: App not configured to update user address
type PostPublisherSubscriptionAddressAssignErrorCode int

// PostPublisherSubscriptionAddressAssignRequest defines model for PostPublisherSubscriptionAddressAssignRequest.
type PostPublisherSubscriptionAddressAssignRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId Subscription id
	SubscriptionId string `json:"subscription_id"`

	// UserAddressId The public ID of the user address
	UserAddressId *string `json:"user_address_id,omitempty"`
}

// PostPublisherSubscriptionCancelDeferredError defines model for PostPublisherSubscriptionCancelDeferredError.
type PostPublisherSubscriptionCancelDeferredError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionCancelDeferredErrorCode `json:"code"`
	LocalizedMessage *string                                          `json:"localizedMessage,omitempty"`
	Message          *string                                          `json:"message,omitempty"`
}

// PostPublisherSubscriptionCancelDeferredErrorCode - 2: Access denied
type PostPublisherSubscriptionCancelDeferredErrorCode int

// PostPublisherSubscriptionCancelDeferredRequest defines model for PostPublisherSubscriptionCancelDeferredRequest.
type PostPublisherSubscriptionCancelDeferredRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionCancelError defines model for PostPublisherSubscriptionCancelError.
type PostPublisherSubscriptionCancelError struct {
	// Code - 2: Access denied
	//
	// - 8004: Refund failed; subscription not canceled
	//
	// - 8002: Cancel subscription failed
	//
	Code             PostPublisherSubscriptionCancelErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// PostPublisherSubscriptionCancelErrorCode - 2: Access denied
//
// - 8004: Refund failed; subscription not canceled
//
// - 8002: Cancel subscription failed
type PostPublisherSubscriptionCancelErrorCode int

// PostPublisherSubscriptionCancelRequest defines model for PostPublisherSubscriptionCancelRequest.
type PostPublisherSubscriptionCancelRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// RefundLastPayment Refund last payment
	RefundLastPayment bool `json:"refund_last_payment"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionCountError defines model for PostPublisherSubscriptionCountError.
type PostPublisherSubscriptionCountError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionCountErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherSubscriptionCountErrorCode - 2: Access denied
type PostPublisherSubscriptionCountErrorCode int

// PostPublisherSubscriptionCountRequest defines model for PostPublisherSubscriptionCountRequest.
type PostPublisherSubscriptionCountRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`
}

// PostPublisherSubscriptionIsPartiallyRefundableError defines model for PostPublisherSubscriptionIsPartiallyRefundableError.
type PostPublisherSubscriptionIsPartiallyRefundableError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionIsPartiallyRefundableErrorCode `json:"code"`
	LocalizedMessage *string                                                 `json:"localizedMessage,omitempty"`
	Message          *string                                                 `json:"message,omitempty"`
}

// PostPublisherSubscriptionIsPartiallyRefundableErrorCode - 2: Access denied
type PostPublisherSubscriptionIsPartiallyRefundableErrorCode int

// PostPublisherSubscriptionIsPartiallyRefundableRequest defines model for PostPublisherSubscriptionIsPartiallyRefundableRequest.
type PostPublisherSubscriptionIsPartiallyRefundableRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionResumeError defines model for PostPublisherSubscriptionResumeError.
type PostPublisherSubscriptionResumeError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionResumeErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// PostPublisherSubscriptionResumeErrorCode - 2: Access denied
type PostPublisherSubscriptionResumeErrorCode int

// PostPublisherSubscriptionResumeRequest defines model for PostPublisherSubscriptionResumeRequest.
type PostPublisherSubscriptionResumeRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareInviteError defines model for PostPublisherSubscriptionShareInviteError.
type PostPublisherSubscriptionShareInviteError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareInviteErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareInviteErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareInviteErrorCode int

// PostPublisherSubscriptionShareInviteRequest defines model for PostPublisherSubscriptionShareInviteRequest.
type PostPublisherSubscriptionShareInviteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SharedAccount A JSON value representing the shared account
	SharedAccount string `json:"shared_account"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareListError defines model for PostPublisherSubscriptionShareListError.
type PostPublisherSubscriptionShareListError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             PostPublisherSubscriptionShareListErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareListErrorCode - 2: Access denied
//
// - 1001: Term not found
type PostPublisherSubscriptionShareListErrorCode int

// PostPublisherSubscriptionShareListRequest defines model for PostPublisherSubscriptionShareListRequest.
type PostPublisherSubscriptionShareListRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// EndDate The end date. If you use a date-range filter without "select_by" parameter, the method will return a result filtered by "update date".To specify the filter field, use "select_by".
	EndDate *int `json:"end_date,omitempty"`

	// Limit The maximum number of objects to return
	Limit int32 `json:"limit"`

	// Offset The offset of the first item in the response. Default: 0.
	Offset int32 `json:"offset"`

	// SelectBy Filter subscription date field
	SelectBy *PostPublisherSubscriptionShareListRequestSelectBy `json:"select_by,omitempty"`

	// StartDate The start date. If you use a date-range filter without the "select_by" parameter, the method will return a result filtered by "update date".To specify the filter field, use "select_by".
	StartDate *int `json:"start_date,omitempty"`

	// Status Subscription status
	Status *PostPublisherSubscriptionShareListRequestStatus `json:"status,omitempty"`

	// TermId The term ID
	TermId *string `json:"term_id,omitempty"`

	// UnusedAccessesOnly Get subscriptions with unused accesses only
	UnusedAccessesOnly *bool `json:"unused_accesses_only,omitempty"`
}

// PostPublisherSubscriptionShareListRequestSelectBy Filter subscription date field
type PostPublisherSubscriptionShareListRequestSelectBy string

// PostPublisherSubscriptionShareListRequestStatus Subscription status
type PostPublisherSubscriptionShareListRequestStatus string

// PostPublisherSubscriptionShareResendError defines model for PostPublisherSubscriptionShareResendError.
type PostPublisherSubscriptionShareResendError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	// - 8213: Shared account[%s] not found
	//
	Code             PostPublisherSubscriptionShareResendErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareResendErrorCode - 2: Access denied
//
// - 8005: Subscription not found
//
// - 8213: Shared account[%s] not found
type PostPublisherSubscriptionShareResendErrorCode int

// PostPublisherSubscriptionShareResendRequest defines model for PostPublisherSubscriptionShareResendRequest.
type PostPublisherSubscriptionShareResendRequest struct {
	// AccountId The ID of the shared subscription account
	AccountId string `json:"account_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareRevokeError defines model for PostPublisherSubscriptionShareRevokeError.
type PostPublisherSubscriptionShareRevokeError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareRevokeErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareRevokeErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareRevokeErrorCode int

// PostPublisherSubscriptionShareRevokeRequest defines model for PostPublisherSubscriptionShareRevokeRequest.
type PostPublisherSubscriptionShareRevokeRequest struct {
	// AccountId The ID of the shared subscription account
	AccountId string `json:"account_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareStartError defines model for PostPublisherSubscriptionShareStartError.
type PostPublisherSubscriptionShareStartError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareStartErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareStartErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareStartErrorCode int

// PostPublisherSubscriptionShareStartRequest defines model for PostPublisherSubscriptionShareStartRequest.
type PostPublisherSubscriptionShareStartRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SharedAccounts A JSON value representing a list of the shared accounts
	SharedAccounts string `json:"shared_accounts"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareStopError defines model for PostPublisherSubscriptionShareStopError.
type PostPublisherSubscriptionShareStopError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareStopErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareStopErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareStopErrorCode int

// PostPublisherSubscriptionShareStopRequest defines model for PostPublisherSubscriptionShareStopRequest.
type PostPublisherSubscriptionShareStopRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareUpdateError defines model for PostPublisherSubscriptionShareUpdateError.
type PostPublisherSubscriptionShareUpdateError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                       `json:"localizedMessage,omitempty"`
	Message          *string                                       `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareUpdateErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareUpdateErrorCode int

// PostPublisherSubscriptionShareUpdateRequest defines model for PostPublisherSubscriptionShareUpdateRequest.
type PostPublisherSubscriptionShareUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SharedAccounts A JSON value representing a list of the shared accounts
	SharedAccounts string `json:"shared_accounts"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherSubscriptionShareUserAddError defines model for PostPublisherSubscriptionShareUserAddError.
type PostPublisherSubscriptionShareUserAddError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareUserAddErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareUserAddErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareUserAddErrorCode int

// PostPublisherSubscriptionShareUserAddRequest defines model for PostPublisherSubscriptionShareUserAddRequest.
type PostPublisherSubscriptionShareUserAddRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// PostPublisherSubscriptionShareUserRemoveError defines model for PostPublisherSubscriptionShareUserRemoveError.
type PostPublisherSubscriptionShareUserRemoveError struct {
	// Code - 2: Access denied
	//
	// - 8005: Subscription not found
	//
	Code             PostPublisherSubscriptionShareUserRemoveErrorCode `json:"code"`
	LocalizedMessage *string                                           `json:"localizedMessage,omitempty"`
	Message          *string                                           `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareUserRemoveErrorCode - 2: Access denied
//
// - 8005: Subscription not found
type PostPublisherSubscriptionShareUserRemoveErrorCode int

// PostPublisherSubscriptionShareUserRemoveRequest defines model for PostPublisherSubscriptionShareUserRemoveRequest.
type PostPublisherSubscriptionShareUserRemoveRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// PostPublisherSubscriptionShareValidateError defines model for PostPublisherSubscriptionShareValidateError.
type PostPublisherSubscriptionShareValidateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionShareValidateErrorCode `json:"code"`
	LocalizedMessage *string                                         `json:"localizedMessage,omitempty"`
	Message          *string                                         `json:"message,omitempty"`
}

// PostPublisherSubscriptionShareValidateErrorCode - 2: Access denied
type PostPublisherSubscriptionShareValidateErrorCode int

// PostPublisherSubscriptionShareValidateRequest defines model for PostPublisherSubscriptionShareValidateRequest.
type PostPublisherSubscriptionShareValidateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Email The shared subscription user's email
	Email string `json:"email"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherSubscriptionStatsError defines model for PostPublisherSubscriptionStatsError.
type PostPublisherSubscriptionStatsError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherSubscriptionStatsErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherSubscriptionStatsErrorCode - 2: Access denied
type PostPublisherSubscriptionStatsErrorCode int

// PostPublisherSubscriptionStatsRequest defines model for PostPublisherSubscriptionStatsRequest.
type PostPublisherSubscriptionStatsRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherSubscriptionUpdateError defines model for PostPublisherSubscriptionUpdateError.
type PostPublisherSubscriptionUpdateError struct {
	// Code - 2: Access denied
	//
	// - 8001: Next bill date must be greater than today
	//
	Code             PostPublisherSubscriptionUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// PostPublisherSubscriptionUpdateErrorCode - 2: Access denied
//
// - 8001: Next bill date must be greater than today
type PostPublisherSubscriptionUpdateErrorCode int

// PostPublisherSubscriptionUpdateRequest defines model for PostPublisherSubscriptionUpdateRequest.
type PostPublisherSubscriptionUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// AutoRenew Subscription auto renew
	AutoRenew *bool `json:"auto_renew,omitempty"`

	// NextBillDate Date of next bill
	NextBillDate *int `json:"next_bill_date,omitempty"`

	// PaymentMethodId Payment method id
	PaymentMethodId *string `json:"payment_method_id,omitempty"`

	// ScheduledAccessPeriodId ID of scheduled specific access period for the next renewal of an end-user’s dynamic subscription('unscheduled' - enable renewal according to term billing configuration)
	ScheduledAccessPeriodId *string `json:"scheduled_access_period_id,omitempty"`

	// SubscriptionId Subscription id
	SubscriptionId string `json:"subscription_id"`

	// UserAddressId The public ID of the user address
	UserAddressId *string `json:"user_address_id,omitempty"`
}

// PostPublisherTeamListError defines model for PostPublisherTeamListError.
type PostPublisherTeamListError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherTeamListErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// PostPublisherTeamListErrorCode - 2: Access denied
type PostPublisherTeamListErrorCode int

// PostPublisherTeamListRequest defines model for PostPublisherTeamListRequest.
type PostPublisherTeamListRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Permissions Comma-separated list of One permission to filter team members; to filter by more permissions (XOR logic), add them to the request URL
	Permissions *PostPublisherTeamListRequestPermissions `json:"permissions,omitempty"`
}

// PostPublisherTeamListRequestPermissions Comma-separated list of One permission to filter team members; to filter by more permissions (XOR logic), add them to the request URL
type PostPublisherTeamListRequestPermissions string

// PostPublisherTermChangeCanError defines model for PostPublisherTermChangeCanError.
type PostPublisherTermChangeCanError struct {
	// Code - 2: Access denied
	//
	// - 1012: Term's change option not found
	//
	Code             PostPublisherTermChangeCanErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// PostPublisherTermChangeCanErrorCode - 2: Access denied
//
// - 1012: Term's change option not found
type PostPublisherTermChangeCanErrorCode int

// PostPublisherTermChangeCanRequest defines model for PostPublisherTermChangeCanRequest.
type PostPublisherTermChangeCanRequest struct {
	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
}

// PostPublisherTermChangeCancelError defines model for PostPublisherTermChangeCancelError.
type PostPublisherTermChangeCancelError struct {
	// Code - 2: Access denied
	//
	// - 1012: Term's change option not found
	//
	Code             PostPublisherTermChangeCancelErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherTermChangeCancelErrorCode - 2: Access denied
//
// - 1012: Term's change option not found
type PostPublisherTermChangeCancelErrorCode int

// PostPublisherTermChangeCancelRequest defines model for PostPublisherTermChangeCancelRequest.
type PostPublisherTermChangeCancelRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionFrom A public ID of subscription from
	SubscriptionFrom string `json:"subscription_from"`
}

// PostPublisherTermChangeDoError defines model for PostPublisherTermChangeDoError.
type PostPublisherTermChangeDoError struct {
	// Code - 2: Access denied
	//
	// - 1012: Term's change option not found
	//
	Code             PostPublisherTermChangeDoErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// PostPublisherTermChangeDoErrorCode - 2: Access denied
//
// - 1012: Term's change option not found
type PostPublisherTermChangeDoErrorCode int

// PostPublisherTermChangeDoRequest defines model for PostPublisherTermChangeDoRequest.
type PostPublisherTermChangeDoRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BillingTiming The billing timing setting
	BillingTiming PostPublisherTermChangeDoRequestBillingTiming `json:"billing_timing"`

	// ImmediateAccess Whether the access should be given immediately. Irrelevant if the "billing_timing" is 0.
	ImmediateAccess bool `json:"immediate_access"`

	// ProrateAccess Whether the <a href="https://docs.piano.io/upgrades/?paragraphId=b27954ef84407e4#prorate-billing-amount">Prorate billing amount</a> function is enabled
	ProrateAccess bool `json:"prorate_access"`

	// SharedAccounts A JSON value representing a list of the shared accounts
	SharedAccounts *string `json:"shared_accounts,omitempty"`

	// SubscriptionFrom A public ID of subscription from
	SubscriptionFrom string `json:"subscription_from"`

	// TermTo The public ID of the term the subscription is being switched to.
	TermTo string `json:"term_to"`

	// TermToPeriodId The ID of the term period the subscription is being switched to.
	TermToPeriodId *string `json:"term_to_period_id,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UserAddress User address
	UserAddress *string `json:"user_address,omitempty"`
}

// PostPublisherTermChangeDoRequestBillingTiming The billing timing setting
type PostPublisherTermChangeDoRequestBillingTiming string

// PostPublisherTermChangeGetSubscriptionUpgradeStatusError defines model for PostPublisherTermChangeGetSubscriptionUpgradeStatusError.
type PostPublisherTermChangeGetSubscriptionUpgradeStatusError struct {
	// Code - 2: Access denied
	//
	// - 1012: Term's change option not found
	//
	Code             PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode `json:"code"`
	LocalizedMessage *string                                                      `json:"localizedMessage,omitempty"`
	Message          *string                                                      `json:"message,omitempty"`
}

// PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode - 2: Access denied
//
// - 1012: Term's change option not found
type PostPublisherTermChangeGetSubscriptionUpgradeStatusErrorCode int

// PostPublisherTermChangeGetSubscriptionUpgradeStatusRequest defines model for PostPublisherTermChangeGetSubscriptionUpgradeStatusRequest.
type PostPublisherTermChangeGetSubscriptionUpgradeStatusRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherTermChangeOptionCreateError defines model for PostPublisherTermChangeOptionCreateError.
type PostPublisherTermChangeOptionCreateError struct {
	// Code - 2: Access denied
	//
	// - 1001: Term not found
	//
	// - 1062: Upgrade options not allowed for this term type
	//
	// - 1069: Upgrade option is already configured
	//
	Code             PostPublisherTermChangeOptionCreateErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherTermChangeOptionCreateErrorCode - 2: Access denied
//
// - 1001: Term not found
//
// - 1062: Upgrade options not allowed for this term type
//
// - 1069: Upgrade option is already configured
type PostPublisherTermChangeOptionCreateErrorCode int

// PostPublisherTermChangeOptionCreateRequest defines model for PostPublisherTermChangeOptionCreateRequest.
type PostPublisherTermChangeOptionCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BillingTiming The billing timing(0: immediate term change;1: term change at the end of the current cycle;2: term change on the next sell date;3: term change at the end of the current period)
	BillingTiming PostPublisherTermChangeOptionCreateRequestBillingTiming `json:"billing_timing"`

	// Description A description of the term change option; provided by the client
	Description *string `json:"description,omitempty"`

	// FromPeriodId The ID of the "From" term period
	FromPeriodId *string `json:"from_period_id,omitempty"`

	// FromTermId The ID of the "From" term
	FromTermId string `json:"from_term_id"`

	// ImmediateAccess Whether the access begins immediately
	ImmediateAccess bool `json:"immediate_access"`

	// ProrateAccess Whether the <a href="https://docs.piano.io/upgrades/?paragraphId=b27954ef84407e4#prorate-billing-amount">Prorate billing amount</a> function is enabled
	ProrateAccess bool `json:"prorate_access"`

	// ToPeriodId The ID of the "To" term period
	ToPeriodId *string `json:"to_period_id,omitempty"`

	// ToTermId The ID of the "To" term
	ToTermId string `json:"to_term_id"`
}

// PostPublisherTermChangeOptionCreateRequestBillingTiming The billing timing(0: immediate term change;1: term change at the end of the current cycle;2: term change on the next sell date;3: term change at the end of the current period)
type PostPublisherTermChangeOptionCreateRequestBillingTiming string

// PostPublisherTermCustomCreateError defines model for PostPublisherTermCustomCreateError.
type PostPublisherTermCustomCreateError struct {
	// Code - 2: Access denied
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 403: Invalid rid
	//
	Code             PostPublisherTermCustomCreateErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherTermCustomCreateErrorCode - 2: Access denied
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 403: Invalid rid
type PostPublisherTermCustomCreateErrorCode int

// PostPublisherTermCustomCreateRequest defines model for PostPublisherTermCustomCreateRequest.
type PostPublisherTermCustomCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CustomDefaultAccessPeriod The default access period
	CustomDefaultAccessPeriod *int32 `json:"custom_default_access_period,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherTermCustomUpdateError defines model for PostPublisherTermCustomUpdateError.
type PostPublisherTermCustomUpdateError struct {
	// Code - 1002: Invalid term type
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1005: Cannot update a term that has conversions
	//
	// - 403: Invalid rid
	//
	// - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             PostPublisherTermCustomUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherTermCustomUpdateErrorCode - 1002: Invalid term type
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1005: Cannot update a term that has conversions
//
// - 403: Invalid rid
//
// - 2: Access denied
//
// - 1001: Term not found
type PostPublisherTermCustomUpdateErrorCode int

// PostPublisherTermCustomUpdateRequest defines model for PostPublisherTermCustomUpdateRequest.
type PostPublisherTermCustomUpdateRequest struct {
	// CustomDefaultAccessPeriod The default access period
	CustomDefaultAccessPeriod *int32 `json:"custom_default_access_period,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name *string `json:"name,omitempty"`

	// Rid The resource ID
	Rid *string `json:"rid,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherTermDeleteRequest defines model for PostPublisherTermDeleteRequest.
type PostPublisherTermDeleteRequest struct {
	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherTermDynamicCreateError defines model for PostPublisherTermDynamicCreateError.
type PostPublisherTermDynamicCreateError struct {
	// Code - 402: Invalid aid
	//
	// - 441: Invalid amount of maximum days in advance.
	//
	// - 1094: Dynamic term billing configuration cannot be parsed
	//
	// - 403: Invalid rid
	//
	// - 1093: Dynamic term feature is disabled
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1006: Term doesn't have configuration for specified currency
	//
	// - 429: Term name is empty
	//
	// - 2: Access denied
	//
	Code             PostPublisherTermDynamicCreateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherTermDynamicCreateErrorCode - 402: Invalid aid
//
// - 441: Invalid amount of maximum days in advance.
//
// - 1094: Dynamic term billing configuration cannot be parsed
//
// - 403: Invalid rid
//
// - 1093: Dynamic term feature is disabled
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1006: Term doesn't have configuration for specified currency
//
// - 429: Term name is empty
//
// - 2: Access denied
type PostPublisherTermDynamicCreateErrorCode int

// PostPublisherTermDynamicUpdateError defines model for PostPublisherTermDynamicUpdateError.
type PostPublisherTermDynamicUpdateError struct {
	// Code - 402: Invalid aid
	//
	// - 1094: Dynamic term billing configuration cannot be parsed
	//
	// - 403: Invalid rid
	//
	// - 1093: Dynamic term feature is disabled
	//
	// - 1001: Term not found
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1006: Term doesn't have configuration for specified currency
	//
	// - 441: Invalid amount of maximum days in advance.
	//
	// - 1005: Cannot update a term that has conversions
	//
	// - 429: Term name is empty
	//
	// - 2: Access denied
	//
	Code             PostPublisherTermDynamicUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherTermDynamicUpdateErrorCode - 402: Invalid aid
//
// - 1094: Dynamic term billing configuration cannot be parsed
//
// - 403: Invalid rid
//
// - 1093: Dynamic term feature is disabled
//
// - 1001: Term not found
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1006: Term doesn't have configuration for specified currency
//
// - 441: Invalid amount of maximum days in advance.
//
// - 1005: Cannot update a term that has conversions
//
// - 429: Term name is empty
//
// - 2: Access denied
type PostPublisherTermDynamicUpdateErrorCode int

// PostPublisherTermExternalCreateError defines model for PostPublisherTermExternalCreateError.
type PostPublisherTermExternalCreateError struct {
	// Code - 2: Access denied
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 403: Invalid rid
	//
	Code             PostPublisherTermExternalCreateErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// PostPublisherTermExternalCreateErrorCode - 2: Access denied
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 403: Invalid rid
type PostPublisherTermExternalCreateErrorCode int

// PostPublisherTermExternalCreateRequest defines model for PostPublisherTermExternalCreateRequest.
type PostPublisherTermExternalCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// EvtFixedTimeAccessPeriod The period to grant access for (in days)
	EvtFixedTimeAccessPeriod *int32 `json:"evt_fixed_time_access_period,omitempty"`

	// EvtGooglePlayProductId Google Play's product ID
	EvtGooglePlayProductId *string `json:"evt_google_play_product_id,omitempty"`

	// EvtGracePeriod The External API grace period
	EvtGracePeriod *int32 `json:"evt_grace_period,omitempty"`

	// EvtItunesBundleId iTunes's bundle ID
	EvtItunesBundleId *string `json:"evt_itunes_bundle_id,omitempty"`

	// EvtItunesProductId iTunes's product ID
	EvtItunesProductId *string `json:"evt_itunes_product_id,omitempty"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32 `json:"evt_verification_period,omitempty"`

	// ExternalApiId The ID of the external API configuration
	ExternalApiId string `json:"external_api_id"`

	// Name The term name
	Name string `json:"name"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`
}

// PostPublisherTermExternalUpdateError defines model for PostPublisherTermExternalUpdateError.
type PostPublisherTermExternalUpdateError struct {
	// Code - 1002: Invalid term type
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1005: Cannot update a term that has conversions
	//
	// - 403: Invalid rid
	//
	// - 2: Access denied
	//
	// - 1001: Term not found
	//
	Code             PostPublisherTermExternalUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                  `json:"localizedMessage,omitempty"`
	Message          *string                                  `json:"message,omitempty"`
}

// PostPublisherTermExternalUpdateErrorCode - 1002: Invalid term type
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1005: Cannot update a term that has conversions
//
// - 403: Invalid rid
//
// - 2: Access denied
//
// - 1001: Term not found
type PostPublisherTermExternalUpdateErrorCode int

// PostPublisherTermExternalUpdateRequest defines model for PostPublisherTermExternalUpdateRequest.
type PostPublisherTermExternalUpdateRequest struct {
	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// EvtFixedTimeAccessPeriod The period to grant access for (in days)
	EvtFixedTimeAccessPeriod *int32 `json:"evt_fixed_time_access_period,omitempty"`

	// EvtGooglePlayProductId Google Play's product ID
	EvtGooglePlayProductId *string `json:"evt_google_play_product_id,omitempty"`

	// EvtGracePeriod The External API grace period
	EvtGracePeriod *int32 `json:"evt_grace_period,omitempty"`

	// EvtItunesBundleId iTunes's bundle ID
	EvtItunesBundleId *string `json:"evt_itunes_bundle_id,omitempty"`

	// EvtItunesProductId iTunes's product ID
	EvtItunesProductId *string `json:"evt_itunes_product_id,omitempty"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32 `json:"evt_verification_period,omitempty"`

	// ExternalApiId The ID of the external API configuration
	ExternalApiId string `json:"external_api_id"`

	// Name The term name
	Name string `json:"name"`

	// Rid The resource ID
	Rid *string `json:"rid,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherTermGiftCreateError defines model for PostPublisherTermGiftCreateError.
type PostPublisherTermGiftCreateError struct {
	// Code - 410: Invalid vouchering policy
	//
	// - 402: Invalid aid
	//
	// - 1021: Invalid redemption URL syntax
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 403: Invalid rid
	//
	// - 408: Name shouldn't be empty
	//
	// - 1020: Redemption URL shouldn't be empty
	//
	// - 409: Invalid resource
	//
	// - 1004: Invalid billing plan syntax
	//
	// - 2: Access denied
	//
	// - 407: AID shouldn't be empty
	//
	// - 1: Internal error
	//
	Code             PostPublisherTermGiftCreateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherTermGiftCreateErrorCode - 410: Invalid vouchering policy
//
// - 402: Invalid aid
//
// - 1021: Invalid redemption URL syntax
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 403: Invalid rid
//
// - 408: Name shouldn't be empty
//
// - 1020: Redemption URL shouldn't be empty
//
// - 409: Invalid resource
//
// - 1004: Invalid billing plan syntax
//
// - 2: Access denied
//
// - 407: AID shouldn't be empty
//
// - 1: Internal error
type PostPublisherTermGiftCreateErrorCode int

// PostPublisherTermGiftCreateRequest defines model for PostPublisherTermGiftCreateRequest.
type PostPublisherTermGiftCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BillingPlanCurrency The billing plan currency
	BillingPlanCurrency *string `json:"billing_plan_currency,omitempty"`

	// BillingPlanPeriod The billing plan period
	BillingPlanPeriod *string `json:"billing_plan_period,omitempty"`

	// BillingPlanPrice The billing plan price
	BillingPlanPrice *float32 `json:"billing_plan_price,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `json:"collect_address,omitempty"`

	// CollectShippingAddress Whether to collect a shipping address for this gift term
	CollectShippingAddress *bool `json:"collect_shipping_address,omitempty"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `json:"default_country,omitempty"`

	// DeliveryZone Comma-separated list of A lsit of the delivery zones for this term
	DeliveryZone *string `json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes *bool `json:"payment_allow_promo_codes,omitempty"`

	// ProductCategory The product category
	ProductCategory *string `json:"product_category,omitempty"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// ScheduleBillingModel The schedule billing model
	ScheduleBillingModel *string `json:"schedule_billing_model,omitempty"`

	// ScheduleId The schedule ID
	ScheduleId *string `json:"schedule_id,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`

	// TermType Type of billing term
	TermType PostPublisherTermGiftCreateRequestTermType `json:"term_type"`

	// VoucheringPolicyRedemptionUrl The vouchering policy redemption URL
	VoucheringPolicyRedemptionUrl string `json:"vouchering_policy_redemption_url"`
}

// PostPublisherTermGiftCreateRequestTermType Type of billing term
type PostPublisherTermGiftCreateRequestTermType string

// PostPublisherTermGiftUpdateError defines model for PostPublisherTermGiftUpdateError.
type PostPublisherTermGiftUpdateError struct {
	// Code - 410: Invalid vouchering policy
	//
	// - 402: Invalid aid
	//
	// - 1021: Invalid redemption URL syntax
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 403: Invalid rid
	//
	// - 408: Name shouldn't be empty
	//
	// - 1020: Redemption URL shouldn't be empty
	//
	// - 409: Invalid resource
	//
	// - 1004: Invalid billing plan syntax
	//
	// - 2: Access denied
	//
	// - 407: AID shouldn't be empty
	//
	// - 1: Internal error
	//
	Code             PostPublisherTermGiftUpdateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherTermGiftUpdateErrorCode - 410: Invalid vouchering policy
//
// - 402: Invalid aid
//
// - 1021: Invalid redemption URL syntax
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 403: Invalid rid
//
// - 408: Name shouldn't be empty
//
// - 1020: Redemption URL shouldn't be empty
//
// - 409: Invalid resource
//
// - 1004: Invalid billing plan syntax
//
// - 2: Access denied
//
// - 407: AID shouldn't be empty
//
// - 1: Internal error
type PostPublisherTermGiftUpdateErrorCode int

// PostPublisherTermGiftUpdateRequest defines model for PostPublisherTermGiftUpdateRequest.
type PostPublisherTermGiftUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BillingPlanCurrency The billing plan currency
	BillingPlanCurrency *string `json:"billing_plan_currency,omitempty"`

	// BillingPlanPeriod The billing plan period
	BillingPlanPeriod *string `json:"billing_plan_period,omitempty"`

	// BillingPlanPrice The billing plan price
	BillingPlanPrice *float32 `json:"billing_plan_price,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `json:"collect_address,omitempty"`

	// CollectShippingAddress Whether to collect a shipping address for this gift term
	CollectShippingAddress *bool `json:"collect_shipping_address,omitempty"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `json:"default_country,omitempty"`

	// DeliveryZone Comma-separated list of A lsit of the delivery zones for this term
	DeliveryZone *string `json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes *bool `json:"payment_allow_promo_codes,omitempty"`

	// ProductCategory The product category
	ProductCategory *string `json:"product_category,omitempty"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// ScheduleBillingModel The schedule billing model
	ScheduleBillingModel *string `json:"schedule_billing_model,omitempty"`

	// ScheduleId The schedule ID
	ScheduleId *string `json:"schedule_id,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TermType Type of billing term
	TermType PostPublisherTermGiftUpdateRequestTermType `json:"term_type"`

	// VoucheringPolicyRedemptionUrl The vouchering policy redemption URL
	VoucheringPolicyRedemptionUrl string `json:"vouchering_policy_redemption_url"`
}

// PostPublisherTermGiftUpdateRequestTermType Type of billing term
type PostPublisherTermGiftUpdateRequestTermType string

// PostPublisherTermPaymentCreateError defines model for PostPublisherTermPaymentCreateError.
type PostPublisherTermPaymentCreateError struct {
	// Code - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 441: Invalid amount of maximum days in advance.
	//
	// - 1011: Pre-selected country is required
	//
	// - 403: Invalid rid
	//
	// - 1004: Invalid billing plan syntax
	//
	// - 2: Access denied
	//
	Code             PostPublisherTermPaymentCreateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherTermPaymentCreateErrorCode - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 441: Invalid amount of maximum days in advance.
//
// - 1011: Pre-selected country is required
//
// - 403: Invalid rid
//
// - 1004: Invalid billing plan syntax
//
// - 2: Access denied
type PostPublisherTermPaymentCreateErrorCode int

// PostPublisherTermPaymentCreateRequest defines model for PostPublisherTermPaymentCreateRequest.
type PostPublisherTermPaymentCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// AllowStartInFuture Allow start in the future
	AllowStartInFuture *bool `json:"allow_start_in_future,omitempty"`

	// ChurnPreventionLogicId The churn prevention logic id
	ChurnPreventionLogicId *string `json:"churn_prevention_logic_id,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `json:"collect_address,omitempty"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `json:"default_country,omitempty"`

	// DeliveryZone Comma-separated list of A lsit of the delivery zones for this term
	DeliveryZone *string `json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32 `json:"evt_verification_period,omitempty"`

	// MaximumDaysInAdvance Maximum days in advance
	MaximumDaysInAdvance *int32 `json:"maximum_days_in_advance,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// PaymentAllowGift Whether the term can be gifted
	PaymentAllowGift *bool `json:"payment_allow_gift,omitempty"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes *bool `json:"payment_allow_promo_codes,omitempty"`

	// PaymentAllowRenewDays How many days in advance users user can renew
	PaymentAllowRenewDays *int32 `json:"payment_allow_renew_days,omitempty"`

	// PaymentBillingPlan The billing plan for the term
	PaymentBillingPlan *string `json:"payment_billing_plan,omitempty"`

	// PaymentForceAutoRenew Prevents users from disabling autorenewal (always "TRUE" for dynamic terms)
	PaymentForceAutoRenew *bool `json:"payment_force_auto_renew,omitempty"`

	// PaymentNewCustomersOnly Whether to show the term only to users having no dynamic or purchase conversions yet
	PaymentNewCustomersOnly *bool `json:"payment_new_customers_only,omitempty"`

	// PaymentRenewGracePeriod The number of days after expiration to still allow access to the resource
	PaymentRenewGracePeriod *int32 `json:"payment_renew_grace_period,omitempty"`

	// PaymentTrialNewCustomersOnly Whether to allow trial period only to users having no purchases yet
	PaymentTrialNewCustomersOnly *bool `json:"payment_trial_new_customers_only,omitempty"`

	// ProductCategory The product category
	ProductCategory *string `json:"product_category,omitempty"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// ScheduleBillingModel The schedule billing model
	ScheduleBillingModel *string `json:"schedule_billing_model,omitempty"`

	// ScheduleId The schedule ID
	ScheduleId *string `json:"schedule_id,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`

	// TermBillingDescriptor The term billing descriptor
	TermBillingDescriptor *string `json:"term_billing_descriptor,omitempty"`

	// VerifyOnRenewal Whether the term should be verified before renewal (if "FALSE", this step is skipped)
	VerifyOnRenewal *bool `json:"verify_on_renewal,omitempty"`
}

// PostPublisherTermPaymentUpdateError defines model for PostPublisherTermPaymentUpdateError.
type PostPublisherTermPaymentUpdateError struct {
	// Code - 1002: Invalid term type
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1011: Pre-selected country is required
	//
	// - 403: Invalid rid
	//
	// - 1062: Upgrade options not allowed for this term type
	//
	// - 1004: Invalid billing plan syntax
	//
	// - 950: Period is not found
	//
	// - 2: Access denied
	//
	// - 1001: Term not found
	//
	// - 441: Invalid amount of maximum days in advance.
	//
	// - 1005: Cannot update a term that has conversions
	//
	Code             PostPublisherTermPaymentUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherTermPaymentUpdateErrorCode - 1002: Invalid term type
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1011: Pre-selected country is required
//
// - 403: Invalid rid
//
// - 1062: Upgrade options not allowed for this term type
//
// - 1004: Invalid billing plan syntax
//
// - 950: Period is not found
//
// - 2: Access denied
//
// - 1001: Term not found
//
// - 441: Invalid amount of maximum days in advance.
//
// - 1005: Cannot update a term that has conversions
type PostPublisherTermPaymentUpdateErrorCode int

// PostPublisherTermPaymentUpdateRequest defines model for PostPublisherTermPaymentUpdateRequest.
type PostPublisherTermPaymentUpdateRequest struct {
	// AllowStartInFuture Allow start in the future
	AllowStartInFuture *bool `json:"allow_start_in_future,omitempty"`

	// ChangeOptions Comma-separated list of A list of the change options associated with the term
	ChangeOptions *string `json:"change_options,omitempty"`

	// ChurnPreventionLogicId The churn prevention logic id
	ChurnPreventionLogicId *string `json:"churn_prevention_logic_id,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `json:"collect_address,omitempty"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `json:"default_country,omitempty"`

	// DeliveryZone Comma-separated list of A lsit of the delivery zones for this term
	DeliveryZone *string `json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32 `json:"evt_verification_period,omitempty"`

	// ExternalApiId The ID of the external API configuration
	ExternalApiId *string `json:"external_api_id,omitempty"`

	// MaximumDaysInAdvance Maximum days in advance
	MaximumDaysInAdvance *int32 `json:"maximum_days_in_advance,omitempty"`

	// Name The term name
	Name *string `json:"name,omitempty"`

	// PaymentAllowGift Whether the term can be gifted
	PaymentAllowGift *bool `json:"payment_allow_gift,omitempty"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes *bool `json:"payment_allow_promo_codes,omitempty"`

	// PaymentAllowRenewDays How many days in advance users user can renew
	PaymentAllowRenewDays *int32 `json:"payment_allow_renew_days,omitempty"`

	// PaymentBillingPlan The billing plan for the term
	PaymentBillingPlan *string `json:"payment_billing_plan,omitempty"`

	// PaymentForceAutoRenew Prevents users from disabling autorenewal (always "TRUE" for dynamic terms)
	PaymentForceAutoRenew *bool `json:"payment_force_auto_renew,omitempty"`

	// PaymentNewCustomersOnly Whether to show the term only to users having no dynamic or purchase conversions yet
	PaymentNewCustomersOnly *bool `json:"payment_new_customers_only,omitempty"`

	// PaymentRenewGracePeriod The number of days after expiration to still allow access to the resource
	PaymentRenewGracePeriod *int32 `json:"payment_renew_grace_period,omitempty"`

	// PaymentTrialNewCustomersOnly Whether to allow trial period only to users having no purchases yet
	PaymentTrialNewCustomersOnly *bool `json:"payment_trial_new_customers_only,omitempty"`

	// ProductCategory The product category
	ProductCategory *string `json:"product_category,omitempty"`

	// Rid The resource ID
	Rid *string `json:"rid,omitempty"`

	// ScheduleBillingModel The schedule billing model
	ScheduleBillingModel *string `json:"schedule_billing_model,omitempty"`

	// ScheduleId The schedule ID
	ScheduleId *string `json:"schedule_id,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url,omitempty"`

	// TermBillingDescriptor The term billing descriptor
	TermBillingDescriptor *string `json:"term_billing_descriptor,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// VerifyOnRenewal Whether the term should be verified before renewal (if "FALSE", this step is skipped)
	VerifyOnRenewal *bool `json:"verify_on_renewal,omitempty"`
}

// PostPublisherTermRegistrationCreateError defines model for PostPublisherTermRegistrationCreateError.
type PostPublisherTermRegistrationCreateError struct {
	// Code - 2: Access denied
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 1003: Access period must be greater than or equal to 0
	//
	// - 403: Invalid rid
	//
	Code             PostPublisherTermRegistrationCreateErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherTermRegistrationCreateErrorCode - 2: Access denied
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 1003: Access period must be greater than or equal to 0
//
// - 403: Invalid rid
type PostPublisherTermRegistrationCreateErrorCode int

// PostPublisherTermRegistrationCreateRequest defines model for PostPublisherTermRegistrationCreateRequest.
type PostPublisherTermRegistrationCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// RegistrationAccessPeriod The access duration (in seconds) for the registration term
	RegistrationAccessPeriod *int64 `json:"registration_access_period,omitempty"`

	// RegistrationGracePeriod How long (in seconds) after registration users can get access to the term
	RegistrationGracePeriod *int64 `json:"registration_grace_period,omitempty"`

	// Rid The resource ID
	Rid string `json:"rid"`
}

// PostPublisherTermRegistrationUpdateError defines model for PostPublisherTermRegistrationUpdateError.
type PostPublisherTermRegistrationUpdateError struct {
	// Code - 1002: Invalid term type
	//
	// - 1000: Invalid term title. A term with the '%s' title already exists.
	//
	// - 403: Invalid rid
	//
	// - 1003: Access period must be greater than or equal to 0
	//
	// - 2: Access denied
	//
	Code             PostPublisherTermRegistrationUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherTermRegistrationUpdateErrorCode - 1002: Invalid term type
//
// - 1000: Invalid term title. A term with the '%s' title already exists.
//
// - 403: Invalid rid
//
// - 1003: Access period must be greater than or equal to 0
//
// - 2: Access denied
type PostPublisherTermRegistrationUpdateErrorCode int

// PostPublisherTermRegistrationUpdateRequest defines model for PostPublisherTermRegistrationUpdateRequest.
type PostPublisherTermRegistrationUpdateRequest struct {
	// Description The description of the term
	Description *string `json:"description,omitempty"`

	// Name The term name
	Name *string `json:"name,omitempty"`

	// RegistrationAccessPeriod The access duration (in seconds) for the registration term
	RegistrationAccessPeriod *int64 `json:"registration_access_period,omitempty"`

	// RegistrationGracePeriod How long (in seconds) after registration users can get access to the term
	RegistrationGracePeriod *int64 `json:"registration_grace_period,omitempty"`

	// Rid The resource ID
	Rid *string `json:"rid,omitempty"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// PostPublisherUserAccessActiveCountError defines model for PostPublisherUserAccessActiveCountError.
type PostPublisherUserAccessActiveCountError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserAccessActiveCountErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// PostPublisherUserAccessActiveCountErrorCode - 2: Access denied
type PostPublisherUserAccessActiveCountErrorCode int

// PostPublisherUserAccessActiveCountRequest defines model for PostPublisherUserAccessActiveCountRequest.
type PostPublisherUserAccessActiveCountRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`
}

// PostPublisherUserAccessUpdateError defines model for PostPublisherUserAccessUpdateError.
type PostPublisherUserAccessUpdateError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserAccessUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherUserAccessUpdateErrorCode - 2: Access denied
type PostPublisherUserAccessUpdateErrorCode int

// PostPublisherUserAccessUpdateRequest defines model for PostPublisherUserAccessUpdateRequest.
type PostPublisherUserAccessUpdateRequest struct {
	// AccessId The access ID
	AccessId string `json:"access_id"`

	// ExpireDate The new expire date
	ExpireDate *int `json:"expire_date,omitempty"`
}

// PostPublisherUserAddressCreateRequest defines model for PostPublisherUserAddressCreateRequest.
type PostPublisherUserAddressCreateRequest struct {
	// Address1 The user's first address
	Address1 string `json:"address1"`

	// Address2 The user's second address
	Address2 *string `json:"address2,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// City The name of the city
	City string `json:"city"`

	// CompanyName The company name
	CompanyName *string `json:"company_name,omitempty"`

	// CountryId The country ID
	CountryId string `json:"country_id"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`

	// Phone The user's phone
	Phone *string `json:"phone,omitempty"`

	// PostalCode The user's postal code
	PostalCode string `json:"postal_code"`

	// RegionId The ID of the country region
	RegionId *string `json:"region_id,omitempty"`

	// RegionName region_name
	RegionName *string `json:"region_name,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserAddressDeleteRequest defines model for PostPublisherUserAddressDeleteRequest.
type PostPublisherUserAddressDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UserAddressId The public ID of the user address
	UserAddressId string `json:"user_address_id"`
}

// PostPublisherUserAddressHistoryRequest defines model for PostPublisherUserAddressHistoryRequest.
type PostPublisherUserAddressHistoryRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// DateFrom Date from
	DateFrom *int `json:"date_from,omitempty"`

	// DateTo Date to
	DateTo *int `json:"date_to,omitempty"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`
}

// PostPublisherUserAddressUpdateError defines model for PostPublisherUserAddressUpdateError.
type PostPublisherUserAddressUpdateError struct {
	// Code - 2810: This address is locked, and the requested action cannot be performed. Possible Reasons for Locking: The address is associated with an active delivery schedule or the address is set as the primary delivery address and no alternative is available.
	//
	Code             PostPublisherUserAddressUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                 `json:"localizedMessage,omitempty"`
	Message          *string                                 `json:"message,omitempty"`
}

// PostPublisherUserAddressUpdateErrorCode - 2810: This address is locked, and the requested action cannot be performed. Possible Reasons for Locking: The address is associated with an active delivery schedule or the address is set as the primary delivery address and no alternative is available.
type PostPublisherUserAddressUpdateErrorCode int

// PostPublisherUserAddressUpdateRequest defines model for PostPublisherUserAddressUpdateRequest.
type PostPublisherUserAddressUpdateRequest struct {
	// AdditionalFields The additional address fields (json)
	AdditionalFields *string `json:"additional_fields,omitempty"`

	// Address1 The user's first address
	Address1 string `json:"address1"`

	// Address2 The user's second address
	Address2 *string `json:"address2,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// City The name of the city
	City string `json:"city"`

	// CompanyName The company name
	CompanyName *string `json:"company_name,omitempty"`

	// CountryId The country ID
	CountryId string `json:"country_id"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`

	// Phone The user's phone
	Phone *string `json:"phone,omitempty"`

	// PostalCode The user's postal code
	PostalCode string `json:"postal_code"`

	// RegionId The ID of the country region
	RegionId *string `json:"region_id,omitempty"`

	// RegionName The name of the country region
	RegionName *string `json:"region_name,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`

	// UserAddressId The public ID of the user address
	UserAddressId string `json:"user_address_id"`
}

// PostPublisherUserAppCountError defines model for PostPublisherUserAppCountError.
type PostPublisherUserAppCountError struct {
	// Code - 2: Access denied
	//
	// - 2004: User not found
	//
	Code             PostPublisherUserAppCountErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// PostPublisherUserAppCountErrorCode - 2: Access denied
//
// - 2004: User not found
type PostPublisherUserAppCountErrorCode int

// PostPublisherUserAppCountRequest defines model for PostPublisherUserAppCountRequest.
type PostPublisherUserAppCountRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// IncludeDisabled Whether to include disabled users
	IncludeDisabled bool `json:"include_disabled"`
}

// PostPublisherUserBillingAddressCreateError defines model for PostPublisherUserBillingAddressCreateError.
type PostPublisherUserBillingAddressCreateError struct {
	// Code - 402: Invalid aid
	//
	// - 2004: User not found
	//
	// - 404: Not found
	//
	// - 2800: Region refers to other country
	//
	Code             PostPublisherUserBillingAddressCreateErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressCreateErrorCode - 402: Invalid aid
//
// - 2004: User not found
//
// - 404: Not found
//
// - 2800: Region refers to other country
type PostPublisherUserBillingAddressCreateErrorCode int

// PostPublisherUserBillingAddressCreateRequest defines model for PostPublisherUserBillingAddressCreateRequest.
type PostPublisherUserBillingAddressCreateRequest struct {
	// AddressLine1 Line one from the user's billing address
	AddressLine1 *string `json:"address_line1,omitempty"`

	// AddressLine2 Line two from the user's billing address
	AddressLine2 *string `json:"address_line2,omitempty"`

	// AddressLine3 line three from the user's billing address
	AddressLine3 *string `json:"address_line3,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// City The city from the user's billing address
	City *string `json:"city,omitempty"`

	// Country The country from the user's billing address, an object
	Country string `json:"country"`

	// PostalCode The zip code from the user's billing address
	PostalCode string `json:"postal_code"`

	// Region The region from the user's billing address, an object
	Region string `json:"region"`

	// Type The user address provider type: Experian (1), Avalare (2)
	Type int32 `json:"type"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserBillingAddressDeleteError defines model for PostPublisherUserBillingAddressDeleteError.
type PostPublisherUserBillingAddressDeleteError struct {
	// Code - 2004: User not found
	//
	Code             PostPublisherUserBillingAddressDeleteErrorCode `json:"code"`
	LocalizedMessage *string                                        `json:"localizedMessage,omitempty"`
	Message          *string                                        `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressDeleteErrorCode - 2004: User not found
type PostPublisherUserBillingAddressDeleteErrorCode int

// PostPublisherUserBillingAddressDeleteRequest defines model for PostPublisherUserBillingAddressDeleteRequest.
type PostPublisherUserBillingAddressDeleteRequest struct {
	// AddressPubId The public ID of the address
	AddressPubId string `json:"address_pub_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserBillingAddressGetByPaymentError defines model for PostPublisherUserBillingAddressGetByPaymentError.
type PostPublisherUserBillingAddressGetByPaymentError struct {
	// Code - 2004: User not found
	//
	Code             PostPublisherUserBillingAddressGetByPaymentErrorCode `json:"code"`
	LocalizedMessage *string                                              `json:"localizedMessage,omitempty"`
	Message          *string                                              `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressGetByPaymentErrorCode - 2004: User not found
type PostPublisherUserBillingAddressGetByPaymentErrorCode int

// PostPublisherUserBillingAddressGetByPaymentInfoError defines model for PostPublisherUserBillingAddressGetByPaymentInfoError.
type PostPublisherUserBillingAddressGetByPaymentInfoError struct {
	// Code - 2004: User not found
	//
	Code             PostPublisherUserBillingAddressGetByPaymentInfoErrorCode `json:"code"`
	LocalizedMessage *string                                                  `json:"localizedMessage,omitempty"`
	Message          *string                                                  `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressGetByPaymentInfoErrorCode - 2004: User not found
type PostPublisherUserBillingAddressGetByPaymentInfoErrorCode int

// PostPublisherUserBillingAddressGetByPaymentInfoRequest defines model for PostPublisherUserBillingAddressGetByPaymentInfoRequest.
type PostPublisherUserBillingAddressGetByPaymentInfoRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// PostPublisherUserBillingAddressGetByPaymentRequest defines model for PostPublisherUserBillingAddressGetByPaymentRequest.
type PostPublisherUserBillingAddressGetByPaymentRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// UserPaymentId The user payment ID
	UserPaymentId string `json:"user_payment_id"`
}

// PostPublisherUserBillingAddressGetError defines model for PostPublisherUserBillingAddressGetError.
type PostPublisherUserBillingAddressGetError struct {
	// Code - 2004: User not found
	//
	// - 404: Not found
	//
	Code             PostPublisherUserBillingAddressGetErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressGetErrorCode - 2004: User not found
//
// - 404: Not found
type PostPublisherUserBillingAddressGetErrorCode int

// PostPublisherUserBillingAddressGetRequest defines model for PostPublisherUserBillingAddressGetRequest.
type PostPublisherUserBillingAddressGetRequest struct {
	// AddressPubId The public ID of the address
	AddressPubId string `json:"address_pub_id"`

	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserBillingAddressListError defines model for PostPublisherUserBillingAddressListError.
type PostPublisherUserBillingAddressListError struct {
	// Code - 2004: User not found
	//
	Code             PostPublisherUserBillingAddressListErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherUserBillingAddressListErrorCode - 2004: User not found
type PostPublisherUserBillingAddressListErrorCode int

// PostPublisherUserBillingAddressListRequest defines model for PostPublisherUserBillingAddressListRequest.
type PostPublisherUserBillingAddressListRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserBulkImportDeleteError defines model for PostPublisherUserBulkImportDeleteError.
type PostPublisherUserBulkImportDeleteError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserBulkImportDeleteErrorCode `json:"code"`
	LocalizedMessage *string                                    `json:"localizedMessage,omitempty"`
	Message          *string                                    `json:"message,omitempty"`
}

// PostPublisherUserBulkImportDeleteErrorCode - 2: Access denied
type PostPublisherUserBulkImportDeleteErrorCode int

// PostPublisherUserBulkImportDeleteRequest defines model for PostPublisherUserBulkImportDeleteRequest.
type PostPublisherUserBulkImportDeleteRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BulkUserImportId The ID of the bulk user import
	BulkUserImportId string `json:"bulk_user_import_id"`
}

// PostPublisherUserBulkImportDownloadError defines model for PostPublisherUserBulkImportDownloadError.
type PostPublisherUserBulkImportDownloadError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserBulkImportDownloadErrorCode `json:"code"`
	LocalizedMessage *string                                      `json:"localizedMessage,omitempty"`
	Message          *string                                      `json:"message,omitempty"`
}

// PostPublisherUserBulkImportDownloadErrorCode - 2: Access denied
type PostPublisherUserBulkImportDownloadErrorCode int

// PostPublisherUserBulkImportDownloadRequest defines model for PostPublisherUserBulkImportDownloadRequest.
type PostPublisherUserBulkImportDownloadRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BulkUserImportId The ID of the bulk user import
	BulkUserImportId string `json:"bulk_user_import_id"`
}

// PostPublisherUserBulkImportListCompletedRequest defines model for PostPublisherUserBulkImportListCompletedRequest.
type PostPublisherUserBulkImportListCompletedRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`

	// OrderBy Field to order by
	OrderBy *PostPublisherUserBulkImportListCompletedRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherUserBulkImportListCompletedRequestOrderDirection `json:"order_direction,omitempty"`
}

// PostPublisherUserBulkImportListCompletedRequestOrderBy Field to order by
type PostPublisherUserBulkImportListCompletedRequestOrderBy string

// PostPublisherUserBulkImportListCompletedRequestOrderDirection Order direction (asc/desc)
type PostPublisherUserBulkImportListCompletedRequestOrderDirection string

// PostPublisherUserBulkImportListProcessingRequest defines model for PostPublisherUserBulkImportListProcessingRequest.
type PostPublisherUserBulkImportListProcessingRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`
}

// PostPublisherUserCreateError defines model for PostPublisherUserCreateError.
type PostPublisherUserCreateError struct {
	// Code - 2002: Invalid email.
	//
	// - 2004: User not found
	//
	// - 2000: User already exists.
	//
	// - 2001: Invalid uid
	//
	// - 2: Access denied
	//
	Code             PostPublisherUserCreateErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// PostPublisherUserCreateErrorCode - 2002: Invalid email.
//
// - 2004: User not found
//
// - 2000: User already exists.
//
// - 2001: Invalid uid
//
// - 2: Access denied
type PostPublisherUserCreateErrorCode int

// PostPublisherUserCreateRequest defines model for PostPublisherUserCreateRequest.
type PostPublisherUserCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CreateFromExternal Create the user from an external source
	CreateFromExternal *bool `json:"create_from_external,omitempty"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserDisableRequest defines model for PostPublisherUserDisableRequest.
type PostPublisherUserDisableRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserGetError defines model for PostPublisherUserGetError.
type PostPublisherUserGetError struct {
	// Code - 2: Access denied
	//
	// - 2004: User not found
	//
	Code             PostPublisherUserGetErrorCode `json:"code"`
	LocalizedMessage *string                       `json:"localizedMessage,omitempty"`
	Message          *string                       `json:"message,omitempty"`
}

// PostPublisherUserGetErrorCode - 2: Access denied
//
// - 2004: User not found
type PostPublisherUserGetErrorCode int

// PostPublisherUserGetRequest defines model for PostPublisherUserGetRequest.
type PostPublisherUserGetRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Disabled Whether the object is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserListAccessesError defines model for PostPublisherUserListAccessesError.
type PostPublisherUserListAccessesError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserListAccessesErrorCode `json:"code"`
	LocalizedMessage *string                                `json:"localizedMessage,omitempty"`
	Message          *string                                `json:"message,omitempty"`
}

// PostPublisherUserListAccessesErrorCode - 2: Access denied
type PostPublisherUserListAccessesErrorCode int

// PostPublisherUserListAccessesRequest defines model for PostPublisherUserListAccessesRequest.
type PostPublisherUserListAccessesRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Disabled Whether the object is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// HasAccess Whether the user has active access
	HasAccess *bool `json:"has_access,omitempty"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results
	Offset int32 `json:"offset"`

	// Q Search value
	Q *string `json:"q,omitempty"`
}

// PostPublisherUserListError defines model for PostPublisherUserListError.
type PostPublisherUserListError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserListErrorCode `json:"code"`
	LocalizedMessage *string                        `json:"localizedMessage,omitempty"`
	Message          *string                        `json:"message,omitempty"`
}

// PostPublisherUserListErrorCode - 2: Access denied
type PostPublisherUserListErrorCode int

// PostPublisherUserListRequest defines model for PostPublisherUserListRequest.
type PostPublisherUserListRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Disabled Whether the object is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// Esdebug Allows to make a request to elasticsearch forcefully without checking the settings
	Esdebug *bool `json:"esdebug,omitempty"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Offset Offset from which to start returning results. For 10,001 users of more, leave offset empty and use search_after instead.
	Offset int32 `json:"offset"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// SearchAfter NOT IN USE. The last UID of the previous request, empty for the first request.
	SearchAfter *string `json:"search_after,omitempty"`
}

// PostPublisherUserNoteCreateError defines model for PostPublisherUserNoteCreateError.
type PostPublisherUserNoteCreateError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             PostPublisherUserNoteCreateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherUserNoteCreateErrorCode - 2: Access denied
//
// - 404: Not found
type PostPublisherUserNoteCreateErrorCode int

// PostPublisherUserNoteCreateRequest defines model for PostPublisherUserNoteCreateRequest.
type PostPublisherUserNoteCreateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Content The note content
	Content string `json:"content"`

	// Readonly Prevent editing or deleting
	Readonly *bool `json:"readonly,omitempty"`

	// Uid The user ID
	Uid string `json:"uid"`
}

// PostPublisherUserNoteUpdateError defines model for PostPublisherUserNoteUpdateError.
type PostPublisherUserNoteUpdateError struct {
	// Code - 2: Access denied
	//
	// - 404: Not found
	//
	Code             PostPublisherUserNoteUpdateErrorCode `json:"code"`
	LocalizedMessage *string                              `json:"localizedMessage,omitempty"`
	Message          *string                              `json:"message,omitempty"`
}

// PostPublisherUserNoteUpdateErrorCode - 2: Access denied
//
// - 404: Not found
type PostPublisherUserNoteUpdateErrorCode int

// PostPublisherUserNoteUpdateRequest defines model for PostPublisherUserNoteUpdateRequest.
type PostPublisherUserNoteUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Content The note content
	Content string `json:"content"`

	// Readonly Prevent editing or deleting
	Readonly *bool `json:"readonly,omitempty"`

	// UserNoteId The note ID
	UserNoteId string `json:"user_note_id"`
}

// PostPublisherUserRegisterError defines model for PostPublisherUserRegisterError.
type PostPublisherUserRegisterError struct {
	// Code - 2: Access denied
	//
	// - 2000: User already exists.
	//
	// - 2002: Invalid email.
	//
	// - 600: App not configured to create users
	//
	Code             PostPublisherUserRegisterErrorCode `json:"code"`
	LocalizedMessage *string                            `json:"localizedMessage,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// PostPublisherUserRegisterErrorCode - 2: Access denied
//
// - 2000: User already exists.
//
// - 2002: Invalid email.
//
// - 600: App not configured to create users
type PostPublisherUserRegisterErrorCode int

// PostPublisherUserRegisterRequest defines model for PostPublisherUserRegisterRequest.
type PostPublisherUserRegisterRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Email The user's email address (single)
	Email *string `json:"email,omitempty"`

	// FirstName The user's first name
	FirstName *string `json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `json:"last_name,omitempty"`
}

// PostPublisherUserSearchError defines model for PostPublisherUserSearchError.
type PostPublisherUserSearchError struct {
	// Code - 2: Access denied
	//
	Code             PostPublisherUserSearchErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// PostPublisherUserSearchErrorCode - 2: Access denied
type PostPublisherUserSearchErrorCode int

// PostPublisherUserSearchRequest defines model for PostPublisherUserSearchRequest.
type PostPublisherUserSearchRequest struct {
	// AccessFrom Finds users who have any ACTIVE access from this date
	AccessFrom *int `json:"access_from,omitempty"`

	// AccessToResources Comma-separated list of Finds users who have access to these resources (enter the resource IDs here)
	AccessToResources *string `json:"access_to_resources,omitempty"`

	// AccessUntil Finds users who have any access until this date
	AccessUntil *int `json:"access_until,omitempty"`

	// ActiveSubscriptionToResources Comma-separated list of Finds users who have active subscriptions to these resources (enter the RIDs here)
	ActiveSubscriptionToResources *string `json:"active_subscription_to_resources,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// BillingFailureFrom Finds users who had problems with auto renewal of subscriptions on or after this date
	BillingFailureFrom *int `json:"billing_failure_from,omitempty"`

	// BillingFailureUntil Finds users who had problems with auto renewal of a subscription on or before this date
	BillingFailureUntil *int `json:"billing_failure_until,omitempty"`

	// ConsentChecked Finds users who have checked consents
	ConsentChecked *bool `json:"consent_checked,omitempty"`

	// ConsentHasData Finds users who accepted any consents; if this parameter is FALSE, selected_consents_map and consent_has_data are ignored
	ConsentHasData *bool `json:"consent_has_data,omitempty"`

	// ConvertedTermFrom Finds users converted on any term from this date
	ConvertedTermFrom *int `json:"converted_term_from,omitempty"`

	// ConvertedTermSharingType Finds users who converted on any term and have this sharing type
	ConvertedTermSharingType *PostPublisherUserSearchRequestConvertedTermSharingType `json:"converted_term_sharing_type,omitempty"`

	// ConvertedTermTypes Comma-separated list of Finds users who converted on specific types of terms: 0 (N/A), 1 (payment), 2 (ad view), 3 (registration), 4 (newsletter), 5 (external), 6 (custom), 7 (access granted), and 8 (gift)
	ConvertedTermTypes *PostPublisherUserSearchRequestConvertedTermTypes `json:"converted_term_types,omitempty"`

	// ConvertedTermUntil Finds users who converted on any term until this date
	ConvertedTermUntil *int `json:"converted_term_until,omitempty"`

	// ConvertedTerms Comma-separated list of Finds users who have converted on these terms (enter the term IDs here)
	ConvertedTerms *string `json:"converted_terms,omitempty"`

	// CreditCardWillExpire Finds users whose cards will expire on these dates
	CreditCardWillExpire *string `json:"credit_card_will_expire,omitempty"`

	// CustomFields Finds users with these custom fields
	CustomFields *string `json:"custom_fields,omitempty"`

	// Data Defines the search data
	Data *string `json:"data,omitempty"`

	// DataType Comma-separated list of Defines the search field
	DataType *string `json:"data_type,omitempty"`

	// Email Finds users whose emails contain this keyword
	Email *string `json:"email,omitempty"`

	// EmailConfirmationState Finds users with a specific email confirmation state
	EmailConfirmationState *PostPublisherUserSearchRequestEmailConfirmationState `json:"email_confirmation_state,omitempty"`

	// Esdebug Allows to make a request to elasticsearch forcefully without checking the settings
	Esdebug *bool `json:"esdebug,omitempty"`

	// ExcludeCfMetadata Whether to exclude custom fields metadata
	ExcludeCfMetadata *bool `json:"exclude_cf_metadata,omitempty"`

	// HadBillingFailure Finds users who had any problems with billing.
	HadBillingFailure *bool `json:"had_billing_failure,omitempty"`

	// HasAccess Finds users who currently have any type of access (access that is not expired or will never expire)
	HasAccess *bool `json:"has_access,omitempty"`

	// HasActiveSubscription Finds users who have an active subscription; set the field to TRUE  to get only active users
	HasActiveSubscription *bool `json:"has_active_subscription,omitempty"`

	// HasAnySubscriptions Finds users with subscriptions, including expired and canceled ones
	HasAnySubscriptions *bool `json:"has_any_subscriptions,omitempty"`

	// HasConversionTerm Finds users who have converted on any term
	HasConversionTerm *bool `json:"has_conversion_term,omitempty"`

	// HasConversionTermType Finds users who have conversion terms for these term types
	HasConversionTermType *bool `json:"has_conversion_term_type,omitempty"`

	// HasData Finds users with any data
	HasData *bool `json:"has_data,omitempty"`

	// HasEmailConfirmationRequired Finds users who either validated their email
	HasEmailConfirmationRequired *bool `json:"has_emailConfirmation_required,omitempty"`

	// HasLastAccessTime Finds users who have some last access time
	HasLastAccessTime *bool `json:"has_last_access_time,omitempty"`

	// HasLicensingContractRedemptions Finds users who redeemed a licensing contract
	HasLicensingContractRedemptions *bool `json:"has_licensing_contract_redemptions,omitempty"`

	// HasPayment Finds users who have made any payment. Refunded payments are not taken into account. So if user had a payment and refunded it, he will not presented in the result list.
	HasPayment *bool `json:"has_payment,omitempty"`

	// HasReceivedResponseInquiry Finds users with inquiries that were responded to
	HasReceivedResponseInquiry *bool `json:"has_received_response_inquiry,omitempty"`

	// HasRedeemedPromotion Finds users who have ever used promo codes
	HasRedeemedPromotion *bool `json:"has_redeemed_promotion,omitempty"`

	// HasResolvedInquiry Finds users with resolved inquiries
	HasResolvedInquiry *bool `json:"has_resolved_inquiry,omitempty"`

	// HasSubmittedInquiry Finds users who submitted inquiries
	HasSubmittedInquiry *bool `json:"has_submitted_inquiry,omitempty"`

	// HasSubscriptionStarts Finds users who have a started subscription
	HasSubscriptionStarts *bool `json:"has_subscription_starts,omitempty"`

	// HasSubscriptionWillExpire Finds users who have a subscription that will expire
	HasSubscriptionWillExpire *bool `json:"has_subscription_will_expire,omitempty"`

	// HasSubscriptionWillRenew Finds users who have a subscription with enabled auto renewal
	HasSubscriptionWillRenew *bool `json:"has_subscription_will_renew,omitempty"`

	// HasTrialPeriod Finds users who has ever used trial period
	HasTrialPeriod *bool `json:"has_trial_period,omitempty"`

	// HasUnresolvedInquiry Finds users with unresolved inquiries
	HasUnresolvedInquiry *bool `json:"has_unresolved_inquiry,omitempty"`

	// IncludeTrialRedemptions Finds users who redeemed a promotion, including promotions redeemed when signing up for a free trial; in such cases, the promotion was not applied within the period of your search but was applied as soon as the trial period ended
	IncludeTrialRedemptions *bool `json:"include_trial_redemptions,omitempty"`

	// InvertCreditCardWillExpire Finds users whose cards will expire in selected dates
	InvertCreditCardWillExpire *bool `json:"invert_credit_card_will_expire,omitempty"`

	// LastAccessTimeFrom Finds users whose last access time was on or after this date
	LastAccessTimeFrom *int `json:"last_access_time_from,omitempty"`

	// LastAccessTimeUntil Finds users whose last access time was on or before this date
	LastAccessTimeUntil *int `json:"last_access_time_until,omitempty"`

	// LicensingContractRedeemedFrom Finds users who redeemed licensing contracts on or after this date
	LicensingContractRedeemedFrom *int `json:"licensing_contract_redeemed_from,omitempty"`

	// LicensingContractRedeemedUntil Finds users who redeemed licensing contracts on or before this date
	LicensingContractRedeemedUntil *int `json:"licensing_contract_redeemed_until,omitempty"`

	// Limit Maximum index of returned results
	Limit int32 `json:"limit"`

	// Name Finds users whose names start with this keyword
	Name *string `json:"name,omitempty"`

	// Offset Offset from which to start returning results. For 10,001 users of more, leave offset empty and use search_after instead.
	Offset int32 `json:"offset"`

	// OrderBy Field to order by
	OrderBy *PostPublisherUserSearchRequestOrderBy `json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *PostPublisherUserSearchRequestOrderDirection `json:"order_direction,omitempty"`

	// PaymentMethods Comma-separated list of Find users who have used specific payment methods.The accepted values for each type of payment method: 1 (PayPal), 4 (BrainTree), 8 (AmazonMWS), 11 (PayPalBT), 19 (EdgilPayway).
	PaymentMethods *int `json:"payment_methods,omitempty"`

	// Q Search value
	Q *string `json:"q,omitempty"`

	// ReceivedResponseFrom Finds users with inquiries responded to on or after this date
	ReceivedResponseFrom *int `json:"received_response_from,omitempty"`

	// ReceivedResponseUntil Finds users with inquiries responded to on or before this date
	ReceivedResponseUntil *int `json:"received_response_until,omitempty"`

	// RedeemedPromotionFrom Finds users who redeemed on any promotion on or after this date
	RedeemedPromotionFrom *int `json:"redeemed_promotion_from,omitempty"`

	// RedeemedPromotionUntil Finds users who have redeemed on any promotion on or before this date
	RedeemedPromotionUntil *int `json:"redeemed_promotion_until,omitempty"`

	// RedeemedPromotions Comma-separated list of Finds users who redeemed these promotions (enter promotion IDs from "Manage→Promotions" in Piano Dashboard). "has_redeemed_promotions" must be "TRUE".
	RedeemedPromotions *string `json:"redeemed_promotions,omitempty"`

	// RegisteredFrom Finds users registered from this date
	RegisteredFrom *int `json:"registered_from,omitempty"`

	// RegisteredUntil Finds users  registered until this date
	RegisteredUntil *int `json:"registered_until,omitempty"`

	// ResolvedInquiryFrom Finds users with inquiries resolved on or after this date
	ResolvedInquiryFrom *int `json:"resolved_inquiry_from,omitempty"`

	// ResolvedInquiryUntil Finds users with inquiries resolved on or before this date
	ResolvedInquiryUntil *int `json:"resolved_inquiry_until,omitempty"`

	// SearchAfter NOT IN USE. The last UID of the previous request, empty for the first request.
	SearchAfter *string `json:"search_after,omitempty"`

	// SelectedConsentsMap Comma-separated list of Finds users with these consents (enter the consent public IDs here); the specified values will be used along with the consent_checked parameter
	SelectedConsentsMap *string `json:"selected_consents_map,omitempty"`

	// SelectedContracts Comma-separated list of Finds users who redeemed licenses with these contracts (enter the term IDs here).
	SelectedContracts *string `json:"selected_contracts,omitempty"`

	// SelectedLicensees Comma-separated list of Finds users who redeemed licensing contracts with these licensees (enter the license IDs here)
	SelectedLicensees *string `json:"selected_licensees,omitempty"`

	// Source The data source for user searching: VX or CF (ID custom fields)
	Source *PostPublisherUserSearchRequestSource `json:"source,omitempty"`

	// SpentFromDate Finds users who made a purchase on or after this date
	SpentFromDate *int `json:"spent_from_date,omitempty"`

	// SpentMoneyCurrency Selects the currency of the payments to take into account; formatted as per ISO 4217 (Ex: USD).
	SpentMoneyCurrency *string `json:"spent_money_currency,omitempty"`

	// SpentMoneyFrom Finds users who spent more than this sum across all of their purchases and conversions; this value is formatted as decimal (e.g., 10.03. to represent $10.03 or £10.03 or €10.03)
	SpentMoneyFrom *float32 `json:"spent_money_from,omitempty"`

	// SpentMoneyUntil Finds users who spent less than this sum across all of their purchases and conversions; this value is formatted as a decimal (e.g., 10.03. to represent $10.03 or £10.03 or €10.03)
	SpentMoneyUntil *float32 `json:"spent_money_until,omitempty"`

	// SpentUntilDate Finds users who made a purchase on or before this date
	SpentUntilDate *int `json:"spent_until_date,omitempty"`

	// SubmittedInquiryFrom Finds users with inquiries submitted on or after this date
	SubmittedInquiryFrom *int `json:"submitted_inquiry_from,omitempty"`

	// SubmittedInquiryUntil Finds users with inquiries submitted on or before this date
	SubmittedInquiryUntil *int `json:"submitted_inquiry_until,omitempty"`

	// SubscriptionExpireFrom Finds users who have a subscription expiring on or after this date; this parameter needs the has_subscription_will_expire parameter to be TRUE
	SubscriptionExpireFrom *int `json:"subscription_expire_from,omitempty"`

	// SubscriptionExpireUntil Finds users who have any subscription expiring on or before this date; this parameter needs the has_subscription_will_expire parameter to be TRUE
	SubscriptionExpireUntil *int `json:"subscription_expire_until,omitempty"`

	// SubscriptionRenewFrom Finds users who have a subscription renewing on or after this date; this parameter needs the has_subscription_will_renew parameter to be TRUE
	SubscriptionRenewFrom *int `json:"subscription_renew_from,omitempty"`

	// SubscriptionRenewUntil Finds users who have a subscription renewing on or before this date; this parameter needs the has_subscription_will_renew parameter to be TRUE
	SubscriptionRenewUntil *int `json:"subscription_renew_until,omitempty"`

	// SubscriptionStartFrom Finds users who have a subscription starting on or after this date; this parameter needs the has_subscription_starts parameter to be TRUE
	SubscriptionStartFrom *int `json:"subscription_start_from,omitempty"`

	// SubscriptionStartUntil Finds users who have any subscription that started on or before this date; this parameter needs the has_subscription_starts parameter to be TRUE
	SubscriptionStartUntil *int `json:"subscription_start_until,omitempty"`

	// TrialExpireFrom Finds users who have any trial subscription expiring on or after this date.
	TrialExpireFrom *int `json:"trial_expire_from,omitempty"`

	// TrialExpireUntil Finds users who have a trial subscription expiring on or after this date
	TrialExpireUntil *int `json:"trial_expire_until,omitempty"`

	// TrialPeriodIsActive Finds users who currently have trial subscriptions
	TrialPeriodIsActive *bool `json:"trial_period_is_active,omitempty"`

	// Uid The user ID
	Uid *string `json:"uid,omitempty"`

	// UpiExtCustomerId Finds users who have these external customer IDs
	UpiExtCustomerId *string `json:"upi_ext_customer_id,omitempty"`
}

// PostPublisherUserSearchRequestConvertedTermSharingType Finds users who converted on any term and have this sharing type
type PostPublisherUserSearchRequestConvertedTermSharingType string

// PostPublisherUserSearchRequestConvertedTermTypes Comma-separated list of Finds users who converted on specific types of terms: 0 (N/A), 1 (payment), 2 (ad view), 3 (registration), 4 (newsletter), 5 (external), 6 (custom), 7 (access granted), and 8 (gift)
type PostPublisherUserSearchRequestConvertedTermTypes string

// PostPublisherUserSearchRequestEmailConfirmationState Finds users with a specific email confirmation state
type PostPublisherUserSearchRequestEmailConfirmationState string

// PostPublisherUserSearchRequestOrderBy Field to order by
type PostPublisherUserSearchRequestOrderBy string

// PostPublisherUserSearchRequestOrderDirection Order direction (asc/desc)
type PostPublisherUserSearchRequestOrderDirection string

// PostPublisherUserSearchRequestSource The data source for user searching: VX or CF (ID custom fields)
type PostPublisherUserSearchRequestSource string

// PostPublisherUserUpdateError defines model for PostPublisherUserUpdateError.
type PostPublisherUserUpdateError struct {
	// Code - 2: Access denied
	//
	// - 2001: Invalid uid
	//
	// - 2002: Invalid email.
	//
	Code             PostPublisherUserUpdateErrorCode `json:"code"`
	LocalizedMessage *string                          `json:"localizedMessage,omitempty"`
	Message          *string                          `json:"message,omitempty"`
}

// PostPublisherUserUpdateErrorCode - 2: Access denied
//
// - 2001: Invalid uid
//
// - 2002: Invalid email.
type PostPublisherUserUpdateErrorCode int

// PostPublisherVoucherResendError defines model for PostPublisherVoucherResendError.
type PostPublisherVoucherResendError struct {
	// Code - 1: Internal error
	//
	// - 2: Access denied
	//
	Code             PostPublisherVoucherResendErrorCode `json:"code"`
	LocalizedMessage *string                             `json:"localizedMessage,omitempty"`
	Message          *string                             `json:"message,omitempty"`
}

// PostPublisherVoucherResendErrorCode - 1: Internal error
//
// - 2: Access denied
type PostPublisherVoucherResendErrorCode int

// PostPublisherVoucherResendRequest defines model for PostPublisherVoucherResendRequest.
type PostPublisherVoucherResendRequest struct {
	// Aid The application ID
	Aid     string  `json:"aid"`
	Message *string `json:"message,omitempty"`

	// PubId The public ID of the voucher
	PubId         string  `json:"pub_id"`
	RecipientMail string  `json:"recipientMail"`
	RecipientName *string `json:"recipientName,omitempty"`
	SendDate      int     `json:"sendDate"`
}

// PostPublisherWebhookSettingsUpdateError defines model for PostPublisherWebhookSettingsUpdateError.
type PostPublisherWebhookSettingsUpdateError struct {
	// Code - 2: Access denied
	//
	// - 4004: Invalid webhook type.
	//
	Code             PostPublisherWebhookSettingsUpdateErrorCode `json:"code"`
	LocalizedMessage *string                                     `json:"localizedMessage,omitempty"`
	Message          *string                                     `json:"message,omitempty"`
}

// PostPublisherWebhookSettingsUpdateErrorCode - 2: Access denied
//
// - 4004: Invalid webhook type.
type PostPublisherWebhookSettingsUpdateErrorCode int

// PostPublisherWebhookSettingsUpdateRequest defines model for PostPublisherWebhookSettingsUpdateRequest.
type PostPublisherWebhookSettingsUpdateRequest struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Configs The webhook configs. List of WebhookConfig in JSON format
	Configs *string `json:"configs,omitempty"`

	// Enabled Whether the webhook endpoint is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Url The webhook endpoint URL
	Url *string `json:"url,omitempty"`
}

// PromoCode defines model for PromoCode.
type PromoCode struct {
	// AssignedEmail The assigned email
	AssignedEmail *string `json:"assigned_email"`

	// ClaimedDate The date when the promotion was claimed
	ClaimedDate *int  `json:"claimed_date,omitempty"`
	ClaimedUser *User `json:"claimed_user,omitempty"`

	// Code The promo code itself
	Code string `json:"code"`

	// CreateBy The user who created the object
	CreateBy string `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// LastOriginalPrice The promo code last original price
	LastOriginalPrice *string `json:"last_original_price"`

	// PromoCodeId The promo code ID
	PromoCodeId string `json:"promo_code_id"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// ReserveDate The promo code reserve_date
	ReserveDate *int `json:"reserve_date,omitempty"`

	// State The promo code state
	State PromoCodeState `json:"state"`

	// StateValue The promo code state value
	StateValue PromoCodeStateValue `json:"state_value"`

	// UpdateBy The last user to update the object
	UpdateBy string `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// PromoCodeState The promo code state
type PromoCodeState string

// PromoCodeStateValue The promo code state value
type PromoCodeStateValue string

// PromoCodeArrayResult defines model for PromoCodeArrayResult.
type PromoCodeArrayResult struct {
	Data []PromoCode `json:"data"`
}

// PromoCodeResult defines model for PromoCodeResult.
type PromoCodeResult struct {
	PromoCode PromoCode `json:"PromoCode"`
}

// Promotion defines model for Promotion.
type Promotion struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// ApplyToAllBillingPeriods Whether to apply the promotion discount to all billing periods ("TRUE")or the first billing period only ("FALSE")
	ApplyToAllBillingPeriods bool `json:"apply_to_all_billing_periods"`

	// BillingPeriodLimit Promotion discount applies to number of billing periods
	BillingPeriodLimit int32 `json:"billing_period_limit"`

	// CanBeAppliedOnRenewal Whether the promotion can be applied on renewal
	CanBeAppliedOnRenewal bool `json:"can_be_applied_on_renewal"`

	// CreateBy The user who created the object
	CreateBy string `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Discount The promotion discount, formatted
	Discount string `json:"discount"`

	// DiscountAmount The promotion discount
	DiscountAmount float64 `json:"discount_amount"`

	// DiscountCurrency The promotion discount currency
	DiscountCurrency string `json:"discount_currency"`

	// DiscountType The promotion discount type
	DiscountType PromotionDiscountType `json:"discount_type"`

	// EndDate The end date
	EndDate           int                      `json:"end_date"`
	FixedDiscountList []PromotionFixedDiscount `json:"fixed_discount_list"`

	// FixedPromotionCode The fixed value for all the promotion codes
	FixedPromotionCode *string `json:"fixed_promotion_code"`

	// Name The promotion name
	Name string `json:"name"`

	// NeverAllowZero Never allow the value of checkout to be zero
	NeverAllowZero bool `json:"never_allow_zero"`

	// NewCustomersOnly Whether the promotion allows new customers only
	NewCustomersOnly bool `json:"new_customers_only"`

	// PercentageDiscount The promotion discount, percentage
	PercentageDiscount float64 `json:"percentage_discount"`

	// PromotionCodePrefix The prefix for all the codes
	PromotionCodePrefix *string `json:"promotion_code_prefix"`

	// PromotionId The promotion ID
	PromotionId string `json:"promotion_id"`

	// StartDate The start date.
	StartDate int `json:"start_date"`

	// Status The promotion status
	Status PromotionStatus `json:"status"`

	// TermDependencyType The type of dependency to terms
	TermDependencyType PromotionTermDependencyType `json:"term_dependency_type"`

	// UnlimitedUses Whether to allow unlimited uses
	UnlimitedUses bool `json:"unlimited_uses"`

	// UpdateBy The last user to update the object
	UpdateBy string `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`

	// Uses How many times the promotion has been used
	Uses int32 `json:"uses"`

	// UsesAllowed The number of uses allowed by the promotion
	UsesAllowed *int32 `json:"uses_allowed"`
}

// PromotionDiscountType The promotion discount type
type PromotionDiscountType string

// PromotionStatus The promotion status
type PromotionStatus string

// PromotionTermDependencyType The type of dependency to terms
type PromotionTermDependencyType string

// PromotionArrayResult defines model for PromotionArrayResult.
type PromotionArrayResult struct {
	Promotions []Promotion `json:"promotions"`
}

// PromotionFixedDiscount defines model for PromotionFixedDiscount.
type PromotionFixedDiscount struct {
	// Amount The fixed discount amount
	Amount string `json:"amount"`

	// AmountValue The fixed discount amount value
	AmountValue float64 `json:"amount_value"`

	// Currency The currency of the fixed discount
	Currency string `json:"currency"`

	// FixedDiscountId The fixed discount ID
	FixedDiscountId string `json:"fixed_discount_id"`
}

// PromotionFixedDiscountResult defines model for PromotionFixedDiscountResult.
type PromotionFixedDiscountResult struct {
	PromotionFixedDiscount PromotionFixedDiscount `json:"PromotionFixedDiscount"`
}

// PromotionResult defines model for PromotionResult.
type PromotionResult struct {
	Promotion Promotion `json:"promotion"`
}

// RedemptionPage defines model for RedemptionPage.
type RedemptionPage struct {
	// Enabled Whether the property is enabled
	Enabled bool `json:"enabled"`
}

// Region defines model for Region.
type Region struct {
	// RegionCode The code of the country region
	RegionCode string `json:"region_code"`

	// RegionId The ID of the country region
	RegionId string `json:"region_id"`

	// RegionName The name of the country region
	RegionName string `json:"region_name"`
}

// RegionSimpleModel defines model for RegionSimpleModel.
type RegionSimpleModel struct {
	// PubId Public ID
	PubId string `json:"pub_id"`

	// RegionName The name of the country region
	RegionName string `json:"region_name"`
}

// Resource defines model for Resource.
type Resource struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BundleType The resource bundle type
	BundleType *ResourceBundleType `json:"bundle_type,omitempty"`

	// BundleTypeLabel The bundle type label
	BundleTypeLabel *ResourceBundleTypeLabel `json:"bundle_type_label,omitempty"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The resource description
	Description *string `json:"description"`

	// Disabled Whether the object is disabled
	Disabled bool `json:"disabled"`

	// ExternalId The external ID; defined by the client
	ExternalId *string `json:"external_id"`

	// ImageUrl The URL of the resource image
	ImageUrl *string `json:"image_url"`

	// IsFbiaResource Enable the resource for Facebook Subscriptions in Instant Articles
	IsFbiaResource bool `json:"is_fbia_resource"`

	// Name The name
	Name string `json:"name"`

	// PublishDate The publish date
	PublishDate int `json:"publish_date"`

	// PurchaseUrl The URL of the purchase page
	PurchaseUrl *string `json:"purchase_url"`

	// ResourceUrl The URL of the resource
	ResourceUrl *string `json:"resource_url"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// Type The type of the resource (0: Standard, 4: Bundle)
	Type ResourceType `json:"type"`

	// TypeLabel The resource type label ("Standard" or "Bundle")
	TypeLabel ResourceTypeLabel `json:"type_label"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// ResourceBundleType The resource bundle type
type ResourceBundleType string

// ResourceBundleTypeLabel The bundle type label
type ResourceBundleTypeLabel string

// ResourceType The type of the resource (0: Standard, 4: Bundle)
type ResourceType string

// ResourceTypeLabel The resource type label ("Standard" or "Bundle")
type ResourceTypeLabel string

// ResourceArrayResult defines model for ResourceArrayResult.
type ResourceArrayResult struct {
	Resources []Resource `json:"resources"`
}

// ResourceDto defines model for ResourceDto.
type ResourceDto struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BundleType The resource bundle type
	BundleType ResourceDtoBundleType `json:"bundle_type"`

	// BundleTypeLabel The bundle type label
	BundleTypeLabel ResourceDtoBundleTypeLabel `json:"bundle_type_label"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Description The resource description
	Description string `json:"description"`

	// Disabled Whether the object is disabled
	Disabled bool `json:"disabled"`

	// ExternalId The external ID; defined by the client
	ExternalId string `json:"external_id"`

	// ImageUrl The URL of the resource image
	ImageUrl string `json:"image_url"`

	// IsFbiaResource Enable the resource for Facebook Subscriptions in Instant Articles
	IsFbiaResource bool `json:"is_fbia_resource"`

	// Name The name
	Name string `json:"name"`

	// PublishDate The publish date
	PublishDate int `json:"publish_date"`

	// PurchaseUrl The URL of the purchase page
	PurchaseUrl string `json:"purchase_url"`

	// ResourceUrl The URL of the resource
	ResourceUrl string `json:"resource_url"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// Type The type of the resource (0: Standard, 4: Bundle)
	Type ResourceDtoType `json:"type"`

	// TypeLabel The resource type label ("Standard" or "Bundle")
	TypeLabel ResourceDtoTypeLabel `json:"type_label"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// ResourceDtoBundleType The resource bundle type
type ResourceDtoBundleType string

// ResourceDtoBundleTypeLabel The bundle type label
type ResourceDtoBundleTypeLabel string

// ResourceDtoType The type of the resource (0: Standard, 4: Bundle)
type ResourceDtoType string

// ResourceDtoTypeLabel The resource type label ("Standard" or "Bundle")
type ResourceDtoTypeLabel string

// ResourceResult defines model for ResourceResult.
type ResourceResult struct {
	Resource Resource `json:"resource"`
}

// ResourceStats defines model for ResourceStats.
type ResourceStats struct {
	// NumBundles The number of bundles the resource has
	NumBundles int32 `json:"num_bundles"`

	// NumCustomers The number of customers the resource has
	NumCustomers int32 `json:"num_customers"`

	// NumTerms The number of terms the resource has
	NumTerms int32 `json:"num_terms"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// Tags The tags of the page
	Tags string `json:"tags"`
}

// ResourceStatsArrayResult defines model for ResourceStatsArrayResult.
type ResourceStatsArrayResult struct {
	ResourceStats []ResourceStats `json:"ResourceStats"`
}

// ResourceTag defines model for ResourceTag.
type ResourceTag struct {
	// Name The name
	Name string `json:"name"`

	// ResourceTagId The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId string `json:"resource_tag_id"`

	// Type The type
	Type ResourceTagType `json:"type"`
}

// ResourceTagType The type
type ResourceTagType string

// ResourceTagArrayResult defines model for ResourceTagArrayResult.
type ResourceTagArrayResult struct {
	ResourceTag []ResourceTag `json:"ResourceTag"`
}

// ResourceTagResult defines model for ResourceTagResult.
type ResourceTagResult struct {
	ResourceTag ResourceTag `json:"ResourceTag"`
}

// Result defines model for Result.
type Result struct {
	Error         *ErrorCode              `json:"error,omitempty"`
	ErrorAsString *string                 `json:"errorAsString,omitempty"`
	ErrorCodes    *ErrorCodes             `json:"errorCodes,omitempty"`
	Errors        *[]ErrorCode            `json:"errors,omitempty"`
	Ok            *bool                   `json:"ok,omitempty"`
	OrFail        *map[string]interface{} `json:"orFail,omitempty"`
}

// ResultResult defines model for ResultResult.
type ResultResult struct {
	Result Result `json:"Result"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// Name The schedule name
	Name    string   `json:"name"`
	Periods []Period `json:"periods"`

	// ScheduleId The schedule ID
	ScheduleId string `json:"schedule_id"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`
}

// ScheduleArrayResult defines model for ScheduleArrayResult.
type ScheduleArrayResult struct {
	Schedule []Schedule `json:"Schedule"`
}

// SchedulePeriod defines model for SchedulePeriod.
type SchedulePeriod struct {
	// BeginDate The date when the period begins
	BeginDate int `json:"begin_date"`

	// EndDate The date when the period ends
	EndDate int `json:"end_date"`

	// Name The period name
	Name string `json:"name"`

	// PeriodId The period ID
	PeriodId string `json:"period_id"`

	// SellDate The sell date of the period
	SellDate int `json:"sell_date"`

	// Status The status of the contract schedule period
	Status SchedulePeriodStatus `json:"status"`
}

// SchedulePeriodStatus The status of the contract schedule period
type SchedulePeriodStatus string

// SchedulePeriodArrayResult defines model for SchedulePeriodArrayResult.
type SchedulePeriodArrayResult struct {
	SchedulePeriod []SchedulePeriod `json:"SchedulePeriod"`
}

// ScheduleResult defines model for ScheduleResult.
type ScheduleResult struct {
	Schedule Schedule `json:"Schedule"`
}

// SharedSubscription defines model for SharedSubscription.
type SharedSubscription struct {
	// RedeemedTokens The number of redeemed tokens
	RedeemedTokens int32                     `json:"redeemed_tokens"`
	SharedAccounts []UserSubscriptionAccount `json:"shared_accounts"`

	// SubscriptionId Subscription id
	SubscriptionId string `json:"subscription_id"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TotalTokens total tokens
	TotalTokens int32 `json:"total_tokens"`

	// Uid The user's ID
	Uid string `json:"uid"`

	// UnusedTokens The number of unused tokens
	UnusedTokens int32 `json:"unused_tokens"`
}

// SharedSubscriptionArrayResult defines model for SharedSubscriptionArrayResult.
type SharedSubscriptionArrayResult struct {
	SharedSubscription []SharedSubscription `json:"SharedSubscription"`
}

// StringArrayResult defines model for StringArrayResult.
type StringArrayResult struct {
	Data []string `json:"data"`
}

// StringResult defines model for StringResult.
type StringResult struct {
	Data string `json:"data"`
}

// SubscriptionLogItem defines model for SubscriptionLogItem.
type SubscriptionLogItem struct {
	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// ChildAccess The number of child accesses
	ChildAccess string `json:"child_access"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// NextBillDate The next bill date of the subscription
	NextBillDate int `json:"next_bill_date"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// StartDate The start date.
	StartDate int `json:"start_date"`

	// StatusNameInReports The subscription status name in reports
	StatusNameInReports string `json:"status_name_in_reports"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
	Term           Term   `json:"term"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// SubscriptionLogItemArrayResult defines model for SubscriptionLogItemArrayResult.
type SubscriptionLogItemArrayResult struct {
	SubscriptionLogItem []SubscriptionLogItem `json:"SubscriptionLogItem"`
}

// SubscriptionRestrictions defines model for SubscriptionRestrictions.
type SubscriptionRestrictions struct {
	// AllowActivateNow Whether the app is allowed to activate subscription manually having their activation date in the future
	AllowActivateNow bool `json:"allow_activate_now"`

	// AllowChangeNextBillDate Whether the app is allowed to change the next billing date of a subscription
	AllowChangeNextBillDate bool `json:"allow_change_next_bill_date"`

	// AllowEnableAutoRenew Whether the app can disable auto renew but cannot enable a previously disabled auto renew
	AllowEnableAutoRenew bool `json:"allow_enable_auto_renew"`

	// AllowFutureRenewals Whether the app is allowed to manually renew subscriptions having their next billing date in the future
	AllowFutureRenewals bool `json:"allow_future_renewals"`

	// AllowSchedulerRenewals Whether the app is allowed to manually run a scheduled renewal for a subscription
	AllowSchedulerRenewals bool `json:"allow_scheduler_renewals"`

	// AllowSwitchPaymentMethod Whether the app is allowed to change a user's payment method for a subscriptions
	AllowSwitchPaymentMethod bool `json:"allow_switch_payment_method"`

	// AllowVerifyNow Whether the app is allowed to manually verify subscriptions  having their next verification date in the future
	AllowVerifyNow bool `json:"allow_verify_now"`
}

// SubscriptionUpgradeStatus defines model for SubscriptionUpgradeStatus.
type SubscriptionUpgradeStatus struct {
	// BillingPlanFrom The "From" billing plan
	BillingPlanFrom string `json:"billing_plan_from"`

	// BillingPlanTo The "To" billing plan
	BillingPlanTo string `json:"billing_plan_to"`

	// ChangeDate The creation date of the user payment (the ISO 8601 format)
	ChangeDate string `json:"change_date"`

	// CreateDateFrom The date when the user applied Term Change FROM the term (can be retrieved with <a href = "https://docs.piano.io/api?endpoint=post~2F~2Fpublisher~2Fterm~2Fchange~2FgetSubscriptionUpgradeStatus">publisher/term/change/getSubscriptionUpgradeStatus</a>)
	CreateDateFrom string `json:"create_date_from"`

	// CreateDateTo The date when the user applied Term Change TO the term (can be retrieved with <a href = "https://docs.piano.io/api?endpoint=post~2F~2Fpublisher~2Fterm~2Fchange~2FgetSubscriptionUpgradeStatus">publisher/term/change/getSubscriptionUpgradeStatus</a>)>
	CreateDateTo string `json:"create_date_to"`

	// ErrorMessage Term change subscription error message
	ErrorMessage string `json:"error_message"`

	// FromTermId The ID of the "From" term
	FromTermId string `json:"from_term_id"`

	// FromTermName The name of the "From" term
	FromTermName string `json:"from_term_name"`

	// ProrateAmount The actual upgrade cost excluding taxes: the unused money of the FROM term deducted from the TO term price
	ProrateAmount string `json:"prorate_amount"`

	// ProrateRefundAmount The refund amount in case of term downgrade
	ProrateRefundAmount string `json:"prorate_refund_amount"`

	// Status Term change subscription status
	Status SubscriptionUpgradeStatusStatus `json:"status"`

	// ToTermId The ID of the "To" term
	ToTermId string `json:"to_term_id"`

	// ToTermName The name of the "To" term
	ToTermName string `json:"to_term_name"`
}

// SubscriptionUpgradeStatusStatus Term change subscription status
type SubscriptionUpgradeStatusStatus int32

// SubscriptionUpgradeStatusResult defines model for SubscriptionUpgradeStatusResult.
type SubscriptionUpgradeStatusResult struct {
	SubscriptionUpgradeStatus SubscriptionUpgradeStatus `json:"SubscriptionUpgradeStatus"`
}

// TeamMember defines model for TeamMember.
type TeamMember struct {
	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// InvitationExpired Whether the invitation is expired
	InvitationExpired bool `json:"invitation_expired"`

	// LastLogin The last login stamp
	LastLogin int `json:"last_login"`

	// LastName The user's last name
	LastName    string   `json:"last_name"`
	Permissions []string `json:"permissions"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// TeamMemberArrayResult defines model for TeamMemberArrayResult.
type TeamMemberArrayResult struct {
	TeamMembers []TeamMember `json:"team_members"`
}

// TemplateConfig defines model for TemplateConfig.
type TemplateConfig struct {
	// BoilerplateType The boilerplate type
	BoilerplateType TemplateConfigBoilerplateType `json:"boilerplate_type"`

	// Content1Type HTML
	Content1Type string `json:"content1_type"`

	// Content1Value The content1 value
	Content1Value string `json:"content1_value"`

	// Content2Type CSS
	Content2Type string `json:"content2_type"`

	// Content2Value The content2 value
	Content2Value string `json:"content2_value"`

	// Content3Type JS/JSON
	Content3Type string `json:"content3_type"`

	// Content3Value The content3 value
	Content3Value string `json:"content3_value"`

	// HistoryList The template documentation (if any)
	HistoryList string `json:"history_list"`

	// Name The name
	Name string `json:"name"`

	// TemplateType The offer template type
	TemplateType TemplateConfigTemplateType `json:"template_type"`
}

// TemplateConfigBoilerplateType The boilerplate type
type TemplateConfigBoilerplateType string

// TemplateConfigTemplateType The offer template type
type TemplateConfigTemplateType string

// TemplateConfigResult defines model for TemplateConfigResult.
type TemplateConfigResult struct {
	TemplateConfig TemplateConfig `json:"TemplateConfig"`
}

// TemplateUserModel defines model for TemplateUserModel.
type TemplateUserModel struct {
	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// Term defines model for Term.
type Term struct {
	// AdviewAccessPeriod The access duration (deprecated)
	AdviewAccessPeriod *int32 `json:"adview_access_period,omitempty"`

	// AdviewVastUrl The VAST URL for adview_access_period (deprecated).
	AdviewVastUrl *string `json:"adview_vast_url,omitempty"`

	// Aid The application ID
	Aid string `json:"aid"`

	// AllowStartInFuture Allow start in the future
	AllowStartInFuture *bool `json:"allow_start_in_future,omitempty"`

	// BillingConfig The type of billing config
	BillingConfig string `json:"billing_config"`

	// BillingConfiguration A JSON value representing a list of the access periods with billing configurations (replaced with "payment_billing_plan(String)")
	BillingConfiguration *string            `json:"billing_configuration,omitempty"`
	ChangeOptions        []TermChangeOption `json:"change_options"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress bool `json:"collect_address"`

	// CollectShippingAddress Whether to collect a shipping address for this gift term
	CollectShippingAddress *bool `json:"collect_shipping_address,omitempty"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// CurrencySymbol The currency symbol
	CurrencySymbol string `json:"currency_symbol"`

	// CustomData The custom fields similar to those <a href="https://docs.piano.io/linked-term/#custom-data-section">filled in PD</a> on Linked term creation.
	CustomData *map[string]map[string]interface{} `json:"custom_data,omitempty"`

	// CustomDefaultAccessPeriod The default access period
	CustomDefaultAccessPeriod *int32 `json:"custom_default_access_period,omitempty"`

	// CustomRequireUser Whether a valid user is required to complete the term (deprecated)
	CustomRequireUser *bool           `json:"custom_require_user,omitempty"`
	DefaultCountry    *Country        `json:"default_country,omitempty"`
	DeliveryZone      *[]DeliveryZone `json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description string `json:"description"`

	// EvtCdsProductId The <a href="https://docs.piano.io/external-service-term/#externalcds">CDS</a> product ID.
	EvtCdsProductId *string `json:"evt_cds_product_id,omitempty"`

	// EvtFixedTimeAccessPeriod The period to grant access for (in days)
	EvtFixedTimeAccessPeriod *int32 `json:"evt_fixed_time_access_period,omitempty"`

	// EvtGooglePlayProductId Google Play's product ID
	EvtGooglePlayProductId *string `json:"evt_google_play_product_id,omitempty"`

	// EvtGracePeriod The External API grace period
	EvtGracePeriod *int32 `json:"evt_grace_period,omitempty"`

	// EvtItunesBundleId iTunes's bundle ID
	EvtItunesBundleId *string `json:"evt_itunes_bundle_id,omitempty"`

	// EvtItunesProductId iTunes's product ID
	EvtItunesProductId *string `json:"evt_itunes_product_id,omitempty"`

	// EvtVerificationPeriod The <a href = "https://docs.piano.io/external-service-term/#externaltermverification">periodicity</a> (in seconds) of checking the EVT subscription with the external service
	EvtVerificationPeriod *int32              `json:"evt_verification_period"`
	ExternalApiFormFields *[]ExternalAPIField `json:"external_api_form_fields,omitempty"`

	// ExternalApiId The ID of the external API configuration
	ExternalApiId *string `json:"external_api_id,omitempty"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName *string `json:"external_api_name,omitempty"`

	// ExternalApiSource The source of the external API configuration
	ExternalApiSource *TermExternalApiSource `json:"external_api_source,omitempty"`

	// ExternalProductIds <a href="https://docs.piano.io/linked-term/#external-product">“External products"</a> are entities of the external system accessed by users. If you enter multiple values (separated by a comma), Piano will create a standard resource for each product and also a bundled resource that will group them. Example: "digital_prod,print_sub_access,main_articles".
	ExternalProductIds *string `json:"external_product_ids,omitempty"`

	// ExternalTermId The ID of the term in the external system. Provided by the external system.
	ExternalTermId *string `json:"external_term_id,omitempty"`

	// IsAllowedToChangeSchedulePeriodInPast Whether the term allows to change its schedule period created previously
	IsAllowedToChangeSchedulePeriodInPast bool `json:"is_allowed_to_change_schedule_period_in_past"`

	// MaximumDaysInAdvance Maximum days in advance
	MaximumDaysInAdvance *int32 `json:"maximum_days_in_advance,omitempty"`

	// Name The term name
	Name string `json:"name"`

	// PaymentAllowGift Whether the term can be gifted
	PaymentAllowGift bool `json:"payment_allow_gift"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes bool `json:"payment_allow_promo_codes"`

	// PaymentAllowRenewDays How many days in advance users user can renew
	PaymentAllowRenewDays int32 `json:"payment_allow_renew_days"`

	// PaymentBillingPlan The billing plan for the term
	PaymentBillingPlan string `json:"payment_billing_plan"`

	// PaymentBillingPlanDescription The description of the term billing plan
	PaymentBillingPlanDescription string                    `json:"payment_billing_plan_description"`
	PaymentBillingPlanTable       []PaymentBillingPlanTable `json:"payment_billing_plan_table"`

	// PaymentCurrency The currency of the term
	PaymentCurrency string `json:"payment_currency"`

	// PaymentFirstPrice The first price of the term
	PaymentFirstPrice float64 `json:"payment_first_price"`

	// PaymentForceAutoRenew Prevents users from disabling autorenewal (always "TRUE" for dynamic terms)
	PaymentForceAutoRenew bool `json:"payment_force_auto_renew"`

	// PaymentHasFreeTrial Whether payment includes a free trial
	PaymentHasFreeTrial bool `json:"payment_has_free_trial"`

	// PaymentIsCustomPriceAvailable Whether users can pay more than term price
	PaymentIsCustomPriceAvailable bool `json:"payment_is_custom_price_available"`

	// PaymentIsSubscription Whether this term (payment or dynamic) is a subscription (unlike one-off)
	PaymentIsSubscription bool `json:"payment_is_subscription"`

	// PaymentNewCustomersOnly Whether to show the term only to users having no dynamic or purchase conversions yet
	PaymentNewCustomersOnly bool `json:"payment_new_customers_only"`

	// PaymentRenewGracePeriod The number of days after expiration to still allow access to the resource
	PaymentRenewGracePeriod int32 `json:"payment_renew_grace_period"`

	// PaymentTrialNewCustomersOnly Whether to allow trial period only to users having no purchases yet
	PaymentTrialNewCustomersOnly bool `json:"payment_trial_new_customers_only"`

	// ProductCategory The product category
	ProductCategory string `json:"product_category"`

	// RegistrationAccessPeriod The access duration (in seconds) for the registration term
	RegistrationAccessPeriod *int32 `json:"registration_access_period,omitempty"`

	// RegistrationGracePeriod How long (in seconds) after registration users can get access to the term
	RegistrationGracePeriod *int32    `json:"registration_grace_period,omitempty"`
	Resource                Resource  `json:"resource"`
	Schedule                *Schedule `json:"schedule,omitempty"`

	// ScheduleBilling The schedule billing
	ScheduleBilling *string `json:"schedule_billing"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `json:"shared_redemption_url"`

	// ShowFullBillingPlan Show full billing plan on checkout for the dynamic term
	ShowFullBillingPlan *bool `json:"show_full_billing_plan,omitempty"`

	// SubscriptionManagementUrl A link to the external system where users can manage their subscriptions (similar to Piano’s MyAccount).
	SubscriptionManagementUrl string `json:"subscription_management_url"`

	// TermBillingDescriptor The term billing descriptor
	TermBillingDescriptor string `json:"term_billing_descriptor"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// Type The term type
	Type TermType `json:"type"`

	// TypeName The term type name
	TypeName TermTypeName `json:"type_name"`

	// UpdateDate The update date
	UpdateDate int `json:"update_date"`

	// VerifyOnRenewal Whether the term should be verified before renewal (if "FALSE", this step is skipped)
	VerifyOnRenewal  bool              `json:"verify_on_renewal"`
	VoucheringPolicy *VoucheringPolicy `json:"vouchering_policy,omitempty"`
}

// TermExternalApiSource The source of the external API configuration
type TermExternalApiSource int32

// TermType The term type
type TermType string

// TermTypeName The term type name
type TermTypeName string

// TermArrayResult defines model for TermArrayResult.
type TermArrayResult struct {
	Terms *[]Term `json:"terms,omitempty"`
}

// TermBrief defines model for TermBrief.
type TermBrief struct {
	// Disabled Whether the term is disabled
	Disabled bool `json:"disabled"`

	// Name The term name
	Name string `json:"name"`

	// TermId The term ID
	TermId string `json:"term_id"`
}

// TermChangeOption defines model for TermChangeOption.
type TermChangeOption struct {
	AdvancedOptions AdvancedOptions `json:"advanced_options"`

	// BillingTiming The billing timing(0: immediate term change;1: term change at the end of the current cycle;2: term change on the next sell date;3: term change at the end of the current period)
	BillingTiming TermChangeOptionBillingTiming `json:"billing_timing"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress bool `json:"collect_address"`

	// Description A description of the term change option; provided by the client
	Description string `json:"description"`

	// FromBillingPlan The "From" billing plan
	FromBillingPlan string `json:"from_billing_plan"`

	// FromPeriodId The ID of the "From" term period
	FromPeriodId *string `json:"from_period_id"`

	// FromPeriodName The name of the "From" term period
	FromPeriodName *string `json:"from_period_name"`

	// FromResourceId The ID of the "From" resource
	FromResourceId string `json:"from_resource_id"`

	// FromResourceName The name of the "From" resource
	FromResourceName string `json:"from_resource_name"`

	// FromScheduled Whether the subscription is upgraded from a scheduled term
	FromScheduled bool `json:"from_scheduled"`

	// FromTermId The ID of the "From" term
	FromTermId string `json:"from_term_id"`

	// FromTermName The name of the "From" term
	FromTermName string `json:"from_term_name"`

	// ImmediateAccess Whether the access begins immediately
	ImmediateAccess bool `json:"immediate_access"`

	// IncludeTrial Whether trial is enabled (not in use, always "FALSE")
	IncludeTrial bool `json:"include_trial"`

	// ProrateAccess Whether the <a href="https://docs.piano.io/upgrades/?paragraphId=b27954ef84407e4#prorate-billing-amount">Prorate billing amount</a> function is enabled
	ProrateAccess bool `json:"prorate_access"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `json:"shared_account_count"`

	// TermChangeOptionId The ID of the term change option
	TermChangeOptionId string `json:"term_change_option_id"`

	// ToBillingPlan The "To" billing plan
	ToBillingPlan string `json:"to_billing_plan"`

	// ToPeriodId The ID of the "To" term period
	ToPeriodId *string `json:"to_period_id"`

	// ToPeriodName The period name of the "To" term
	ToPeriodName *string `json:"to_period_name"`

	// ToResourceId The ID of the "To" resource
	ToResourceId string `json:"to_resource_id"`

	// ToResourceName The name of the "To" resource
	ToResourceName string `json:"to_resource_name"`

	// ToScheduled Whether the subscription is upgraded to a scheduled term
	ToScheduled bool `json:"to_scheduled"`

	// ToTermId The ID of the "To" term
	ToTermId string `json:"to_term_id"`

	// ToTermName The name of the "To" term
	ToTermName    string       `json:"to_term_name"`
	UpgradeOffers []LightOffer `json:"upgrade_offers"`
}

// TermChangeOptionBillingTiming The billing timing(0: immediate term change;1: term change at the end of the current cycle;2: term change on the next sell date;3: term change at the end of the current period)
type TermChangeOptionBillingTiming string

// TermChangeOptionResult defines model for TermChangeOptionResult.
type TermChangeOptionResult struct {
	TermChangeOption TermChangeOption `json:"TermChangeOption"`
}

// TermConversion defines model for TermConversion.
type TermConversion struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// BrowserId The unique browser ID
	BrowserId string `json:"browser_id"`

	// CreateDate The creation date
	CreateDate int    `json:"create_date"`
	Period     Period `json:"period"`

	// PriceAfterDiscount The price of the subscription after discount
	PriceAfterDiscount string `json:"price_after_discount"`

	// PriceAfterDiscountWithoutBase The price of the subscription after discount without base
	PriceAfterDiscountWithoutBase string           `json:"price_after_discount_without_base"`
	PromoCode                     PromoCode        `json:"promo_code"`
	Schedule                      Schedule         `json:"schedule"`
	Subscription                  UserSubscription `json:"subscription"`
	Term                          Term             `json:"term"`

	// TermConversionId The term conversion ID
	TermConversionId string `json:"term_conversion_id"`

	// Type The term conversion type
	Type            TermConversionType `json:"type"`
	UserAccess      Access             `json:"user_access"`
	UserPayment     UserPayment        `json:"user_payment"`
	UserPaymentInfo UserPaymentInfo    `json:"user_payment_info"`
}

// TermConversionType The term conversion type
type TermConversionType string

// TermConversionDTO defines model for TermConversionDTO.
type TermConversionDTO struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// BrowserId The unique browser ID
	BrowserId string `json:"browser_id"`

	// CreateDate The creation date
	CreateDate   int                        `json:"create_date"`
	Period       Period                     `json:"period"`
	PromoCode    PromoCode                  `json:"promo_code"`
	Schedule     Schedule                   `json:"schedule"`
	Subscription TermConversionSubscription `json:"subscription"`
	Term         Term                       `json:"term"`

	// TermConversionId The term conversion ID
	TermConversionId string `json:"term_conversion_id"`

	// Type The term conversion type
	Type            TermConversionDTOType `json:"type"`
	UserAccess      Access                `json:"user_access"`
	UserPayment     UserPaymentDTO        `json:"user_payment"`
	UserPaymentInfo UserPaymentInfo       `json:"user_payment_info"`
}

// TermConversionDTOType The term conversion type
type TermConversionDTOType string

// TermConversionDTOArrayResult defines model for TermConversionDTOArrayResult.
type TermConversionDTOArrayResult struct {
	TermConversionDTO []TermConversionDTO `json:"TermConversionDTO"`
}

// TermConversionData defines model for TermConversionData.
type TermConversionData struct {
	// Aid The application ID
	Aid string `json:"aid"`

	// Browser The browser with which the conversion was made
	Browser   TermConversionDataBrowser `json:"browser"`
	Campaigns []string                  `json:"campaigns"`

	// ContentAuthor The author of the content
	ContentAuthor string `json:"content_author"`

	// ContentCreated When the content was published
	ContentCreated string `json:"content_created"`

	// ContentSection The section for the content
	ContentSection string `json:"content_section"`

	// Hour The hour of the term conversion
	Hour string `json:"hour"`

	// Latitude The latitude of the user's position
	Latitude string `json:"latitude"`

	// Locale The user's locale
	Locale string `json:"locale"`

	// Longitude The longitude of the user's position
	Longitude string `json:"longitude"`

	// OfferId The offer ID
	OfferId string `json:"offer_id"`

	// OfferTemplateId The template ID
	OfferTemplateId string `json:"offer_template_id"`

	// OperatingSystem The operating system with which the conversion was made
	OperatingSystem TermConversionDataOperatingSystem `json:"operating_system"`

	// Platform The platform with which the conversion was made
	Platform TermConversionDataPlatform `json:"platform"`

	// Tags The tags of the page
	Tags string `json:"tags"`

	// TemplateId The template ID
	TemplateId string `json:"template_id"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// Uid The user ID
	Uid string `json:"uid"`

	// Url The URL of the page
	Url string `json:"url"`

	// UserAgent The user agent of the user who converted the term
	UserAgent string `json:"user_agent"`

	// UserCity The city of the user who converted the term
	UserCity string `json:"user_city"`

	// UserCountry The country of the user who converted the term
	UserCountry string `json:"user_country"`

	// UserRegion The region of the user who converted the term
	UserRegion string `json:"user_region"`

	// Zip The zip code of the user who converted the term
	Zip string `json:"zip"`
}

// TermConversionDataBrowser The browser with which the conversion was made
type TermConversionDataBrowser string

// TermConversionDataOperatingSystem The operating system with which the conversion was made
type TermConversionDataOperatingSystem string

// TermConversionDataPlatform The platform with which the conversion was made
type TermConversionDataPlatform string

// TermConversionDataResult defines model for TermConversionDataResult.
type TermConversionDataResult struct {
	ConversionData *TermConversionData `json:"conversion_data,omitempty"`
}

// TermConversionResult defines model for TermConversionResult.
type TermConversionResult struct {
	Conversion *TermConversion `json:"conversion,omitempty"`
}

// TermConversionSubscription defines model for TermConversionSubscription.
type TermConversionSubscription struct {
	// AutoRenew Whether auto renewal is enabled for the subscription
	AutoRenew bool `json:"auto_renew"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// Cancelable Whether this subscription can be cancelled; cancelling means thatthe access will not be prolonged and the current access will be revoked
	Cancelable bool `json:"cancelable"`

	// ChargeCount The user subscription charge count
	ChargeCount int32 `json:"charge_count"`

	// ConversionResult The conversion result
	ConversionResult string `json:"conversion_result"`

	// EndDate The subscription end date
	EndDate int `json:"end_date"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName string `json:"external_api_name"`

	// IsInTrial Whether the subscription is currently in trial period
	IsInTrial bool `json:"is_in_trial"`

	// NextBillDate The next bill date of the subscription
	NextBillDate int `json:"next_bill_date"`

	// PaymentMethod The payment method of the subscription
	PaymentMethod string `json:"payment_method"`

	// PscSubscriberNumber The PSC subscriber number
	PscSubscriberNumber string   `json:"psc_subscriber_number"`
	Resource            Resource `json:"resource"`

	// StartDate The start date.
	StartDate int `json:"start_date"`

	// Status The subscription status
	Status string `json:"status"`

	// StatusName The name of the subscription status
	StatusName string `json:"status_name"`

	// StatusNameInReports The subscription status name in reports
	StatusNameInReports string `json:"status_name_in_reports"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
	Term           Term   `json:"term"`

	// TrialAmount The price of the trial period
	TrialAmount float64 `json:"trial_amount"`

	// TrialCurrency The currency of the trial period
	TrialCurrency string `json:"trial_currency"`

	// TrialPeriodEndDate The date when the trial period ends
	TrialPeriodEndDate int `json:"trial_period_end_date"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtCustomerIdLabel The label of the external customer ID for the payment method (user payment info)
	UpiExtCustomerIdLabel string      `json:"upi_ext_customer_id_label"`
	User                  User        `json:"user"`
	UserAddress           UserAddress `json:"user_address"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// TermResult defines model for TermResult.
type TermResult struct {
	Term Term `json:"term"`
}

// TermStats defines model for TermStats.
type TermStats struct {
	// Conversion Term conversion
	Conversion string `json:"conversion"`

	// Currency Term currency
	Currency string `json:"currency"`

	// PubId Term public id
	PubId string `json:"pub_id"`

	// TotalSale Term total sale
	TotalSale string `json:"total_sale"`

	// TotalSaleStr Term total sale formatted value
	TotalSaleStr string `json:"total_sale_str"`
}

// TermStatsArrayResult defines model for TermStatsArrayResult.
type TermStatsArrayResult struct {
	TermStats []TermStats `json:"TermStats"`
}

// UpgradeOptionsVariant defines model for UpgradeOptionsVariant.
type UpgradeOptionsVariant struct {
	AvailableBillingTimings []int32 `json:"available_billing_timings"`

	// Enabled Whether the property is enabled
	Enabled bool `json:"enabled"`

	// ImmediateAccess Whether the access should be given immediately. Irrelevant if the "billing_timing" is 0.
	ImmediateAccess string `json:"immediate_access"`

	// PaymentBillingPlan The billing plan for the term
	PaymentBillingPlan string `json:"payment_billing_plan"`

	// PeriodId The period ID
	PeriodId string `json:"period_id"`

	// PeriodName The period name
	PeriodName string                  `json:"period_name"`
	Periods    []UpgradeOptionsVariant `json:"periods"`

	// ProrateDisabled Whether this term cannot be changed to another with prorate
	ProrateDisabled string `json:"prorate_disabled"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TermName The term name
	TermName string `json:"term_name"`

	// Tooltip Tooltip for unchangeable term
	Tooltip string `json:"tooltip"`

	// VariantType Type of term change variant (term, recurring_period, ends_on_date_period, unlimited_period)
	VariantType string `json:"variant_type"`
}

// User defines model for User.
type User struct {
	// CreateDate The user creation date
	CreateDate   int                                  `json:"create_date"`
	CustomFields *[]map[string]map[string]interface{} `json:"custom_fields,omitempty"`

	// DisplayName The user's display name
	DisplayName string `json:"display_name"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// Image1 The user's profile image
	Image1 *string `json:"image1"`

	// LastLogin The last login stamp
	LastLogin *int `json:"last_login,omitempty"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// LastVisit The date of the user's last visit
	LastVisit *int `json:"last_visit,omitempty"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// ResetPasswordEmailSent Whether a reset password email is sent
	ResetPasswordEmailSent *bool `json:"reset_password_email_sent,omitempty"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// UserAddress defines model for UserAddress.
type UserAddress struct {
	// AdditionalFields The additional address fields (json)
	AdditionalFields string `json:"additional_fields"`

	// Address1 The user's first address
	Address1 string `json:"address1"`

	// Address2 The user's second address
	Address2 string `json:"address2"`

	// City The name of the city
	City string `json:"city"`

	// CompanyName company_name
	CompanyName string  `json:"company_name"`
	Country     Country `json:"country"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// Phone The user's phone
	Phone string `json:"phone"`

	// PostalCode The user's postal code
	PostalCode string `json:"postal_code"`
	Region     Region `json:"region"`

	// UserAddressId The public ID of the user address
	UserAddressId string `json:"user_address_id"`
}

// UserAddressArrayResult defines model for UserAddressArrayResult.
type UserAddressArrayResult struct {
	UserAddress []UserAddress `json:"UserAddress"`
}

// UserAddressHistory defines model for UserAddressHistory.
type UserAddressHistory struct {
	// AdditionalFields The additional address fields (json)
	AdditionalFields string `json:"additional_fields"`

	// Address1 The user's first address
	Address1 string `json:"address1"`

	// Address2 The user's second address
	Address2 string `json:"address2"`

	// City The name of the city
	City string `json:"city"`

	// CompanyName company_name
	CompanyName string  `json:"company_name"`
	Country     Country `json:"country"`

	// CreateBy create_by
	CreateBy string `json:"create_by"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Deleted Whether the object is deleted
	Deleted bool `json:"deleted"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Phone The user's phone
	Phone string `json:"phone"`

	// PostalCode The user's postal code
	PostalCode string `json:"postal_code"`
	Region     Region `json:"region"`

	// Revision The revision timestamp
	Revision int `json:"revision"`

	// RevisionType The type of the user address history revision (0: creation, 1: update)
	RevisionType UserAddressHistoryRevisionType `json:"revision_type"`

	// UpdateBy The last user to update the object
	UpdateBy string `json:"update_by"`

	// UpdateDate The update date
	UpdateDate int  `json:"update_date"`
	User       User `json:"user"`

	// UserAddressId The public ID of the user address
	UserAddressId string `json:"user_address_id"`
}

// UserAddressHistoryRevisionType The type of the user address history revision (0: creation, 1: update)
type UserAddressHistoryRevisionType int32

// UserAddressHistoryArrayResult defines model for UserAddressHistoryArrayResult.
type UserAddressHistoryArrayResult struct {
	UserAddressHistory []UserAddressHistory `json:"UserAddressHistory"`
}

// UserAddressResult defines model for UserAddressResult.
type UserAddressResult struct {
	UserAddress UserAddress `json:"UserAddress"`
}

// UserArrayResult defines model for UserArrayResult.
type UserArrayResult struct {
	Users []User `json:"users"`
}

// UserBillingAddress defines model for UserBillingAddress.
type UserBillingAddress struct {
	// AddressLine1 Line one from the user's billing address
	AddressLine1 string `json:"address_line1"`

	// AddressLine2 Line two from the user's billing address
	AddressLine2 string `json:"address_line2"`

	// AddressLine3 line three from the user's billing address
	AddressLine3 string `json:"address_line3"`

	// AddressPubId The public ID of the address
	AddressPubId string `json:"address_pub_id"`

	// City The city from the user's billing address
	City    string             `json:"city"`
	Country CountrySimpleModel `json:"country"`

	// PostalCode The zip code from the user's billing address
	PostalCode string            `json:"postal_code"`
	Region     RegionSimpleModel `json:"region"`

	// RegionName The region name from the user's billing address
	RegionName string `json:"region_name"`

	// Type The user address provider type: Experian (1), Avalare (2)
	Type UserBillingAddressType `json:"type"`

	// Verified Whether the user's billing address is verified
	Verified string `json:"verified"`
}

// UserBillingAddressType The user address provider type: Experian (1), Avalare (2)
type UserBillingAddressType string

// UserBillingAddressArrayResult defines model for UserBillingAddressArrayResult.
type UserBillingAddressArrayResult struct {
	UserBillingAddress []UserBillingAddress `json:"UserBillingAddress"`
}

// UserBillingAddressResult defines model for UserBillingAddressResult.
type UserBillingAddressResult struct {
	UserBillingAddress UserBillingAddress `json:"UserBillingAddress"`
}

// UserConversionDTO defines model for UserConversionDTO.
type UserConversionDTO struct {
	Term Term `json:"term"`
	User User `json:"user"`
}

// UserConversionDTOArrayResult defines model for UserConversionDTOArrayResult.
type UserConversionDTOArrayResult struct {
	UserConversionDTO []UserConversionDTO `json:"UserConversionDTO"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	// CreateDate The user creation date
	CreateDate   int                                 `json:"create_date"`
	CustomFields []map[string]map[string]interface{} `json:"custom_fields"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// Image1 The user's profile image
	Image1 string `json:"image1"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// PersonalName The user's personal name. Name and surname ordered as per locale
	PersonalName string `json:"personal_name"`

	// ResetPasswordEmailSent Whether a reset password email is sent
	ResetPasswordEmailSent bool `json:"reset_password_email_sent"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// UserNote defines model for UserNote.
type UserNote struct {
	// Content The note content
	Content  string `json:"content"`
	CreateBy User   `json:"create_by"`

	// CreateDate The creation date
	CreateDate string `json:"create_date"`

	// Readonly Prevent editing or deleting
	Readonly bool `json:"readonly"`

	// Type The note type
	Type     UserNoteType `json:"type"`
	UpdateBy User         `json:"update_by"`

	// UpdateDate The update date
	UpdateDate string `json:"update_date"`
	User       User   `json:"user"`

	// UserNoteId The note ID
	UserNoteId string `json:"user_note_id"`
}

// UserNoteType The note type
type UserNoteType string

// UserNoteArrayResult defines model for UserNoteArrayResult.
type UserNoteArrayResult struct {
	UserNote []UserNote `json:"UserNote"`
}

// UserNoteResult defines model for UserNoteResult.
type UserNoteResult struct {
	UserNote UserNote `json:"UserNote"`
}

// UserPayment defines model for UserPayment.
type UserPayment struct {
	// Amount The user payment amount
	Amount float64 `json:"amount"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// CreateDate The creation date of the user payment (the ISO 8601 format)
	CreateDate string `json:"create_date"`

	// Currency The user payment currency
	Currency string `json:"currency"`

	// ExternalTransactionId The external transaction ID for the payment method (user payment info)
	ExternalTransactionId string `json:"external_transaction_id"`

	// GeoLocationCountry The geo location country of the user who made the payment
	GeoLocationCountry string `json:"geo_location_country"`

	// GstAmount The GST amount of the Canadian tax
	GstAmount float64 `json:"gst_amount"`

	// GstRate The GST rate of the Canadian tax
	GstRate float64 `json:"gst_rate"`

	// HstAmount The HST amount of the Canadian tax
	HstAmount float64 `json:"hst_amount"`

	// HstRate The HST rate of the Canadian tax
	HstRate float64 `json:"hst_rate"`

	// InvoiceNumber The invoice number
	InvoiceNumber string `json:"invoice_number"`

	// IssuerCountryCode The payment method issuer country code
	IssuerCountryCode string `json:"issuer_country_code"`

	// OriginalPrice The original price of the user payment
	OriginalPrice string `json:"original_price"`

	// PaymentMethod The payment method of the user payment
	PaymentMethod string `json:"payment_method"`

	// Price Formatted user payment price include/plus tax
	Price string `json:"price"`

	// PstAmount The PST amount of the Canadian tax
	PstAmount float64 `json:"pst_amount"`

	// PstRate The PST rate of the Canadian tax
	PstRate float64 `json:"pst_rate"`

	// QstAmount The QST amount of the Canadian tax
	QstAmount float64 `json:"qst_amount"`

	// QstRate The QST rate of the Canadian tax
	QstRate float64 `json:"qst_rate"`

	// RefundAmount The user payment amount refunded, before tax
	RefundAmount float64 `json:"refund_amount"`

	// RefundAmountRecalculated Refund amount was recalculated before
	RefundAmountRecalculated bool `json:"refund_amount_recalculated"`

	// RefundCurrency User payment pre-tax currency
	RefundCurrency string `json:"refund_currency"`

	// Refundable Whether the user payment is refundable
	Refundable bool `json:"refundable"`

	// RefundedAmount The user payment amount refunded, after tax
	RefundedAmount float64 `json:"refunded_amount"`

	// RemainingAmount Remaining amount for current subscription
	RemainingAmount float64 `json:"remaining_amount"`

	// Renewal User payment renewal
	Renewal bool `json:"renewal"`

	// SourceId The payment provider source ID
	SourceId UserPaymentSourceId `json:"source_id"`

	// SourceName The payment provider name
	SourceName UserPaymentSourceName `json:"source_name"`

	// Status The user payment status.
	Status UserPaymentStatus `json:"status"`

	// StatusValue The user payment status value
	StatusValue  UserPaymentStatusValue  `json:"status_value"`
	StoredFields CreditGuardStoredFields `json:"stored_fields"`
	Subscription UserSubscription        `json:"subscription"`

	// Tax The user payment tax
	Tax float64 `json:"tax"`

	// TaxBillingCountryCode The code of the billing country
	TaxBillingCountryCode string `json:"tax_billing_country_code"`

	// TaxBillingPlan The tax billing plan
	TaxBillingPlan string `json:"tax_billing_plan"`

	// TaxBillingZipCode The billing zip code
	TaxBillingZipCode string `json:"tax_billing_zip_code"`

	// TaxRate The tax rate
	TaxRate float64 `json:"tax_rate"`

	// TaxResidenceCountryCode The code of the residence country
	TaxResidenceCountryCode string `json:"tax_residence_country_code"`
	Term                    Term   `json:"term"`

	// TrackingId Tracking ID for the payment method (user payment info)
	TrackingId string `json:"tracking_id"`

	// TransactionDetails An object contiaining the payment provider ("type") and other transaction details ("payment_method_country" for Datatrans)
	TransactionDetails map[string]interface{} `json:"transaction_details"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtCustomerIdLabel The label of the external customer ID for the payment method (user payment info)
	UpiExtCustomerIdLabel string `json:"upi_ext_customer_id_label"`
	User                  User   `json:"user"`

	// UserPaymentId The user payment ID
	UserPaymentId string `json:"user_payment_id"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`

	// ZipCode The zip code of the user who made the payment
	ZipCode string `json:"zip_code"`
}

// UserPaymentSourceId The payment provider source ID
type UserPaymentSourceId int32

// UserPaymentSourceName The payment provider name
type UserPaymentSourceName string

// UserPaymentStatus The user payment status.
type UserPaymentStatus string

// UserPaymentStatusValue The user payment status value
type UserPaymentStatusValue int32

// UserPaymentDTO defines model for UserPaymentDTO.
type UserPaymentDTO struct {
	// Amount The user payment amount
	Amount float64 `json:"amount"`

	// CreateDate The creation date of the user payment (the ISO 8601 format)
	CreateDate string `json:"create_date"`

	// Currency The user payment currency
	Currency string `json:"currency"`

	// ExternalTransactionId The external transaction ID for the payment method (user payment info)
	ExternalTransactionId string `json:"external_transaction_id"`

	// OriginalPrice The original price of the user payment
	OriginalPrice string `json:"original_price"`

	// PaymentMethod The payment method of the user payment
	PaymentMethod string `json:"payment_method"`

	// Price Formatted user payment price include/plus tax
	Price string `json:"price"`

	// Refundable Whether the user payment is refundable
	Refundable bool `json:"refundable"`

	// Renewal User payment renewal
	Renewal      bool                       `json:"renewal"`
	Subscription TermConversionSubscription `json:"subscription"`

	// Tax The user payment tax
	Tax float64 `json:"tax"`

	// TaxBillingPlan The tax billing plan
	TaxBillingPlan string `json:"tax_billing_plan"`
	Term           Term   `json:"term"`

	// TrackingId Tracking ID for the payment method (user payment info)
	TrackingId string `json:"tracking_id"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtCustomerIdLabel The label of the external customer ID for the payment method (user payment info)
	UpiExtCustomerIdLabel string `json:"upi_ext_customer_id_label"`

	// UserPaymentId The user payment ID
	UserPaymentId string `json:"user_payment_id"`

	// UserPaymentState The transactions state ("completed", "disputed" ,"refunded", "verified", "canceled" or "pending")
	UserPaymentState string `json:"user_payment_state"`
}

// UserPaymentInfo defines model for UserPaymentInfo.
type UserPaymentInfo struct {
	// Description The description of the user payment info
	Description string `json:"description"`

	// IsMock The payment method is mocked
	IsMock bool `json:"is_mock"`

	// IssuerCountryCode The payment method issuer country code
	IssuerCountryCode string `json:"issuer_country_code"`

	// PaymentMethod Identifier of the payment method
	PaymentMethod UserPaymentInfoPaymentMethod `json:"payment_method"`

	// PaymentType Identifier of the payment type
	PaymentType UserPaymentInfoPaymentType `json:"payment_type"`

	// UpiExpirationMonth The expiration month of the card
	UpiExpirationMonth int32 `json:"upi_expiration_month"`

	// UpiExpirationYear The expiration year of the card
	UpiExpirationYear int32 `json:"upi_expiration_year"`

	// UpiIdentifier The payment method ID
	UpiIdentifier string `json:"upi_identifier"`

	// UpiNickname The card nickname
	UpiNickname string `json:"upi_nickname"`

	// UpiNumber The card number
	UpiNumber string `json:"upi_number"`

	// UpiPostalCode The postal code of the card
	UpiPostalCode string `json:"upi_postal_code"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// UserPaymentInfoPaymentMethod Identifier of the payment method
type UserPaymentInfoPaymentMethod string

// UserPaymentInfoPaymentType Identifier of the payment type
type UserPaymentInfoPaymentType string

// UserPaymentInfoResult defines model for UserPaymentInfoResult.
type UserPaymentInfoResult struct {
	UserPaymentInfo UserPaymentInfo `json:"UserPaymentInfo"`
}

// UserPaymentRefundDTO defines model for UserPaymentRefundDTO.
type UserPaymentRefundDTO struct {
	// RefundDownstreamExternalTxId The ID of the external refund downstream transaction
	RefundDownstreamExternalTxId string `json:"refund_downstream_external_tx_id"`

	// RefundExternalTxId The ID of the external refund transaction
	RefundExternalTxId string `json:"refund_external_tx_id"`

	// Status The user payment status.
	Status UserPaymentRefundDTOStatus `json:"status"`
}

// UserPaymentRefundDTOStatus The user payment status.
type UserPaymentRefundDTOStatus string

// UserPaymentRefundDTOResult defines model for UserPaymentRefundDTOResult.
type UserPaymentRefundDTOResult struct {
	UserPaymentRefundDTO UserPaymentRefundDTO `json:"UserPaymentRefundDTO"`
}

// UserPaymentResult defines model for UserPaymentResult.
type UserPaymentResult struct {
	UserPayment UserPayment `json:"UserPayment"`
}

// UserRef defines model for UserRef.
type UserRef struct {
	// CreateDate The user creation date
	CreateDate int `json:"create_date"`

	// Email The user's email address (single)
	Email string `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// LastName The user's last name
	LastName string `json:"last_name"`

	// Uid The user's ID
	Uid string `json:"uid"`
}

// UserRefResult defines model for UserRefResult.
type UserRefResult struct {
	UserRef UserRef `json:"UserRef"`
}

// UserResult defines model for UserResult.
type UserResult struct {
	User User `json:"User"`
}

// UserSubscription defines model for UserSubscription.
type UserSubscription struct {
	// AccessCustomData Access custom data associated with linked term subscription
	AccessCustomData string `json:"access_custom_data"`

	// AutoRenew Whether auto renewal is enabled for the subscription
	AutoRenew bool `json:"auto_renew"`

	// AutoRenewChangeEnabled The auto_renew changing is available for user subscription
	AutoRenewChangeEnabled bool `json:"auto_renew_change_enabled"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// CanBeResumed Whether this subscription could be resumed
	CanBeResumed bool `json:"can_be_resumed"`

	// CanManageSharedSubscription Whether the shared subscription can be managed
	CanManageSharedSubscription bool `json:"can_manage_shared_subscription"`

	// Cancelable Whether this subscription can be cancelled; cancelling means thatthe access will not be prolonged and the current access will be revoked
	Cancelable bool `json:"cancelable"`

	// CancelableAndRefundadle Whether the subscription can be cancelled with the payment for the last period refunded. Cancelling means that the access will not be prolonged and the current access will be revoked
	CancelableAndRefundadle bool `json:"cancelable_and_refundadle"`

	// ChargeCount The user subscription charge count
	ChargeCount int32 `json:"charge_count"`

	// ConversionResult The conversion result
	ConversionResult UserSubscriptionConversionResult `json:"conversion_result"`

	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// DeferredCancelable Whether this subscription could be cancelled at the end of the billing period
	DeferredCancelable bool `json:"deferred_cancelable"`

	// EndDate The subscription end date
	EndDate int `json:"end_date"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName UserSubscriptionExternalApiName `json:"external_api_name"`

	// ExternalSubId The ID of the external subscription linked with subscription.
	ExternalSubId string `json:"external_sub_id"`

	// InGracePeriod The subscription in grace period
	InGracePeriod bool `json:"in_grace_period"`

	// IsActive Subscription is in active state
	IsActive bool `json:"is_active"`

	// IsInTrial Whether the subscription is currently in trial period
	IsInTrial bool `json:"is_in_trial"`

	// NextBillDate The next bill date of the subscription
	NextBillDate int `json:"next_bill_date"`

	// NextRenewalDate The next renewal date of the subscription
	NextRenewalDate int `json:"next_renewal_date"`

	// NextVerificaitionDate The next verfication date of the subscription
	NextVerificaitionDate int `json:"next_verificaition_date"`

	// PaymentMethod The payment method of the subscription
	PaymentMethod string `json:"payment_method"`

	// PscSubscriberNumber The PSC subscriber number
	PscSubscriberNumber string   `json:"psc_subscriber_number"`
	Resource            Resource `json:"resource"`

	// SharedAccountLimit The shared account limit
	SharedAccountLimit int32                     `json:"shared_account_limit"`
	SharedAccounts     []UserSubscriptionAccount `json:"shared_accounts"`

	// StartDate The start date.
	StartDate int `json:"start_date"`

	// Status The subscription status
	Status UserSubscriptionStatus `json:"status"`

	// StatusDisplay The displayed text of the subscription status
	StatusDisplay string `json:"status_display"`

	// StatusName The name of the subscription status
	StatusName string `json:"status_name"`

	// StatusNameInReports The subscription status name in reports
	StatusNameInReports string `json:"status_name_in_reports"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
	Term           Term   `json:"term"`

	// TrialAmount The price of the trial period
	TrialAmount float64 `json:"trial_amount"`

	// TrialCurrency The currency of the trial period
	TrialCurrency string `json:"trial_currency"`

	// TrialPeriodEndDate The date when the trial period ends
	TrialPeriodEndDate int `json:"trial_period_end_date"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtCustomerIdLabel The label of the external customer ID for the payment method (user payment info)
	UpiExtCustomerIdLabel string      `json:"upi_ext_customer_id_label"`
	User                  User        `json:"user"`
	UserAddress           UserAddress `json:"user_address"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`

	// WillAccessPeriodBeChanged True if the access period will be changed on next renewal process
	WillAccessPeriodBeChanged bool `json:"will_access_period_be_changed"`

	// WillAutoRenew User subscription will be automatically renewed
	WillAutoRenew bool `json:"will_auto_renew"`
}

// UserSubscriptionConversionResult The conversion result
type UserSubscriptionConversionResult string

// UserSubscriptionExternalApiName The name of the external API configuration
type UserSubscriptionExternalApiName string

// UserSubscriptionStatus The subscription status
type UserSubscriptionStatus string

// UserSubscriptionAccount defines model for UserSubscriptionAccount.
type UserSubscriptionAccount struct {
	// AccountId The ID of the shared subscription account
	AccountId string `json:"account_id"`

	// Active Shared account active
	Active bool `json:"active"`

	// Email The shared subscription user's email
	Email string `json:"email"`

	// FirstName The shared subscription user's first name
	FirstName string `json:"first_name"`

	// LastName The shared subscription user's last name
	LastName string `json:"last_name"`

	// PersonalName The shared subscription user's personal name
	PersonalName string `json:"personal_name"`

	// Redeemed The redeem date of the shared subscription
	Redeemed int `json:"redeemed"`

	// UserId The  shared subscription user's ID
	UserId string `json:"user_id"`
}

// UserSubscriptionDto defines model for UserSubscriptionDto.
type UserSubscriptionDto struct {
	// AccessExpired The access item expired
	AccessExpired bool `json:"access_expired"`

	// AccessId The access ID
	AccessId string `json:"access_id"`

	// AutoRenew Subscription auto renew
	AutoRenew bool `json:"auto_renew"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// ChargeCount The user subscription charge count
	ChargeCount int32 `json:"charge_count"`

	// ConversionResult The conversion result
	ConversionResult UserSubscriptionDtoConversionResult `json:"conversion_result"`

	// CreaditCardExpire When the credit card expires
	CreaditCardExpire string `json:"creadit_card_expire"`

	// CreaditCardExpireSoon Whether the credit card expires soon
	CreaditCardExpireSoon bool `json:"creadit_card_expire_soon"`

	// DeliverySchedulePubId Public ID of Delivery Schedule
	DeliverySchedulePubId string `json:"delivery_schedule_pub_id"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName UserSubscriptionDtoExternalApiName `json:"external_api_name"`

	// ImageUrl The URL of the resource image
	ImageUrl string `json:"image_url"`

	// InAppPayment Whether an in-app payment method is used
	InAppPayment bool `json:"in_app_payment"`

	// LastConversionId The ID of the most recent term conversion
	LastConversionId string `json:"last_conversion_id"`

	// LastPaymentConversionId The ID of the most recent payment term conversion
	LastPaymentConversionId string `json:"last_payment_conversion_id"`

	// NextBillDate The next bill date of the subscription
	NextBillDate string `json:"next_bill_date"`

	// PaymentBillingPlan The billing plan for the term
	PaymentBillingPlan string `json:"payment_billing_plan"`

	// PaymentMethod The payment method of the subscription
	PaymentMethod string `json:"payment_method"`

	// PscSubscriberNumber The PSC subscriber number
	PscSubscriberNumber string `json:"psc_subscriber_number"`

	// ResourceName The subscription resource name
	ResourceName string `json:"resource_name"`

	// Rid The resource ID
	Rid string `json:"rid"`

	// Status The subscription status
	Status UserSubscriptionDtoStatus `json:"status"`

	// StatusDisplay The displayed text of the subscription status
	StatusDisplay string `json:"status_display"`

	// StatusLabel The label of the subscription status
	StatusLabel UserSubscriptionDtoStatusLabel `json:"status_label"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`

	// SubscriptionLastPayment The date of the last payment for the subscription
	SubscriptionLastPayment string `json:"subscription_last_payment"`

	// TermId The subscription term ID
	TermId string `json:"term_id"`

	// TermName The subscription term name
	TermName string `json:"term_name"`

	// Type The term type
	Type UserSubscriptionDtoType `json:"type"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// UserSubscriptionDtoConversionResult The conversion result
type UserSubscriptionDtoConversionResult string

// UserSubscriptionDtoExternalApiName The name of the external API configuration
type UserSubscriptionDtoExternalApiName string

// UserSubscriptionDtoStatus The subscription status
type UserSubscriptionDtoStatus string

// UserSubscriptionDtoStatusLabel The label of the subscription status
type UserSubscriptionDtoStatusLabel string

// UserSubscriptionDtoType The term type
type UserSubscriptionDtoType string

// UserSubscriptionDtoArrayResult defines model for UserSubscriptionDtoArrayResult.
type UserSubscriptionDtoArrayResult struct {
	UserSubscriptionDto []UserSubscriptionDto `json:"UserSubscriptionDto"`
}

// UserSubscriptionListItem defines model for UserSubscriptionListItem.
type UserSubscriptionListItem struct {
	// AccessCustomData Access custom data associated with linked term subscription
	AccessCustomData string `json:"access_custom_data"`

	// AutoRenew Whether auto renewal is enabled for the subscription
	AutoRenew bool `json:"auto_renew"`

	// BillingPlan The billing plan of the subscription
	BillingPlan string `json:"billing_plan"`

	// CanManageSharedSubscription Whether the shared subscription can be managed
	CanManageSharedSubscription bool `json:"can_manage_shared_subscription"`

	// Cancelable Whether this subscription can be cancelled; cancelling means thatthe access will not be prolonged and the current access will be revoked
	Cancelable bool `json:"cancelable"`

	// CancelableAndRefundadle Whether the subscription can be cancelled with the payment for the last period refunded. Cancelling means that the access will not be prolonged and the current access will be revoked
	CancelableAndRefundadle bool `json:"cancelable_and_refundadle"`

	// CdsAccountNumber CDS Account number
	CdsAccountNumber string `json:"cds_account_number"`

	// ChargeCount The user subscription charge count
	ChargeCount int32 `json:"charge_count"`

	// ConversionResult The conversion result
	ConversionResult UserSubscriptionListItemConversionResult `json:"conversion_result"`

	// EndDate The subscription end date
	EndDate int `json:"end_date"`

	// ExternalApiName The name of the external API configuration
	ExternalApiName UserSubscriptionListItemExternalApiName `json:"external_api_name"`

	// ExternalSubId The ID of the external subscription linked with subscription.
	ExternalSubId string `json:"external_sub_id"`

	// IsInTrial Whether the subscription is currently in trial period
	IsInTrial bool `json:"is_in_trial"`

	// NextBillDate The next bill date of the subscription
	NextBillDate int `json:"next_bill_date"`

	// NextVerificaitionDate The next verfication date of the subscription
	NextVerificaitionDate int `json:"next_verificaition_date"`

	// PaymentMethod The payment method of the subscription
	PaymentMethod string `json:"payment_method"`

	// PscSubscriberNumber The PSC subscriber number
	PscSubscriberNumber string   `json:"psc_subscriber_number"`
	Resource            Resource `json:"resource"`

	// SharedAccountLimit The shared account limit
	SharedAccountLimit int32                     `json:"shared_account_limit"`
	SharedAccounts     []UserSubscriptionAccount `json:"shared_accounts"`

	// StartDate The start date.
	StartDate int `json:"start_date"`

	// Status The subscription status
	Status UserSubscriptionListItemStatus `json:"status"`

	// StatusName The name of the subscription status
	StatusName string `json:"status_name"`

	// StatusNameInReports The subscription status name in reports
	StatusNameInReports string `json:"status_name_in_reports"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `json:"subscription_id"`
	Term           Term   `json:"term"`

	// TrialAmount The price of the trial period
	TrialAmount float64 `json:"trial_amount"`

	// TrialCurrency The currency of the trial period
	TrialCurrency string `json:"trial_currency"`

	// TrialPeriodEndDate The date when the trial period ends
	TrialPeriodEndDate int `json:"trial_period_end_date"`

	// UpiExtCustomerId The external customer ID of the payment method (user payment info)
	UpiExtCustomerId string `json:"upi_ext_customer_id"`

	// UpiExtCustomerIdLabel The label of the external customer ID for the payment method (user payment info)
	UpiExtCustomerIdLabel string      `json:"upi_ext_customer_id_label"`
	User                  User        `json:"user"`
	UserAddress           UserAddress `json:"user_address"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `json:"user_payment_info_id"`
}

// UserSubscriptionListItemConversionResult The conversion result
type UserSubscriptionListItemConversionResult string

// UserSubscriptionListItemExternalApiName The name of the external API configuration
type UserSubscriptionListItemExternalApiName string

// UserSubscriptionListItemStatus The subscription status
type UserSubscriptionListItemStatus string

// UserSubscriptionListItemArrayResult defines model for UserSubscriptionListItemArrayResult.
type UserSubscriptionListItemArrayResult struct {
	UserSubscriptionListItem []UserSubscriptionListItem `json:"UserSubscriptionListItem"`
}

// UserSubscriptionResult defines model for UserSubscriptionResult.
type UserSubscriptionResult struct {
	UserSubscription UserSubscription `json:"UserSubscription"`
}

// Voucher defines model for Voucher.
type Voucher struct {
	// AppName The app name
	AppName string `json:"app_name"`

	// Code The voucher code
	Code string `json:"code"`

	// CreateDate When the voucher was created
	CreateDate int `json:"create_date"`

	// ExpireDate When the voucher expires
	ExpireDate int `json:"expire_date"`

	// Expires When the voucher expires
	Expires string `json:"expires"`

	// IsRefundable Whether the voucher payment is refundable
	IsRefundable bool `json:"is_refundable"`

	// IsResendable Whether the voucher can be resent
	IsResendable bool `json:"is_resendable"`

	// IsRevocable Whether the voucher is revocable
	IsRevocable bool `json:"is_revocable"`

	// Period The voucher period
	Period string `json:"period"`

	// Price The voucher price
	Price string `json:"price"`

	// PubId The public ID of the voucher
	PubId string `json:"pub_id"`

	// RecipientEmail The voucher recipient's email
	RecipientEmail string `json:"recipient_email"`

	// RecipientMessage The message to the recepient
	RecipientMessage string `json:"recipient_message"`

	// RecipientName The name of the voucher recipient
	RecipientName string `json:"recipient_name"`

	// Redeemed When the voucher was redeemed
	Redeemed int `json:"redeemed"`

	// RefundAmount The voucher refund amount
	RefundAmount string `json:"refund_amount"`

	// RefundAmountRecalculated Refund amount was recalculated before
	RefundAmountRecalculated bool `json:"refund_amount_recalculated"`

	// ResourceName The resource name
	ResourceName string `json:"resource_name"`

	// RevokeDate When the voucher was revoked
	RevokeDate int `json:"revoke_date"`

	// SendDate When the voucher was sent
	SendDate int `json:"send_date"`

	// State The voucher state
	State VoucherState `json:"state"`

	// StateLabel The label of the voucher state
	StateLabel VoucherStateLabel `json:"state_label"`

	// TermId The term ID
	TermId string `json:"term_id"`

	// TermName The term name
	TermName string `json:"term_name"`

	// TermType The term type
	TermType VoucherTermType `json:"term_type"`

	// TransactionId The transaction ID
	TransactionId string      `json:"transaction_id"`
	UserAddress   UserAddress `json:"user_address"`
}

// VoucherState The voucher state
type VoucherState string

// VoucherStateLabel The label of the voucher state
type VoucherStateLabel string

// VoucherTermType The term type
type VoucherTermType string

// VoucherArrayResult defines model for VoucherArrayResult.
type VoucherArrayResult struct {
	Voucher []Voucher `json:"Voucher"`
}

// VoucherResult defines model for VoucherResult.
type VoucherResult struct {
	Voucher Voucher `json:"Voucher"`
}

// VoucheringPolicy defines model for VoucheringPolicy.
type VoucheringPolicy struct {
	// VoucheringPolicyBillingPlan The billing plan of the vouchering policy
	VoucheringPolicyBillingPlan string `json:"vouchering_policy_billing_plan"`

	// VoucheringPolicyBillingPlanDescription The description of the vouchering policy billing plan
	VoucheringPolicyBillingPlanDescription string `json:"vouchering_policy_billing_plan_description"`

	// VoucheringPolicyId The vouchering policy ID
	VoucheringPolicyId string `json:"vouchering_policy_id"`

	// VoucheringPolicyRedemptionUrl The vouchering policy redemption URL
	VoucheringPolicyRedemptionUrl string `json:"vouchering_policy_redemption_url"`
}

// WebhookConfig defines model for WebhookConfig.
type WebhookConfig struct {
	// Enabled The webhook config enabled
	Enabled bool `json:"enabled"`

	// Key The webhook config key
	Key WebhookConfigKey `json:"key"`

	// Label The webhook config label
	Label string `json:"label"`

	// Type The webhook type
	Type WebhookConfigType `json:"type"`
}

// WebhookConfigKey The webhook config key
type WebhookConfigKey string

// WebhookConfigType The webhook type
type WebhookConfigType string

// WebhookEvent defines model for WebhookEvent.
type WebhookEvent struct {
	// CreateDate The creation date
	CreateDate int `json:"create_date"`

	// Event The webhook event
	Event string `json:"event"`

	// EventLocalized The localized webhook event
	EventLocalized string `json:"event_localized"`

	// EventType The webhook event type
	EventType           string          `json:"event_type"`
	LastWebhookResponse WebhookResponse `json:"last_webhook_response"`

	// ResponsesCount The number of webhook responses
	ResponsesCount int32 `json:"responses_count"`

	// Retried The number of extra attempts to send the webhook
	Retried string `json:"retried"`

	// Status The status
	Status WebhookEventStatus `json:"status"`

	// StatusLocalized The status localized
	StatusLocalized string `json:"status_localized"`

	// Type The webhook type
	Type string `json:"type"`

	// TypeLocalized The localized webhook type
	TypeLocalized string `json:"type_localized"`

	// UpdateDate The update date
	UpdateDate int  `json:"update_date"`
	User       User `json:"user"`

	// WebhookId The webhook ID
	WebhookId string `json:"webhook_id"`
}

// WebhookEventStatus The status
type WebhookEventStatus string

// WebhookEventResult defines model for WebhookEventResult.
type WebhookEventResult struct {
	WebhookEvent WebhookEvent `json:"WebhookEvent"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	// CreateDate The date of the webhook response
	CreateDate int `json:"create_date"`

	// RequestData The webhook request data
	RequestData string `json:"request_data"`

	// RequestUrl The webhook request URL
	RequestUrl string `json:"request_url"`

	// ResponseBody The webhook response body
	ResponseBody string `json:"response_body"`

	// ResponseHeaders The webhook response headers
	ResponseHeaders string `json:"response_headers"`

	// Status Webhook response status
	Status WebhookResponseStatus `json:"status"`

	// StatusLocalized The webhook response status localized
	StatusLocalized string `json:"status_localized"`
}

// WebhookResponseStatus Webhook response status
type WebhookResponseStatus string

// WebhookResponseArrayResult defines model for WebhookResponseArrayResult.
type WebhookResponseArrayResult struct {
	WebhookResponse []WebhookResponse `json:"WebhookResponse"`
}

// WebhookResponseResult defines model for WebhookResponseResult.
type WebhookResponseResult struct {
	WebhookResponse WebhookResponse `json:"WebhookResponse"`
}

// WebhookSettings defines model for WebhookSettings.
type WebhookSettings struct {
	Configs []WebhookConfig `json:"configs"`

	// Enabled Whether the webhook endpoint is enabled
	Enabled bool `json:"enabled"`

	// Url The webhook endpoint URL
	Url string `json:"url"`
}

// WebhookSettingsResult defines model for WebhookSettingsResult.
type WebhookSettingsResult struct {
	WebhookSettings WebhookSettings `json:"webhook_settings"`
}

// WebhookStatus defines model for WebhookStatus.
type WebhookStatus struct {
	// Description The webhook status description
	Description string `json:"description"`

	// Status The webhook status
	Status WebhookStatusStatus `json:"status"`
}

// WebhookStatusStatus The webhook status
type WebhookStatusStatus string

// WebhookStatusResult defines model for WebhookStatusResult.
type WebhookStatusResult struct {
	WebhookStatus WebhookStatus `json:"webhook_status"`
}

// GetPublisherAdblockerGetParams defines parameters for GetPublisherAdblockerGet.
type GetPublisherAdblockerGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherAfcConfigurationDeleteParams defines parameters for GetPublisherAfcConfigurationDelete.
type GetPublisherAfcConfigurationDeleteParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherAfcConfigurationGetParams defines parameters for GetPublisherAfcConfigurationGet.
type GetPublisherAfcConfigurationGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherAfcConfigurationHealthCheckParams defines parameters for GetPublisherAfcConfigurationHealthCheck.
type GetPublisherAfcConfigurationHealthCheckParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// AfcClientId AFC Client ID
	AfcClientId string `form:"afc_client_id" json:"afc_client_id"`

	// AfcUsername AFC Username
	AfcUsername string `form:"afc_username" json:"afc_username"`

	// AfcPassword AFC Password
	AfcPassword string `form:"afc_password" json:"afc_password"`

	// AfcClientProfileId AFC Client profile ID
	AfcClientProfileId *string `form:"afc_client_profile_id,omitempty" json:"afc_client_profile_id,omitempty"`
}

// GetPublisherAfcConfigurationSaveParams defines parameters for GetPublisherAfcConfigurationSave.
type GetPublisherAfcConfigurationSaveParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// AfcClientId AFC Client ID
	AfcClientId string `form:"afc_client_id" json:"afc_client_id"`

	// AfcUsername AFC Username
	AfcUsername string `form:"afc_username" json:"afc_username"`

	// AfcPassword AFC Password
	AfcPassword string `form:"afc_password" json:"afc_password"`

	// AfcClientProfileId AFC Client profile ID
	AfcClientProfileId *string `form:"afc_client_profile_id,omitempty" json:"afc_client_profile_id,omitempty"`

	// LoadDate load_date
	LoadDate string `form:"load_date" json:"load_date"`
}

// GetPublisherAppApiTokenGenerateParams defines parameters for GetPublisherAppApiTokenGenerate.
type GetPublisherAppApiTokenGenerateParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Confirmation Pass 'i_do_understand_the_current_token_will_become_unusable' to confirm token reset
	Confirmation string `form:"confirmation" json:"confirmation"`
}

// GetPublisherAppCurrenciesParams defines parameters for GetPublisherAppCurrencies.
type GetPublisherAppCurrenciesParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherAppFeaturesGetParams defines parameters for GetPublisherAppFeaturesGet.
type GetPublisherAppFeaturesGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherAppGetParams defines parameters for GetPublisherAppGet.
type GetPublisherAppGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherConsentEntryListParams defines parameters for GetPublisherConsentEntryList.
type GetPublisherConsentEntryListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// Offset The offset of the first item in the response. Default: 0.
	Offset int32 `form:"offset" json:"offset"`

	// Limit The maximum number of objects to return
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherConsentGetParams defines parameters for GetPublisherConsentGet.
type GetPublisherConsentGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ConsentId The consent ID
	ConsentId string `form:"consent_id" json:"consent_id"`
}

// GetPublisherConsentListParams defines parameters for GetPublisherConsentList.
type GetPublisherConsentListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Type The consent box type ("registration" or "checkout")
	Type *GetPublisherConsentListParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Enabled Whether the user checked the consent box
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherConsentListParamsType defines parameters for GetPublisherConsentList.
type GetPublisherConsentListParamsType string

// GetPublisherConversionCountParams defines parameters for GetPublisherConversionCount.
type GetPublisherConversionCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// TermId Term id to list
	TermId *string `form:"term_id,omitempty" json:"term_id,omitempty"`
}

// GetPublisherConversionDataGetParams defines parameters for GetPublisherConversionDataGet.
type GetPublisherConversionDataGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// TermConversionId The term conversion ID
	TermConversionId string `form:"term_conversion_id" json:"term_conversion_id"`
}

// GetPublisherConversionGetParams defines parameters for GetPublisherConversionGet.
type GetPublisherConversionGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// TermConversionId The term conversion ID
	TermConversionId *string `form:"term_conversion_id,omitempty" json:"term_conversion_id,omitempty"`

	// AccessId The access ID
	AccessId *string `form:"access_id,omitempty" json:"access_id,omitempty"`

	// IsLastTermConversion Whether this term conversion is the latest
	IsLastTermConversion *bool `form:"is_last_term_conversion,omitempty" json:"is_last_term_conversion,omitempty"`
}

// GetPublisherConversionLastAccessParams defines parameters for GetPublisherConversionLastAccess.
type GetPublisherConversionLastAccessParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid *string `form:"rid,omitempty" json:"rid,omitempty"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// SubscriptionId The user subscription ID
	SubscriptionId *string `form:"subscription_id,omitempty" json:"subscription_id,omitempty"`
}

// GetPublisherConversionListParams defines parameters for GetPublisherConversionList.
type GetPublisherConversionListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// DateFrom Date from
	DateFrom *int `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Date to
	DateTo *int `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherExperienceMetadataListParams defines parameters for GetPublisherExperienceMetadataList.
type GetPublisherExperienceMetadataListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherExportCreateAccessReportExportParams defines parameters for GetPublisherExportCreateAccessReportExport.
type GetPublisherExportCreateAccessReportExportParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportName The downloadable report name
	ExportName string `form:"export_name" json:"export_name"`

	// AccessStatus Access status (“yes” - active accesses, “no” - inactive accesses, “all” or empty - accesses in any status)
	AccessStatus *GetPublisherExportCreateAccessReportExportParamsAccessStatus `form:"access_status,omitempty" json:"access_status,omitempty"`

	// TermType Term type
	TermType *[]GetPublisherExportCreateAccessReportExportParamsTermType `form:"term_type,omitempty" json:"term_type,omitempty"`

	// TermId Term ID
	TermId *[]string `form:"term_id,omitempty" json:"term_id,omitempty"`

	// NextBillingDate Next billing date
	NextBillingDate *int `form:"next_billing_date,omitempty" json:"next_billing_date,omitempty"`

	// LastPaymentStatus Last payment status
	LastPaymentStatus *GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus `form:"last_payment_status,omitempty" json:"last_payment_status,omitempty"`

	// DateFrom Access start date: the first date of the date range
	DateFrom int `form:"date_from" json:"date_from"`

	// DateTo Access start date: the last date of the date range
	DateTo int `form:"date_to" json:"date_to"`

	// EndDateFrom Access expiration or revocation date: the first date of the date range
	EndDateFrom *int `form:"end_date_from,omitempty" json:"end_date_from,omitempty"`

	// EndDateTo Access expiration or revocation date: the last date of the date range
	EndDateTo *int `form:"end_date_to,omitempty" json:"end_date_to,omitempty"`
}

// GetPublisherExportCreateAccessReportExportParamsAccessStatus defines parameters for GetPublisherExportCreateAccessReportExport.
type GetPublisherExportCreateAccessReportExportParamsAccessStatus string

// GetPublisherExportCreateAccessReportExportParamsTermType defines parameters for GetPublisherExportCreateAccessReportExport.
type GetPublisherExportCreateAccessReportExportParamsTermType string

// GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus defines parameters for GetPublisherExportCreateAccessReportExport.
type GetPublisherExportCreateAccessReportExportParamsLastPaymentStatus string

// GetPublisherExportCreateAccessReportExportV2Params defines parameters for GetPublisherExportCreateAccessReportExportV2.
type GetPublisherExportCreateAccessReportExportV2Params struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportName The downloadable report name
	ExportName string `form:"export_name" json:"export_name"`

	// AccessStatus Access status (“yes” - active accesses, “no” - inactive accesses, “all” or empty - accesses in any status)
	AccessStatus *GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus `form:"access_status,omitempty" json:"access_status,omitempty"`

	// TermType Term type
	TermType *[]GetPublisherExportCreateAccessReportExportV2ParamsTermType `form:"term_type,omitempty" json:"term_type,omitempty"`

	// TermId Term ID
	TermId *[]string `form:"term_id,omitempty" json:"term_id,omitempty"`

	// NextBillingDate Next billing date
	NextBillingDate *int `form:"next_billing_date,omitempty" json:"next_billing_date,omitempty"`

	// LastPaymentStatus Last payment status
	LastPaymentStatus *GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus `form:"last_payment_status,omitempty" json:"last_payment_status,omitempty"`

	// DateFrom Access start date: the first date of the date range
	DateFrom int `form:"date_from" json:"date_from"`

	// DateTo Access start date: the last date of the date range
	DateTo int `form:"date_to" json:"date_to"`

	// EndDateFrom Access expiration or revocation date: the first date of the date range
	EndDateFrom *int `form:"end_date_from,omitempty" json:"end_date_from,omitempty"`

	// EndDateTo Access expiration or revocation date: the last date of the date range
	EndDateTo *int `form:"end_date_to,omitempty" json:"end_date_to,omitempty"`
}

// GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus defines parameters for GetPublisherExportCreateAccessReportExportV2.
type GetPublisherExportCreateAccessReportExportV2ParamsAccessStatus string

// GetPublisherExportCreateAccessReportExportV2ParamsTermType defines parameters for GetPublisherExportCreateAccessReportExportV2.
type GetPublisherExportCreateAccessReportExportV2ParamsTermType string

// GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus defines parameters for GetPublisherExportCreateAccessReportExportV2.
type GetPublisherExportCreateAccessReportExportV2ParamsLastPaymentStatus string

// GetPublisherExportCreateDailyActivityReportExportParams defines parameters for GetPublisherExportCreateDailyActivityReportExport.
type GetPublisherExportCreateDailyActivityReportExportParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportName The downloadable report name
	ExportName string `form:"export_name" json:"export_name"`

	// Date Date
	Date int `form:"date" json:"date"`

	// TermType Term type
	TermType *[]GetPublisherExportCreateDailyActivityReportExportParamsTermType `form:"term_type,omitempty" json:"term_type,omitempty"`

	// Currency Currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// CurrencyList Currency List
	CurrencyList *[]string `form:"currencyList,omitempty" json:"currencyList,omitempty"`
}

// GetPublisherExportCreateDailyActivityReportExportParamsTermType defines parameters for GetPublisherExportCreateDailyActivityReportExport.
type GetPublisherExportCreateDailyActivityReportExportParamsTermType string

// GetPublisherExportCreateMonthlyActivityReportExportParams defines parameters for GetPublisherExportCreateMonthlyActivityReportExport.
type GetPublisherExportCreateMonthlyActivityReportExportParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportName The downloadable report name
	ExportName string `form:"export_name" json:"export_name"`

	// Month Number of month
	Month int32 `form:"month" json:"month"`

	// Year Year
	Year int32 `form:"year" json:"year"`

	// TermType Term type
	TermType *[]GetPublisherExportCreateMonthlyActivityReportExportParamsTermType `form:"term_type,omitempty" json:"term_type,omitempty"`

	// Currency Currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// CurrencyList Currency list
	CurrencyList *[]string `form:"currencyList,omitempty" json:"currencyList,omitempty"`
}

// GetPublisherExportCreateMonthlyActivityReportExportParamsTermType defines parameters for GetPublisherExportCreateMonthlyActivityReportExport.
type GetPublisherExportCreateMonthlyActivityReportExportParamsTermType string

// GetPublisherExportCreateTermChangeReportExportParams defines parameters for GetPublisherExportCreateTermChangeReportExport.
type GetPublisherExportCreateTermChangeReportExportParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportName The downloadable report name
	ExportName string `form:"export_name" json:"export_name"`

	// DateFrom Date from
	DateFrom *int `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Date to
	DateTo *int `form:"date_to,omitempty" json:"date_to,omitempty"`
}

// GetPublisherExportDeleteParams defines parameters for GetPublisherExportDelete.
type GetPublisherExportDeleteParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportId The ID of the downloadable report (can be retrieved with <a href="https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Flist">/publisher/export/list</a>)
	ExportId string `form:"export_id" json:"export_id"`
}

// GetPublisherExportDownloadParams defines parameters for GetPublisherExportDownload.
type GetPublisherExportDownloadParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportId The ID of the downloadable report (can be retrieved with <a href="https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Flist">/publisher/export/list</a>)
	ExportId string `form:"export_id" json:"export_id"`
}

// GetPublisherExportGetParams defines parameters for GetPublisherExportGet.
type GetPublisherExportGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportId The ID of the downloadable report (can be retrieved with <a href="https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Flist">/publisher/export/list</a>)
	ExportId string `form:"export_id" json:"export_id"`
}

// GetPublisherExportListParams defines parameters for GetPublisherExportList.
type GetPublisherExportListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OrderBy Field to order by
	OrderBy *GetPublisherExportListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherExportListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherExportListParamsOrderBy defines parameters for GetPublisherExportList.
type GetPublisherExportListParamsOrderBy string

// GetPublisherExportListParamsOrderDirection defines parameters for GetPublisherExportList.
type GetPublisherExportListParamsOrderDirection string

// GetPublisherExportRunParams defines parameters for GetPublisherExportRun.
type GetPublisherExportRunParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExportId The ID of the downloadable report (can be retrieved with <a href="https://docs.piano.io/api?endpoint=get~2F~2Fpublisher~2Fexport~2Flist">/publisher/export/list</a>)
	ExportId string `form:"export_id" json:"export_id"`
}

// GetPublisherInquiryAddParams defines parameters for GetPublisherInquiryAdd.
type GetPublisherInquiryAddParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// PaymentInquiryId The public ID of the inquiry (not only about payments)
	PaymentInquiryId string `form:"payment_inquiry_id" json:"payment_inquiry_id"`

	// Action <a href="https://docs.piano.io/customer-service/#customerservicetasks">The action</a>
	Action []GetPublisherInquiryAddParamsAction `form:"action" json:"action"`

	// Comment The inquiry comment
	Comment string `form:"comment" json:"comment"`

	// Internal The internal comment
	Internal bool `form:"internal" json:"internal"`
}

// GetPublisherInquiryAddParamsAction defines parameters for GetPublisherInquiryAdd.
type GetPublisherInquiryAddParamsAction string

// GetPublisherInquiryCommentsParams defines parameters for GetPublisherInquiryComments.
type GetPublisherInquiryCommentsParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// PaymentInquiryId The public ID of the inquiry (not only about payments)
	PaymentInquiryId string `form:"payment_inquiry_id" json:"payment_inquiry_id"`
}

// GetPublisherInquiryDetailsParams defines parameters for GetPublisherInquiryDetails.
type GetPublisherInquiryDetailsParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// PaymentInquiryId The public ID of the inquiry (not only about payments)
	PaymentInquiryId string `form:"payment_inquiry_id" json:"payment_inquiry_id"`
}

// GetPublisherInquiryInquiryActionsParams defines parameters for GetPublisherInquiryInquiryActions.
type GetPublisherInquiryInquiryActionsParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// PaymentInquiryId The public ID of the inquiry (not only about payments)
	PaymentInquiryId string `form:"payment_inquiry_id" json:"payment_inquiry_id"`
}

// GetPublisherInquiryLastCommentParams defines parameters for GetPublisherInquiryLastComment.
type GetPublisherInquiryLastCommentParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`
}

// GetPublisherInquiryListParams defines parameters for GetPublisherInquiryList.
type GetPublisherInquiryListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherInquiryUnresolvedCountParams defines parameters for GetPublisherInquiryUnresolvedCount.
type GetPublisherInquiryUnresolvedCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`
}

// GetPublisherLicensingContractGetParams defines parameters for GetPublisherLicensingContractGet.
type GetPublisherLicensingContractGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `form:"contract_id" json:"contract_id"`
}

// GetPublisherLicensingContractListParams defines parameters for GetPublisherLicensingContractList.
type GetPublisherLicensingContractListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `form:"licensee_id" json:"licensee_id"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingContractDomainContractUserListParams defines parameters for GetPublisherLicensingContractDomainContractUserList.
type GetPublisherLicensingContractDomainContractUserListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `form:"contract_id" json:"contract_id"`

	// ContractDomainId The public ID of the contract domain
	ContractDomainId string `form:"contract_domain_id" json:"contract_domain_id"`

	// OrderBy Field to order by
	OrderBy *GetPublisherLicensingContractDomainContractUserListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherLicensingContractDomainContractUserListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// StatusList A list of the contract user statuses ("INVALID", "PENDING", "ACTIVE", "REVOKE")
	StatusList *[]GetPublisherLicensingContractDomainContractUserListParamsStatusList `form:"status_list,omitempty" json:"status_list,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingContractDomainContractUserListParamsOrderBy defines parameters for GetPublisherLicensingContractDomainContractUserList.
type GetPublisherLicensingContractDomainContractUserListParamsOrderBy string

// GetPublisherLicensingContractDomainContractUserListParamsOrderDirection defines parameters for GetPublisherLicensingContractDomainContractUserList.
type GetPublisherLicensingContractDomainContractUserListParamsOrderDirection string

// GetPublisherLicensingContractDomainContractUserListParamsStatusList defines parameters for GetPublisherLicensingContractDomainContractUserList.
type GetPublisherLicensingContractDomainContractUserListParamsStatusList string

// GetPublisherLicensingContractDomainListParams defines parameters for GetPublisherLicensingContractDomainList.
type GetPublisherLicensingContractDomainListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `form:"contract_id" json:"contract_id"`

	// OrderBy Field to order by
	OrderBy *GetPublisherLicensingContractDomainListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherLicensingContractDomainListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingContractDomainListParamsOrderBy defines parameters for GetPublisherLicensingContractDomainList.
type GetPublisherLicensingContractDomainListParamsOrderBy string

// GetPublisherLicensingContractDomainListParamsOrderDirection defines parameters for GetPublisherLicensingContractDomainList.
type GetPublisherLicensingContractDomainListParamsOrderDirection string

// GetPublisherLicensingContractIpRangeListParams defines parameters for GetPublisherLicensingContractIpRangeList.
type GetPublisherLicensingContractIpRangeListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `form:"contract_id" json:"contract_id"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingContractUserListParams defines parameters for GetPublisherLicensingContractUserList.
type GetPublisherLicensingContractUserListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ContractId The public ID of the contract
	ContractId string `form:"contract_id" json:"contract_id"`

	// OrderBy Field to order by
	OrderBy *GetPublisherLicensingContractUserListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherLicensingContractUserListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// StatusList A list of the contract user statuses ("INVALID", "PENDING", "ACTIVE", "REVOKE")
	StatusList *[]GetPublisherLicensingContractUserListParamsStatusList `form:"status_list,omitempty" json:"status_list,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingContractUserListParamsOrderBy defines parameters for GetPublisherLicensingContractUserList.
type GetPublisherLicensingContractUserListParamsOrderBy string

// GetPublisherLicensingContractUserListParamsOrderDirection defines parameters for GetPublisherLicensingContractUserList.
type GetPublisherLicensingContractUserListParamsOrderDirection string

// GetPublisherLicensingContractUserListParamsStatusList defines parameters for GetPublisherLicensingContractUserList.
type GetPublisherLicensingContractUserListParamsStatusList string

// GetPublisherLicensingLicenseeCountParams defines parameters for GetPublisherLicensingLicenseeCount.
type GetPublisherLicensingLicenseeCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherLicensingLicenseeGetParams defines parameters for GetPublisherLicensingLicenseeGet.
type GetPublisherLicensingLicenseeGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `form:"licensee_id" json:"licensee_id"`
}

// GetPublisherLicensingLicenseeListParams defines parameters for GetPublisherLicensingLicenseeList.
type GetPublisherLicensingLicenseeListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingNotificationListParams defines parameters for GetPublisherLicensingNotificationList.
type GetPublisherLicensingNotificationListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `form:"licensee_id" json:"licensee_id"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherLicensingNotificationRuleListParams defines parameters for GetPublisherLicensingNotificationRuleList.
type GetPublisherLicensingNotificationRuleListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// LicenseeId The public ID of the licensee
	LicenseeId string `form:"licensee_id" json:"licensee_id"`
}

// GetPublisherLicensingScheduleContractsParams defines parameters for GetPublisherLicensingScheduleContracts.
type GetPublisherLicensingScheduleContractsParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ScheduleId The schedule ID
	ScheduleId string `form:"schedule_id" json:"schedule_id"`
}

// PostPublisherLinkedTermConfigurationFormdataBody defines parameters for PostPublisherLinkedTermConfiguration.
type PostPublisherLinkedTermConfigurationFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// PostPublisherLinkedTermCustomFieldConfigurationFormdataBody defines parameters for PostPublisherLinkedTermCustomFieldConfiguration.
type PostPublisherLinkedTermCustomFieldConfigurationFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// PostPublisherLinkedTermEventFormdataBody defines parameters for PostPublisherLinkedTermEvent.
type PostPublisherLinkedTermEventFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Type The type of the external event to synchronize.
	// Deprecated: please use 'body.action' instead.
	Type *PostPublisherLinkedTermEventFormdataBodyType `form:"type,omitempty" json:"type,omitempty"`
}

// PostPublisherLinkedTermEventFormdataBodyType defines parameters for PostPublisherLinkedTermEvent.
type PostPublisherLinkedTermEventFormdataBodyType string

// GetPublisherLinkedTermSubscriptionParams defines parameters for GetPublisherLinkedTermSubscription.
type GetPublisherLinkedTermSubscriptionParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// ExternalSubId The ID of the external subscription linked with subscription.
	ExternalSubId string `form:"external_sub_id" json:"external_sub_id"`
}

// GetPublisherOfferCountParams defines parameters for GetPublisherOfferCount.
type GetPublisherOfferCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherOfferGetParams defines parameters for GetPublisherOfferGet.
type GetPublisherOfferGetParams struct {
	// OfferId The offer ID
	OfferId string `form:"offer_id" json:"offer_id"`
}

// GetPublisherOfferListParams defines parameters for GetPublisherOfferList.
type GetPublisherOfferListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherOfferListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherOfferListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`
}

// GetPublisherOfferListParamsOrderBy defines parameters for GetPublisherOfferList.
type GetPublisherOfferListParamsOrderBy string

// GetPublisherOfferListParamsOrderDirection defines parameters for GetPublisherOfferList.
type GetPublisherOfferListParamsOrderDirection string

// GetPublisherOfferTemplateArchiveParams defines parameters for GetPublisherOfferTemplateArchive.
type GetPublisherOfferTemplateArchiveParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`
}

// GetPublisherOfferTemplateConvertBoilerplateToTemplateParams defines parameters for GetPublisherOfferTemplateConvertBoilerplateToTemplate.
type GetPublisherOfferTemplateConvertBoilerplateToTemplateParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`

	// Name The name
	Name string `form:"name" json:"name"`

	// Description The description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// CategoryId The category ID
	CategoryId GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId `form:"category_id" json:"category_id"`
}

// GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId defines parameters for GetPublisherOfferTemplateConvertBoilerplateToTemplate.
type GetPublisherOfferTemplateConvertBoilerplateToTemplateParamsCategoryId string

// GetPublisherOfferTemplateCountParams defines parameters for GetPublisherOfferTemplateCount.
type GetPublisherOfferTemplateCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherOfferTemplateDefaultCodeParams defines parameters for GetPublisherOfferTemplateDefaultCode.
type GetPublisherOfferTemplateDefaultCodeParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`
}

// GetPublisherOfferTemplateDuplicateParams defines parameters for GetPublisherOfferTemplateDuplicate.
type GetPublisherOfferTemplateDuplicateParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`

	// DuplicateVariants Whether to duplicate variants
	DuplicateVariants *bool `form:"duplicate_variants,omitempty" json:"duplicate_variants,omitempty"`
}

// GetPublisherOfferTemplateGetParams defines parameters for GetPublisherOfferTemplateGet.
type GetPublisherOfferTemplateGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`
}

// GetPublisherOfferTemplateGetHistoryParams defines parameters for GetPublisherOfferTemplateGetHistory.
type GetPublisherOfferTemplateGetHistoryParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`
}

// GetPublisherOfferTemplateInheritedCountParams defines parameters for GetPublisherOfferTemplateInheritedCount.
type GetPublisherOfferTemplateInheritedCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`
}

// GetPublisherOfferTemplateListParams defines parameters for GetPublisherOfferTemplateList.
type GetPublisherOfferTemplateListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherOfferTemplateListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherOfferTemplateListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Status The template status("active" or "archived")
	Status *GetPublisherOfferTemplateListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// VariantStatus The variant status("active" or "archived")
	VariantStatus *GetPublisherOfferTemplateListParamsVariantStatus `form:"variant_status,omitempty" json:"variant_status,omitempty"`

	// Filters filters
	Filters *[]string `form:"filters,omitempty" json:"filters,omitempty"`
}

// GetPublisherOfferTemplateListParamsOrderBy defines parameters for GetPublisherOfferTemplateList.
type GetPublisherOfferTemplateListParamsOrderBy string

// GetPublisherOfferTemplateListParamsOrderDirection defines parameters for GetPublisherOfferTemplateList.
type GetPublisherOfferTemplateListParamsOrderDirection string

// GetPublisherOfferTemplateListParamsStatus defines parameters for GetPublisherOfferTemplateList.
type GetPublisherOfferTemplateListParamsStatus string

// GetPublisherOfferTemplateListParamsVariantStatus defines parameters for GetPublisherOfferTemplateList.
type GetPublisherOfferTemplateListParamsVariantStatus string

// GetPublisherOfferTemplateListBoilerplatesParams defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherOfferTemplateListBoilerplatesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Status Template status (active/archived)
	Status *GetPublisherOfferTemplateListBoilerplatesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TemplateType Template type (default_offer/zuora_offer/newscycle_offer/template)
	TemplateType *GetPublisherOfferTemplateListBoilerplatesParamsTemplateType `form:"templateType,omitempty" json:"templateType,omitempty"`

	// Categories Template categories
	Categories []GetPublisherOfferTemplateListBoilerplatesParamsCategories `form:"categories" json:"categories"`

	// EnsureTemplatesExists Should ensure templates exists
	EnsureTemplatesExists *bool `form:"ensure_templates_exists,omitempty" json:"ensure_templates_exists,omitempty"`
}

// GetPublisherOfferTemplateListBoilerplatesParamsOrderBy defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParamsOrderBy string

// GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParamsOrderDirection string

// GetPublisherOfferTemplateListBoilerplatesParamsStatus defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParamsStatus string

// GetPublisherOfferTemplateListBoilerplatesParamsTemplateType defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParamsTemplateType string

// GetPublisherOfferTemplateListBoilerplatesParamsCategories defines parameters for GetPublisherOfferTemplateListBoilerplates.
type GetPublisherOfferTemplateListBoilerplatesParamsCategories string

// GetPublisherOfferTemplateListByCategoryParams defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Status Template status (active/archived)
	Status *GetPublisherOfferTemplateListByCategoryParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TemplateType Template type (default_offer/zuora_offer/newscycle_offer/template)
	TemplateType *GetPublisherOfferTemplateListByCategoryParamsTemplateType `form:"templateType,omitempty" json:"templateType,omitempty"`

	// Categories Template categories
	Categories []GetPublisherOfferTemplateListByCategoryParamsCategories `form:"categories" json:"categories"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherOfferTemplateListByCategoryParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherOfferTemplateListByCategoryParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// EnsureTemplatesExists Should ensure templates exists
	EnsureTemplatesExists *bool `form:"ensure_templates_exists,omitempty" json:"ensure_templates_exists,omitempty"`
}

// GetPublisherOfferTemplateListByCategoryParamsStatus defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParamsStatus string

// GetPublisherOfferTemplateListByCategoryParamsTemplateType defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParamsTemplateType string

// GetPublisherOfferTemplateListByCategoryParamsCategories defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParamsCategories string

// GetPublisherOfferTemplateListByCategoryParamsOrderBy defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParamsOrderBy string

// GetPublisherOfferTemplateListByCategoryParamsOrderDirection defines parameters for GetPublisherOfferTemplateListByCategory.
type GetPublisherOfferTemplateListByCategoryParamsOrderDirection string

// GetPublisherOfferTemplateMakeGlobalParams defines parameters for GetPublisherOfferTemplateMakeGlobal.
type GetPublisherOfferTemplateMakeGlobalParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`
}

// GetPublisherOfferTemplateRestoreParams defines parameters for GetPublisherOfferTemplateRestore.
type GetPublisherOfferTemplateRestoreParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateId The template ID
	OfferTemplateId string `form:"offer_template_id" json:"offer_template_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`
}

// GetPublisherOfferTemplateVariantArchiveParams defines parameters for GetPublisherOfferTemplateVariantArchive.
type GetPublisherOfferTemplateVariantArchiveParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `form:"offer_template_variant_id" json:"offer_template_variant_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`
}

// GetPublisherOfferTemplateVariantDuplicateParams defines parameters for GetPublisherOfferTemplateVariantDuplicate.
type GetPublisherOfferTemplateVariantDuplicateParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `form:"offer_template_variant_id" json:"offer_template_variant_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`
}

// GetPublisherOfferTemplateVariantGetParams defines parameters for GetPublisherOfferTemplateVariantGet.
type GetPublisherOfferTemplateVariantGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `form:"offer_template_variant_id" json:"offer_template_variant_id"`
}

// GetPublisherOfferTemplateVariantRestoreParams defines parameters for GetPublisherOfferTemplateVariantRestore.
type GetPublisherOfferTemplateVariantRestoreParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OfferTemplateVariantId The template variant ID
	OfferTemplateVariantId string `form:"offer_template_variant_id" json:"offer_template_variant_id"`

	// HistoryComment The template history comment
	HistoryComment *string `form:"history_comment,omitempty" json:"history_comment,omitempty"`
}

// GetPublisherOfferTermListParams defines parameters for GetPublisherOfferTermList.
type GetPublisherOfferTermListParams struct {
	// OfferId The offer ID
	OfferId string `form:"offer_id" json:"offer_id"`
}

// GetPublisherOfferTermOfferListParams defines parameters for GetPublisherOfferTermOfferList.
type GetPublisherOfferTermOfferListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// TermId The term ID
	TermId string `form:"term_id" json:"term_id"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherPaymentGetParams defines parameters for GetPublisherPaymentGet.
type GetPublisherPaymentGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// UserPaymentId The user payment ID
	UserPaymentId string `form:"user_payment_id" json:"user_payment_id"`
}

// GetPublisherPaymentIsPartialRefundParams defines parameters for GetPublisherPaymentIsPartialRefund.
type GetPublisherPaymentIsPartialRefundParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// UserPaymentId The user payment ID
	UserPaymentId string `form:"user_payment_id" json:"user_payment_id"`
}

// GetPublisherPaymentMethodGetParams defines parameters for GetPublisherPaymentMethodGet.
type GetPublisherPaymentMethodGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// UserPaymentInfoId The user payment info ID
	UserPaymentInfoId string `form:"user_payment_info_id" json:"user_payment_info_id"`
}

// GetPublisherPaymentRefundParams defines parameters for GetPublisherPaymentRefund.
type GetPublisherPaymentRefundParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// UserPaymentId The user payment ID
	UserPaymentId string `form:"user_payment_id" json:"user_payment_id"`

	// Amount The refunded amount
	Amount *float32 `form:"amount,omitempty" json:"amount,omitempty"`

	// RevokeAccess Whether to revoke user access
	RevokeAccess *bool `form:"revoke_access,omitempty" json:"revoke_access,omitempty"`
}

// GetPublisherPromotionCodeCountParams defines parameters for GetPublisherPromotionCodeCount.
type GetPublisherPromotionCodeCountParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// State The promo code state
	State *GetPublisherPromotionCodeCountParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// GetPublisherPromotionCodeCountParamsState defines parameters for GetPublisherPromotionCodeCount.
type GetPublisherPromotionCodeCountParamsState string

// GetPublisherPromotionCodeCreateParams defines parameters for GetPublisherPromotionCodeCreate.
type GetPublisherPromotionCodeCreateParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Code The promo code itself
	Code string `form:"code" json:"code"`
}

// GetPublisherPromotionCodeGetParams defines parameters for GetPublisherPromotionCodeGet.
type GetPublisherPromotionCodeGetParams struct {
	// PromoCodeId The promo code ID
	PromoCodeId string `form:"promo_code_id" json:"promo_code_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherPromotionCodeListParams defines parameters for GetPublisherPromotionCodeList.
type GetPublisherPromotionCodeListParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// State The promo code state
	State *[]GetPublisherPromotionCodeListParamsState `form:"state,omitempty" json:"state,omitempty"`

	// OrderBy Field to order by
	OrderBy *GetPublisherPromotionCodeListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherPromotionCodeListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherPromotionCodeListParamsState defines parameters for GetPublisherPromotionCodeList.
type GetPublisherPromotionCodeListParamsState string

// GetPublisherPromotionCodeListParamsOrderBy defines parameters for GetPublisherPromotionCodeList.
type GetPublisherPromotionCodeListParamsOrderBy string

// GetPublisherPromotionCodeListParamsOrderDirection defines parameters for GetPublisherPromotionCodeList.
type GetPublisherPromotionCodeListParamsOrderDirection string

// GetPublisherPromotionCountParams defines parameters for GetPublisherPromotionCount.
type GetPublisherPromotionCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Expired Whether the promotion is expired
	Expired *GetPublisherPromotionCountParamsExpired `form:"expired,omitempty" json:"expired,omitempty"`
}

// GetPublisherPromotionCountParamsExpired defines parameters for GetPublisherPromotionCount.
type GetPublisherPromotionCountParamsExpired string

// GetPublisherPromotionFixedDiscountAddParams defines parameters for GetPublisherPromotionFixedDiscountAdd.
type GetPublisherPromotionFixedDiscountAddParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Amount The fixed discount amount
	Amount float32 `form:"amount" json:"amount"`

	// Currency The currency of the fixed discount
	Currency string `form:"currency" json:"currency"`
}

// GetPublisherPromotionGetParams defines parameters for GetPublisherPromotionGet.
type GetPublisherPromotionGetParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherPromotionListParams defines parameters for GetPublisherPromotionList.
type GetPublisherPromotionListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Expired Whether the promotion is expired
	Expired *GetPublisherPromotionListParamsExpired `form:"expired,omitempty" json:"expired,omitempty"`

	// OrderBy Field to order by
	OrderBy *GetPublisherPromotionListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherPromotionListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherPromotionListParamsExpired defines parameters for GetPublisherPromotionList.
type GetPublisherPromotionListParamsExpired string

// GetPublisherPromotionListParamsOrderBy defines parameters for GetPublisherPromotionList.
type GetPublisherPromotionListParamsOrderBy string

// GetPublisherPromotionListParamsOrderDirection defines parameters for GetPublisherPromotionList.
type GetPublisherPromotionListParamsOrderDirection string

// GetPublisherPromotionTermListParams defines parameters for GetPublisherPromotionTermList.
type GetPublisherPromotionTermListParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// OrderBy Field to order by
	OrderBy *GetPublisherPromotionTermListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherPromotionTermListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherPromotionTermListParamsOrderBy defines parameters for GetPublisherPromotionTermList.
type GetPublisherPromotionTermListParamsOrderBy string

// GetPublisherPromotionTermListParamsOrderDirection defines parameters for GetPublisherPromotionTermList.
type GetPublisherPromotionTermListParamsOrderDirection string

// GetPublisherPromotionTotalParams defines parameters for GetPublisherPromotionTotal.
type GetPublisherPromotionTotalParams struct {
	// PromotionId The promotion ID
	PromotionId string `form:"promotion_id" json:"promotion_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// CurrencyCode The currency code under ISO 4217
	CurrencyCode *string `form:"currency_code,omitempty" json:"currency_code,omitempty"`
}

// GetPublisherResourceAttachParams defines parameters for GetPublisherResourceAttach.
type GetPublisherResourceAttachParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// IncludedRid The RIDs of the fixed bundles containing this resource. Please specify relevant bundles even if you don't want to update them. To update, enter both existing and new bundles
	IncludedRid []string `form:"included_rid" json:"included_rid"`

	// BundleRid The resource bundle ID
	BundleRid string `form:"bundle_rid" json:"bundle_rid"`
}

// GetPublisherResourceBundleMembersParams defines parameters for GetPublisherResourceBundleMembers.
type GetPublisherResourceBundleMembersParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherResourceBundleMembersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherResourceBundleMembersParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`
}

// GetPublisherResourceBundleMembersParamsOrderBy defines parameters for GetPublisherResourceBundleMembers.
type GetPublisherResourceBundleMembersParamsOrderBy string

// GetPublisherResourceBundleMembersParamsOrderDirection defines parameters for GetPublisherResourceBundleMembers.
type GetPublisherResourceBundleMembersParamsOrderDirection string

// GetPublisherResourceCountParams defines parameters for GetPublisherResourceCount.
type GetPublisherResourceCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherResourceCrossAppCountParams defines parameters for GetPublisherResourceCrossAppCount.
type GetPublisherResourceCrossAppCountParams struct {
	// MerchId <a href="https://docs.piano.io/global-mode?paragraphId=aa30d5316a94392">The merchant ID</a>
	MerchId int64 `form:"merch_id" json:"merch_id"`
}

// GetPublisherResourceDetachParams defines parameters for GetPublisherResourceDetach.
type GetPublisherResourceDetachParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// BundleRid The resource bundle ID
	BundleRid string `form:"bundle_rid" json:"bundle_rid"`
}

// GetPublisherResourceGetParams defines parameters for GetPublisherResourceGet.
type GetPublisherResourceGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`
}

// GetPublisherResourceListParams defines parameters for GetPublisherResourceList.
type GetPublisherResourceListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// IncludedTagId The IDs of the included resources
	IncludedTagId *[]string `form:"included_tag_id,omitempty" json:"included_tag_id,omitempty"`

	// ExcludedRid The IDs of the excluded resources
	ExcludedRid *[]string `form:"excluded_rid,omitempty" json:"excluded_rid,omitempty"`

	// IncludedRid The RIDs of the fixed bundles containing this resource. Please specify relevant bundles even if you don't want to update them. To update, enter both existing and new bundles
	IncludedRid *[]string `form:"included_rid,omitempty" json:"included_rid,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy GetPublisherResourceListParamsOrderBy `form:"order_by" json:"order_by"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection GetPublisherResourceListParamsOrderDirection `form:"order_direction" json:"order_direction"`

	// Disabled Disabled flag
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty"`

	// Type Resource type
	Type GetPublisherResourceListParamsType `form:"type" json:"type"`

	// BundleType Bundle type
	BundleType *int32 `form:"bundle_type,omitempty" json:"bundle_type,omitempty"`
}

// GetPublisherResourceListParamsOrderBy defines parameters for GetPublisherResourceList.
type GetPublisherResourceListParamsOrderBy string

// GetPublisherResourceListParamsOrderDirection defines parameters for GetPublisherResourceList.
type GetPublisherResourceListParamsOrderDirection string

// GetPublisherResourceListParamsType defines parameters for GetPublisherResourceList.
type GetPublisherResourceListParamsType string

// GetPublisherResourceStatsListParams defines parameters for GetPublisherResourceStatsList.
type GetPublisherResourceStatsListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// IncludedRid The RIDs of the fixed bundles containing this resource. Please specify relevant bundles even if you don't want to update them. To update, enter both existing and new bundles
	IncludedRid *[]string `form:"included_rid,omitempty" json:"included_rid,omitempty"`
}

// GetPublisherResourceTagBundlesParams defines parameters for GetPublisherResourceTagBundles.
type GetPublisherResourceTagBundlesParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// IncludedTagId The IDs of the included resources
	IncludedTagId []string `form:"included_tag_id" json:"included_tag_id"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy GetPublisherResourceTagBundlesParamsOrderBy `form:"order_by" json:"order_by"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection GetPublisherResourceTagBundlesParamsOrderDirection `form:"order_direction" json:"order_direction"`

	// Disabled Disabled flag
	Disabled *bool `form:"disabled,omitempty" json:"disabled,omitempty"`

	// Type Resource type
	Type GetPublisherResourceTagBundlesParamsType `form:"type" json:"type"`

	// BundleType Bundle type
	BundleType *int32 `form:"bundle_type,omitempty" json:"bundle_type,omitempty"`
}

// GetPublisherResourceTagBundlesParamsOrderBy defines parameters for GetPublisherResourceTagBundles.
type GetPublisherResourceTagBundlesParamsOrderBy string

// GetPublisherResourceTagBundlesParamsOrderDirection defines parameters for GetPublisherResourceTagBundles.
type GetPublisherResourceTagBundlesParamsOrderDirection string

// GetPublisherResourceTagBundlesParamsType defines parameters for GetPublisherResourceTagBundles.
type GetPublisherResourceTagBundlesParamsType string

// GetPublisherResourceTagCreateParams defines parameters for GetPublisherResourceTagCreate.
type GetPublisherResourceTagCreateParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// Type The type
	Type *GetPublisherResourceTagCreateParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Name The name
	Name string `form:"name" json:"name"`
}

// GetPublisherResourceTagCreateParamsType defines parameters for GetPublisherResourceTagCreate.
type GetPublisherResourceTagCreateParamsType string

// GetPublisherResourceTagGetParams defines parameters for GetPublisherResourceTagGet.
type GetPublisherResourceTagGetParams struct {
	// ResourceTagId The resource tag ID, can be obtained through publisher/resource/tag/list
	ResourceTagId string `form:"resource_tag_id" json:"resource_tag_id"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// GetPublisherResourceTagListParams defines parameters for GetPublisherResourceTagList.
type GetPublisherResourceTagListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid *string `form:"rid,omitempty" json:"rid,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *string `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// TagType Resource tag type
	TagType int32 `form:"tag_type" json:"tag_type"`
}

// GetPublisherResourceUserListParams defines parameters for GetPublisherResourceUserList.
type GetPublisherResourceUserListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherResourceUserListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherResourceUserListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`
}

// GetPublisherResourceUserListParamsOrderBy defines parameters for GetPublisherResourceUserList.
type GetPublisherResourceUserListParamsOrderBy string

// GetPublisherResourceUserListParamsOrderDirection defines parameters for GetPublisherResourceUserList.
type GetPublisherResourceUserListParamsOrderDirection string

// GetPublisherSubscriptionGetParams defines parameters for GetPublisherSubscriptionGet.
type GetPublisherSubscriptionGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// SubscriptionId The user subscription ID
	SubscriptionId string `form:"subscription_id" json:"subscription_id"`
}

// GetPublisherSubscriptionListParams defines parameters for GetPublisherSubscriptionList.
type GetPublisherSubscriptionListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// Type The type
	Type *GetPublisherSubscriptionListParamsType `form:"type,omitempty" json:"type,omitempty"`

	// StartDate The start date. If you use a date-range filter without the "select_by" parameter, the method will return a result filtered by "update date".To specify the filter field, use "select_by".
	StartDate *int `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate The end date. If you use a date-range filter without "select_by" parameter, the method will return a result filtered by "update date".To specify the filter field, use "select_by".
	EndDate *int `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// SelectBy Filter subscription date field
	SelectBy *GetPublisherSubscriptionListParamsSelectBy `form:"select_by,omitempty" json:"select_by,omitempty"`

	// Status Subscription status
	Status *GetPublisherSubscriptionListParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetPublisherSubscriptionListParamsType defines parameters for GetPublisherSubscriptionList.
type GetPublisherSubscriptionListParamsType string

// GetPublisherSubscriptionListParamsSelectBy defines parameters for GetPublisherSubscriptionList.
type GetPublisherSubscriptionListParamsSelectBy string

// GetPublisherSubscriptionListParamsStatus defines parameters for GetPublisherSubscriptionList.
type GetPublisherSubscriptionListParamsStatus string

// GetPublisherSubscriptionSearchParams defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// OrderBy Field to order by
	OrderBy *GetPublisherSubscriptionSearchParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherSubscriptionSearchParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// SearchNewSubscriptions Search for new subscriptions
	SearchNewSubscriptions *bool `form:"search_new_subscriptions,omitempty" json:"search_new_subscriptions,omitempty"`

	// NewSubscriptionsCreatedFrom Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedFrom *int `form:"new_subscriptions_created_from,omitempty" json:"new_subscriptions_created_from,omitempty"`

	// NewSubscriptionsCreatedTo Date to be used in new subscriptions search, search_new_subscriptions should be "TRUE"
	NewSubscriptionsCreatedTo *int `form:"new_subscriptions_created_to,omitempty" json:"new_subscriptions_created_to,omitempty"`

	// SearchActiveNowSubscriptions Search for active subscriptions
	SearchActiveNowSubscriptions *bool `form:"search_active_now_subscriptions,omitempty" json:"search_active_now_subscriptions,omitempty"`

	// ActiveNowSubscriptionsStatuses Statuses for new subscriptions search (active, failedAndRetry), required parameter search_active_now_subscriptions
	ActiveNowSubscriptionsStatuses *[]GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses `form:"active_now_subscriptions_statuses,omitempty" json:"active_now_subscriptions_statuses,omitempty"`

	// SearchInactiveSubscriptions Search for inactive subscriptions
	SearchInactiveSubscriptions *bool `form:"search_inactive_subscriptions,omitempty" json:"search_inactive_subscriptions,omitempty"`

	// InactiveSubscriptionsStatuses Statuses for inactive subscriptions search (cancelled, paymentFailure, expired, completed, upgraded), required parameter search_inactive_subscriptions
	InactiveSubscriptionsStatuses *[]GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses `form:"inactive_subscriptions_statuses,omitempty" json:"inactive_subscriptions_statuses,omitempty"`

	// SubscriptionsInactiveFrom Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveFrom *int `form:"subscriptions_inactive_from,omitempty" json:"subscriptions_inactive_from,omitempty"`

	// SubscriptionsInactiveTo Date to be used in inactive subscriptions search, search_inactive_subscriptions should be "TRUE"
	SubscriptionsInactiveTo *int `form:"subscriptions_inactive_to,omitempty" json:"subscriptions_inactive_to,omitempty"`

	// SearchUpdatedSubscriptions Search for updated subscriptions
	SearchUpdatedSubscriptions *bool `form:"search_updated_subscriptions,omitempty" json:"search_updated_subscriptions,omitempty"`

	// UpdatedSubscriptionsStatuses Status for updated subscriptions search (renewed), search_updated_subscriptions should be "TRUE"
	UpdatedSubscriptionsStatuses *[]GetPublisherSubscriptionSearchParamsUpdatedSubscriptionsStatuses `form:"updated_subscriptions_statuses,omitempty" json:"updated_subscriptions_statuses,omitempty"`

	// SubscriptionsUpdatedFrom Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedFrom *int `form:"subscriptions_updated_from,omitempty" json:"subscriptions_updated_from,omitempty"`

	// SubscriptionsUpdatedTo Date to be used in updated subscriptions search, search_updated_subscriptions should be "TRUE"
	SubscriptionsUpdatedTo *int `form:"subscriptions_updated_to,omitempty" json:"subscriptions_updated_to,omitempty"`

	// SearchAutoRenewingSubscriptions Is filter by auto renewing subscriptions enabled
	SearchAutoRenewingSubscriptions *bool `form:"search_auto_renewing_subscriptions,omitempty" json:"search_auto_renewing_subscriptions,omitempty"`

	// SubscriptionsAutoRenewing Search for auto-renewing subscriptions, search_auto_renewing_subscriptions should be "TRUE"
	SubscriptionsAutoRenewing *bool `form:"subscriptions_auto_renewing,omitempty" json:"subscriptions_auto_renewing,omitempty"`

	// SearchSubscriptionsByNextBillingDate Is filter by next billing date enabled
	SearchSubscriptionsByNextBillingDate *bool `form:"search_subscriptions_by_next_billing_date,omitempty" json:"search_subscriptions_by_next_billing_date,omitempty"`

	// SubscriptionsNextBillingDateFrom Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateFrom *int `form:"subscriptions_next_billing_date_from,omitempty" json:"subscriptions_next_billing_date_from,omitempty"`

	// SubscriptionsNextBillingDateTo Date to be used in search for subscriptions by next billing date, required parameter search_subscriptions_by_next_billing_date
	SubscriptionsNextBillingDateTo *int `form:"subscriptions_next_billing_date_to,omitempty" json:"subscriptions_next_billing_date_to,omitempty"`

	// SearchSubscriptionsByTerms Is filter by terms enabled
	SearchSubscriptionsByTerms *bool `form:"search_subscriptions_by_terms,omitempty" json:"search_subscriptions_by_terms,omitempty"`

	// SubscriptionsTerms Subscription term pubId list, search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTerms *[]string `form:"subscriptions_terms,omitempty" json:"subscriptions_terms,omitempty"`

	// SubscriptionsTermTypes Subscription term type list (payment, external, gift), search_subscriptions_by_terms should be "TRUE"
	SubscriptionsTermTypes *[]GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes `form:"subscriptions_term_types,omitempty" json:"subscriptions_term_types,omitempty"`
}

// GetPublisherSubscriptionSearchParamsOrderBy defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsOrderBy string

// GetPublisherSubscriptionSearchParamsOrderDirection defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsOrderDirection string

// GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsActiveNowSubscriptionsStatuses string

// GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsInactiveSubscriptionsStatuses string

// GetPublisherSubscriptionSearchParamsUpdatedSubscriptionsStatuses defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsUpdatedSubscriptionsStatuses string

// GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes defines parameters for GetPublisherSubscriptionSearch.
type GetPublisherSubscriptionSearchParamsSubscriptionsTermTypes string

// GetPublisherTermApplicableParams defines parameters for GetPublisherTermApplicable.
type GetPublisherTermApplicableParams struct {
	// PromotionId The promotion ID
	PromotionId *string `form:"promotion_id,omitempty" json:"promotion_id,omitempty"`

	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// OrderBy Field to order by: term_name, resource_type, resource_name
	OrderBy *GetPublisherTermApplicableParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherTermApplicableParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`
}

// GetPublisherTermApplicableParamsOrderBy defines parameters for GetPublisherTermApplicable.
type GetPublisherTermApplicableParamsOrderBy string

// GetPublisherTermApplicableParamsOrderDirection defines parameters for GetPublisherTermApplicable.
type GetPublisherTermApplicableParamsOrderDirection string

// GetPublisherTermCountParams defines parameters for GetPublisherTermCount.
type GetPublisherTermCountParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// IncludeType Type of terms to include into the list
	IncludeType *[]GetPublisherTermCountParamsIncludeType `form:"include_type,omitempty" json:"include_type,omitempty"`

	// ExcludeType Type of terms to exclude from the list
	ExcludeType *[]GetPublisherTermCountParamsExcludeType `form:"exclude_type,omitempty" json:"exclude_type,omitempty"`

	// TermId Term id to list
	TermId *string `form:"term_id,omitempty" json:"term_id,omitempty"`

	// ResourceType Type of resource
	ResourceType *GetPublisherTermCountParamsResourceType `form:"resource_type,omitempty" json:"resource_type,omitempty"`

	// Source Type of external API source
	Source *[]GetPublisherTermCountParamsSource `form:"source,omitempty" json:"source,omitempty"`

	// Type Type of term to list
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetPublisherTermCountParamsIncludeType defines parameters for GetPublisherTermCount.
type GetPublisherTermCountParamsIncludeType string

// GetPublisherTermCountParamsExcludeType defines parameters for GetPublisherTermCount.
type GetPublisherTermCountParamsExcludeType string

// GetPublisherTermCountParamsResourceType defines parameters for GetPublisherTermCount.
type GetPublisherTermCountParamsResourceType string

// GetPublisherTermCountParamsSource defines parameters for GetPublisherTermCount.
type GetPublisherTermCountParamsSource string

// PostPublisherTermDynamicCreateFormdataBody defines parameters for PostPublisherTermDynamicCreate.
type PostPublisherTermDynamicCreateFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// AllowStartInFuture Allow start in the future
	AllowStartInFuture *bool `form:"allow_start_in_future,omitempty" json:"allow_start_in_future,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `form:"collect_address,omitempty" json:"collect_address,omitempty"`

	// Currency The currency
	Currency string `form:"currency" json:"currency"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `form:"default_country,omitempty" json:"default_country,omitempty"`

	// DeliveryZone A lsit of the delivery zones for this term
	DeliveryZone *[]string `form:"delivery_zone,omitempty" json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// MaximumDaysInAdvance Maximum days in advance
	MaximumDaysInAdvance *int32 `form:"maximum_days_in_advance,omitempty" json:"maximum_days_in_advance,omitempty"`

	// Name The term name
	Name string `form:"name" json:"name"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `form:"shared_account_count,omitempty" json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `form:"shared_redemption_url,omitempty" json:"shared_redemption_url,omitempty"`
}

// PostPublisherTermDynamicUpdateFormdataBody defines parameters for PostPublisherTermDynamicUpdate.
type PostPublisherTermDynamicUpdateFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// AllowStartInFuture Allow start in the future
	AllowStartInFuture *bool `form:"allow_start_in_future,omitempty" json:"allow_start_in_future,omitempty"`

	// CollectAddress Whether to collect an address for this term
	CollectAddress *bool `form:"collect_address,omitempty" json:"collect_address,omitempty"`

	// Currency The currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// DefaultCountry The pre-selected country for users outside of delivery zones
	DefaultCountry *string `form:"default_country,omitempty" json:"default_country,omitempty"`

	// DeliveryZone A lsit of the delivery zones for this term
	DeliveryZone *[]string `form:"delivery_zone,omitempty" json:"delivery_zone,omitempty"`

	// Description The description of the term
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// MaximumDaysInAdvance Maximum days in advance
	MaximumDaysInAdvance *int32 `form:"maximum_days_in_advance,omitempty" json:"maximum_days_in_advance,omitempty"`

	// Name The term name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PaymentAllowPromoCodes Whether to allow promo codes to be applied
	PaymentAllowPromoCodes *bool `form:"payment_allow_promo_codes,omitempty" json:"payment_allow_promo_codes,omitempty"`

	// PaymentNewCustomersOnly Whether to show the term only to users having no dynamic or purchase conversions yet
	PaymentNewCustomersOnly *bool `form:"payment_new_customers_only,omitempty" json:"payment_new_customers_only,omitempty"`

	// Rid The resource ID
	Rid *string `form:"rid,omitempty" json:"rid,omitempty"`

	// SharedAccountCount The count of allowed shared-subscription accounts
	SharedAccountCount *int32 `form:"shared_account_count,omitempty" json:"shared_account_count,omitempty"`

	// SharedRedemptionUrl The shared subscription redemption URL
	SharedRedemptionUrl *string `form:"shared_redemption_url,omitempty" json:"shared_redemption_url,omitempty"`

	// ShowFullBillingPlan Show full billing plan on checkout for the dynamic term
	ShowFullBillingPlan *bool `form:"show_full_billing_plan,omitempty" json:"show_full_billing_plan,omitempty"`

	// TermPubId The public ID of the term
	TermPubId string `form:"term_pub_id" json:"term_pub_id"`
}

// GetPublisherTermGetParams defines parameters for GetPublisherTermGet.
type GetPublisherTermGetParams struct {
	// TermId The term ID
	TermId string `form:"term_id" json:"term_id"`
}

// GetPublisherTermStatsListParams defines parameters for GetPublisherTermStatsList.
type GetPublisherTermStatsListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// TermId The term ID
	TermId *[]string `form:"term_id,omitempty" json:"term_id,omitempty"`
}

// GetPublisherTestUserRefParams defines parameters for GetPublisherTestUserRef.
type GetPublisherTestUserRefParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// UserRef The encrypted user reference
	UserRef string `form:"user_ref" json:"user_ref"`
}

// GetPublisherUserAccessCheckParams defines parameters for GetPublisherUserAccessCheck.
type GetPublisherUserAccessCheckParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// CrossApp Whether to include cross application access for the resource
	CrossApp *bool `form:"cross_app,omitempty" json:"cross_app,omitempty"`
}

// GetPublisherUserAccessGrantParams defines parameters for GetPublisherUserAccessGrant.
type GetPublisherUserAccessGrantParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid string `form:"rid" json:"rid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// Emails The user's email addresses (may be multiple)
	Emails *string `form:"emails,omitempty" json:"emails,omitempty"`

	// ExpireDate The expire date of the access item; null means unlimited
	ExpireDate *int64 `form:"expire_date,omitempty" json:"expire_date,omitempty"`

	// SendEmail Whether to send an email
	SendEmail bool `form:"send_email" json:"send_email"`

	// Url The URL of the page
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// Message The message
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// GetPublisherUserAccessGrantToUsersParams defines parameters for GetPublisherUserAccessGrantToUsers.
type GetPublisherUserAccessGrantToUsersParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Rid The resource ID
	Rid []string `form:"rid" json:"rid"`

	// Emails The user's email addresses (may be multiple)
	Emails *[]string `form:"emails,omitempty" json:"emails,omitempty"`

	// FileId The file ID
	FileId *string `form:"file_id,omitempty" json:"file_id,omitempty"`

	// ExpireDate The expire date of the access item; null means unlimited
	ExpireDate *int `form:"expire_date,omitempty" json:"expire_date,omitempty"`

	// SendEmail Whether to send an email
	SendEmail bool `form:"send_email" json:"send_email"`

	// Message The message
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// GetPublisherUserAccessListParams defines parameters for GetPublisherUserAccessList.
type GetPublisherUserAccessListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// ExpandBundled Whether to expand bundled accesses in the response
	ExpandBundled *bool `form:"expand_bundled,omitempty" json:"expand_bundled,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`

	// CrossApp Whether to include cross application access for the resource
	CrossApp *bool `form:"cross_app,omitempty" json:"cross_app,omitempty"`
}

// GetPublisherUserAccessRevokeParams defines parameters for GetPublisherUserAccessRevoke.
type GetPublisherUserAccessRevokeParams struct {
	// AccessId The access ID
	AccessId string `form:"access_id" json:"access_id"`
}

// GetPublisherUserAddressListParams defines parameters for GetPublisherUserAddressList.
type GetPublisherUserAddressListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherUserEmailGetParams defines parameters for GetPublisherUserEmailGet.
type GetPublisherUserEmailGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// MailLogId The mail log ID
	MailLogId *string `form:"mail_log_id,omitempty" json:"mail_log_id,omitempty"`
}

// GetPublisherUserEmailListParams defines parameters for GetPublisherUserEmailList.
type GetPublisherUserEmailListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// IncludeEmailBody Whether to include the email body in the response
	IncludeEmailBody *bool `form:"include_email_body,omitempty" json:"include_email_body,omitempty"`

	// OrderBy Field to order by
	OrderBy *GetPublisherUserEmailListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherUserEmailListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherUserEmailListParamsOrderBy defines parameters for GetPublisherUserEmailList.
type GetPublisherUserEmailListParamsOrderBy string

// GetPublisherUserEmailListParamsOrderDirection defines parameters for GetPublisherUserEmailList.
type GetPublisherUserEmailListParamsOrderDirection string

// GetPublisherUserNoteGetParams defines parameters for GetPublisherUserNoteGet.
type GetPublisherUserNoteGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// UserNoteId The note ID
	UserNoteId string `form:"user_note_id" json:"user_note_id"`
}

// GetPublisherUserNoteListParams defines parameters for GetPublisherUserNoteList.
type GetPublisherUserNoteListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid *string `form:"uid,omitempty" json:"uid,omitempty"`

	// OrderBy Field to order by
	OrderBy *GetPublisherUserNoteListParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderDirection Order direction (asc/desc)
	OrderDirection *GetPublisherUserNoteListParamsOrderDirection `form:"order_direction,omitempty" json:"order_direction,omitempty"`

	// Q Search value
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherUserNoteListParamsOrderBy defines parameters for GetPublisherUserNoteList.
type GetPublisherUserNoteListParamsOrderBy string

// GetPublisherUserNoteListParamsOrderDirection defines parameters for GetPublisherUserNoteList.
type GetPublisherUserNoteListParamsOrderDirection string

// PostPublisherUserUpdateFormdataBody defines parameters for PostPublisherUserUpdate.
type PostPublisherUserUpdateFormdataBody struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Email The user's email address (single)
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// FirstName The user's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty"`

	// LastName The user's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`
}

// GetPublisherVoucherGetParams defines parameters for GetPublisherVoucherGet.
type GetPublisherVoucherGetParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// PubId The public ID of the voucher
	PubId string `form:"pub_id" json:"pub_id"`
}

// GetPublisherVoucherListParams defines parameters for GetPublisherVoucherList.
type GetPublisherVoucherListParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// Uid The user ID
	Uid string `form:"uid" json:"uid"`

	// Offset Offset from which to start returning results
	Offset int32 `form:"offset" json:"offset"`

	// Limit Maximum index of returned results
	Limit int32 `form:"limit" json:"limit"`
}

// GetPublisherWebhookEventsParams defines parameters for GetPublisherWebhookEvents.
type GetPublisherWebhookEventsParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`

	// SkipDeprecatedWebhooks Whether to skip deprecated webhooks
	SkipDeprecatedWebhooks *bool `form:"skip_deprecated_webhooks,omitempty" json:"skip_deprecated_webhooks,omitempty"`
}

// GetPublisherWebhookGetParams defines parameters for GetPublisherWebhookGet.
type GetPublisherWebhookGetParams struct {
	// WebhookId The webhook ID
	WebhookId string `form:"webhook_id" json:"webhook_id"`
}

// GetPublisherWebhookResponseListParams defines parameters for GetPublisherWebhookResponseList.
type GetPublisherWebhookResponseListParams struct {
	// WebhookId The webhook ID
	WebhookId string `form:"webhook_id" json:"webhook_id"`

	// Limit The maximum number of objects to return
	Limit int32 `form:"limit" json:"limit"`

	// Offset The offset of the first item in the response. Default: 0.
	Offset int32 `form:"offset" json:"offset"`

	// OrderBy The field to order by
	OrderBy GetPublisherWebhookResponseListParamsOrderBy `form:"order_by" json:"order_by"`

	// OrderDirection The order direction ("asc" or "desc")
	OrderDirection GetPublisherWebhookResponseListParamsOrderDirection `form:"order_direction" json:"order_direction"`
}

// GetPublisherWebhookResponseListParamsOrderBy defines parameters for GetPublisherWebhookResponseList.
type GetPublisherWebhookResponseListParamsOrderBy string

// GetPublisherWebhookResponseListParamsOrderDirection defines parameters for GetPublisherWebhookResponseList.
type GetPublisherWebhookResponseListParamsOrderDirection string

// GetPublisherWebhookResponseResendParams defines parameters for GetPublisherWebhookResponseResend.
type GetPublisherWebhookResponseResendParams struct {
	// WebhookId The webhook ID
	WebhookId string `form:"webhook_id" json:"webhook_id"`
}

// GetPublisherWebhookSettingsParams defines parameters for GetPublisherWebhookSettings.
type GetPublisherWebhookSettingsParams struct {
	Aid *string `form:"aid,omitempty" json:"aid,omitempty"`
}

// GetPublisherWebhookSkipParams defines parameters for GetPublisherWebhookSkip.
type GetPublisherWebhookSkipParams struct {
	// WebhookId The webhook ID
	WebhookId string `form:"webhook_id" json:"webhook_id"`
}

// GetPublisherWebhookStatusParams defines parameters for GetPublisherWebhookStatus.
type GetPublisherWebhookStatusParams struct {
	// Aid The application ID
	Aid string `form:"aid" json:"aid"`
}

// PostPublisherConversionCustomCreateFormdataRequestBody defines body for PostPublisherConversionCustomCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherConversionCustomCreateFormdataRequestBody = PostPublisherConversionCustomCreateRequest

// PostPublisherConversionExternalCreateFormdataRequestBody defines body for PostPublisherConversionExternalCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherConversionExternalCreateFormdataRequestBody = PostPublisherConversionExternalCreateRequest

// PostPublisherConversionLogFormdataRequestBody defines body for PostPublisherConversionLog for application/x-www-form-urlencoded ContentType.
type PostPublisherConversionLogFormdataRequestBody = PostPublisherConversionLogRequest

// PostPublisherConversionRegistrationCreateFormdataRequestBody defines body for PostPublisherConversionRegistrationCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherConversionRegistrationCreateFormdataRequestBody = PostPublisherConversionRegistrationCreateRequest

// PostPublisherExportCreateAamDailyFormdataRequestBody defines body for PostPublisherExportCreateAamDaily for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateAamDailyFormdataRequestBody = PostPublisherExportCreateAamDailyRequest

// PostPublisherExportCreateAamMonthlyFormdataRequestBody defines body for PostPublisherExportCreateAamMonthly for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateAamMonthlyFormdataRequestBody = PostPublisherExportCreateAamMonthlyRequest

// PostPublisherExportCreateAamMonthlyV2FormdataRequestBody defines body for PostPublisherExportCreateAamMonthlyV2 for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateAamMonthlyV2FormdataRequestBody = PostPublisherExportCreateAamMonthlyV2Request

// PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody defines body for PostPublisherExportCreateSubscriptionDetailsReport for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody = PostPublisherExportCreateSubscriptionDetailsReportRequest

// PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody defines body for PostPublisherExportCreateSubscriptionDetailsReportV2 for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody = PostPublisherExportCreateSubscriptionDetailsReportV2Request

// PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody defines body for PostPublisherExportCreateSubscriptionSummaryReport for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody = PostPublisherExportCreateSubscriptionSummaryReportRequest

// PostPublisherExportCreateTransactionsReportFormdataRequestBody defines body for PostPublisherExportCreateTransactionsReport for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateTransactionsReportFormdataRequestBody = PostPublisherExportCreateTransactionsReportRequest

// PostPublisherExportCreateTransactionsReportV2FormdataRequestBody defines body for PostPublisherExportCreateTransactionsReportV2 for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateTransactionsReportV2FormdataRequestBody = PostPublisherExportCreateTransactionsReportV2Request

// PostPublisherExportCreateUserExportFormdataRequestBody defines body for PostPublisherExportCreateUserExport for application/x-www-form-urlencoded ContentType.
type PostPublisherExportCreateUserExportFormdataRequestBody = PostPublisherExportCreateUserExportRequest

// PostPublisherExternalProviderPaymentUpdateFormdataRequestBody defines body for PostPublisherExternalProviderPaymentUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherExternalProviderPaymentUpdateFormdataRequestBody = PostPublisherExternalProviderPaymentUpdateRequest

// PostPublisherGdprDeleteFormdataRequestBody defines body for PostPublisherGdprDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherGdprDeleteFormdataRequestBody = PostPublisherGdprDeleteRequest

// PostPublisherGdprDeleteAnonFormdataRequestBody defines body for PostPublisherGdprDeleteAnon for application/x-www-form-urlencoded ContentType.
type PostPublisherGdprDeleteAnonFormdataRequestBody = PostPublisherGdprDeleteAnonRequest

// PostPublisherGdprExportFormdataRequestBody defines body for PostPublisherGdprExport for application/x-www-form-urlencoded ContentType.
type PostPublisherGdprExportFormdataRequestBody = PostPublisherGdprExportRequest

// PostPublisherLicensingContractActivateFormdataRequestBody defines body for PostPublisherLicensingContractActivate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractActivateFormdataRequestBody = PostPublisherLicensingContractActivateRequest

// PostPublisherLicensingContractArchiveFormdataRequestBody defines body for PostPublisherLicensingContractArchive for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractArchiveFormdataRequestBody = PostPublisherLicensingContractArchiveRequest

// PostPublisherLicensingContractCreateFormdataRequestBody defines body for PostPublisherLicensingContractCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractCreateFormdataRequestBody = PostPublisherLicensingContractCreateRequest

// PostPublisherLicensingContractDeactivateFormdataRequestBody defines body for PostPublisherLicensingContractDeactivate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractDeactivateFormdataRequestBody = PostPublisherLicensingContractDeactivateRequest

// PostPublisherLicensingContractPeriodsActivateFormdataRequestBody defines body for PostPublisherLicensingContractPeriodsActivate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractPeriodsActivateFormdataRequestBody = PostPublisherLicensingContractPeriodsActivateRequest

// PostPublisherLicensingContractRedeemFormdataRequestBody defines body for PostPublisherLicensingContractRedeem for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractRedeemFormdataRequestBody = PostPublisherLicensingContractRedeemRequest

// PostPublisherLicensingContractUpdateFormdataRequestBody defines body for PostPublisherLicensingContractUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUpdateFormdataRequestBody = PostPublisherLicensingContractUpdateRequest

// PostPublisherLicensingContractDomainCreateFormdataRequestBody defines body for PostPublisherLicensingContractDomainCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractDomainCreateFormdataRequestBody = PostPublisherLicensingContractDomainCreateRequest

// PostPublisherLicensingContractDomainRemoveFormdataRequestBody defines body for PostPublisherLicensingContractDomainRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractDomainRemoveFormdataRequestBody = PostPublisherLicensingContractDomainRemoveRequest

// PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody defines body for PostPublisherLicensingContractDomainRemoveAndRevoke for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody = PostPublisherLicensingContractDomainRemoveAndRevokeRequest

// PostPublisherLicensingContractDomainUpdateFormdataRequestBody defines body for PostPublisherLicensingContractDomainUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractDomainUpdateFormdataRequestBody = PostPublisherLicensingContractDomainUpdateRequest

// PostPublisherLicensingContractIpRangeCreateFormdataRequestBody defines body for PostPublisherLicensingContractIpRangeCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractIpRangeCreateFormdataRequestBody = PostPublisherLicensingContractIpRangeCreateRequest

// PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody defines body for PostPublisherLicensingContractIpRangeRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody = PostPublisherLicensingContractIpRangeRemoveRequest

// PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody defines body for PostPublisherLicensingContractIpRangeUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody = PostPublisherLicensingContractIpRangeUpdateRequest

// PostPublisherLicensingContractUserCreateFormdataRequestBody defines body for PostPublisherLicensingContractUserCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserCreateFormdataRequestBody = PostPublisherLicensingContractUserCreateRequest

// PostPublisherLicensingContractUserInviteFormdataRequestBody defines body for PostPublisherLicensingContractUserInvite for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserInviteFormdataRequestBody = PostPublisherLicensingContractUserInviteRequest

// PostPublisherLicensingContractUserRemoveFormdataRequestBody defines body for PostPublisherLicensingContractUserRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserRemoveFormdataRequestBody = PostPublisherLicensingContractUserRemoveRequest

// PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody defines body for PostPublisherLicensingContractUserRemoveAndRevoke for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody = PostPublisherLicensingContractUserRemoveAndRevokeRequest

// PostPublisherLicensingContractUserRestoreFormdataRequestBody defines body for PostPublisherLicensingContractUserRestore for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserRestoreFormdataRequestBody = PostPublisherLicensingContractUserRestoreRequest

// PostPublisherLicensingContractUserRevokeFormdataRequestBody defines body for PostPublisherLicensingContractUserRevoke for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserRevokeFormdataRequestBody = PostPublisherLicensingContractUserRevokeRequest

// PostPublisherLicensingContractUserUpdateFormdataRequestBody defines body for PostPublisherLicensingContractUserUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingContractUserUpdateFormdataRequestBody = PostPublisherLicensingContractUserUpdateRequest

// PostPublisherLicensingLicenseeArchiveFormdataRequestBody defines body for PostPublisherLicensingLicenseeArchive for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingLicenseeArchiveFormdataRequestBody = PostPublisherLicensingLicenseeArchiveRequest

// PostPublisherLicensingLicenseeCreateFormdataRequestBody defines body for PostPublisherLicensingLicenseeCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingLicenseeCreateFormdataRequestBody = PostPublisherLicensingLicenseeCreateRequest

// PostPublisherLicensingLicenseeUpdateFormdataRequestBody defines body for PostPublisherLicensingLicenseeUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingLicenseeUpdateFormdataRequestBody = PostPublisherLicensingLicenseeUpdateRequest

// PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody defines body for PostPublisherLicensingNotificationRuleArchive for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody = PostPublisherLicensingNotificationRuleArchiveRequest

// PostPublisherLicensingNotificationRuleCreateFormdataRequestBody defines body for PostPublisherLicensingNotificationRuleCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingNotificationRuleCreateFormdataRequestBody = PostPublisherLicensingNotificationRuleCreateRequest

// PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody defines body for PostPublisherLicensingNotificationRuleUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody = PostPublisherLicensingNotificationRuleUpdateRequest

// PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody defines body for PostPublisherLicensingScheduleContractPeriodsActivate for application/x-www-form-urlencoded ContentType.
type PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody = PostPublisherLicensingScheduleContractPeriodsActivateRequest

// PostPublisherLinkedTermConfigurationFormdataRequestBody defines body for PostPublisherLinkedTermConfiguration for application/x-www-form-urlencoded ContentType.
type PostPublisherLinkedTermConfigurationFormdataRequestBody PostPublisherLinkedTermConfigurationFormdataBody

// PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody defines body for PostPublisherLinkedTermCustomFieldConfiguration for application/x-www-form-urlencoded ContentType.
type PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody PostPublisherLinkedTermCustomFieldConfigurationFormdataBody

// PostPublisherLinkedTermEventFormdataRequestBody defines body for PostPublisherLinkedTermEvent for application/x-www-form-urlencoded ContentType.
type PostPublisherLinkedTermEventFormdataRequestBody PostPublisherLinkedTermEventFormdataBody

// PostPublisherOfferCreateFormdataRequestBody defines body for PostPublisherOfferCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferCreateFormdataRequestBody = PostPublisherOfferCreateRequest

// PostPublisherOfferDeleteFormdataRequestBody defines body for PostPublisherOfferDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferDeleteFormdataRequestBody = PostPublisherOfferDeleteRequest

// PostPublisherOfferTemplateCreateFormdataRequestBody defines body for PostPublisherOfferTemplateCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateCreateFormdataRequestBody = PostPublisherOfferTemplateCreateRequest

// PostPublisherOfferTemplateCreateEmptyFormdataRequestBody defines body for PostPublisherOfferTemplateCreateEmpty for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateCreateEmptyFormdataRequestBody = PostPublisherOfferTemplateCreateEmptyRequest

// PostPublisherOfferTemplateDeleteFormdataRequestBody defines body for PostPublisherOfferTemplateDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateDeleteFormdataRequestBody = PostPublisherOfferTemplateDeleteRequest

// PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody defines body for PostPublisherOfferTemplateInheritedUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody = PostPublisherOfferTemplateInheritedUpdateRequest

// PostPublisherOfferTemplateUpdateFormdataRequestBody defines body for PostPublisherOfferTemplateUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateUpdateFormdataRequestBody = PostPublisherOfferTemplateUpdateRequest

// PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody defines body for PostPublisherOfferTemplateUpdateContentfields for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody = PostPublisherOfferTemplateUpdateContentfieldsRequest

// PostPublisherOfferTemplateUpdatefullFormdataRequestBody defines body for PostPublisherOfferTemplateUpdatefull for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateUpdatefullFormdataRequestBody = PostPublisherOfferTemplateUpdatefullRequest

// PostPublisherOfferTemplateVariantCreateFormdataRequestBody defines body for PostPublisherOfferTemplateVariantCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateVariantCreateFormdataRequestBody = PostPublisherOfferTemplateVariantCreateRequest

// PostPublisherOfferTemplateVariantDeleteFormdataRequestBody defines body for PostPublisherOfferTemplateVariantDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateVariantDeleteFormdataRequestBody = PostPublisherOfferTemplateVariantDeleteRequest

// PostPublisherOfferTemplateVariantUpdateFormdataRequestBody defines body for PostPublisherOfferTemplateVariantUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTemplateVariantUpdateFormdataRequestBody = PostPublisherOfferTemplateVariantUpdateRequest

// PostPublisherOfferTermAddFormdataRequestBody defines body for PostPublisherOfferTermAdd for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTermAddFormdataRequestBody = PostPublisherOfferTermAddRequest

// PostPublisherOfferTermRemoveFormdataRequestBody defines body for PostPublisherOfferTermRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTermRemoveFormdataRequestBody = PostPublisherOfferTermRemoveRequest

// PostPublisherOfferTermReorderFormdataRequestBody defines body for PostPublisherOfferTermReorder for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferTermReorderFormdataRequestBody = PostPublisherOfferTermReorderRequest

// PostPublisherOfferUpdateFormdataRequestBody defines body for PostPublisherOfferUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherOfferUpdateFormdataRequestBody = PostPublisherOfferUpdateRequest

// PostPublisherPaymentMethodAddFormdataRequestBody defines body for PostPublisherPaymentMethodAdd for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodAddFormdataRequestBody = PostPublisherPaymentMethodAddRequest

// PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody defines body for PostPublisherPaymentMethodBillingAddressApplyToAll for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody = PostPublisherPaymentMethodBillingAddressApplyToAllRequest

// PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody defines body for PostPublisherPaymentMethodBillingAddressAttach for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody = PostPublisherPaymentMethodBillingAddressAttachRequest

// PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody defines body for PostPublisherPaymentMethodBillingAddressDetach for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody = PostPublisherPaymentMethodBillingAddressDetachRequest

// PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody defines body for PostPublisherPaymentMethodBillingAddressGet for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody = PostPublisherPaymentMethodBillingAddressGetRequest

// PostPublisherPaymentMethodGmoRefreshFormdataRequestBody defines body for PostPublisherPaymentMethodGmoRefresh for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodGmoRefreshFormdataRequestBody = PostPublisherPaymentMethodGmoRefreshRequest

// PostPublisherPaymentMethodRemoveFormdataRequestBody defines body for PostPublisherPaymentMethodRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodRemoveFormdataRequestBody = PostPublisherPaymentMethodRemoveRequest

// PostPublisherPaymentMethodUpdateFormdataRequestBody defines body for PostPublisherPaymentMethodUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentMethodUpdateFormdataRequestBody = PostPublisherPaymentMethodUpdateRequest

// PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody defines body for PostPublisherPaymentProviderConfigurationSetVisibility for application/x-www-form-urlencoded ContentType.
type PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody = PostPublisherPaymentProviderConfigurationSetVisibilityRequest

// PostPublisherPromotionCodeDeleteFormdataRequestBody defines body for PostPublisherPromotionCodeDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionCodeDeleteFormdataRequestBody = PostPublisherPromotionCodeDeleteRequest

// PostPublisherPromotionCodeExportFormdataRequestBody defines body for PostPublisherPromotionCodeExport for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionCodeExportFormdataRequestBody = PostPublisherPromotionCodeExportRequest

// PostPublisherPromotionCodeUpdateFormdataRequestBody defines body for PostPublisherPromotionCodeUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionCodeUpdateFormdataRequestBody = PostPublisherPromotionCodeUpdateRequest

// PostPublisherPromotionCreateFormdataRequestBody defines body for PostPublisherPromotionCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionCreateFormdataRequestBody = PostPublisherPromotionCreateRequest

// PostPublisherPromotionDeleteFormdataRequestBody defines body for PostPublisherPromotionDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionDeleteFormdataRequestBody = PostPublisherPromotionDeleteRequest

// PostPublisherPromotionExistsFormdataRequestBody defines body for PostPublisherPromotionExists for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionExistsFormdataRequestBody = PostPublisherPromotionExistsRequest

// PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody defines body for PostPublisherPromotionFixedDiscountDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody = PostPublisherPromotionFixedDiscountDeleteRequest

// PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody defines body for PostPublisherPromotionFixedDiscountUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody = PostPublisherPromotionFixedDiscountUpdateRequest

// PostPublisherPromotionGenerateFormdataRequestBody defines body for PostPublisherPromotionGenerate for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionGenerateFormdataRequestBody = PostPublisherPromotionGenerateRequest

// PostPublisherPromotionTermAddFormdataRequestBody defines body for PostPublisherPromotionTermAdd for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionTermAddFormdataRequestBody = PostPublisherPromotionTermAddRequest

// PostPublisherPromotionTermDeleteFormdataRequestBody defines body for PostPublisherPromotionTermDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionTermDeleteFormdataRequestBody = PostPublisherPromotionTermDeleteRequest

// PostPublisherPromotionUpdateFormdataRequestBody defines body for PostPublisherPromotionUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherPromotionUpdateFormdataRequestBody = PostPublisherPromotionUpdateRequest

// PostPublisherResourceCreateFormdataRequestBody defines body for PostPublisherResourceCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceCreateFormdataRequestBody = PostPublisherResourceCreateRequest

// PostPublisherResourceDeleteFormdataRequestBody defines body for PostPublisherResourceDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceDeleteFormdataRequestBody = PostPublisherResourceDeleteRequest

// PostPublisherResourceTagAttachFormdataRequestBody defines body for PostPublisherResourceTagAttach for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceTagAttachFormdataRequestBody = PostPublisherResourceTagAttachRequest

// PostPublisherResourceTagDeleteFormdataRequestBody defines body for PostPublisherResourceTagDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceTagDeleteFormdataRequestBody = PostPublisherResourceTagDeleteRequest

// PostPublisherResourceTagDetachFormdataRequestBody defines body for PostPublisherResourceTagDetach for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceTagDetachFormdataRequestBody = PostPublisherResourceTagDetachRequest

// PostPublisherResourceUpdateFormdataRequestBody defines body for PostPublisherResourceUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherResourceUpdateFormdataRequestBody = PostPublisherResourceUpdateRequest

// PostPublisherScheduleCreateFormdataRequestBody defines body for PostPublisherScheduleCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleCreateFormdataRequestBody = PostPublisherScheduleCreateRequest

// PostPublisherScheduleDeleteFormdataRequestBody defines body for PostPublisherScheduleDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleDeleteFormdataRequestBody = PostPublisherScheduleDeleteRequest

// PostPublisherScheduleGetFormdataRequestBody defines body for PostPublisherScheduleGet for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleGetFormdataRequestBody = PostPublisherScheduleGetRequest

// PostPublisherScheduleListFormdataRequestBody defines body for PostPublisherScheduleList for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleListFormdataRequestBody = PostPublisherScheduleListRequest

// PostPublisherSchedulePeriodAddFormdataRequestBody defines body for PostPublisherSchedulePeriodAdd for application/x-www-form-urlencoded ContentType.
type PostPublisherSchedulePeriodAddFormdataRequestBody = PostPublisherSchedulePeriodAddRequest

// PostPublisherSchedulePeriodDeleteFormdataRequestBody defines body for PostPublisherSchedulePeriodDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherSchedulePeriodDeleteFormdataRequestBody = PostPublisherSchedulePeriodDeleteRequest

// PostPublisherSchedulePeriodUpdateFormdataRequestBody defines body for PostPublisherSchedulePeriodUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherSchedulePeriodUpdateFormdataRequestBody = PostPublisherSchedulePeriodUpdateRequest

// PostPublisherScheduleTermsFormdataRequestBody defines body for PostPublisherScheduleTerms for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleTermsFormdataRequestBody = PostPublisherScheduleTermsRequest

// PostPublisherScheduleUpdateFormdataRequestBody defines body for PostPublisherScheduleUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherScheduleUpdateFormdataRequestBody = PostPublisherScheduleUpdateRequest

// PostPublisherSubscriptionAddressAssignFormdataRequestBody defines body for PostPublisherSubscriptionAddressAssign for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionAddressAssignFormdataRequestBody = PostPublisherSubscriptionAddressAssignRequest

// PostPublisherSubscriptionCancelFormdataRequestBody defines body for PostPublisherSubscriptionCancel for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionCancelFormdataRequestBody = PostPublisherSubscriptionCancelRequest

// PostPublisherSubscriptionCancelDeferredFormdataRequestBody defines body for PostPublisherSubscriptionCancelDeferred for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionCancelDeferredFormdataRequestBody = PostPublisherSubscriptionCancelDeferredRequest

// PostPublisherSubscriptionCountFormdataRequestBody defines body for PostPublisherSubscriptionCount for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionCountFormdataRequestBody = PostPublisherSubscriptionCountRequest

// PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody defines body for PostPublisherSubscriptionIsPartiallyRefundable for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody = PostPublisherSubscriptionIsPartiallyRefundableRequest

// PostPublisherSubscriptionResumeFormdataRequestBody defines body for PostPublisherSubscriptionResume for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionResumeFormdataRequestBody = PostPublisherSubscriptionResumeRequest

// PostPublisherSubscriptionShareInviteFormdataRequestBody defines body for PostPublisherSubscriptionShareInvite for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareInviteFormdataRequestBody = PostPublisherSubscriptionShareInviteRequest

// PostPublisherSubscriptionShareListFormdataRequestBody defines body for PostPublisherSubscriptionShareList for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareListFormdataRequestBody = PostPublisherSubscriptionShareListRequest

// PostPublisherSubscriptionShareResendFormdataRequestBody defines body for PostPublisherSubscriptionShareResend for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareResendFormdataRequestBody = PostPublisherSubscriptionShareResendRequest

// PostPublisherSubscriptionShareRevokeFormdataRequestBody defines body for PostPublisherSubscriptionShareRevoke for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareRevokeFormdataRequestBody = PostPublisherSubscriptionShareRevokeRequest

// PostPublisherSubscriptionShareStartFormdataRequestBody defines body for PostPublisherSubscriptionShareStart for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareStartFormdataRequestBody = PostPublisherSubscriptionShareStartRequest

// PostPublisherSubscriptionShareStopFormdataRequestBody defines body for PostPublisherSubscriptionShareStop for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareStopFormdataRequestBody = PostPublisherSubscriptionShareStopRequest

// PostPublisherSubscriptionShareUpdateFormdataRequestBody defines body for PostPublisherSubscriptionShareUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareUpdateFormdataRequestBody = PostPublisherSubscriptionShareUpdateRequest

// PostPublisherSubscriptionShareUserAddFormdataRequestBody defines body for PostPublisherSubscriptionShareUserAdd for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareUserAddFormdataRequestBody = PostPublisherSubscriptionShareUserAddRequest

// PostPublisherSubscriptionShareUserRemoveFormdataRequestBody defines body for PostPublisherSubscriptionShareUserRemove for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareUserRemoveFormdataRequestBody = PostPublisherSubscriptionShareUserRemoveRequest

// PostPublisherSubscriptionShareValidateFormdataRequestBody defines body for PostPublisherSubscriptionShareValidate for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionShareValidateFormdataRequestBody = PostPublisherSubscriptionShareValidateRequest

// PostPublisherSubscriptionStatsFormdataRequestBody defines body for PostPublisherSubscriptionStats for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionStatsFormdataRequestBody = PostPublisherSubscriptionStatsRequest

// PostPublisherSubscriptionUpdateFormdataRequestBody defines body for PostPublisherSubscriptionUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherSubscriptionUpdateFormdataRequestBody = PostPublisherSubscriptionUpdateRequest

// PostPublisherTeamListFormdataRequestBody defines body for PostPublisherTeamList for application/x-www-form-urlencoded ContentType.
type PostPublisherTeamListFormdataRequestBody = PostPublisherTeamListRequest

// PostPublisherTermChangeCanFormdataRequestBody defines body for PostPublisherTermChangeCan for application/x-www-form-urlencoded ContentType.
type PostPublisherTermChangeCanFormdataRequestBody = PostPublisherTermChangeCanRequest

// PostPublisherTermChangeCancelFormdataRequestBody defines body for PostPublisherTermChangeCancel for application/x-www-form-urlencoded ContentType.
type PostPublisherTermChangeCancelFormdataRequestBody = PostPublisherTermChangeCancelRequest

// PostPublisherTermChangeDoFormdataRequestBody defines body for PostPublisherTermChangeDo for application/x-www-form-urlencoded ContentType.
type PostPublisherTermChangeDoFormdataRequestBody = PostPublisherTermChangeDoRequest

// PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody defines body for PostPublisherTermChangeGetSubscriptionUpgradeStatus for application/x-www-form-urlencoded ContentType.
type PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody = PostPublisherTermChangeGetSubscriptionUpgradeStatusRequest

// PostPublisherTermChangeOptionCreateFormdataRequestBody defines body for PostPublisherTermChangeOptionCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermChangeOptionCreateFormdataRequestBody = PostPublisherTermChangeOptionCreateRequest

// PostPublisherTermCustomCreateFormdataRequestBody defines body for PostPublisherTermCustomCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermCustomCreateFormdataRequestBody = PostPublisherTermCustomCreateRequest

// PostPublisherTermCustomUpdateFormdataRequestBody defines body for PostPublisherTermCustomUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermCustomUpdateFormdataRequestBody = PostPublisherTermCustomUpdateRequest

// PostPublisherTermDeleteFormdataRequestBody defines body for PostPublisherTermDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherTermDeleteFormdataRequestBody = PostPublisherTermDeleteRequest

// PostPublisherTermDynamicCreateFormdataRequestBody defines body for PostPublisherTermDynamicCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermDynamicCreateFormdataRequestBody PostPublisherTermDynamicCreateFormdataBody

// PostPublisherTermDynamicUpdateFormdataRequestBody defines body for PostPublisherTermDynamicUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermDynamicUpdateFormdataRequestBody PostPublisherTermDynamicUpdateFormdataBody

// PostPublisherTermExternalCreateFormdataRequestBody defines body for PostPublisherTermExternalCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermExternalCreateFormdataRequestBody = PostPublisherTermExternalCreateRequest

// PostPublisherTermExternalUpdateFormdataRequestBody defines body for PostPublisherTermExternalUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermExternalUpdateFormdataRequestBody = PostPublisherTermExternalUpdateRequest

// PostPublisherTermGiftCreateFormdataRequestBody defines body for PostPublisherTermGiftCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermGiftCreateFormdataRequestBody = PostPublisherTermGiftCreateRequest

// PostPublisherTermGiftUpdateFormdataRequestBody defines body for PostPublisherTermGiftUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermGiftUpdateFormdataRequestBody = PostPublisherTermGiftUpdateRequest

// PostPublisherTermPaymentCreateFormdataRequestBody defines body for PostPublisherTermPaymentCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermPaymentCreateFormdataRequestBody = PostPublisherTermPaymentCreateRequest

// PostPublisherTermPaymentUpdateFormdataRequestBody defines body for PostPublisherTermPaymentUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermPaymentUpdateFormdataRequestBody = PostPublisherTermPaymentUpdateRequest

// PostPublisherTermRegistrationCreateFormdataRequestBody defines body for PostPublisherTermRegistrationCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermRegistrationCreateFormdataRequestBody = PostPublisherTermRegistrationCreateRequest

// PostPublisherTermRegistrationUpdateFormdataRequestBody defines body for PostPublisherTermRegistrationUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherTermRegistrationUpdateFormdataRequestBody = PostPublisherTermRegistrationUpdateRequest

// PostPublisherUserAccessActiveCountFormdataRequestBody defines body for PostPublisherUserAccessActiveCount for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAccessActiveCountFormdataRequestBody = PostPublisherUserAccessActiveCountRequest

// PostPublisherUserAccessUpdateFormdataRequestBody defines body for PostPublisherUserAccessUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAccessUpdateFormdataRequestBody = PostPublisherUserAccessUpdateRequest

// PostPublisherUserAddressCreateFormdataRequestBody defines body for PostPublisherUserAddressCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAddressCreateFormdataRequestBody = PostPublisherUserAddressCreateRequest

// PostPublisherUserAddressDeleteFormdataRequestBody defines body for PostPublisherUserAddressDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAddressDeleteFormdataRequestBody = PostPublisherUserAddressDeleteRequest

// PostPublisherUserAddressHistoryFormdataRequestBody defines body for PostPublisherUserAddressHistory for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAddressHistoryFormdataRequestBody = PostPublisherUserAddressHistoryRequest

// PostPublisherUserAddressUpdateFormdataRequestBody defines body for PostPublisherUserAddressUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAddressUpdateFormdataRequestBody = PostPublisherUserAddressUpdateRequest

// PostPublisherUserAppCountFormdataRequestBody defines body for PostPublisherUserAppCount for application/x-www-form-urlencoded ContentType.
type PostPublisherUserAppCountFormdataRequestBody = PostPublisherUserAppCountRequest

// PostPublisherUserBillingAddressCreateFormdataRequestBody defines body for PostPublisherUserBillingAddressCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressCreateFormdataRequestBody = PostPublisherUserBillingAddressCreateRequest

// PostPublisherUserBillingAddressDeleteFormdataRequestBody defines body for PostPublisherUserBillingAddressDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressDeleteFormdataRequestBody = PostPublisherUserBillingAddressDeleteRequest

// PostPublisherUserBillingAddressGetFormdataRequestBody defines body for PostPublisherUserBillingAddressGet for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressGetFormdataRequestBody = PostPublisherUserBillingAddressGetRequest

// PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody defines body for PostPublisherUserBillingAddressGetByPayment for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody = PostPublisherUserBillingAddressGetByPaymentRequest

// PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody defines body for PostPublisherUserBillingAddressGetByPaymentInfo for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody = PostPublisherUserBillingAddressGetByPaymentInfoRequest

// PostPublisherUserBillingAddressListFormdataRequestBody defines body for PostPublisherUserBillingAddressList for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBillingAddressListFormdataRequestBody = PostPublisherUserBillingAddressListRequest

// PostPublisherUserBulkImportDeleteFormdataRequestBody defines body for PostPublisherUserBulkImportDelete for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBulkImportDeleteFormdataRequestBody = PostPublisherUserBulkImportDeleteRequest

// PostPublisherUserBulkImportDownloadFormdataRequestBody defines body for PostPublisherUserBulkImportDownload for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBulkImportDownloadFormdataRequestBody = PostPublisherUserBulkImportDownloadRequest

// PostPublisherUserBulkImportListCompletedFormdataRequestBody defines body for PostPublisherUserBulkImportListCompleted for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBulkImportListCompletedFormdataRequestBody = PostPublisherUserBulkImportListCompletedRequest

// PostPublisherUserBulkImportListProcessingFormdataRequestBody defines body for PostPublisherUserBulkImportListProcessing for application/x-www-form-urlencoded ContentType.
type PostPublisherUserBulkImportListProcessingFormdataRequestBody = PostPublisherUserBulkImportListProcessingRequest

// PostPublisherUserCreateFormdataRequestBody defines body for PostPublisherUserCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserCreateFormdataRequestBody = PostPublisherUserCreateRequest

// PostPublisherUserDisableFormdataRequestBody defines body for PostPublisherUserDisable for application/x-www-form-urlencoded ContentType.
type PostPublisherUserDisableFormdataRequestBody = PostPublisherUserDisableRequest

// PostPublisherUserGetFormdataRequestBody defines body for PostPublisherUserGet for application/x-www-form-urlencoded ContentType.
type PostPublisherUserGetFormdataRequestBody = PostPublisherUserGetRequest

// PostPublisherUserListFormdataRequestBody defines body for PostPublisherUserList for application/x-www-form-urlencoded ContentType.
type PostPublisherUserListFormdataRequestBody = PostPublisherUserListRequest

// PostPublisherUserListAccessesFormdataRequestBody defines body for PostPublisherUserListAccesses for application/x-www-form-urlencoded ContentType.
type PostPublisherUserListAccessesFormdataRequestBody = PostPublisherUserListAccessesRequest

// PostPublisherUserNoteCreateFormdataRequestBody defines body for PostPublisherUserNoteCreate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserNoteCreateFormdataRequestBody = PostPublisherUserNoteCreateRequest

// PostPublisherUserNoteUpdateFormdataRequestBody defines body for PostPublisherUserNoteUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserNoteUpdateFormdataRequestBody = PostPublisherUserNoteUpdateRequest

// PostPublisherUserRegisterFormdataRequestBody defines body for PostPublisherUserRegister for application/x-www-form-urlencoded ContentType.
type PostPublisherUserRegisterFormdataRequestBody = PostPublisherUserRegisterRequest

// PostPublisherUserSearchFormdataRequestBody defines body for PostPublisherUserSearch for application/x-www-form-urlencoded ContentType.
type PostPublisherUserSearchFormdataRequestBody = PostPublisherUserSearchRequest

// PostPublisherUserUpdateFormdataRequestBody defines body for PostPublisherUserUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherUserUpdateFormdataRequestBody PostPublisherUserUpdateFormdataBody

// PostPublisherVoucherResendFormdataRequestBody defines body for PostPublisherVoucherResend for application/x-www-form-urlencoded ContentType.
type PostPublisherVoucherResendFormdataRequestBody = PostPublisherVoucherResendRequest

// PostPublisherWebhookSettingsUpdateFormdataRequestBody defines body for PostPublisherWebhookSettingsUpdate for application/x-www-form-urlencoded ContentType.
type PostPublisherWebhookSettingsUpdateFormdataRequestBody = PostPublisherWebhookSettingsUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPublisherAdblockerGet request
	GetPublisherAdblockerGet(ctx context.Context, params *GetPublisherAdblockerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAfcConfigurationDelete request
	GetPublisherAfcConfigurationDelete(ctx context.Context, params *GetPublisherAfcConfigurationDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAfcConfigurationGet request
	GetPublisherAfcConfigurationGet(ctx context.Context, params *GetPublisherAfcConfigurationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAfcConfigurationHealthCheck request
	GetPublisherAfcConfigurationHealthCheck(ctx context.Context, params *GetPublisherAfcConfigurationHealthCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAfcConfigurationSave request
	GetPublisherAfcConfigurationSave(ctx context.Context, params *GetPublisherAfcConfigurationSaveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAppApiTokenGenerate request
	GetPublisherAppApiTokenGenerate(ctx context.Context, params *GetPublisherAppApiTokenGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAppCurrencies request
	GetPublisherAppCurrencies(ctx context.Context, params *GetPublisherAppCurrenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAppFeaturesGet request
	GetPublisherAppFeaturesGet(ctx context.Context, params *GetPublisherAppFeaturesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAppGet request
	GetPublisherAppGet(ctx context.Context, params *GetPublisherAppGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherAppList request
	GetPublisherAppList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConsentEntryList request
	GetPublisherConsentEntryList(ctx context.Context, params *GetPublisherConsentEntryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConsentGet request
	GetPublisherConsentGet(ctx context.Context, params *GetPublisherConsentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConsentList request
	GetPublisherConsentList(ctx context.Context, params *GetPublisherConsentListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConversionCount request
	GetPublisherConversionCount(ctx context.Context, params *GetPublisherConversionCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherConversionCustomCreateWithBody request with any body
	PostPublisherConversionCustomCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherConversionCustomCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConversionDataGet request
	GetPublisherConversionDataGet(ctx context.Context, params *GetPublisherConversionDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherConversionExternalCreateWithBody request with any body
	PostPublisherConversionExternalCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherConversionExternalCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConversionGet request
	GetPublisherConversionGet(ctx context.Context, params *GetPublisherConversionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConversionLastAccess request
	GetPublisherConversionLastAccess(ctx context.Context, params *GetPublisherConversionLastAccessParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherConversionList request
	GetPublisherConversionList(ctx context.Context, params *GetPublisherConversionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherConversionLogWithBody request with any body
	PostPublisherConversionLogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherConversionLogWithFormdataBody(ctx context.Context, body PostPublisherConversionLogFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherConversionRegistrationCreateWithBody request with any body
	PostPublisherConversionRegistrationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherConversionRegistrationCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExperienceMetadataList request
	GetPublisherExperienceMetadataList(ctx context.Context, params *GetPublisherExperienceMetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateAamDailyWithBody request with any body
	PostPublisherExportCreateAamDailyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateAamDailyWithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamDailyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateAamMonthlyWithBody request with any body
	PostPublisherExportCreateAamMonthlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateAamMonthlyWithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamMonthlyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateAamMonthlyV2WithBody request with any body
	PostPublisherExportCreateAamMonthlyV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateAamMonthlyV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamMonthlyV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportCreateAccessReportExport request
	GetPublisherExportCreateAccessReportExport(ctx context.Context, params *GetPublisherExportCreateAccessReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportCreateAccessReportExportV2 request
	GetPublisherExportCreateAccessReportExportV2(ctx context.Context, params *GetPublisherExportCreateAccessReportExportV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportCreateDailyActivityReportExport request
	GetPublisherExportCreateDailyActivityReportExport(ctx context.Context, params *GetPublisherExportCreateDailyActivityReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportCreateMonthlyActivityReportExport request
	GetPublisherExportCreateMonthlyActivityReportExport(ctx context.Context, params *GetPublisherExportCreateMonthlyActivityReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateSubscriptionDetailsReportWithBody request with any body
	PostPublisherExportCreateSubscriptionDetailsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateSubscriptionDetailsReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateSubscriptionDetailsReportV2WithBody request with any body
	PostPublisherExportCreateSubscriptionDetailsReportV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateSubscriptionDetailsReportV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateSubscriptionSummaryReportWithBody request with any body
	PostPublisherExportCreateSubscriptionSummaryReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateSubscriptionSummaryReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportCreateTermChangeReportExport request
	GetPublisherExportCreateTermChangeReportExport(ctx context.Context, params *GetPublisherExportCreateTermChangeReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateTransactionsReportWithBody request with any body
	PostPublisherExportCreateTransactionsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateTransactionsReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateTransactionsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateTransactionsReportV2WithBody request with any body
	PostPublisherExportCreateTransactionsReportV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateTransactionsReportV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateTransactionsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExportCreateUserExportWithBody request with any body
	PostPublisherExportCreateUserExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExportCreateUserExportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateUserExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportDelete request
	GetPublisherExportDelete(ctx context.Context, params *GetPublisherExportDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportDownload request
	GetPublisherExportDownload(ctx context.Context, params *GetPublisherExportDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportGet request
	GetPublisherExportGet(ctx context.Context, params *GetPublisherExportGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportList request
	GetPublisherExportList(ctx context.Context, params *GetPublisherExportListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherExportRun request
	GetPublisherExportRun(ctx context.Context, params *GetPublisherExportRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherExternalProviderPaymentUpdateWithBody request with any body
	PostPublisherExternalProviderPaymentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherExternalProviderPaymentUpdateWithFormdataBody(ctx context.Context, body PostPublisherExternalProviderPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherGdprDeleteWithBody request with any body
	PostPublisherGdprDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherGdprDeleteWithFormdataBody(ctx context.Context, body PostPublisherGdprDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherGdprDeleteAnonWithBody request with any body
	PostPublisherGdprDeleteAnonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherGdprDeleteAnonWithFormdataBody(ctx context.Context, body PostPublisherGdprDeleteAnonFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherGdprExportWithBody request with any body
	PostPublisherGdprExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherGdprExportWithFormdataBody(ctx context.Context, body PostPublisherGdprExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryAdd request
	GetPublisherInquiryAdd(ctx context.Context, params *GetPublisherInquiryAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryComments request
	GetPublisherInquiryComments(ctx context.Context, params *GetPublisherInquiryCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryDetails request
	GetPublisherInquiryDetails(ctx context.Context, params *GetPublisherInquiryDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryInquiryActions request
	GetPublisherInquiryInquiryActions(ctx context.Context, params *GetPublisherInquiryInquiryActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryLastComment request
	GetPublisherInquiryLastComment(ctx context.Context, params *GetPublisherInquiryLastCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryList request
	GetPublisherInquiryList(ctx context.Context, params *GetPublisherInquiryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherInquiryUnresolvedCount request
	GetPublisherInquiryUnresolvedCount(ctx context.Context, params *GetPublisherInquiryUnresolvedCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractActivateWithBody request with any body
	PostPublisherLicensingContractActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractArchiveWithBody request with any body
	PostPublisherLicensingContractArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractCreateWithBody request with any body
	PostPublisherLicensingContractCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractDeactivateWithBody request with any body
	PostPublisherLicensingContractDeactivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractDeactivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDeactivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractGet request
	GetPublisherLicensingContractGet(ctx context.Context, params *GetPublisherLicensingContractGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractList request
	GetPublisherLicensingContractList(ctx context.Context, params *GetPublisherLicensingContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractPeriodsActivateWithBody request with any body
	PostPublisherLicensingContractPeriodsActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractPeriodsActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractRedeemWithBody request with any body
	PostPublisherLicensingContractRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractRedeemWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractRedeemFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUpdateWithBody request with any body
	PostPublisherLicensingContractUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractDomainContractUserList request
	GetPublisherLicensingContractDomainContractUserList(ctx context.Context, params *GetPublisherLicensingContractDomainContractUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractDomainCreateWithBody request with any body
	PostPublisherLicensingContractDomainCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractDomainCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractDomainList request
	GetPublisherLicensingContractDomainList(ctx context.Context, params *GetPublisherLicensingContractDomainListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractDomainRemoveWithBody request with any body
	PostPublisherLicensingContractDomainRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractDomainRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractDomainRemoveAndRevokeWithBody request with any body
	PostPublisherLicensingContractDomainRemoveAndRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractDomainRemoveAndRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractDomainUpdateWithBody request with any body
	PostPublisherLicensingContractDomainUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractDomainUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractIpRangeCreateWithBody request with any body
	PostPublisherLicensingContractIpRangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractIpRangeCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractIpRangeList request
	GetPublisherLicensingContractIpRangeList(ctx context.Context, params *GetPublisherLicensingContractIpRangeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractIpRangeRemoveWithBody request with any body
	PostPublisherLicensingContractIpRangeRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractIpRangeRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractIpRangeUpdateWithBody request with any body
	PostPublisherLicensingContractIpRangeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractIpRangeUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserCreateWithBody request with any body
	PostPublisherLicensingContractUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserInviteWithBody request with any body
	PostPublisherLicensingContractUserInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserInviteWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingContractUserList request
	GetPublisherLicensingContractUserList(ctx context.Context, params *GetPublisherLicensingContractUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserRemoveWithBody request with any body
	PostPublisherLicensingContractUserRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserRemoveAndRevokeWithBody request with any body
	PostPublisherLicensingContractUserRemoveAndRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserRemoveAndRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserRestoreWithBody request with any body
	PostPublisherLicensingContractUserRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserRestoreWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRestoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserRevokeWithBody request with any body
	PostPublisherLicensingContractUserRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingContractUserUpdateWithBody request with any body
	PostPublisherLicensingContractUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingContractUserUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingLicenseeArchiveWithBody request with any body
	PostPublisherLicensingLicenseeArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingLicenseeArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingLicenseeCount request
	GetPublisherLicensingLicenseeCount(ctx context.Context, params *GetPublisherLicensingLicenseeCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingLicenseeCreateWithBody request with any body
	PostPublisherLicensingLicenseeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingLicenseeCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingLicenseeGet request
	GetPublisherLicensingLicenseeGet(ctx context.Context, params *GetPublisherLicensingLicenseeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingLicenseeList request
	GetPublisherLicensingLicenseeList(ctx context.Context, params *GetPublisherLicensingLicenseeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingLicenseeUpdateWithBody request with any body
	PostPublisherLicensingLicenseeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingLicenseeUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingNotificationList request
	GetPublisherLicensingNotificationList(ctx context.Context, params *GetPublisherLicensingNotificationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingNotificationRuleArchiveWithBody request with any body
	PostPublisherLicensingNotificationRuleArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingNotificationRuleArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingNotificationRuleCreateWithBody request with any body
	PostPublisherLicensingNotificationRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingNotificationRuleCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingNotificationRuleList request
	GetPublisherLicensingNotificationRuleList(ctx context.Context, params *GetPublisherLicensingNotificationRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingNotificationRuleUpdateWithBody request with any body
	PostPublisherLicensingNotificationRuleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingNotificationRuleUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLicensingScheduleContractPeriodsActivateWithBody request with any body
	PostPublisherLicensingScheduleContractPeriodsActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLicensingScheduleContractPeriodsActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLicensingScheduleContracts request
	GetPublisherLicensingScheduleContracts(ctx context.Context, params *GetPublisherLicensingScheduleContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLinkedTermConfigurationWithBody request with any body
	PostPublisherLinkedTermConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLinkedTermConfigurationWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLinkedTermCustomFieldConfigurationWithBody request with any body
	PostPublisherLinkedTermCustomFieldConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLinkedTermCustomFieldConfigurationWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherLinkedTermEventWithBody request with any body
	PostPublisherLinkedTermEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherLinkedTermEventWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermEventFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherLinkedTermSubscription request
	GetPublisherLinkedTermSubscription(ctx context.Context, params *GetPublisherLinkedTermSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferCount request
	GetPublisherOfferCount(ctx context.Context, params *GetPublisherOfferCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferCreateWithBody request with any body
	PostPublisherOfferCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferDeleteWithBody request with any body
	PostPublisherOfferDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferGet request
	GetPublisherOfferGet(ctx context.Context, params *GetPublisherOfferGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferList request
	GetPublisherOfferList(ctx context.Context, params *GetPublisherOfferListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateArchive request
	GetPublisherOfferTemplateArchive(ctx context.Context, params *GetPublisherOfferTemplateArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateConvertBoilerplateToTemplate request
	GetPublisherOfferTemplateConvertBoilerplateToTemplate(ctx context.Context, params *GetPublisherOfferTemplateConvertBoilerplateToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateCount request
	GetPublisherOfferTemplateCount(ctx context.Context, params *GetPublisherOfferTemplateCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateCreateWithBody request with any body
	PostPublisherOfferTemplateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateCreateEmptyWithBody request with any body
	PostPublisherOfferTemplateCreateEmptyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateCreateEmptyWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateCreateEmptyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateDefaultCode request
	GetPublisherOfferTemplateDefaultCode(ctx context.Context, params *GetPublisherOfferTemplateDefaultCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateDeleteWithBody request with any body
	PostPublisherOfferTemplateDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateDuplicate request
	GetPublisherOfferTemplateDuplicate(ctx context.Context, params *GetPublisherOfferTemplateDuplicateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateGet request
	GetPublisherOfferTemplateGet(ctx context.Context, params *GetPublisherOfferTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateGetHistory request
	GetPublisherOfferTemplateGetHistory(ctx context.Context, params *GetPublisherOfferTemplateGetHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateInheritedCount request
	GetPublisherOfferTemplateInheritedCount(ctx context.Context, params *GetPublisherOfferTemplateInheritedCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateInheritedUpdateWithBody request with any body
	PostPublisherOfferTemplateInheritedUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateInheritedUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateList request
	GetPublisherOfferTemplateList(ctx context.Context, params *GetPublisherOfferTemplateListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateListBoilerplates request
	GetPublisherOfferTemplateListBoilerplates(ctx context.Context, params *GetPublisherOfferTemplateListBoilerplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateListByCategory request
	GetPublisherOfferTemplateListByCategory(ctx context.Context, params *GetPublisherOfferTemplateListByCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateMakeGlobal request
	GetPublisherOfferTemplateMakeGlobal(ctx context.Context, params *GetPublisherOfferTemplateMakeGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateRestore request
	GetPublisherOfferTemplateRestore(ctx context.Context, params *GetPublisherOfferTemplateRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateUpdateWithBody request with any body
	PostPublisherOfferTemplateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateUpdateContentfieldsWithBody request with any body
	PostPublisherOfferTemplateUpdateContentfieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateUpdateContentfieldsWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateUpdatefullWithBody request with any body
	PostPublisherOfferTemplateUpdatefullWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateUpdatefullWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdatefullFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateVariantArchive request
	GetPublisherOfferTemplateVariantArchive(ctx context.Context, params *GetPublisherOfferTemplateVariantArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateVariantCreateWithBody request with any body
	PostPublisherOfferTemplateVariantCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateVariantCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateVariantDeleteWithBody request with any body
	PostPublisherOfferTemplateVariantDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateVariantDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateVariantDuplicate request
	GetPublisherOfferTemplateVariantDuplicate(ctx context.Context, params *GetPublisherOfferTemplateVariantDuplicateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateVariantGet request
	GetPublisherOfferTemplateVariantGet(ctx context.Context, params *GetPublisherOfferTemplateVariantGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTemplateVariantRestore request
	GetPublisherOfferTemplateVariantRestore(ctx context.Context, params *GetPublisherOfferTemplateVariantRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTemplateVariantUpdateWithBody request with any body
	PostPublisherOfferTemplateVariantUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTemplateVariantUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTermAddWithBody request with any body
	PostPublisherOfferTermAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTermAddWithFormdataBody(ctx context.Context, body PostPublisherOfferTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTermList request
	GetPublisherOfferTermList(ctx context.Context, params *GetPublisherOfferTermListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherOfferTermOfferList request
	GetPublisherOfferTermOfferList(ctx context.Context, params *GetPublisherOfferTermOfferListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTermRemoveWithBody request with any body
	PostPublisherOfferTermRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTermRemoveWithFormdataBody(ctx context.Context, body PostPublisherOfferTermRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferTermReorderWithBody request with any body
	PostPublisherOfferTermReorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferTermReorderWithFormdataBody(ctx context.Context, body PostPublisherOfferTermReorderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherOfferUpdateWithBody request with any body
	PostPublisherOfferUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherOfferUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPaymentGet request
	GetPublisherPaymentGet(ctx context.Context, params *GetPublisherPaymentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPaymentIsPartialRefund request
	GetPublisherPaymentIsPartialRefund(ctx context.Context, params *GetPublisherPaymentIsPartialRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodAddWithBody request with any body
	PostPublisherPaymentMethodAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodAddWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodBillingAddressApplyToAllWithBody request with any body
	PostPublisherPaymentMethodBillingAddressApplyToAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodBillingAddressApplyToAllWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodBillingAddressAttachWithBody request with any body
	PostPublisherPaymentMethodBillingAddressAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodBillingAddressAttachWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodBillingAddressDetachWithBody request with any body
	PostPublisherPaymentMethodBillingAddressDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodBillingAddressDetachWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodBillingAddressGetWithBody request with any body
	PostPublisherPaymentMethodBillingAddressGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodBillingAddressGetWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPaymentMethodGet request
	GetPublisherPaymentMethodGet(ctx context.Context, params *GetPublisherPaymentMethodGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodGmoRefreshWithBody request with any body
	PostPublisherPaymentMethodGmoRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodGmoRefreshWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodGmoRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodRemoveWithBody request with any body
	PostPublisherPaymentMethodRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodRemoveWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentMethodUpdateWithBody request with any body
	PostPublisherPaymentMethodUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentMethodUpdateWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPaymentProviderConfigurationSetVisibilityWithBody request with any body
	PostPublisherPaymentProviderConfigurationSetVisibilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPaymentProviderConfigurationSetVisibilityWithFormdataBody(ctx context.Context, body PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPaymentRefund request
	GetPublisherPaymentRefund(ctx context.Context, params *GetPublisherPaymentRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionCodeCount request
	GetPublisherPromotionCodeCount(ctx context.Context, params *GetPublisherPromotionCodeCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionCodeCreate request
	GetPublisherPromotionCodeCreate(ctx context.Context, params *GetPublisherPromotionCodeCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionCodeDeleteWithBody request with any body
	PostPublisherPromotionCodeDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionCodeDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionCodeExportWithBody request with any body
	PostPublisherPromotionCodeExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionCodeExportWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionCodeGet request
	GetPublisherPromotionCodeGet(ctx context.Context, params *GetPublisherPromotionCodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionCodeList request
	GetPublisherPromotionCodeList(ctx context.Context, params *GetPublisherPromotionCodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionCodeUpdateWithBody request with any body
	PostPublisherPromotionCodeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionCodeUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionCount request
	GetPublisherPromotionCount(ctx context.Context, params *GetPublisherPromotionCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionCreateWithBody request with any body
	PostPublisherPromotionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionCreateWithFormdataBody(ctx context.Context, body PostPublisherPromotionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionDeleteWithBody request with any body
	PostPublisherPromotionDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionExistsWithBody request with any body
	PostPublisherPromotionExistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionExistsWithFormdataBody(ctx context.Context, body PostPublisherPromotionExistsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionFixedDiscountAdd request
	GetPublisherPromotionFixedDiscountAdd(ctx context.Context, params *GetPublisherPromotionFixedDiscountAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionFixedDiscountDeleteWithBody request with any body
	PostPublisherPromotionFixedDiscountDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionFixedDiscountDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionFixedDiscountUpdateWithBody request with any body
	PostPublisherPromotionFixedDiscountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionFixedDiscountUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionGenerateWithBody request with any body
	PostPublisherPromotionGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionGenerateWithFormdataBody(ctx context.Context, body PostPublisherPromotionGenerateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionGet request
	GetPublisherPromotionGet(ctx context.Context, params *GetPublisherPromotionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionList request
	GetPublisherPromotionList(ctx context.Context, params *GetPublisherPromotionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionTermAddWithBody request with any body
	PostPublisherPromotionTermAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionTermAddWithFormdataBody(ctx context.Context, body PostPublisherPromotionTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionTermDeleteWithBody request with any body
	PostPublisherPromotionTermDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionTermDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionTermList request
	GetPublisherPromotionTermList(ctx context.Context, params *GetPublisherPromotionTermListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherPromotionTotal request
	GetPublisherPromotionTotal(ctx context.Context, params *GetPublisherPromotionTotalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherPromotionUpdateWithBody request with any body
	PostPublisherPromotionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherPromotionUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceAttach request
	GetPublisherResourceAttach(ctx context.Context, params *GetPublisherResourceAttachParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceBundleMembers request
	GetPublisherResourceBundleMembers(ctx context.Context, params *GetPublisherResourceBundleMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceCount request
	GetPublisherResourceCount(ctx context.Context, params *GetPublisherResourceCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceCreateWithBody request with any body
	PostPublisherResourceCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceCreateWithFormdataBody(ctx context.Context, body PostPublisherResourceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceCrossAppCount request
	GetPublisherResourceCrossAppCount(ctx context.Context, params *GetPublisherResourceCrossAppCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceDeleteWithBody request with any body
	PostPublisherResourceDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceDeleteWithFormdataBody(ctx context.Context, body PostPublisherResourceDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceDetach request
	GetPublisherResourceDetach(ctx context.Context, params *GetPublisherResourceDetachParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceGet request
	GetPublisherResourceGet(ctx context.Context, params *GetPublisherResourceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceList request
	GetPublisherResourceList(ctx context.Context, params *GetPublisherResourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceStatsList request
	GetPublisherResourceStatsList(ctx context.Context, params *GetPublisherResourceStatsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceTagAttachWithBody request with any body
	PostPublisherResourceTagAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceTagAttachWithFormdataBody(ctx context.Context, body PostPublisherResourceTagAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceTagBundles request
	GetPublisherResourceTagBundles(ctx context.Context, params *GetPublisherResourceTagBundlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceTagCreate request
	GetPublisherResourceTagCreate(ctx context.Context, params *GetPublisherResourceTagCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceTagDeleteWithBody request with any body
	PostPublisherResourceTagDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceTagDeleteWithFormdataBody(ctx context.Context, body PostPublisherResourceTagDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceTagDetachWithBody request with any body
	PostPublisherResourceTagDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceTagDetachWithFormdataBody(ctx context.Context, body PostPublisherResourceTagDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceTagGet request
	GetPublisherResourceTagGet(ctx context.Context, params *GetPublisherResourceTagGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceTagList request
	GetPublisherResourceTagList(ctx context.Context, params *GetPublisherResourceTagListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherResourceUpdateWithBody request with any body
	PostPublisherResourceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherResourceUpdateWithFormdataBody(ctx context.Context, body PostPublisherResourceUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherResourceUserList request
	GetPublisherResourceUserList(ctx context.Context, params *GetPublisherResourceUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleCreateWithBody request with any body
	PostPublisherScheduleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleCreateWithFormdataBody(ctx context.Context, body PostPublisherScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleDeleteWithBody request with any body
	PostPublisherScheduleDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleDeleteWithFormdataBody(ctx context.Context, body PostPublisherScheduleDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleGetWithBody request with any body
	PostPublisherScheduleGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleGetWithFormdataBody(ctx context.Context, body PostPublisherScheduleGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleListWithBody request with any body
	PostPublisherScheduleListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleListWithFormdataBody(ctx context.Context, body PostPublisherScheduleListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSchedulePeriodAddWithBody request with any body
	PostPublisherSchedulePeriodAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSchedulePeriodAddWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSchedulePeriodDeleteWithBody request with any body
	PostPublisherSchedulePeriodDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSchedulePeriodDeleteWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSchedulePeriodUpdateWithBody request with any body
	PostPublisherSchedulePeriodUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSchedulePeriodUpdateWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleTermsWithBody request with any body
	PostPublisherScheduleTermsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleTermsWithFormdataBody(ctx context.Context, body PostPublisherScheduleTermsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherScheduleUpdateWithBody request with any body
	PostPublisherScheduleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherScheduleUpdateWithFormdataBody(ctx context.Context, body PostPublisherScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionAddressAssignWithBody request with any body
	PostPublisherSubscriptionAddressAssignWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionAddressAssignWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionAddressAssignFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionCancelWithBody request with any body
	PostPublisherSubscriptionCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionCancelWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionCancelDeferredWithBody request with any body
	PostPublisherSubscriptionCancelDeferredWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionCancelDeferredWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCancelDeferredFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionCountWithBody request with any body
	PostPublisherSubscriptionCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionCountWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherSubscriptionGet request
	GetPublisherSubscriptionGet(ctx context.Context, params *GetPublisherSubscriptionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionIsPartiallyRefundableWithBody request with any body
	PostPublisherSubscriptionIsPartiallyRefundableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionIsPartiallyRefundableWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherSubscriptionList request
	GetPublisherSubscriptionList(ctx context.Context, params *GetPublisherSubscriptionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionResumeWithBody request with any body
	PostPublisherSubscriptionResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionResumeWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherSubscriptionSearch request
	GetPublisherSubscriptionSearch(ctx context.Context, params *GetPublisherSubscriptionSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareInviteWithBody request with any body
	PostPublisherSubscriptionShareInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareInviteWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareListWithBody request with any body
	PostPublisherSubscriptionShareListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareListWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareResendWithBody request with any body
	PostPublisherSubscriptionShareResendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareResendWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareRevokeWithBody request with any body
	PostPublisherSubscriptionShareRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareRevokeWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareStartWithBody request with any body
	PostPublisherSubscriptionShareStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareStartWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareStopWithBody request with any body
	PostPublisherSubscriptionShareStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareStopWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareUpdateWithBody request with any body
	PostPublisherSubscriptionShareUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareUpdateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareUserAddWithBody request with any body
	PostPublisherSubscriptionShareUserAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareUserAddWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUserAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareUserRemoveWithBody request with any body
	PostPublisherSubscriptionShareUserRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareUserRemoveWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionShareValidateWithBody request with any body
	PostPublisherSubscriptionShareValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionShareValidateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareValidateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionStatsWithBody request with any body
	PostPublisherSubscriptionStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionStatsWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionStatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherSubscriptionUpdateWithBody request with any body
	PostPublisherSubscriptionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherSubscriptionUpdateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTeamListWithBody request with any body
	PostPublisherTeamListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTeamListWithFormdataBody(ctx context.Context, body PostPublisherTeamListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherTermApplicable request
	GetPublisherTermApplicable(ctx context.Context, params *GetPublisherTermApplicableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermChangeCanWithBody request with any body
	PostPublisherTermChangeCanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermChangeCanWithFormdataBody(ctx context.Context, body PostPublisherTermChangeCanFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermChangeCancelWithBody request with any body
	PostPublisherTermChangeCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermChangeCancelWithFormdataBody(ctx context.Context, body PostPublisherTermChangeCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermChangeDoWithBody request with any body
	PostPublisherTermChangeDoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermChangeDoWithFormdataBody(ctx context.Context, body PostPublisherTermChangeDoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBody request with any body
	PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermChangeGetSubscriptionUpgradeStatusWithFormdataBody(ctx context.Context, body PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermChangeOptionCreateWithBody request with any body
	PostPublisherTermChangeOptionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermChangeOptionCreateWithFormdataBody(ctx context.Context, body PostPublisherTermChangeOptionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherTermCount request
	GetPublisherTermCount(ctx context.Context, params *GetPublisherTermCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermCustomCreateWithBody request with any body
	PostPublisherTermCustomCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermCustomCreateWithFormdataBody(ctx context.Context, body PostPublisherTermCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermCustomUpdateWithBody request with any body
	PostPublisherTermCustomUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermCustomUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermCustomUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermDeleteWithBody request with any body
	PostPublisherTermDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermDeleteWithFormdataBody(ctx context.Context, body PostPublisherTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermDynamicCreateWithBody request with any body
	PostPublisherTermDynamicCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermDynamicCreateWithFormdataBody(ctx context.Context, body PostPublisherTermDynamicCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermDynamicUpdateWithBody request with any body
	PostPublisherTermDynamicUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermDynamicUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermDynamicUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermExternalCreateWithBody request with any body
	PostPublisherTermExternalCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermExternalCreateWithFormdataBody(ctx context.Context, body PostPublisherTermExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermExternalUpdateWithBody request with any body
	PostPublisherTermExternalUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermExternalUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermExternalUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherTermGet request
	GetPublisherTermGet(ctx context.Context, params *GetPublisherTermGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermGiftCreateWithBody request with any body
	PostPublisherTermGiftCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermGiftCreateWithFormdataBody(ctx context.Context, body PostPublisherTermGiftCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermGiftUpdateWithBody request with any body
	PostPublisherTermGiftUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermGiftUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermGiftUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermPaymentCreateWithBody request with any body
	PostPublisherTermPaymentCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermPaymentCreateWithFormdataBody(ctx context.Context, body PostPublisherTermPaymentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermPaymentUpdateWithBody request with any body
	PostPublisherTermPaymentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermPaymentUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermRegistrationCreateWithBody request with any body
	PostPublisherTermRegistrationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermRegistrationCreateWithFormdataBody(ctx context.Context, body PostPublisherTermRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherTermRegistrationUpdateWithBody request with any body
	PostPublisherTermRegistrationUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherTermRegistrationUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermRegistrationUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherTermStatsList request
	GetPublisherTermStatsList(ctx context.Context, params *GetPublisherTermStatsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherTestUserRef request
	GetPublisherTestUserRef(ctx context.Context, params *GetPublisherTestUserRefParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAccessActiveCountWithBody request with any body
	PostPublisherUserAccessActiveCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAccessActiveCountWithFormdataBody(ctx context.Context, body PostPublisherUserAccessActiveCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAccessCheck request
	GetPublisherUserAccessCheck(ctx context.Context, params *GetPublisherUserAccessCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAccessGrant request
	GetPublisherUserAccessGrant(ctx context.Context, params *GetPublisherUserAccessGrantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAccessGrantToUsers request
	GetPublisherUserAccessGrantToUsers(ctx context.Context, params *GetPublisherUserAccessGrantToUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAccessList request
	GetPublisherUserAccessList(ctx context.Context, params *GetPublisherUserAccessListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAccessRevoke request
	GetPublisherUserAccessRevoke(ctx context.Context, params *GetPublisherUserAccessRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAccessUpdateWithBody request with any body
	PostPublisherUserAccessUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAccessUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserAccessUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAddressCreateWithBody request with any body
	PostPublisherUserAddressCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAddressCreateWithFormdataBody(ctx context.Context, body PostPublisherUserAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAddressDeleteWithBody request with any body
	PostPublisherUserAddressDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAddressDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAddressHistoryWithBody request with any body
	PostPublisherUserAddressHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAddressHistoryWithFormdataBody(ctx context.Context, body PostPublisherUserAddressHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserAddressList request
	GetPublisherUserAddressList(ctx context.Context, params *GetPublisherUserAddressListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAddressUpdateWithBody request with any body
	PostPublisherUserAddressUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAddressUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserAddressUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserAppCountWithBody request with any body
	PostPublisherUserAppCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserAppCountWithFormdataBody(ctx context.Context, body PostPublisherUserAppCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressCreateWithBody request with any body
	PostPublisherUserBillingAddressCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressCreateWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressDeleteWithBody request with any body
	PostPublisherUserBillingAddressDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressGetWithBody request with any body
	PostPublisherUserBillingAddressGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressGetWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressGetByPaymentWithBody request with any body
	PostPublisherUserBillingAddressGetByPaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressGetByPaymentWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressGetByPaymentInfoWithBody request with any body
	PostPublisherUserBillingAddressGetByPaymentInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressGetByPaymentInfoWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBillingAddressListWithBody request with any body
	PostPublisherUserBillingAddressListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBillingAddressListWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBulkImportDeleteWithBody request with any body
	PostPublisherUserBulkImportDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBulkImportDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBulkImportDownloadWithBody request with any body
	PostPublisherUserBulkImportDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBulkImportDownloadWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportDownloadFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBulkImportListCompletedWithBody request with any body
	PostPublisherUserBulkImportListCompletedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBulkImportListCompletedWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportListCompletedFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserBulkImportListProcessingWithBody request with any body
	PostPublisherUserBulkImportListProcessingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserBulkImportListProcessingWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportListProcessingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserCreateWithBody request with any body
	PostPublisherUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserCreateWithFormdataBody(ctx context.Context, body PostPublisherUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserDisableWithBody request with any body
	PostPublisherUserDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserDisableWithFormdataBody(ctx context.Context, body PostPublisherUserDisableFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserEmailGet request
	GetPublisherUserEmailGet(ctx context.Context, params *GetPublisherUserEmailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserEmailList request
	GetPublisherUserEmailList(ctx context.Context, params *GetPublisherUserEmailListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserGetWithBody request with any body
	PostPublisherUserGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserGetWithFormdataBody(ctx context.Context, body PostPublisherUserGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserListWithBody request with any body
	PostPublisherUserListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserListWithFormdataBody(ctx context.Context, body PostPublisherUserListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserListAccessesWithBody request with any body
	PostPublisherUserListAccessesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserListAccessesWithFormdataBody(ctx context.Context, body PostPublisherUserListAccessesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserNoteCreateWithBody request with any body
	PostPublisherUserNoteCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserNoteCreateWithFormdataBody(ctx context.Context, body PostPublisherUserNoteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserNoteGet request
	GetPublisherUserNoteGet(ctx context.Context, params *GetPublisherUserNoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherUserNoteList request
	GetPublisherUserNoteList(ctx context.Context, params *GetPublisherUserNoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserNoteUpdateWithBody request with any body
	PostPublisherUserNoteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserNoteUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserNoteUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserRegisterWithBody request with any body
	PostPublisherUserRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserRegisterWithFormdataBody(ctx context.Context, body PostPublisherUserRegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserSearchWithBody request with any body
	PostPublisherUserSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserSearchWithFormdataBody(ctx context.Context, body PostPublisherUserSearchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherUserUpdateWithBody request with any body
	PostPublisherUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherUserUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherVoucherGet request
	GetPublisherVoucherGet(ctx context.Context, params *GetPublisherVoucherGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherVoucherList request
	GetPublisherVoucherList(ctx context.Context, params *GetPublisherVoucherListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherVoucherResendWithBody request with any body
	PostPublisherVoucherResendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherVoucherResendWithFormdataBody(ctx context.Context, body PostPublisherVoucherResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookEvents request
	GetPublisherWebhookEvents(ctx context.Context, params *GetPublisherWebhookEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookGet request
	GetPublisherWebhookGet(ctx context.Context, params *GetPublisherWebhookGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookResponseList request
	GetPublisherWebhookResponseList(ctx context.Context, params *GetPublisherWebhookResponseListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookResponseResend request
	GetPublisherWebhookResponseResend(ctx context.Context, params *GetPublisherWebhookResponseResendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookSettings request
	GetPublisherWebhookSettings(ctx context.Context, params *GetPublisherWebhookSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisherWebhookSettingsUpdateWithBody request with any body
	PostPublisherWebhookSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisherWebhookSettingsUpdateWithFormdataBody(ctx context.Context, body PostPublisherWebhookSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookSkip request
	GetPublisherWebhookSkip(ctx context.Context, params *GetPublisherWebhookSkipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherWebhookStatus request
	GetPublisherWebhookStatus(ctx context.Context, params *GetPublisherWebhookStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPublisherAdblockerGet(ctx context.Context, params *GetPublisherAdblockerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAdblockerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAfcConfigurationDelete(ctx context.Context, params *GetPublisherAfcConfigurationDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAfcConfigurationDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAfcConfigurationGet(ctx context.Context, params *GetPublisherAfcConfigurationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAfcConfigurationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAfcConfigurationHealthCheck(ctx context.Context, params *GetPublisherAfcConfigurationHealthCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAfcConfigurationHealthCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAfcConfigurationSave(ctx context.Context, params *GetPublisherAfcConfigurationSaveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAfcConfigurationSaveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAppApiTokenGenerate(ctx context.Context, params *GetPublisherAppApiTokenGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAppApiTokenGenerateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAppCurrencies(ctx context.Context, params *GetPublisherAppCurrenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAppCurrenciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAppFeaturesGet(ctx context.Context, params *GetPublisherAppFeaturesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAppFeaturesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAppGet(ctx context.Context, params *GetPublisherAppGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAppGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherAppList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherAppListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConsentEntryList(ctx context.Context, params *GetPublisherConsentEntryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConsentEntryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConsentGet(ctx context.Context, params *GetPublisherConsentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConsentGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConsentList(ctx context.Context, params *GetPublisherConsentListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConsentListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConversionCount(ctx context.Context, params *GetPublisherConversionCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConversionCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionCustomCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionCustomCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionCustomCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionCustomCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConversionDataGet(ctx context.Context, params *GetPublisherConversionDataGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConversionDataGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionExternalCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionExternalCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionExternalCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionExternalCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConversionGet(ctx context.Context, params *GetPublisherConversionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConversionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConversionLastAccess(ctx context.Context, params *GetPublisherConversionLastAccessParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConversionLastAccessRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherConversionList(ctx context.Context, params *GetPublisherConversionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherConversionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionLogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionLogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionLogWithFormdataBody(ctx context.Context, body PostPublisherConversionLogFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionLogRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionRegistrationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionRegistrationCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherConversionRegistrationCreateWithFormdataBody(ctx context.Context, body PostPublisherConversionRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherConversionRegistrationCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExperienceMetadataList(ctx context.Context, params *GetPublisherExperienceMetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExperienceMetadataListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamDailyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamDailyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamDailyWithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamDailyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamDailyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamMonthlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamMonthlyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamMonthlyWithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamMonthlyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamMonthlyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamMonthlyV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamMonthlyV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateAamMonthlyV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateAamMonthlyV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateAamMonthlyV2RequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportCreateAccessReportExport(ctx context.Context, params *GetPublisherExportCreateAccessReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportCreateAccessReportExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportCreateAccessReportExportV2(ctx context.Context, params *GetPublisherExportCreateAccessReportExportV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportCreateAccessReportExportV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportCreateDailyActivityReportExport(ctx context.Context, params *GetPublisherExportCreateDailyActivityReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportCreateDailyActivityReportExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportCreateMonthlyActivityReportExport(ctx context.Context, params *GetPublisherExportCreateMonthlyActivityReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportCreateMonthlyActivityReportExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionDetailsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionDetailsReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionDetailsReportV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionDetailsReportV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionSummaryReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateSubscriptionSummaryReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportCreateTermChangeReportExport(ctx context.Context, params *GetPublisherExportCreateTermChangeReportExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportCreateTermChangeReportExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateTransactionsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateTransactionsReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateTransactionsReportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateTransactionsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateTransactionsReportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateTransactionsReportV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateTransactionsReportV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateTransactionsReportV2WithFormdataBody(ctx context.Context, body PostPublisherExportCreateTransactionsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateTransactionsReportV2RequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateUserExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateUserExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExportCreateUserExportWithFormdataBody(ctx context.Context, body PostPublisherExportCreateUserExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExportCreateUserExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportDelete(ctx context.Context, params *GetPublisherExportDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportDownload(ctx context.Context, params *GetPublisherExportDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportDownloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportGet(ctx context.Context, params *GetPublisherExportGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportList(ctx context.Context, params *GetPublisherExportListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherExportRun(ctx context.Context, params *GetPublisherExportRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherExportRunRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExternalProviderPaymentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExternalProviderPaymentUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherExternalProviderPaymentUpdateWithFormdataBody(ctx context.Context, body PostPublisherExternalProviderPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherExternalProviderPaymentUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprDeleteWithFormdataBody(ctx context.Context, body PostPublisherGdprDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprDeleteAnonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprDeleteAnonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprDeleteAnonWithFormdataBody(ctx context.Context, body PostPublisherGdprDeleteAnonFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprDeleteAnonRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherGdprExportWithFormdataBody(ctx context.Context, body PostPublisherGdprExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherGdprExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryAdd(ctx context.Context, params *GetPublisherInquiryAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryAddRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryComments(ctx context.Context, params *GetPublisherInquiryCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryCommentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryDetails(ctx context.Context, params *GetPublisherInquiryDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryInquiryActions(ctx context.Context, params *GetPublisherInquiryInquiryActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryInquiryActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryLastComment(ctx context.Context, params *GetPublisherInquiryLastCommentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryLastCommentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryList(ctx context.Context, params *GetPublisherInquiryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherInquiryUnresolvedCount(ctx context.Context, params *GetPublisherInquiryUnresolvedCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherInquiryUnresolvedCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractActivateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractArchiveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDeactivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDeactivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDeactivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDeactivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDeactivateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractGet(ctx context.Context, params *GetPublisherLicensingContractGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractList(ctx context.Context, params *GetPublisherLicensingContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractPeriodsActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractPeriodsActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractPeriodsActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractPeriodsActivateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractRedeemWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractRedeemFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractRedeemRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractDomainContractUserList(ctx context.Context, params *GetPublisherLicensingContractDomainContractUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractDomainContractUserListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractDomainList(ctx context.Context, params *GetPublisherLicensingContractDomainListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractDomainListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainRemoveAndRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainRemoveAndRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractDomainUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractDomainUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractDomainUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractIpRangeList(ctx context.Context, params *GetPublisherLicensingContractIpRangeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractIpRangeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractIpRangeUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractIpRangeUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserInviteWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserInviteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingContractUserList(ctx context.Context, params *GetPublisherLicensingContractUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingContractUserListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRemoveWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRemoveAndRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRemoveAndRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRestoreWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRestoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRestoreRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserRevokeWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserRevokeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingContractUserUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingContractUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingContractUserUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeArchiveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingLicenseeCount(ctx context.Context, params *GetPublisherLicensingLicenseeCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingLicenseeCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingLicenseeGet(ctx context.Context, params *GetPublisherLicensingLicenseeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingLicenseeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingLicenseeList(ctx context.Context, params *GetPublisherLicensingLicenseeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingLicenseeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingLicenseeUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingLicenseeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingLicenseeUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingNotificationList(ctx context.Context, params *GetPublisherLicensingNotificationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingNotificationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleArchiveWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleArchiveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleCreateWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingNotificationRuleList(ctx context.Context, params *GetPublisherLicensingNotificationRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingNotificationRuleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingNotificationRuleUpdateWithFormdataBody(ctx context.Context, body PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingNotificationRuleUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingScheduleContractPeriodsActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLicensingScheduleContractPeriodsActivateWithFormdataBody(ctx context.Context, body PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLicensingScheduleContracts(ctx context.Context, params *GetPublisherLicensingScheduleContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLicensingScheduleContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermConfigurationWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermConfigurationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermCustomFieldConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermCustomFieldConfigurationWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherLinkedTermEventWithFormdataBody(ctx context.Context, body PostPublisherLinkedTermEventFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherLinkedTermEventRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherLinkedTermSubscription(ctx context.Context, params *GetPublisherLinkedTermSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherLinkedTermSubscriptionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferCount(ctx context.Context, params *GetPublisherOfferCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferGet(ctx context.Context, params *GetPublisherOfferGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferList(ctx context.Context, params *GetPublisherOfferListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateArchive(ctx context.Context, params *GetPublisherOfferTemplateArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateArchiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateConvertBoilerplateToTemplate(ctx context.Context, params *GetPublisherOfferTemplateConvertBoilerplateToTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateConvertBoilerplateToTemplateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateCount(ctx context.Context, params *GetPublisherOfferTemplateCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateCreateEmptyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateCreateEmptyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateCreateEmptyWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateCreateEmptyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateCreateEmptyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateDefaultCode(ctx context.Context, params *GetPublisherOfferTemplateDefaultCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateDefaultCodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateDuplicate(ctx context.Context, params *GetPublisherOfferTemplateDuplicateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateDuplicateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateGet(ctx context.Context, params *GetPublisherOfferTemplateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateGetHistory(ctx context.Context, params *GetPublisherOfferTemplateGetHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateGetHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateInheritedCount(ctx context.Context, params *GetPublisherOfferTemplateInheritedCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateInheritedCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateInheritedUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateInheritedUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateInheritedUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateInheritedUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateList(ctx context.Context, params *GetPublisherOfferTemplateListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateListBoilerplates(ctx context.Context, params *GetPublisherOfferTemplateListBoilerplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateListBoilerplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateListByCategory(ctx context.Context, params *GetPublisherOfferTemplateListByCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateListByCategoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateMakeGlobal(ctx context.Context, params *GetPublisherOfferTemplateMakeGlobalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateMakeGlobalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateRestore(ctx context.Context, params *GetPublisherOfferTemplateRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateRestoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdateContentfieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdateContentfieldsWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdatefullWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdatefullRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateUpdatefullWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateUpdatefullFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateUpdatefullRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateVariantArchive(ctx context.Context, params *GetPublisherOfferTemplateVariantArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateVariantArchiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantCreateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantDeleteWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateVariantDuplicate(ctx context.Context, params *GetPublisherOfferTemplateVariantDuplicateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateVariantDuplicateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateVariantGet(ctx context.Context, params *GetPublisherOfferTemplateVariantGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateVariantGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTemplateVariantRestore(ctx context.Context, params *GetPublisherOfferTemplateVariantRestoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTemplateVariantRestoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTemplateVariantUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferTemplateVariantUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTemplateVariantUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermAddWithFormdataBody(ctx context.Context, body PostPublisherOfferTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermAddRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTermList(ctx context.Context, params *GetPublisherOfferTermListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTermListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherOfferTermOfferList(ctx context.Context, params *GetPublisherOfferTermOfferListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherOfferTermOfferListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermRemoveWithFormdataBody(ctx context.Context, body PostPublisherOfferTermRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermReorderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermReorderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferTermReorderWithFormdataBody(ctx context.Context, body PostPublisherOfferTermReorderFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferTermReorderRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherOfferUpdateWithFormdataBody(ctx context.Context, body PostPublisherOfferUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherOfferUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPaymentGet(ctx context.Context, params *GetPublisherPaymentGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPaymentGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPaymentIsPartialRefund(ctx context.Context, params *GetPublisherPaymentIsPartialRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPaymentIsPartialRefundRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodAddWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodAddRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressApplyToAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressApplyToAllWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressAttachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressAttachWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressAttachRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressDetachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressDetachWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressDetachRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodBillingAddressGetWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodBillingAddressGetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPaymentMethodGet(ctx context.Context, params *GetPublisherPaymentMethodGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPaymentMethodGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodGmoRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodGmoRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodGmoRefreshWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodGmoRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodGmoRefreshRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodRemoveWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentMethodUpdateWithFormdataBody(ctx context.Context, body PostPublisherPaymentMethodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentMethodUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentProviderConfigurationSetVisibilityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPaymentProviderConfigurationSetVisibilityWithFormdataBody(ctx context.Context, body PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPaymentRefund(ctx context.Context, params *GetPublisherPaymentRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPaymentRefundRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionCodeCount(ctx context.Context, params *GetPublisherPromotionCodeCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionCodeCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionCodeCreate(ctx context.Context, params *GetPublisherPromotionCodeCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionCodeCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeExportWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeExportRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionCodeGet(ctx context.Context, params *GetPublisherPromotionCodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionCodeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionCodeList(ctx context.Context, params *GetPublisherPromotionCodeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionCodeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCodeUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionCodeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCodeUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionCount(ctx context.Context, params *GetPublisherPromotionCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionCreateWithFormdataBody(ctx context.Context, body PostPublisherPromotionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionExistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionExistsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionExistsWithFormdataBody(ctx context.Context, body PostPublisherPromotionExistsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionExistsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionFixedDiscountAdd(ctx context.Context, params *GetPublisherPromotionFixedDiscountAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionFixedDiscountAddRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionFixedDiscountDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionFixedDiscountDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionFixedDiscountDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionFixedDiscountDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionFixedDiscountUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionFixedDiscountUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionFixedDiscountUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionFixedDiscountUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionGenerateWithFormdataBody(ctx context.Context, body PostPublisherPromotionGenerateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionGenerateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionGet(ctx context.Context, params *GetPublisherPromotionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionList(ctx context.Context, params *GetPublisherPromotionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionTermAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionTermAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionTermAddWithFormdataBody(ctx context.Context, body PostPublisherPromotionTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionTermAddRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionTermDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionTermDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionTermDeleteWithFormdataBody(ctx context.Context, body PostPublisherPromotionTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionTermDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionTermList(ctx context.Context, params *GetPublisherPromotionTermListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionTermListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherPromotionTotal(ctx context.Context, params *GetPublisherPromotionTotalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherPromotionTotalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherPromotionUpdateWithFormdataBody(ctx context.Context, body PostPublisherPromotionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherPromotionUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceAttach(ctx context.Context, params *GetPublisherResourceAttachParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceAttachRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceBundleMembers(ctx context.Context, params *GetPublisherResourceBundleMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceBundleMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceCount(ctx context.Context, params *GetPublisherResourceCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceCreateWithFormdataBody(ctx context.Context, body PostPublisherResourceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceCrossAppCount(ctx context.Context, params *GetPublisherResourceCrossAppCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceCrossAppCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceDeleteWithFormdataBody(ctx context.Context, body PostPublisherResourceDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceDetach(ctx context.Context, params *GetPublisherResourceDetachParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceDetachRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceGet(ctx context.Context, params *GetPublisherResourceGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceList(ctx context.Context, params *GetPublisherResourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceStatsList(ctx context.Context, params *GetPublisherResourceStatsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceStatsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagAttachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagAttachWithFormdataBody(ctx context.Context, body PostPublisherResourceTagAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagAttachRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceTagBundles(ctx context.Context, params *GetPublisherResourceTagBundlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceTagBundlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceTagCreate(ctx context.Context, params *GetPublisherResourceTagCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceTagCreateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagDeleteWithFormdataBody(ctx context.Context, body PostPublisherResourceTagDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagDetachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceTagDetachWithFormdataBody(ctx context.Context, body PostPublisherResourceTagDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceTagDetachRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceTagGet(ctx context.Context, params *GetPublisherResourceTagGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceTagGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceTagList(ctx context.Context, params *GetPublisherResourceTagListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceTagListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherResourceUpdateWithFormdataBody(ctx context.Context, body PostPublisherResourceUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherResourceUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherResourceUserList(ctx context.Context, params *GetPublisherResourceUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherResourceUserListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleCreateWithFormdataBody(ctx context.Context, body PostPublisherScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleDeleteWithFormdataBody(ctx context.Context, body PostPublisherScheduleDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleGetWithFormdataBody(ctx context.Context, body PostPublisherScheduleGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleGetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleListWithFormdataBody(ctx context.Context, body PostPublisherScheduleListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleListRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodAddWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodAddRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodDeleteWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSchedulePeriodUpdateWithFormdataBody(ctx context.Context, body PostPublisherSchedulePeriodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSchedulePeriodUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleTermsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleTermsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleTermsWithFormdataBody(ctx context.Context, body PostPublisherScheduleTermsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleTermsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherScheduleUpdateWithFormdataBody(ctx context.Context, body PostPublisherScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherScheduleUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionAddressAssignWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionAddressAssignRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionAddressAssignWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionAddressAssignFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionAddressAssignRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCancelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCancelWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCancelRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCancelDeferredWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCancelDeferredRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCancelDeferredWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCancelDeferredFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCancelDeferredRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionCountWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionCountRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherSubscriptionGet(ctx context.Context, params *GetPublisherSubscriptionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherSubscriptionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionIsPartiallyRefundableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionIsPartiallyRefundableWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherSubscriptionList(ctx context.Context, params *GetPublisherSubscriptionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherSubscriptionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionResumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionResumeWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionResumeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherSubscriptionSearch(ctx context.Context, params *GetPublisherSubscriptionSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherSubscriptionSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareInviteWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareInviteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareListWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareListRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareResendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareResendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareResendWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareResendRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareRevokeWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareRevokeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareStartWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareStartRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareStopWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareStopRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUpdateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUserAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUserAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUserAddWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUserAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUserAddRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUserRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUserRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareUserRemoveWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareUserRemoveRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionShareValidateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionShareValidateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionShareValidateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionStatsWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionStatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionStatsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherSubscriptionUpdateWithFormdataBody(ctx context.Context, body PostPublisherSubscriptionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherSubscriptionUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTeamListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTeamListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTeamListWithFormdataBody(ctx context.Context, body PostPublisherTeamListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTeamListRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherTermApplicable(ctx context.Context, params *GetPublisherTermApplicableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherTermApplicableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeCanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeCanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeCanWithFormdataBody(ctx context.Context, body PostPublisherTermChangeCanFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeCanRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeCancelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeCancelWithFormdataBody(ctx context.Context, body PostPublisherTermChangeCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeCancelRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeDoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeDoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeDoWithFormdataBody(ctx context.Context, body PostPublisherTermChangeDoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeDoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeGetSubscriptionUpgradeStatusWithFormdataBody(ctx context.Context, body PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeOptionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeOptionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermChangeOptionCreateWithFormdataBody(ctx context.Context, body PostPublisherTermChangeOptionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermChangeOptionCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherTermCount(ctx context.Context, params *GetPublisherTermCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherTermCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermCustomCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermCustomCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermCustomCreateWithFormdataBody(ctx context.Context, body PostPublisherTermCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermCustomCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermCustomUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermCustomUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermCustomUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermCustomUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermCustomUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDeleteWithFormdataBody(ctx context.Context, body PostPublisherTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDynamicCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDynamicCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDynamicCreateWithFormdataBody(ctx context.Context, body PostPublisherTermDynamicCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDynamicCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDynamicUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDynamicUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermDynamicUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermDynamicUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermDynamicUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermExternalCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermExternalCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermExternalCreateWithFormdataBody(ctx context.Context, body PostPublisherTermExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermExternalCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermExternalUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermExternalUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermExternalUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermExternalUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermExternalUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherTermGet(ctx context.Context, params *GetPublisherTermGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherTermGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermGiftCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermGiftCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermGiftCreateWithFormdataBody(ctx context.Context, body PostPublisherTermGiftCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermGiftCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermGiftUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermGiftUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermGiftUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermGiftUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermGiftUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermPaymentCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermPaymentCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermPaymentCreateWithFormdataBody(ctx context.Context, body PostPublisherTermPaymentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermPaymentCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermPaymentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermPaymentUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermPaymentUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermPaymentUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermRegistrationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermRegistrationCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermRegistrationCreateWithFormdataBody(ctx context.Context, body PostPublisherTermRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermRegistrationCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermRegistrationUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermRegistrationUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherTermRegistrationUpdateWithFormdataBody(ctx context.Context, body PostPublisherTermRegistrationUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherTermRegistrationUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherTermStatsList(ctx context.Context, params *GetPublisherTermStatsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherTermStatsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherTestUserRef(ctx context.Context, params *GetPublisherTestUserRefParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherTestUserRefRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAccessActiveCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAccessActiveCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAccessActiveCountWithFormdataBody(ctx context.Context, body PostPublisherUserAccessActiveCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAccessActiveCountRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAccessCheck(ctx context.Context, params *GetPublisherUserAccessCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAccessCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAccessGrant(ctx context.Context, params *GetPublisherUserAccessGrantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAccessGrantRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAccessGrantToUsers(ctx context.Context, params *GetPublisherUserAccessGrantToUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAccessGrantToUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAccessList(ctx context.Context, params *GetPublisherUserAccessListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAccessListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAccessRevoke(ctx context.Context, params *GetPublisherUserAccessRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAccessRevokeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAccessUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAccessUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAccessUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserAccessUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAccessUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressCreateWithFormdataBody(ctx context.Context, body PostPublisherUserAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressHistoryWithFormdataBody(ctx context.Context, body PostPublisherUserAddressHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressHistoryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserAddressList(ctx context.Context, params *GetPublisherUserAddressListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserAddressListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAddressUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserAddressUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAddressUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAppCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAppCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserAppCountWithFormdataBody(ctx context.Context, body PostPublisherUserAppCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserAppCountRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressCreateWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetByPaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetByPaymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetByPaymentWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetByPaymentRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetByPaymentInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressGetByPaymentInfoWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBillingAddressListWithFormdataBody(ctx context.Context, body PostPublisherUserBillingAddressListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBillingAddressListRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportDeleteWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportDeleteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportDownloadWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportDownloadFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportDownloadRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportListCompletedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportListCompletedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportListCompletedWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportListCompletedFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportListCompletedRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportListProcessingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportListProcessingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserBulkImportListProcessingWithFormdataBody(ctx context.Context, body PostPublisherUserBulkImportListProcessingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserBulkImportListProcessingRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserCreateWithFormdataBody(ctx context.Context, body PostPublisherUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserDisableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserDisableWithFormdataBody(ctx context.Context, body PostPublisherUserDisableFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserDisableRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserEmailGet(ctx context.Context, params *GetPublisherUserEmailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserEmailGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserEmailList(ctx context.Context, params *GetPublisherUserEmailListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserEmailListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserGetWithFormdataBody(ctx context.Context, body PostPublisherUserGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserGetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserListWithFormdataBody(ctx context.Context, body PostPublisherUserListFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserListRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserListAccessesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserListAccessesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserListAccessesWithFormdataBody(ctx context.Context, body PostPublisherUserListAccessesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserListAccessesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserNoteCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserNoteCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserNoteCreateWithFormdataBody(ctx context.Context, body PostPublisherUserNoteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserNoteCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserNoteGet(ctx context.Context, params *GetPublisherUserNoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserNoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherUserNoteList(ctx context.Context, params *GetPublisherUserNoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherUserNoteListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserNoteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserNoteUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserNoteUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserNoteUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserNoteUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserRegisterWithFormdataBody(ctx context.Context, body PostPublisherUserRegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserRegisterRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserSearchWithFormdataBody(ctx context.Context, body PostPublisherUserSearchFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserSearchRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherUserUpdateWithFormdataBody(ctx context.Context, body PostPublisherUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherUserUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherVoucherGet(ctx context.Context, params *GetPublisherVoucherGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherVoucherGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherVoucherList(ctx context.Context, params *GetPublisherVoucherListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherVoucherListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherVoucherResendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherVoucherResendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherVoucherResendWithFormdataBody(ctx context.Context, body PostPublisherVoucherResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherVoucherResendRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookEvents(ctx context.Context, params *GetPublisherWebhookEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookGet(ctx context.Context, params *GetPublisherWebhookGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookResponseList(ctx context.Context, params *GetPublisherWebhookResponseListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookResponseListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookResponseResend(ctx context.Context, params *GetPublisherWebhookResponseResendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookResponseResendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookSettings(ctx context.Context, params *GetPublisherWebhookSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherWebhookSettingsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherWebhookSettingsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherWebhookSettingsUpdateWithFormdataBody(ctx context.Context, body PostPublisherWebhookSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherWebhookSettingsUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookSkip(ctx context.Context, params *GetPublisherWebhookSkipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookSkipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherWebhookStatus(ctx context.Context, params *GetPublisherWebhookStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherWebhookStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPublisherAdblockerGetRequest generates requests for GetPublisherAdblockerGet
func NewGetPublisherAdblockerGetRequest(server string, params *GetPublisherAdblockerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/adblocker/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAfcConfigurationDeleteRequest generates requests for GetPublisherAfcConfigurationDelete
func NewGetPublisherAfcConfigurationDeleteRequest(server string, params *GetPublisherAfcConfigurationDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/afc/configuration/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAfcConfigurationGetRequest generates requests for GetPublisherAfcConfigurationGet
func NewGetPublisherAfcConfigurationGetRequest(server string, params *GetPublisherAfcConfigurationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/afc/configuration/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAfcConfigurationHealthCheckRequest generates requests for GetPublisherAfcConfigurationHealthCheck
func NewGetPublisherAfcConfigurationHealthCheckRequest(server string, params *GetPublisherAfcConfigurationHealthCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/afc/configuration/healthCheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_client_id", runtime.ParamLocationQuery, params.AfcClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_username", runtime.ParamLocationQuery, params.AfcUsername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_password", runtime.ParamLocationQuery, params.AfcPassword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AfcClientProfileId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_client_profile_id", runtime.ParamLocationQuery, *params.AfcClientProfileId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAfcConfigurationSaveRequest generates requests for GetPublisherAfcConfigurationSave
func NewGetPublisherAfcConfigurationSaveRequest(server string, params *GetPublisherAfcConfigurationSaveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/afc/configuration/save")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_client_id", runtime.ParamLocationQuery, params.AfcClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_username", runtime.ParamLocationQuery, params.AfcUsername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_password", runtime.ParamLocationQuery, params.AfcPassword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AfcClientProfileId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afc_client_profile_id", runtime.ParamLocationQuery, *params.AfcClientProfileId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "load_date", runtime.ParamLocationQuery, params.LoadDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAppApiTokenGenerateRequest generates requests for GetPublisherAppApiTokenGenerate
func NewGetPublisherAppApiTokenGenerateRequest(server string, params *GetPublisherAppApiTokenGenerateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/app/api_token/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confirmation", runtime.ParamLocationQuery, params.Confirmation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAppCurrenciesRequest generates requests for GetPublisherAppCurrencies
func NewGetPublisherAppCurrenciesRequest(server string, params *GetPublisherAppCurrenciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/app/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAppFeaturesGetRequest generates requests for GetPublisherAppFeaturesGet
func NewGetPublisherAppFeaturesGetRequest(server string, params *GetPublisherAppFeaturesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/app/features/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAppGetRequest generates requests for GetPublisherAppGet
func NewGetPublisherAppGetRequest(server string, params *GetPublisherAppGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/app/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherAppListRequest generates requests for GetPublisherAppList
func NewGetPublisherAppListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/app/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConsentEntryListRequest generates requests for GetPublisherConsentEntryList
func NewGetPublisherConsentEntryListRequest(server string, params *GetPublisherConsentEntryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/consent/entry/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConsentGetRequest generates requests for GetPublisherConsentGet
func NewGetPublisherConsentGetRequest(server string, params *GetPublisherConsentGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/consent/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consent_id", runtime.ParamLocationQuery, params.ConsentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConsentListRequest generates requests for GetPublisherConsentList
func NewGetPublisherConsentListRequest(server string, params *GetPublisherConsentListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/consent/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConversionCountRequest generates requests for GetPublisherConversionCount
func NewGetPublisherConversionCountRequest(server string, params *GetPublisherConversionCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherConversionCustomCreateRequestWithFormdataBody calls the generic PostPublisherConversionCustomCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherConversionCustomCreateRequestWithFormdataBody(server string, body PostPublisherConversionCustomCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherConversionCustomCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherConversionCustomCreateRequestWithBody generates requests for PostPublisherConversionCustomCreate with any type of body
func NewPostPublisherConversionCustomCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/custom/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherConversionDataGetRequest generates requests for GetPublisherConversionDataGet
func NewGetPublisherConversionDataGetRequest(server string, params *GetPublisherConversionDataGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/data/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_conversion_id", runtime.ParamLocationQuery, params.TermConversionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherConversionExternalCreateRequestWithFormdataBody calls the generic PostPublisherConversionExternalCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherConversionExternalCreateRequestWithFormdataBody(server string, body PostPublisherConversionExternalCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherConversionExternalCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherConversionExternalCreateRequestWithBody generates requests for PostPublisherConversionExternalCreate with any type of body
func NewPostPublisherConversionExternalCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/external/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherConversionGetRequest generates requests for GetPublisherConversionGet
func NewGetPublisherConversionGetRequest(server string, params *GetPublisherConversionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TermConversionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_conversion_id", runtime.ParamLocationQuery, *params.TermConversionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccessId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_id", runtime.ParamLocationQuery, *params.AccessId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsLastTermConversion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_last_term_conversion", runtime.ParamLocationQuery, *params.IsLastTermConversion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConversionLastAccessRequest generates requests for GetPublisherConversionLastAccess
func NewGetPublisherConversionLastAccessRequest(server string, params *GetPublisherConversionLastAccessParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/lastAccess")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscription_id", runtime.ParamLocationQuery, *params.SubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherConversionListRequest generates requests for GetPublisherConversionList
func NewGetPublisherConversionListRequest(server string, params *GetPublisherConversionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherConversionLogRequestWithFormdataBody calls the generic PostPublisherConversionLog builder with application/x-www-form-urlencoded body
func NewPostPublisherConversionLogRequestWithFormdataBody(server string, body PostPublisherConversionLogFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherConversionLogRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherConversionLogRequestWithBody generates requests for PostPublisherConversionLog with any type of body
func NewPostPublisherConversionLogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/log")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherConversionRegistrationCreateRequestWithFormdataBody calls the generic PostPublisherConversionRegistrationCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherConversionRegistrationCreateRequestWithFormdataBody(server string, body PostPublisherConversionRegistrationCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherConversionRegistrationCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherConversionRegistrationCreateRequestWithBody generates requests for PostPublisherConversionRegistrationCreate with any type of body
func NewPostPublisherConversionRegistrationCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/conversion/registration/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherExperienceMetadataListRequest generates requests for GetPublisherExperienceMetadataList
func NewGetPublisherExperienceMetadataListRequest(server string, params *GetPublisherExperienceMetadataListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/experience/metadata/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherExportCreateAamDailyRequestWithFormdataBody calls the generic PostPublisherExportCreateAamDaily builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateAamDailyRequestWithFormdataBody(server string, body PostPublisherExportCreateAamDailyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateAamDailyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateAamDailyRequestWithBody generates requests for PostPublisherExportCreateAamDaily with any type of body
func NewPostPublisherExportCreateAamDailyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/aam/daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateAamMonthlyRequestWithFormdataBody calls the generic PostPublisherExportCreateAamMonthly builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateAamMonthlyRequestWithFormdataBody(server string, body PostPublisherExportCreateAamMonthlyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateAamMonthlyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateAamMonthlyRequestWithBody generates requests for PostPublisherExportCreateAamMonthly with any type of body
func NewPostPublisherExportCreateAamMonthlyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/aam/monthly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateAamMonthlyV2RequestWithFormdataBody calls the generic PostPublisherExportCreateAamMonthlyV2 builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateAamMonthlyV2RequestWithFormdataBody(server string, body PostPublisherExportCreateAamMonthlyV2FormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateAamMonthlyV2RequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateAamMonthlyV2RequestWithBody generates requests for PostPublisherExportCreateAamMonthlyV2 with any type of body
func NewPostPublisherExportCreateAamMonthlyV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/aam/monthly/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherExportCreateAccessReportExportRequest generates requests for GetPublisherExportCreateAccessReportExport
func NewGetPublisherExportCreateAccessReportExportRequest(server string, params *GetPublisherExportCreateAccessReportExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/accessReportExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_name", runtime.ParamLocationQuery, params.ExportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AccessStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_status", runtime.ParamLocationQuery, *params.AccessStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_type", runtime.ParamLocationQuery, *params.TermType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextBillingDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_billing_date", runtime.ParamLocationQuery, *params.NextBillingDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastPaymentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_payment_status", runtime.ParamLocationQuery, *params.LastPaymentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EndDateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date_from", runtime.ParamLocationQuery, *params.EndDateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date_to", runtime.ParamLocationQuery, *params.EndDateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportCreateAccessReportExportV2Request generates requests for GetPublisherExportCreateAccessReportExportV2
func NewGetPublisherExportCreateAccessReportExportV2Request(server string, params *GetPublisherExportCreateAccessReportExportV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/accessReportExport/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_name", runtime.ParamLocationQuery, params.ExportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AccessStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_status", runtime.ParamLocationQuery, *params.AccessStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_type", runtime.ParamLocationQuery, *params.TermType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextBillingDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_billing_date", runtime.ParamLocationQuery, *params.NextBillingDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastPaymentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_payment_status", runtime.ParamLocationQuery, *params.LastPaymentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EndDateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date_from", runtime.ParamLocationQuery, *params.EndDateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date_to", runtime.ParamLocationQuery, *params.EndDateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportCreateDailyActivityReportExportRequest generates requests for GetPublisherExportCreateDailyActivityReportExport
func NewGetPublisherExportCreateDailyActivityReportExportRequest(server string, params *GetPublisherExportCreateDailyActivityReportExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/dailyActivityReportExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_name", runtime.ParamLocationQuery, params.ExportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TermType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_type", runtime.ParamLocationQuery, *params.TermType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Currency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, *params.Currency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CurrencyList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "currencyList", runtime.ParamLocationQuery, *params.CurrencyList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportCreateMonthlyActivityReportExportRequest generates requests for GetPublisherExportCreateMonthlyActivityReportExport
func NewGetPublisherExportCreateMonthlyActivityReportExportRequest(server string, params *GetPublisherExportCreateMonthlyActivityReportExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/monthlyActivityReportExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_name", runtime.ParamLocationQuery, params.ExportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TermType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_type", runtime.ParamLocationQuery, *params.TermType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Currency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, *params.Currency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CurrencyList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "currencyList", runtime.ParamLocationQuery, *params.CurrencyList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithFormdataBody calls the generic PostPublisherExportCreateSubscriptionDetailsReport builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithFormdataBody(server string, body PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithBody generates requests for PostPublisherExportCreateSubscriptionDetailsReport with any type of body
func NewPostPublisherExportCreateSubscriptionDetailsReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/subscriptionDetailsReport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithFormdataBody calls the generic PostPublisherExportCreateSubscriptionDetailsReportV2 builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithFormdataBody(server string, body PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithBody generates requests for PostPublisherExportCreateSubscriptionDetailsReportV2 with any type of body
func NewPostPublisherExportCreateSubscriptionDetailsReportV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/subscriptionDetailsReport/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithFormdataBody calls the generic PostPublisherExportCreateSubscriptionSummaryReport builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithFormdataBody(server string, body PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithBody generates requests for PostPublisherExportCreateSubscriptionSummaryReport with any type of body
func NewPostPublisherExportCreateSubscriptionSummaryReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/subscriptionSummaryReport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherExportCreateTermChangeReportExportRequest generates requests for GetPublisherExportCreateTermChangeReportExport
func NewGetPublisherExportCreateTermChangeReportExportRequest(server string, params *GetPublisherExportCreateTermChangeReportExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/termChangeReportExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_name", runtime.ParamLocationQuery, params.ExportName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherExportCreateTransactionsReportRequestWithFormdataBody calls the generic PostPublisherExportCreateTransactionsReport builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateTransactionsReportRequestWithFormdataBody(server string, body PostPublisherExportCreateTransactionsReportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateTransactionsReportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateTransactionsReportRequestWithBody generates requests for PostPublisherExportCreateTransactionsReport with any type of body
func NewPostPublisherExportCreateTransactionsReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/transactionsReport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateTransactionsReportV2RequestWithFormdataBody calls the generic PostPublisherExportCreateTransactionsReportV2 builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateTransactionsReportV2RequestWithFormdataBody(server string, body PostPublisherExportCreateTransactionsReportV2FormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateTransactionsReportV2RequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateTransactionsReportV2RequestWithBody generates requests for PostPublisherExportCreateTransactionsReportV2 with any type of body
func NewPostPublisherExportCreateTransactionsReportV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/transactionsReport/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherExportCreateUserExportRequestWithFormdataBody calls the generic PostPublisherExportCreateUserExport builder with application/x-www-form-urlencoded body
func NewPostPublisherExportCreateUserExportRequestWithFormdataBody(server string, body PostPublisherExportCreateUserExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExportCreateUserExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExportCreateUserExportRequestWithBody generates requests for PostPublisherExportCreateUserExport with any type of body
func NewPostPublisherExportCreateUserExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/create/userExport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherExportDeleteRequest generates requests for GetPublisherExportDelete
func NewGetPublisherExportDeleteRequest(server string, params *GetPublisherExportDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_id", runtime.ParamLocationQuery, params.ExportId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportDownloadRequest generates requests for GetPublisherExportDownload
func NewGetPublisherExportDownloadRequest(server string, params *GetPublisherExportDownloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_id", runtime.ParamLocationQuery, params.ExportId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportGetRequest generates requests for GetPublisherExportGet
func NewGetPublisherExportGetRequest(server string, params *GetPublisherExportGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_id", runtime.ParamLocationQuery, params.ExportId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportListRequest generates requests for GetPublisherExportList
func NewGetPublisherExportListRequest(server string, params *GetPublisherExportListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherExportRunRequest generates requests for GetPublisherExportRun
func NewGetPublisherExportRunRequest(server string, params *GetPublisherExportRunParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/export/run")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_id", runtime.ParamLocationQuery, params.ExportId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherExternalProviderPaymentUpdateRequestWithFormdataBody calls the generic PostPublisherExternalProviderPaymentUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherExternalProviderPaymentUpdateRequestWithFormdataBody(server string, body PostPublisherExternalProviderPaymentUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherExternalProviderPaymentUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherExternalProviderPaymentUpdateRequestWithBody generates requests for PostPublisherExternalProviderPaymentUpdate with any type of body
func NewPostPublisherExternalProviderPaymentUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/externalProvider/payment/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherGdprDeleteRequestWithFormdataBody calls the generic PostPublisherGdprDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherGdprDeleteRequestWithFormdataBody(server string, body PostPublisherGdprDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherGdprDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherGdprDeleteRequestWithBody generates requests for PostPublisherGdprDelete with any type of body
func NewPostPublisherGdprDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/gdpr/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherGdprDeleteAnonRequestWithFormdataBody calls the generic PostPublisherGdprDeleteAnon builder with application/x-www-form-urlencoded body
func NewPostPublisherGdprDeleteAnonRequestWithFormdataBody(server string, body PostPublisherGdprDeleteAnonFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherGdprDeleteAnonRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherGdprDeleteAnonRequestWithBody generates requests for PostPublisherGdprDeleteAnon with any type of body
func NewPostPublisherGdprDeleteAnonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/gdpr/deleteAnon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherGdprExportRequestWithFormdataBody calls the generic PostPublisherGdprExport builder with application/x-www-form-urlencoded body
func NewPostPublisherGdprExportRequestWithFormdataBody(server string, body PostPublisherGdprExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherGdprExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherGdprExportRequestWithBody generates requests for PostPublisherGdprExport with any type of body
func NewPostPublisherGdprExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/gdpr/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherInquiryAddRequest generates requests for GetPublisherInquiryAdd
func NewGetPublisherInquiryAddRequest(server string, params *GetPublisherInquiryAddParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payment_inquiry_id", runtime.ParamLocationQuery, params.PaymentInquiryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, params.Comment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal", runtime.ParamLocationQuery, params.Internal); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryCommentsRequest generates requests for GetPublisherInquiryComments
func NewGetPublisherInquiryCommentsRequest(server string, params *GetPublisherInquiryCommentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payment_inquiry_id", runtime.ParamLocationQuery, params.PaymentInquiryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryDetailsRequest generates requests for GetPublisherInquiryDetails
func NewGetPublisherInquiryDetailsRequest(server string, params *GetPublisherInquiryDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payment_inquiry_id", runtime.ParamLocationQuery, params.PaymentInquiryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryInquiryActionsRequest generates requests for GetPublisherInquiryInquiryActions
func NewGetPublisherInquiryInquiryActionsRequest(server string, params *GetPublisherInquiryInquiryActionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/inquiryActions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payment_inquiry_id", runtime.ParamLocationQuery, params.PaymentInquiryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryLastCommentRequest generates requests for GetPublisherInquiryLastComment
func NewGetPublisherInquiryLastCommentRequest(server string, params *GetPublisherInquiryLastCommentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/lastComment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryListRequest generates requests for GetPublisherInquiryList
func NewGetPublisherInquiryListRequest(server string, params *GetPublisherInquiryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherInquiryUnresolvedCountRequest generates requests for GetPublisherInquiryUnresolvedCount
func NewGetPublisherInquiryUnresolvedCountRequest(server string, params *GetPublisherInquiryUnresolvedCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/inquiry/unresolvedCount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractActivateRequestWithFormdataBody calls the generic PostPublisherLicensingContractActivate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractActivateRequestWithFormdataBody(server string, body PostPublisherLicensingContractActivateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractActivateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractActivateRequestWithBody generates requests for PostPublisherLicensingContractActivate with any type of body
func NewPostPublisherLicensingContractActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractArchiveRequestWithFormdataBody calls the generic PostPublisherLicensingContractArchive builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractArchiveRequestWithFormdataBody(server string, body PostPublisherLicensingContractArchiveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractArchiveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractArchiveRequestWithBody generates requests for PostPublisherLicensingContractArchive with any type of body
func NewPostPublisherLicensingContractArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractCreateRequestWithFormdataBody calls the generic PostPublisherLicensingContractCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractCreateRequestWithFormdataBody(server string, body PostPublisherLicensingContractCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractCreateRequestWithBody generates requests for PostPublisherLicensingContractCreate with any type of body
func NewPostPublisherLicensingContractCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractDeactivateRequestWithFormdataBody calls the generic PostPublisherLicensingContractDeactivate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractDeactivateRequestWithFormdataBody(server string, body PostPublisherLicensingContractDeactivateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractDeactivateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractDeactivateRequestWithBody generates requests for PostPublisherLicensingContractDeactivate with any type of body
func NewPostPublisherLicensingContractDeactivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/deactivate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingContractGetRequest generates requests for GetPublisherLicensingContractGet
func NewGetPublisherLicensingContractGetRequest(server string, params *GetPublisherLicensingContractGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherLicensingContractListRequest generates requests for GetPublisherLicensingContractList
func NewGetPublisherLicensingContractListRequest(server string, params *GetPublisherLicensingContractListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensee_id", runtime.ParamLocationQuery, params.LicenseeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractPeriodsActivateRequestWithFormdataBody calls the generic PostPublisherLicensingContractPeriodsActivate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractPeriodsActivateRequestWithFormdataBody(server string, body PostPublisherLicensingContractPeriodsActivateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractPeriodsActivateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractPeriodsActivateRequestWithBody generates requests for PostPublisherLicensingContractPeriodsActivate with any type of body
func NewPostPublisherLicensingContractPeriodsActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/periods/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractRedeemRequestWithFormdataBody calls the generic PostPublisherLicensingContractRedeem builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractRedeemRequestWithFormdataBody(server string, body PostPublisherLicensingContractRedeemFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractRedeemRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractRedeemRequestWithBody generates requests for PostPublisherLicensingContractRedeem with any type of body
func NewPostPublisherLicensingContractRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingContractUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingContractUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUpdateRequestWithBody generates requests for PostPublisherLicensingContractUpdate with any type of body
func NewPostPublisherLicensingContractUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contract/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingContractDomainContractUserListRequest generates requests for GetPublisherLicensingContractDomainContractUserList
func NewGetPublisherLicensingContractDomainContractUserListRequest(server string, params *GetPublisherLicensingContractDomainContractUserListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/contractUser/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_domain_id", runtime.ParamLocationQuery, params.ContractDomainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status_list", runtime.ParamLocationQuery, *params.StatusList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractDomainCreateRequestWithFormdataBody calls the generic PostPublisherLicensingContractDomainCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractDomainCreateRequestWithFormdataBody(server string, body PostPublisherLicensingContractDomainCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractDomainCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractDomainCreateRequestWithBody generates requests for PostPublisherLicensingContractDomainCreate with any type of body
func NewPostPublisherLicensingContractDomainCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingContractDomainListRequest generates requests for GetPublisherLicensingContractDomainList
func NewGetPublisherLicensingContractDomainListRequest(server string, params *GetPublisherLicensingContractDomainListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractDomainRemoveRequestWithFormdataBody calls the generic PostPublisherLicensingContractDomainRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractDomainRemoveRequestWithFormdataBody(server string, body PostPublisherLicensingContractDomainRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractDomainRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractDomainRemoveRequestWithBody generates requests for PostPublisherLicensingContractDomainRemove with any type of body
func NewPostPublisherLicensingContractDomainRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithFormdataBody calls the generic PostPublisherLicensingContractDomainRemoveAndRevoke builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithFormdataBody(server string, body PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithBody generates requests for PostPublisherLicensingContractDomainRemoveAndRevoke with any type of body
func NewPostPublisherLicensingContractDomainRemoveAndRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/removeAndRevoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractDomainUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingContractDomainUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractDomainUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingContractDomainUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractDomainUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractDomainUpdateRequestWithBody generates requests for PostPublisherLicensingContractDomainUpdate with any type of body
func NewPostPublisherLicensingContractDomainUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractDomain/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractIpRangeCreateRequestWithFormdataBody calls the generic PostPublisherLicensingContractIpRangeCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractIpRangeCreateRequestWithFormdataBody(server string, body PostPublisherLicensingContractIpRangeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractIpRangeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractIpRangeCreateRequestWithBody generates requests for PostPublisherLicensingContractIpRangeCreate with any type of body
func NewPostPublisherLicensingContractIpRangeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractIpRange/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingContractIpRangeListRequest generates requests for GetPublisherLicensingContractIpRangeList
func NewGetPublisherLicensingContractIpRangeListRequest(server string, params *GetPublisherLicensingContractIpRangeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractIpRange/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractIpRangeRemoveRequestWithFormdataBody calls the generic PostPublisherLicensingContractIpRangeRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractIpRangeRemoveRequestWithFormdataBody(server string, body PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractIpRangeRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractIpRangeRemoveRequestWithBody generates requests for PostPublisherLicensingContractIpRangeRemove with any type of body
func NewPostPublisherLicensingContractIpRangeRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractIpRange/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractIpRangeUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingContractIpRangeUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractIpRangeUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractIpRangeUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractIpRangeUpdateRequestWithBody generates requests for PostPublisherLicensingContractIpRangeUpdate with any type of body
func NewPostPublisherLicensingContractIpRangeUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractIpRange/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserCreateRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserCreateRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserCreateRequestWithBody generates requests for PostPublisherLicensingContractUserCreate with any type of body
func NewPostPublisherLicensingContractUserCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserInviteRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserInvite builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserInviteRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserInviteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserInviteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserInviteRequestWithBody generates requests for PostPublisherLicensingContractUserInvite with any type of body
func NewPostPublisherLicensingContractUserInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingContractUserListRequest generates requests for GetPublisherLicensingContractUserList
func NewGetPublisherLicensingContractUserListRequest(server string, params *GetPublisherLicensingContractUserListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status_list", runtime.ParamLocationQuery, *params.StatusList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingContractUserRemoveRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserRemoveRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserRemoveRequestWithBody generates requests for PostPublisherLicensingContractUserRemove with any type of body
func NewPostPublisherLicensingContractUserRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserRemoveAndRevoke builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithBody generates requests for PostPublisherLicensingContractUserRemoveAndRevoke with any type of body
func NewPostPublisherLicensingContractUserRemoveAndRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/removeAndRevoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserRestoreRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserRestore builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserRestoreRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserRestoreFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserRestoreRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserRestoreRequestWithBody generates requests for PostPublisherLicensingContractUserRestore with any type of body
func NewPostPublisherLicensingContractUserRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserRevokeRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserRevoke builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserRevokeRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserRevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserRevokeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserRevokeRequestWithBody generates requests for PostPublisherLicensingContractUserRevoke with any type of body
func NewPostPublisherLicensingContractUserRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingContractUserUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingContractUserUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingContractUserUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingContractUserUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingContractUserUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingContractUserUpdateRequestWithBody generates requests for PostPublisherLicensingContractUserUpdate with any type of body
func NewPostPublisherLicensingContractUserUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/contractUser/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingLicenseeArchiveRequestWithFormdataBody calls the generic PostPublisherLicensingLicenseeArchive builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingLicenseeArchiveRequestWithFormdataBody(server string, body PostPublisherLicensingLicenseeArchiveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingLicenseeArchiveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingLicenseeArchiveRequestWithBody generates requests for PostPublisherLicensingLicenseeArchive with any type of body
func NewPostPublisherLicensingLicenseeArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingLicenseeCountRequest generates requests for GetPublisherLicensingLicenseeCount
func NewGetPublisherLicensingLicenseeCountRequest(server string, params *GetPublisherLicensingLicenseeCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingLicenseeCreateRequestWithFormdataBody calls the generic PostPublisherLicensingLicenseeCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingLicenseeCreateRequestWithFormdataBody(server string, body PostPublisherLicensingLicenseeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingLicenseeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingLicenseeCreateRequestWithBody generates requests for PostPublisherLicensingLicenseeCreate with any type of body
func NewPostPublisherLicensingLicenseeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingLicenseeGetRequest generates requests for GetPublisherLicensingLicenseeGet
func NewGetPublisherLicensingLicenseeGetRequest(server string, params *GetPublisherLicensingLicenseeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensee_id", runtime.ParamLocationQuery, params.LicenseeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherLicensingLicenseeListRequest generates requests for GetPublisherLicensingLicenseeList
func NewGetPublisherLicensingLicenseeListRequest(server string, params *GetPublisherLicensingLicenseeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingLicenseeUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingLicenseeUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingLicenseeUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingLicenseeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingLicenseeUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingLicenseeUpdateRequestWithBody generates requests for PostPublisherLicensingLicenseeUpdate with any type of body
func NewPostPublisherLicensingLicenseeUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/licensee/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingNotificationListRequest generates requests for GetPublisherLicensingNotificationList
func NewGetPublisherLicensingNotificationListRequest(server string, params *GetPublisherLicensingNotificationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/notification/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensee_id", runtime.ParamLocationQuery, params.LicenseeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingNotificationRuleArchiveRequestWithFormdataBody calls the generic PostPublisherLicensingNotificationRuleArchive builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingNotificationRuleArchiveRequestWithFormdataBody(server string, body PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingNotificationRuleArchiveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingNotificationRuleArchiveRequestWithBody generates requests for PostPublisherLicensingNotificationRuleArchive with any type of body
func NewPostPublisherLicensingNotificationRuleArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/notificationRule/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingNotificationRuleCreateRequestWithFormdataBody calls the generic PostPublisherLicensingNotificationRuleCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingNotificationRuleCreateRequestWithFormdataBody(server string, body PostPublisherLicensingNotificationRuleCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingNotificationRuleCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingNotificationRuleCreateRequestWithBody generates requests for PostPublisherLicensingNotificationRuleCreate with any type of body
func NewPostPublisherLicensingNotificationRuleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/notificationRule/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingNotificationRuleListRequest generates requests for GetPublisherLicensingNotificationRuleList
func NewGetPublisherLicensingNotificationRuleListRequest(server string, params *GetPublisherLicensingNotificationRuleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/notificationRule/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensee_id", runtime.ParamLocationQuery, params.LicenseeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLicensingNotificationRuleUpdateRequestWithFormdataBody calls the generic PostPublisherLicensingNotificationRuleUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingNotificationRuleUpdateRequestWithFormdataBody(server string, body PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingNotificationRuleUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingNotificationRuleUpdateRequestWithBody generates requests for PostPublisherLicensingNotificationRuleUpdate with any type of body
func NewPostPublisherLicensingNotificationRuleUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/notificationRule/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithFormdataBody calls the generic PostPublisherLicensingScheduleContractPeriodsActivate builder with application/x-www-form-urlencoded body
func NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithFormdataBody(server string, body PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithBody generates requests for PostPublisherLicensingScheduleContractPeriodsActivate with any type of body
func NewPostPublisherLicensingScheduleContractPeriodsActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/schedule/contract/periods/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLicensingScheduleContractsRequest generates requests for GetPublisherLicensingScheduleContracts
func NewGetPublisherLicensingScheduleContractsRequest(server string, params *GetPublisherLicensingScheduleContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/licensing/schedule/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schedule_id", runtime.ParamLocationQuery, params.ScheduleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherLinkedTermConfigurationRequestWithFormdataBody calls the generic PostPublisherLinkedTermConfiguration builder with application/x-www-form-urlencoded body
func NewPostPublisherLinkedTermConfigurationRequestWithFormdataBody(server string, body PostPublisherLinkedTermConfigurationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLinkedTermConfigurationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLinkedTermConfigurationRequestWithBody generates requests for PostPublisherLinkedTermConfiguration with any type of body
func NewPostPublisherLinkedTermConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/linkedTerm/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithFormdataBody calls the generic PostPublisherLinkedTermCustomFieldConfiguration builder with application/x-www-form-urlencoded body
func NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithFormdataBody(server string, body PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithBody generates requests for PostPublisherLinkedTermCustomFieldConfiguration with any type of body
func NewPostPublisherLinkedTermCustomFieldConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/linkedTerm/customField/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherLinkedTermEventRequestWithFormdataBody calls the generic PostPublisherLinkedTermEvent builder with application/x-www-form-urlencoded body
func NewPostPublisherLinkedTermEventRequestWithFormdataBody(server string, body PostPublisherLinkedTermEventFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherLinkedTermEventRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherLinkedTermEventRequestWithBody generates requests for PostPublisherLinkedTermEvent with any type of body
func NewPostPublisherLinkedTermEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/linkedTerm/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherLinkedTermSubscriptionRequest generates requests for GetPublisherLinkedTermSubscription
func NewGetPublisherLinkedTermSubscriptionRequest(server string, params *GetPublisherLinkedTermSubscriptionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/linkedTerm/subscription")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_sub_id", runtime.ParamLocationQuery, params.ExternalSubId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferCountRequest generates requests for GetPublisherOfferCount
func NewGetPublisherOfferCountRequest(server string, params *GetPublisherOfferCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferCreateRequestWithFormdataBody calls the generic PostPublisherOfferCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferCreateRequestWithFormdataBody(server string, body PostPublisherOfferCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferCreateRequestWithBody generates requests for PostPublisherOfferCreate with any type of body
func NewPostPublisherOfferCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferDeleteRequestWithFormdataBody calls the generic PostPublisherOfferDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferDeleteRequestWithFormdataBody(server string, body PostPublisherOfferDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferDeleteRequestWithBody generates requests for PostPublisherOfferDelete with any type of body
func NewPostPublisherOfferDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferGetRequest generates requests for GetPublisherOfferGet
func NewGetPublisherOfferGetRequest(server string, params *GetPublisherOfferGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_id", runtime.ParamLocationQuery, params.OfferId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferListRequest generates requests for GetPublisherOfferList
func NewGetPublisherOfferListRequest(server string, params *GetPublisherOfferListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateArchiveRequest generates requests for GetPublisherOfferTemplateArchive
func NewGetPublisherOfferTemplateArchiveRequest(server string, params *GetPublisherOfferTemplateArchiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateConvertBoilerplateToTemplateRequest generates requests for GetPublisherOfferTemplateConvertBoilerplateToTemplate
func NewGetPublisherOfferTemplateConvertBoilerplateToTemplateRequest(server string, params *GetPublisherOfferTemplateConvertBoilerplateToTemplateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/convertBoilerplateToTemplate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, params.CategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateCountRequest generates requests for GetPublisherOfferTemplateCount
func NewGetPublisherOfferTemplateCountRequest(server string, params *GetPublisherOfferTemplateCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateCreateRequestWithFormdataBody calls the generic PostPublisherOfferTemplateCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateCreateRequestWithFormdataBody(server string, body PostPublisherOfferTemplateCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateCreateRequestWithBody generates requests for PostPublisherOfferTemplateCreate with any type of body
func NewPostPublisherOfferTemplateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTemplateCreateEmptyRequestWithFormdataBody calls the generic PostPublisherOfferTemplateCreateEmpty builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateCreateEmptyRequestWithFormdataBody(server string, body PostPublisherOfferTemplateCreateEmptyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateCreateEmptyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateCreateEmptyRequestWithBody generates requests for PostPublisherOfferTemplateCreateEmpty with any type of body
func NewPostPublisherOfferTemplateCreateEmptyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/create/empty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTemplateDefaultCodeRequest generates requests for GetPublisherOfferTemplateDefaultCode
func NewGetPublisherOfferTemplateDefaultCodeRequest(server string, params *GetPublisherOfferTemplateDefaultCodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/defaultCode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateDeleteRequestWithFormdataBody calls the generic PostPublisherOfferTemplateDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateDeleteRequestWithFormdataBody(server string, body PostPublisherOfferTemplateDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateDeleteRequestWithBody generates requests for PostPublisherOfferTemplateDelete with any type of body
func NewPostPublisherOfferTemplateDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTemplateDuplicateRequest generates requests for GetPublisherOfferTemplateDuplicate
func NewGetPublisherOfferTemplateDuplicateRequest(server string, params *GetPublisherOfferTemplateDuplicateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DuplicateVariants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate_variants", runtime.ParamLocationQuery, *params.DuplicateVariants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateGetRequest generates requests for GetPublisherOfferTemplateGet
func NewGetPublisherOfferTemplateGetRequest(server string, params *GetPublisherOfferTemplateGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateGetHistoryRequest generates requests for GetPublisherOfferTemplateGetHistory
func NewGetPublisherOfferTemplateGetHistoryRequest(server string, params *GetPublisherOfferTemplateGetHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/getHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateInheritedCountRequest generates requests for GetPublisherOfferTemplateInheritedCount
func NewGetPublisherOfferTemplateInheritedCountRequest(server string, params *GetPublisherOfferTemplateInheritedCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/inherited/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateInheritedUpdateRequestWithFormdataBody calls the generic PostPublisherOfferTemplateInheritedUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateInheritedUpdateRequestWithFormdataBody(server string, body PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateInheritedUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateInheritedUpdateRequestWithBody generates requests for PostPublisherOfferTemplateInheritedUpdate with any type of body
func NewPostPublisherOfferTemplateInheritedUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/inherited/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTemplateListRequest generates requests for GetPublisherOfferTemplateList
func NewGetPublisherOfferTemplateListRequest(server string, params *GetPublisherOfferTemplateListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VariantStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variant_status", runtime.ParamLocationQuery, *params.VariantStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateListBoilerplatesRequest generates requests for GetPublisherOfferTemplateListBoilerplates
func NewGetPublisherOfferTemplateListBoilerplatesRequest(server string, params *GetPublisherOfferTemplateListBoilerplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/listBoilerplates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateType", runtime.ParamLocationQuery, *params.TemplateType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "categories", runtime.ParamLocationQuery, params.Categories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EnsureTemplatesExists != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ensure_templates_exists", runtime.ParamLocationQuery, *params.EnsureTemplatesExists); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateListByCategoryRequest generates requests for GetPublisherOfferTemplateListByCategory
func NewGetPublisherOfferTemplateListByCategoryRequest(server string, params *GetPublisherOfferTemplateListByCategoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/listByCategory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TemplateType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "templateType", runtime.ParamLocationQuery, *params.TemplateType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "categories", runtime.ParamLocationQuery, params.Categories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnsureTemplatesExists != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ensure_templates_exists", runtime.ParamLocationQuery, *params.EnsureTemplatesExists); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateMakeGlobalRequest generates requests for GetPublisherOfferTemplateMakeGlobal
func NewGetPublisherOfferTemplateMakeGlobalRequest(server string, params *GetPublisherOfferTemplateMakeGlobalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/makeGlobal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateRestoreRequest generates requests for GetPublisherOfferTemplateRestore
func NewGetPublisherOfferTemplateRestoreRequest(server string, params *GetPublisherOfferTemplateRestoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_id", runtime.ParamLocationQuery, params.OfferTemplateId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateUpdateRequestWithFormdataBody calls the generic PostPublisherOfferTemplateUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateUpdateRequestWithFormdataBody(server string, body PostPublisherOfferTemplateUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateUpdateRequestWithBody generates requests for PostPublisherOfferTemplateUpdate with any type of body
func NewPostPublisherOfferTemplateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithFormdataBody calls the generic PostPublisherOfferTemplateUpdateContentfields builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithFormdataBody(server string, body PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithBody generates requests for PostPublisherOfferTemplateUpdateContentfields with any type of body
func NewPostPublisherOfferTemplateUpdateContentfieldsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/update/contentfields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTemplateUpdatefullRequestWithFormdataBody calls the generic PostPublisherOfferTemplateUpdatefull builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateUpdatefullRequestWithFormdataBody(server string, body PostPublisherOfferTemplateUpdatefullFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateUpdatefullRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateUpdatefullRequestWithBody generates requests for PostPublisherOfferTemplateUpdatefull with any type of body
func NewPostPublisherOfferTemplateUpdatefullRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/updatefull")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTemplateVariantArchiveRequest generates requests for GetPublisherOfferTemplateVariantArchive
func NewGetPublisherOfferTemplateVariantArchiveRequest(server string, params *GetPublisherOfferTemplateVariantArchiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_variant_id", runtime.ParamLocationQuery, params.OfferTemplateVariantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateVariantCreateRequestWithFormdataBody calls the generic PostPublisherOfferTemplateVariantCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateVariantCreateRequestWithFormdataBody(server string, body PostPublisherOfferTemplateVariantCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateVariantCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateVariantCreateRequestWithBody generates requests for PostPublisherOfferTemplateVariantCreate with any type of body
func NewPostPublisherOfferTemplateVariantCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTemplateVariantDeleteRequestWithFormdataBody calls the generic PostPublisherOfferTemplateVariantDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateVariantDeleteRequestWithFormdataBody(server string, body PostPublisherOfferTemplateVariantDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateVariantDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateVariantDeleteRequestWithBody generates requests for PostPublisherOfferTemplateVariantDelete with any type of body
func NewPostPublisherOfferTemplateVariantDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTemplateVariantDuplicateRequest generates requests for GetPublisherOfferTemplateVariantDuplicate
func NewGetPublisherOfferTemplateVariantDuplicateRequest(server string, params *GetPublisherOfferTemplateVariantDuplicateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_variant_id", runtime.ParamLocationQuery, params.OfferTemplateVariantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateVariantGetRequest generates requests for GetPublisherOfferTemplateVariantGet
func NewGetPublisherOfferTemplateVariantGetRequest(server string, params *GetPublisherOfferTemplateVariantGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_variant_id", runtime.ParamLocationQuery, params.OfferTemplateVariantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTemplateVariantRestoreRequest generates requests for GetPublisherOfferTemplateVariantRestore
func NewGetPublisherOfferTemplateVariantRestoreRequest(server string, params *GetPublisherOfferTemplateVariantRestoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_template_variant_id", runtime.ParamLocationQuery, params.OfferTemplateVariantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HistoryComment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history_comment", runtime.ParamLocationQuery, *params.HistoryComment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTemplateVariantUpdateRequestWithFormdataBody calls the generic PostPublisherOfferTemplateVariantUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTemplateVariantUpdateRequestWithFormdataBody(server string, body PostPublisherOfferTemplateVariantUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTemplateVariantUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTemplateVariantUpdateRequestWithBody generates requests for PostPublisherOfferTemplateVariantUpdate with any type of body
func NewPostPublisherOfferTemplateVariantUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/template/variant/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTermAddRequestWithFormdataBody calls the generic PostPublisherOfferTermAdd builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTermAddRequestWithFormdataBody(server string, body PostPublisherOfferTermAddFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTermAddRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTermAddRequestWithBody generates requests for PostPublisherOfferTermAdd with any type of body
func NewPostPublisherOfferTermAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/term/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherOfferTermListRequest generates requests for GetPublisherOfferTermList
func NewGetPublisherOfferTermListRequest(server string, params *GetPublisherOfferTermListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/term/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer_id", runtime.ParamLocationQuery, params.OfferId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherOfferTermOfferListRequest generates requests for GetPublisherOfferTermOfferList
func NewGetPublisherOfferTermOfferListRequest(server string, params *GetPublisherOfferTermOfferListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/term/offer/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_id", runtime.ParamLocationQuery, params.TermId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherOfferTermRemoveRequestWithFormdataBody calls the generic PostPublisherOfferTermRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTermRemoveRequestWithFormdataBody(server string, body PostPublisherOfferTermRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTermRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTermRemoveRequestWithBody generates requests for PostPublisherOfferTermRemove with any type of body
func NewPostPublisherOfferTermRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/term/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferTermReorderRequestWithFormdataBody calls the generic PostPublisherOfferTermReorder builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferTermReorderRequestWithFormdataBody(server string, body PostPublisherOfferTermReorderFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferTermReorderRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferTermReorderRequestWithBody generates requests for PostPublisherOfferTermReorder with any type of body
func NewPostPublisherOfferTermReorderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/term/reorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherOfferUpdateRequestWithFormdataBody calls the generic PostPublisherOfferUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherOfferUpdateRequestWithFormdataBody(server string, body PostPublisherOfferUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherOfferUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherOfferUpdateRequestWithBody generates requests for PostPublisherOfferUpdate with any type of body
func NewPostPublisherOfferUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/offer/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPaymentGetRequest generates requests for GetPublisherPaymentGet
func NewGetPublisherPaymentGetRequest(server string, params *GetPublisherPaymentGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_payment_id", runtime.ParamLocationQuery, params.UserPaymentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPaymentIsPartialRefundRequest generates requests for GetPublisherPaymentIsPartialRefund
func NewGetPublisherPaymentIsPartialRefundRequest(server string, params *GetPublisherPaymentIsPartialRefundParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/isPartialRefund")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_payment_id", runtime.ParamLocationQuery, params.UserPaymentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPaymentMethodAddRequestWithFormdataBody calls the generic PostPublisherPaymentMethodAdd builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodAddRequestWithFormdataBody(server string, body PostPublisherPaymentMethodAddFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodAddRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodAddRequestWithBody generates requests for PostPublisherPaymentMethodAdd with any type of body
func NewPostPublisherPaymentMethodAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithFormdataBody calls the generic PostPublisherPaymentMethodBillingAddressApplyToAll builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithFormdataBody(server string, body PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithBody generates requests for PostPublisherPaymentMethodBillingAddressApplyToAll with any type of body
func NewPostPublisherPaymentMethodBillingAddressApplyToAllRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/billingAddress/applyToAll")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodBillingAddressAttachRequestWithFormdataBody calls the generic PostPublisherPaymentMethodBillingAddressAttach builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodBillingAddressAttachRequestWithFormdataBody(server string, body PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodBillingAddressAttachRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodBillingAddressAttachRequestWithBody generates requests for PostPublisherPaymentMethodBillingAddressAttach with any type of body
func NewPostPublisherPaymentMethodBillingAddressAttachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/billingAddress/attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodBillingAddressDetachRequestWithFormdataBody calls the generic PostPublisherPaymentMethodBillingAddressDetach builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodBillingAddressDetachRequestWithFormdataBody(server string, body PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodBillingAddressDetachRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodBillingAddressDetachRequestWithBody generates requests for PostPublisherPaymentMethodBillingAddressDetach with any type of body
func NewPostPublisherPaymentMethodBillingAddressDetachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/billingAddress/detach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodBillingAddressGetRequestWithFormdataBody calls the generic PostPublisherPaymentMethodBillingAddressGet builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodBillingAddressGetRequestWithFormdataBody(server string, body PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodBillingAddressGetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodBillingAddressGetRequestWithBody generates requests for PostPublisherPaymentMethodBillingAddressGet with any type of body
func NewPostPublisherPaymentMethodBillingAddressGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/billingAddress/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPaymentMethodGetRequest generates requests for GetPublisherPaymentMethodGet
func NewGetPublisherPaymentMethodGetRequest(server string, params *GetPublisherPaymentMethodGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_payment_info_id", runtime.ParamLocationQuery, params.UserPaymentInfoId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPaymentMethodGmoRefreshRequestWithFormdataBody calls the generic PostPublisherPaymentMethodGmoRefresh builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodGmoRefreshRequestWithFormdataBody(server string, body PostPublisherPaymentMethodGmoRefreshFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodGmoRefreshRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodGmoRefreshRequestWithBody generates requests for PostPublisherPaymentMethodGmoRefresh with any type of body
func NewPostPublisherPaymentMethodGmoRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/gmo/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodRemoveRequestWithFormdataBody calls the generic PostPublisherPaymentMethodRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodRemoveRequestWithFormdataBody(server string, body PostPublisherPaymentMethodRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodRemoveRequestWithBody generates requests for PostPublisherPaymentMethodRemove with any type of body
func NewPostPublisherPaymentMethodRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentMethodUpdateRequestWithFormdataBody calls the generic PostPublisherPaymentMethodUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentMethodUpdateRequestWithFormdataBody(server string, body PostPublisherPaymentMethodUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentMethodUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentMethodUpdateRequestWithBody generates requests for PostPublisherPaymentMethodUpdate with any type of body
func NewPostPublisherPaymentMethodUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/method/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithFormdataBody calls the generic PostPublisherPaymentProviderConfigurationSetVisibility builder with application/x-www-form-urlencoded body
func NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithFormdataBody(server string, body PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithBody generates requests for PostPublisherPaymentProviderConfigurationSetVisibility with any type of body
func NewPostPublisherPaymentProviderConfigurationSetVisibilityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/provider/configuration/setVisibility")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPaymentRefundRequest generates requests for GetPublisherPaymentRefund
func NewGetPublisherPaymentRefundRequest(server string, params *GetPublisherPaymentRefundParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/payment/refund")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_payment_id", runtime.ParamLocationQuery, params.UserPaymentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RevokeAccess != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revoke_access", runtime.ParamLocationQuery, *params.RevokeAccess); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPromotionCodeCountRequest generates requests for GetPublisherPromotionCodeCount
func NewGetPublisherPromotionCodeCountRequest(server string, params *GetPublisherPromotionCodeCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPromotionCodeCreateRequest generates requests for GetPublisherPromotionCodeCreate
func NewGetPublisherPromotionCodeCreateRequest(server string, params *GetPublisherPromotionCodeCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionCodeDeleteRequestWithFormdataBody calls the generic PostPublisherPromotionCodeDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionCodeDeleteRequestWithFormdataBody(server string, body PostPublisherPromotionCodeDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionCodeDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionCodeDeleteRequestWithBody generates requests for PostPublisherPromotionCodeDelete with any type of body
func NewPostPublisherPromotionCodeDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionCodeExportRequestWithFormdataBody calls the generic PostPublisherPromotionCodeExport builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionCodeExportRequestWithFormdataBody(server string, body PostPublisherPromotionCodeExportFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionCodeExportRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionCodeExportRequestWithBody generates requests for PostPublisherPromotionCodeExport with any type of body
func NewPostPublisherPromotionCodeExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPromotionCodeGetRequest generates requests for GetPublisherPromotionCodeGet
func NewGetPublisherPromotionCodeGetRequest(server string, params *GetPublisherPromotionCodeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promo_code_id", runtime.ParamLocationQuery, params.PromoCodeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPromotionCodeListRequest generates requests for GetPublisherPromotionCodeList
func NewGetPublisherPromotionCodeListRequest(server string, params *GetPublisherPromotionCodeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionCodeUpdateRequestWithFormdataBody calls the generic PostPublisherPromotionCodeUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionCodeUpdateRequestWithFormdataBody(server string, body PostPublisherPromotionCodeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionCodeUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionCodeUpdateRequestWithBody generates requests for PostPublisherPromotionCodeUpdate with any type of body
func NewPostPublisherPromotionCodeUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/code/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPromotionCountRequest generates requests for GetPublisherPromotionCount
func NewGetPublisherPromotionCountRequest(server string, params *GetPublisherPromotionCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Expired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expired", runtime.ParamLocationQuery, *params.Expired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionCreateRequestWithFormdataBody calls the generic PostPublisherPromotionCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionCreateRequestWithFormdataBody(server string, body PostPublisherPromotionCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionCreateRequestWithBody generates requests for PostPublisherPromotionCreate with any type of body
func NewPostPublisherPromotionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionDeleteRequestWithFormdataBody calls the generic PostPublisherPromotionDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionDeleteRequestWithFormdataBody(server string, body PostPublisherPromotionDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionDeleteRequestWithBody generates requests for PostPublisherPromotionDelete with any type of body
func NewPostPublisherPromotionDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionExistsRequestWithFormdataBody calls the generic PostPublisherPromotionExists builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionExistsRequestWithFormdataBody(server string, body PostPublisherPromotionExistsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionExistsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionExistsRequestWithBody generates requests for PostPublisherPromotionExists with any type of body
func NewPostPublisherPromotionExistsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/exists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPromotionFixedDiscountAddRequest generates requests for GetPublisherPromotionFixedDiscountAdd
func NewGetPublisherPromotionFixedDiscountAddRequest(server string, params *GetPublisherPromotionFixedDiscountAddParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/fixedDiscount/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, params.Currency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionFixedDiscountDeleteRequestWithFormdataBody calls the generic PostPublisherPromotionFixedDiscountDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionFixedDiscountDeleteRequestWithFormdataBody(server string, body PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionFixedDiscountDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionFixedDiscountDeleteRequestWithBody generates requests for PostPublisherPromotionFixedDiscountDelete with any type of body
func NewPostPublisherPromotionFixedDiscountDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/fixedDiscount/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionFixedDiscountUpdateRequestWithFormdataBody calls the generic PostPublisherPromotionFixedDiscountUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionFixedDiscountUpdateRequestWithFormdataBody(server string, body PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionFixedDiscountUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionFixedDiscountUpdateRequestWithBody generates requests for PostPublisherPromotionFixedDiscountUpdate with any type of body
func NewPostPublisherPromotionFixedDiscountUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/fixedDiscount/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionGenerateRequestWithFormdataBody calls the generic PostPublisherPromotionGenerate builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionGenerateRequestWithFormdataBody(server string, body PostPublisherPromotionGenerateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionGenerateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionGenerateRequestWithBody generates requests for PostPublisherPromotionGenerate with any type of body
func NewPostPublisherPromotionGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPromotionGetRequest generates requests for GetPublisherPromotionGet
func NewGetPublisherPromotionGetRequest(server string, params *GetPublisherPromotionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPromotionListRequest generates requests for GetPublisherPromotionList
func NewGetPublisherPromotionListRequest(server string, params *GetPublisherPromotionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Expired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expired", runtime.ParamLocationQuery, *params.Expired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionTermAddRequestWithFormdataBody calls the generic PostPublisherPromotionTermAdd builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionTermAddRequestWithFormdataBody(server string, body PostPublisherPromotionTermAddFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionTermAddRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionTermAddRequestWithBody generates requests for PostPublisherPromotionTermAdd with any type of body
func NewPostPublisherPromotionTermAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/term/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherPromotionTermDeleteRequestWithFormdataBody calls the generic PostPublisherPromotionTermDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionTermDeleteRequestWithFormdataBody(server string, body PostPublisherPromotionTermDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionTermDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionTermDeleteRequestWithBody generates requests for PostPublisherPromotionTermDelete with any type of body
func NewPostPublisherPromotionTermDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/term/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherPromotionTermListRequest generates requests for GetPublisherPromotionTermList
func NewGetPublisherPromotionTermListRequest(server string, params *GetPublisherPromotionTermListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/term/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherPromotionTotalRequest generates requests for GetPublisherPromotionTotal
func NewGetPublisherPromotionTotalRequest(server string, params *GetPublisherPromotionTotalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/total")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, params.PromotionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CurrencyCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency_code", runtime.ParamLocationQuery, *params.CurrencyCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherPromotionUpdateRequestWithFormdataBody calls the generic PostPublisherPromotionUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherPromotionUpdateRequestWithFormdataBody(server string, body PostPublisherPromotionUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherPromotionUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherPromotionUpdateRequestWithBody generates requests for PostPublisherPromotionUpdate with any type of body
func NewPostPublisherPromotionUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/promotion/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceAttachRequest generates requests for GetPublisherResourceAttach
func NewGetPublisherResourceAttachRequest(server string, params *GetPublisherResourceAttachParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "included_rid", runtime.ParamLocationQuery, params.IncludedRid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundle_rid", runtime.ParamLocationQuery, params.BundleRid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceBundleMembersRequest generates requests for GetPublisherResourceBundleMembers
func NewGetPublisherResourceBundleMembersRequest(server string, params *GetPublisherResourceBundleMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/bundle/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceCountRequest generates requests for GetPublisherResourceCount
func NewGetPublisherResourceCountRequest(server string, params *GetPublisherResourceCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherResourceCreateRequestWithFormdataBody calls the generic PostPublisherResourceCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceCreateRequestWithFormdataBody(server string, body PostPublisherResourceCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceCreateRequestWithBody generates requests for PostPublisherResourceCreate with any type of body
func NewPostPublisherResourceCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceCrossAppCountRequest generates requests for GetPublisherResourceCrossAppCount
func NewGetPublisherResourceCrossAppCountRequest(server string, params *GetPublisherResourceCrossAppCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/crossApp/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merch_id", runtime.ParamLocationQuery, params.MerchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherResourceDeleteRequestWithFormdataBody calls the generic PostPublisherResourceDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceDeleteRequestWithFormdataBody(server string, body PostPublisherResourceDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceDeleteRequestWithBody generates requests for PostPublisherResourceDelete with any type of body
func NewPostPublisherResourceDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceDetachRequest generates requests for GetPublisherResourceDetach
func NewGetPublisherResourceDetachRequest(server string, params *GetPublisherResourceDetachParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/detach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundle_rid", runtime.ParamLocationQuery, params.BundleRid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceGetRequest generates requests for GetPublisherResourceGet
func NewGetPublisherResourceGetRequest(server string, params *GetPublisherResourceGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceListRequest generates requests for GetPublisherResourceList
func NewGetPublisherResourceListRequest(server string, params *GetPublisherResourceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludedTagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "included_tag_id", runtime.ParamLocationQuery, *params.IncludedTagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedRid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "excluded_rid", runtime.ParamLocationQuery, *params.ExcludedRid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedRid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "included_rid", runtime.ParamLocationQuery, *params.IncludedRid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, params.OrderDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Disabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disabled", runtime.ParamLocationQuery, *params.Disabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.BundleType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundle_type", runtime.ParamLocationQuery, *params.BundleType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceStatsListRequest generates requests for GetPublisherResourceStatsList
func NewGetPublisherResourceStatsListRequest(server string, params *GetPublisherResourceStatsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/stats/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludedRid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "included_rid", runtime.ParamLocationQuery, *params.IncludedRid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherResourceTagAttachRequestWithFormdataBody calls the generic PostPublisherResourceTagAttach builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceTagAttachRequestWithFormdataBody(server string, body PostPublisherResourceTagAttachFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceTagAttachRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceTagAttachRequestWithBody generates requests for PostPublisherResourceTagAttach with any type of body
func NewPostPublisherResourceTagAttachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceTagBundlesRequest generates requests for GetPublisherResourceTagBundles
func NewGetPublisherResourceTagBundlesRequest(server string, params *GetPublisherResourceTagBundlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/bundles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "included_tag_id", runtime.ParamLocationQuery, params.IncludedTagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, params.OrderDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Disabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disabled", runtime.ParamLocationQuery, *params.Disabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.BundleType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bundle_type", runtime.ParamLocationQuery, *params.BundleType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceTagCreateRequest generates requests for GetPublisherResourceTagCreate
func NewGetPublisherResourceTagCreateRequest(server string, params *GetPublisherResourceTagCreateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherResourceTagDeleteRequestWithFormdataBody calls the generic PostPublisherResourceTagDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceTagDeleteRequestWithFormdataBody(server string, body PostPublisherResourceTagDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceTagDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceTagDeleteRequestWithBody generates requests for PostPublisherResourceTagDelete with any type of body
func NewPostPublisherResourceTagDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherResourceTagDetachRequestWithFormdataBody calls the generic PostPublisherResourceTagDetach builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceTagDetachRequestWithFormdataBody(server string, body PostPublisherResourceTagDetachFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceTagDetachRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceTagDetachRequestWithBody generates requests for PostPublisherResourceTagDetach with any type of body
func NewPostPublisherResourceTagDetachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/detach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceTagGetRequest generates requests for GetPublisherResourceTagGet
func NewGetPublisherResourceTagGetRequest(server string, params *GetPublisherResourceTagGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_tag_id", runtime.ParamLocationQuery, params.ResourceTagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherResourceTagListRequest generates requests for GetPublisherResourceTagList
func NewGetPublisherResourceTagListRequest(server string, params *GetPublisherResourceTagListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/tag/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_type", runtime.ParamLocationQuery, params.TagType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherResourceUpdateRequestWithFormdataBody calls the generic PostPublisherResourceUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherResourceUpdateRequestWithFormdataBody(server string, body PostPublisherResourceUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherResourceUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherResourceUpdateRequestWithBody generates requests for PostPublisherResourceUpdate with any type of body
func NewPostPublisherResourceUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherResourceUserListRequest generates requests for GetPublisherResourceUserList
func NewGetPublisherResourceUserListRequest(server string, params *GetPublisherResourceUserListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/resource/user/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherScheduleCreateRequestWithFormdataBody calls the generic PostPublisherScheduleCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleCreateRequestWithFormdataBody(server string, body PostPublisherScheduleCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleCreateRequestWithBody generates requests for PostPublisherScheduleCreate with any type of body
func NewPostPublisherScheduleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherScheduleDeleteRequestWithFormdataBody calls the generic PostPublisherScheduleDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleDeleteRequestWithFormdataBody(server string, body PostPublisherScheduleDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleDeleteRequestWithBody generates requests for PostPublisherScheduleDelete with any type of body
func NewPostPublisherScheduleDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherScheduleGetRequestWithFormdataBody calls the generic PostPublisherScheduleGet builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleGetRequestWithFormdataBody(server string, body PostPublisherScheduleGetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleGetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleGetRequestWithBody generates requests for PostPublisherScheduleGet with any type of body
func NewPostPublisherScheduleGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherScheduleListRequestWithFormdataBody calls the generic PostPublisherScheduleList builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleListRequestWithFormdataBody(server string, body PostPublisherScheduleListFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleListRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleListRequestWithBody generates requests for PostPublisherScheduleList with any type of body
func NewPostPublisherScheduleListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSchedulePeriodAddRequestWithFormdataBody calls the generic PostPublisherSchedulePeriodAdd builder with application/x-www-form-urlencoded body
func NewPostPublisherSchedulePeriodAddRequestWithFormdataBody(server string, body PostPublisherSchedulePeriodAddFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSchedulePeriodAddRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSchedulePeriodAddRequestWithBody generates requests for PostPublisherSchedulePeriodAdd with any type of body
func NewPostPublisherSchedulePeriodAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/period/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSchedulePeriodDeleteRequestWithFormdataBody calls the generic PostPublisherSchedulePeriodDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherSchedulePeriodDeleteRequestWithFormdataBody(server string, body PostPublisherSchedulePeriodDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSchedulePeriodDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSchedulePeriodDeleteRequestWithBody generates requests for PostPublisherSchedulePeriodDelete with any type of body
func NewPostPublisherSchedulePeriodDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/period/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSchedulePeriodUpdateRequestWithFormdataBody calls the generic PostPublisherSchedulePeriodUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherSchedulePeriodUpdateRequestWithFormdataBody(server string, body PostPublisherSchedulePeriodUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSchedulePeriodUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSchedulePeriodUpdateRequestWithBody generates requests for PostPublisherSchedulePeriodUpdate with any type of body
func NewPostPublisherSchedulePeriodUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/period/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherScheduleTermsRequestWithFormdataBody calls the generic PostPublisherScheduleTerms builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleTermsRequestWithFormdataBody(server string, body PostPublisherScheduleTermsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleTermsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleTermsRequestWithBody generates requests for PostPublisherScheduleTerms with any type of body
func NewPostPublisherScheduleTermsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/terms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherScheduleUpdateRequestWithFormdataBody calls the generic PostPublisherScheduleUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherScheduleUpdateRequestWithFormdataBody(server string, body PostPublisherScheduleUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherScheduleUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherScheduleUpdateRequestWithBody generates requests for PostPublisherScheduleUpdate with any type of body
func NewPostPublisherScheduleUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/schedule/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionAddressAssignRequestWithFormdataBody calls the generic PostPublisherSubscriptionAddressAssign builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionAddressAssignRequestWithFormdataBody(server string, body PostPublisherSubscriptionAddressAssignFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionAddressAssignRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionAddressAssignRequestWithBody generates requests for PostPublisherSubscriptionAddressAssign with any type of body
func NewPostPublisherSubscriptionAddressAssignRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/address/assign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionCancelRequestWithFormdataBody calls the generic PostPublisherSubscriptionCancel builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionCancelRequestWithFormdataBody(server string, body PostPublisherSubscriptionCancelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionCancelRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionCancelRequestWithBody generates requests for PostPublisherSubscriptionCancel with any type of body
func NewPostPublisherSubscriptionCancelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionCancelDeferredRequestWithFormdataBody calls the generic PostPublisherSubscriptionCancelDeferred builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionCancelDeferredRequestWithFormdataBody(server string, body PostPublisherSubscriptionCancelDeferredFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionCancelDeferredRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionCancelDeferredRequestWithBody generates requests for PostPublisherSubscriptionCancelDeferred with any type of body
func NewPostPublisherSubscriptionCancelDeferredRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/cancel/deferred")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionCountRequestWithFormdataBody calls the generic PostPublisherSubscriptionCount builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionCountRequestWithFormdataBody(server string, body PostPublisherSubscriptionCountFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionCountRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionCountRequestWithBody generates requests for PostPublisherSubscriptionCount with any type of body
func NewPostPublisherSubscriptionCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherSubscriptionGetRequest generates requests for GetPublisherSubscriptionGet
func NewGetPublisherSubscriptionGetRequest(server string, params *GetPublisherSubscriptionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscription_id", runtime.ParamLocationQuery, params.SubscriptionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithFormdataBody calls the generic PostPublisherSubscriptionIsPartiallyRefundable builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithFormdataBody(server string, body PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithBody generates requests for PostPublisherSubscriptionIsPartiallyRefundable with any type of body
func NewPostPublisherSubscriptionIsPartiallyRefundableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/isPartiallyRefundable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherSubscriptionListRequest generates requests for GetPublisherSubscriptionList
func NewGetPublisherSubscriptionListRequest(server string, params *GetPublisherSubscriptionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SelectBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select_by", runtime.ParamLocationQuery, *params.SelectBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherSubscriptionResumeRequestWithFormdataBody calls the generic PostPublisherSubscriptionResume builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionResumeRequestWithFormdataBody(server string, body PostPublisherSubscriptionResumeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionResumeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionResumeRequestWithBody generates requests for PostPublisherSubscriptionResume with any type of body
func NewPostPublisherSubscriptionResumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/resume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherSubscriptionSearchRequest generates requests for GetPublisherSubscriptionSearch
func NewGetPublisherSubscriptionSearchRequest(server string, params *GetPublisherSubscriptionSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchNewSubscriptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_new_subscriptions", runtime.ParamLocationQuery, *params.SearchNewSubscriptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NewSubscriptionsCreatedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "new_subscriptions_created_from", runtime.ParamLocationQuery, *params.NewSubscriptionsCreatedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NewSubscriptionsCreatedTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "new_subscriptions_created_to", runtime.ParamLocationQuery, *params.NewSubscriptionsCreatedTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchActiveNowSubscriptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_active_now_subscriptions", runtime.ParamLocationQuery, *params.SearchActiveNowSubscriptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActiveNowSubscriptionsStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "active_now_subscriptions_statuses", runtime.ParamLocationQuery, *params.ActiveNowSubscriptionsStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchInactiveSubscriptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_inactive_subscriptions", runtime.ParamLocationQuery, *params.SearchInactiveSubscriptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InactiveSubscriptionsStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "inactive_subscriptions_statuses", runtime.ParamLocationQuery, *params.InactiveSubscriptionsStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsInactiveFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_inactive_from", runtime.ParamLocationQuery, *params.SubscriptionsInactiveFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsInactiveTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_inactive_to", runtime.ParamLocationQuery, *params.SubscriptionsInactiveTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchUpdatedSubscriptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_updated_subscriptions", runtime.ParamLocationQuery, *params.SearchUpdatedSubscriptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSubscriptionsStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "updated_subscriptions_statuses", runtime.ParamLocationQuery, *params.UpdatedSubscriptionsStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsUpdatedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_updated_from", runtime.ParamLocationQuery, *params.SubscriptionsUpdatedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsUpdatedTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_updated_to", runtime.ParamLocationQuery, *params.SubscriptionsUpdatedTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchAutoRenewingSubscriptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_auto_renewing_subscriptions", runtime.ParamLocationQuery, *params.SearchAutoRenewingSubscriptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsAutoRenewing != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_auto_renewing", runtime.ParamLocationQuery, *params.SubscriptionsAutoRenewing); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchSubscriptionsByNextBillingDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_subscriptions_by_next_billing_date", runtime.ParamLocationQuery, *params.SearchSubscriptionsByNextBillingDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsNextBillingDateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_next_billing_date_from", runtime.ParamLocationQuery, *params.SubscriptionsNextBillingDateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsNextBillingDateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscriptions_next_billing_date_to", runtime.ParamLocationQuery, *params.SubscriptionsNextBillingDateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchSubscriptionsByTerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_subscriptions_by_terms", runtime.ParamLocationQuery, *params.SearchSubscriptionsByTerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsTerms != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "subscriptions_terms", runtime.ParamLocationQuery, *params.SubscriptionsTerms); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubscriptionsTermTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "subscriptions_term_types", runtime.ParamLocationQuery, *params.SubscriptionsTermTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherSubscriptionShareInviteRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareInvite builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareInviteRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareInviteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareInviteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareInviteRequestWithBody generates requests for PostPublisherSubscriptionShareInvite with any type of body
func NewPostPublisherSubscriptionShareInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareListRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareList builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareListRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareListFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareListRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareListRequestWithBody generates requests for PostPublisherSubscriptionShareList with any type of body
func NewPostPublisherSubscriptionShareListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareResendRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareResend builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareResendRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareResendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareResendRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareResendRequestWithBody generates requests for PostPublisherSubscriptionShareResend with any type of body
func NewPostPublisherSubscriptionShareResendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/resend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareRevokeRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareRevoke builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareRevokeRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareRevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareRevokeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareRevokeRequestWithBody generates requests for PostPublisherSubscriptionShareRevoke with any type of body
func NewPostPublisherSubscriptionShareRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareStartRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareStart builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareStartRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareStartFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareStartRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareStartRequestWithBody generates requests for PostPublisherSubscriptionShareStart with any type of body
func NewPostPublisherSubscriptionShareStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareStopRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareStop builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareStopRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareStopFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareStopRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareStopRequestWithBody generates requests for PostPublisherSubscriptionShareStop with any type of body
func NewPostPublisherSubscriptionShareStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareUpdateRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareUpdateRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareUpdateRequestWithBody generates requests for PostPublisherSubscriptionShareUpdate with any type of body
func NewPostPublisherSubscriptionShareUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareUserAddRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareUserAdd builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareUserAddRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareUserAddFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareUserAddRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareUserAddRequestWithBody generates requests for PostPublisherSubscriptionShareUserAdd with any type of body
func NewPostPublisherSubscriptionShareUserAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/user/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareUserRemoveRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareUserRemove builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareUserRemoveRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareUserRemoveFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareUserRemoveRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareUserRemoveRequestWithBody generates requests for PostPublisherSubscriptionShareUserRemove with any type of body
func NewPostPublisherSubscriptionShareUserRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/user/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionShareValidateRequestWithFormdataBody calls the generic PostPublisherSubscriptionShareValidate builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionShareValidateRequestWithFormdataBody(server string, body PostPublisherSubscriptionShareValidateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionShareValidateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionShareValidateRequestWithBody generates requests for PostPublisherSubscriptionShareValidate with any type of body
func NewPostPublisherSubscriptionShareValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/share/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionStatsRequestWithFormdataBody calls the generic PostPublisherSubscriptionStats builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionStatsRequestWithFormdataBody(server string, body PostPublisherSubscriptionStatsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionStatsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionStatsRequestWithBody generates requests for PostPublisherSubscriptionStats with any type of body
func NewPostPublisherSubscriptionStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherSubscriptionUpdateRequestWithFormdataBody calls the generic PostPublisherSubscriptionUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherSubscriptionUpdateRequestWithFormdataBody(server string, body PostPublisherSubscriptionUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherSubscriptionUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherSubscriptionUpdateRequestWithBody generates requests for PostPublisherSubscriptionUpdate with any type of body
func NewPostPublisherSubscriptionUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/subscription/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTeamListRequestWithFormdataBody calls the generic PostPublisherTeamList builder with application/x-www-form-urlencoded body
func NewPostPublisherTeamListRequestWithFormdataBody(server string, body PostPublisherTeamListFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTeamListRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTeamListRequestWithBody generates requests for PostPublisherTeamList with any type of body
func NewPostPublisherTeamListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/team/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherTermApplicableRequest generates requests for GetPublisherTermApplicable
func NewGetPublisherTermApplicableRequest(server string, params *GetPublisherTermApplicableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/applicable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PromotionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "promotion_id", runtime.ParamLocationQuery, *params.PromotionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherTermChangeCanRequestWithFormdataBody calls the generic PostPublisherTermChangeCan builder with application/x-www-form-urlencoded body
func NewPostPublisherTermChangeCanRequestWithFormdataBody(server string, body PostPublisherTermChangeCanFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermChangeCanRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermChangeCanRequestWithBody generates requests for PostPublisherTermChangeCan with any type of body
func NewPostPublisherTermChangeCanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/change/can")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermChangeCancelRequestWithFormdataBody calls the generic PostPublisherTermChangeCancel builder with application/x-www-form-urlencoded body
func NewPostPublisherTermChangeCancelRequestWithFormdataBody(server string, body PostPublisherTermChangeCancelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermChangeCancelRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermChangeCancelRequestWithBody generates requests for PostPublisherTermChangeCancel with any type of body
func NewPostPublisherTermChangeCancelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/change/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermChangeDoRequestWithFormdataBody calls the generic PostPublisherTermChangeDo builder with application/x-www-form-urlencoded body
func NewPostPublisherTermChangeDoRequestWithFormdataBody(server string, body PostPublisherTermChangeDoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermChangeDoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermChangeDoRequestWithBody generates requests for PostPublisherTermChangeDo with any type of body
func NewPostPublisherTermChangeDoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/change/do")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithFormdataBody calls the generic PostPublisherTermChangeGetSubscriptionUpgradeStatus builder with application/x-www-form-urlencoded body
func NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithFormdataBody(server string, body PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithBody generates requests for PostPublisherTermChangeGetSubscriptionUpgradeStatus with any type of body
func NewPostPublisherTermChangeGetSubscriptionUpgradeStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/change/getSubscriptionUpgradeStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermChangeOptionCreateRequestWithFormdataBody calls the generic PostPublisherTermChangeOptionCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermChangeOptionCreateRequestWithFormdataBody(server string, body PostPublisherTermChangeOptionCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermChangeOptionCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermChangeOptionCreateRequestWithBody generates requests for PostPublisherTermChangeOptionCreate with any type of body
func NewPostPublisherTermChangeOptionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/change/option/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherTermCountRequest generates requests for GetPublisherTermCount
func NewGetPublisherTermCountRequest(server string, params *GetPublisherTermCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include_type", runtime.ParamLocationQuery, *params.IncludeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exclude_type", runtime.ParamLocationQuery, *params.ExcludeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_type", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherTermCustomCreateRequestWithFormdataBody calls the generic PostPublisherTermCustomCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermCustomCreateRequestWithFormdataBody(server string, body PostPublisherTermCustomCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermCustomCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermCustomCreateRequestWithBody generates requests for PostPublisherTermCustomCreate with any type of body
func NewPostPublisherTermCustomCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/custom/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermCustomUpdateRequestWithFormdataBody calls the generic PostPublisherTermCustomUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermCustomUpdateRequestWithFormdataBody(server string, body PostPublisherTermCustomUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermCustomUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermCustomUpdateRequestWithBody generates requests for PostPublisherTermCustomUpdate with any type of body
func NewPostPublisherTermCustomUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/custom/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermDeleteRequestWithFormdataBody calls the generic PostPublisherTermDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherTermDeleteRequestWithFormdataBody(server string, body PostPublisherTermDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermDeleteRequestWithBody generates requests for PostPublisherTermDelete with any type of body
func NewPostPublisherTermDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermDynamicCreateRequestWithFormdataBody calls the generic PostPublisherTermDynamicCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermDynamicCreateRequestWithFormdataBody(server string, body PostPublisherTermDynamicCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermDynamicCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermDynamicCreateRequestWithBody generates requests for PostPublisherTermDynamicCreate with any type of body
func NewPostPublisherTermDynamicCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/dynamic/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermDynamicUpdateRequestWithFormdataBody calls the generic PostPublisherTermDynamicUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermDynamicUpdateRequestWithFormdataBody(server string, body PostPublisherTermDynamicUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermDynamicUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermDynamicUpdateRequestWithBody generates requests for PostPublisherTermDynamicUpdate with any type of body
func NewPostPublisherTermDynamicUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/dynamic/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermExternalCreateRequestWithFormdataBody calls the generic PostPublisherTermExternalCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermExternalCreateRequestWithFormdataBody(server string, body PostPublisherTermExternalCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermExternalCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermExternalCreateRequestWithBody generates requests for PostPublisherTermExternalCreate with any type of body
func NewPostPublisherTermExternalCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/external/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermExternalUpdateRequestWithFormdataBody calls the generic PostPublisherTermExternalUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermExternalUpdateRequestWithFormdataBody(server string, body PostPublisherTermExternalUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermExternalUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermExternalUpdateRequestWithBody generates requests for PostPublisherTermExternalUpdate with any type of body
func NewPostPublisherTermExternalUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/external/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherTermGetRequest generates requests for GetPublisherTermGet
func NewGetPublisherTermGetRequest(server string, params *GetPublisherTermGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term_id", runtime.ParamLocationQuery, params.TermId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherTermGiftCreateRequestWithFormdataBody calls the generic PostPublisherTermGiftCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermGiftCreateRequestWithFormdataBody(server string, body PostPublisherTermGiftCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermGiftCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermGiftCreateRequestWithBody generates requests for PostPublisherTermGiftCreate with any type of body
func NewPostPublisherTermGiftCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/gift/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermGiftUpdateRequestWithFormdataBody calls the generic PostPublisherTermGiftUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermGiftUpdateRequestWithFormdataBody(server string, body PostPublisherTermGiftUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermGiftUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermGiftUpdateRequestWithBody generates requests for PostPublisherTermGiftUpdate with any type of body
func NewPostPublisherTermGiftUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/gift/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermPaymentCreateRequestWithFormdataBody calls the generic PostPublisherTermPaymentCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermPaymentCreateRequestWithFormdataBody(server string, body PostPublisherTermPaymentCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermPaymentCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermPaymentCreateRequestWithBody generates requests for PostPublisherTermPaymentCreate with any type of body
func NewPostPublisherTermPaymentCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/payment/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermPaymentUpdateRequestWithFormdataBody calls the generic PostPublisherTermPaymentUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermPaymentUpdateRequestWithFormdataBody(server string, body PostPublisherTermPaymentUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermPaymentUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermPaymentUpdateRequestWithBody generates requests for PostPublisherTermPaymentUpdate with any type of body
func NewPostPublisherTermPaymentUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/payment/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermRegistrationCreateRequestWithFormdataBody calls the generic PostPublisherTermRegistrationCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermRegistrationCreateRequestWithFormdataBody(server string, body PostPublisherTermRegistrationCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermRegistrationCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermRegistrationCreateRequestWithBody generates requests for PostPublisherTermRegistrationCreate with any type of body
func NewPostPublisherTermRegistrationCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/registration/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherTermRegistrationUpdateRequestWithFormdataBody calls the generic PostPublisherTermRegistrationUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherTermRegistrationUpdateRequestWithFormdataBody(server string, body PostPublisherTermRegistrationUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherTermRegistrationUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherTermRegistrationUpdateRequestWithBody generates requests for PostPublisherTermRegistrationUpdate with any type of body
func NewPostPublisherTermRegistrationUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/registration/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherTermStatsListRequest generates requests for GetPublisherTermStatsList
func NewGetPublisherTermStatsListRequest(server string, params *GetPublisherTermStatsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/term/stats/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherTestUserRefRequest generates requests for GetPublisherTestUserRef
func NewGetPublisherTestUserRefRequest(server string, params *GetPublisherTestUserRefParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/test/userRef")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_ref", runtime.ParamLocationQuery, params.UserRef); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherUserAccessActiveCountRequestWithFormdataBody calls the generic PostPublisherUserAccessActiveCount builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAccessActiveCountRequestWithFormdataBody(server string, body PostPublisherUserAccessActiveCountFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAccessActiveCountRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAccessActiveCountRequestWithBody generates requests for PostPublisherUserAccessActiveCount with any type of body
func NewPostPublisherUserAccessActiveCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/active/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherUserAccessCheckRequest generates requests for GetPublisherUserAccessCheck
func NewGetPublisherUserAccessCheckRequest(server string, params *GetPublisherUserAccessCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CrossApp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cross_app", runtime.ParamLocationQuery, *params.CrossApp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserAccessGrantRequest generates requests for GetPublisherUserAccessGrant
func NewGetPublisherUserAccessGrantRequest(server string, params *GetPublisherUserAccessGrantParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/grant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Emails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emails", runtime.ParamLocationQuery, *params.Emails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpireDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expire_date", runtime.ParamLocationQuery, *params.ExpireDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "send_email", runtime.ParamLocationQuery, params.SendEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserAccessGrantToUsersRequest generates requests for GetPublisherUserAccessGrantToUsers
func NewGetPublisherUserAccessGrantToUsersRequest(server string, params *GetPublisherUserAccessGrantToUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/grantToUsers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rid", runtime.ParamLocationQuery, params.Rid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Emails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "emails", runtime.ParamLocationQuery, *params.Emails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_id", runtime.ParamLocationQuery, *params.FileId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpireDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expire_date", runtime.ParamLocationQuery, *params.ExpireDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "send_email", runtime.ParamLocationQuery, params.SendEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserAccessListRequest generates requests for GetPublisherUserAccessList
func NewGetPublisherUserAccessListRequest(server string, params *GetPublisherUserAccessListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExpandBundled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand_bundled", runtime.ParamLocationQuery, *params.ExpandBundled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CrossApp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cross_app", runtime.ParamLocationQuery, *params.CrossApp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserAccessRevokeRequest generates requests for GetPublisherUserAccessRevoke
func NewGetPublisherUserAccessRevokeRequest(server string, params *GetPublisherUserAccessRevokeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_id", runtime.ParamLocationQuery, params.AccessId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherUserAccessUpdateRequestWithFormdataBody calls the generic PostPublisherUserAccessUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAccessUpdateRequestWithFormdataBody(server string, body PostPublisherUserAccessUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAccessUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAccessUpdateRequestWithBody generates requests for PostPublisherUserAccessUpdate with any type of body
func NewPostPublisherUserAccessUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/access/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserAddressCreateRequestWithFormdataBody calls the generic PostPublisherUserAddressCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAddressCreateRequestWithFormdataBody(server string, body PostPublisherUserAddressCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAddressCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAddressCreateRequestWithBody generates requests for PostPublisherUserAddressCreate with any type of body
func NewPostPublisherUserAddressCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/address/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserAddressDeleteRequestWithFormdataBody calls the generic PostPublisherUserAddressDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAddressDeleteRequestWithFormdataBody(server string, body PostPublisherUserAddressDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAddressDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAddressDeleteRequestWithBody generates requests for PostPublisherUserAddressDelete with any type of body
func NewPostPublisherUserAddressDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/address/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserAddressHistoryRequestWithFormdataBody calls the generic PostPublisherUserAddressHistory builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAddressHistoryRequestWithFormdataBody(server string, body PostPublisherUserAddressHistoryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAddressHistoryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAddressHistoryRequestWithBody generates requests for PostPublisherUserAddressHistory with any type of body
func NewPostPublisherUserAddressHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/address/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherUserAddressListRequest generates requests for GetPublisherUserAddressList
func NewGetPublisherUserAddressListRequest(server string, params *GetPublisherUserAddressListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/address/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherUserAddressUpdateRequestWithFormdataBody calls the generic PostPublisherUserAddressUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAddressUpdateRequestWithFormdataBody(server string, body PostPublisherUserAddressUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAddressUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAddressUpdateRequestWithBody generates requests for PostPublisherUserAddressUpdate with any type of body
func NewPostPublisherUserAddressUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/address/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserAppCountRequestWithFormdataBody calls the generic PostPublisherUserAppCount builder with application/x-www-form-urlencoded body
func NewPostPublisherUserAppCountRequestWithFormdataBody(server string, body PostPublisherUserAppCountFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserAppCountRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserAppCountRequestWithBody generates requests for PostPublisherUserAppCount with any type of body
func NewPostPublisherUserAppCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/app/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressCreateRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressCreateRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressCreateRequestWithBody generates requests for PostPublisherUserBillingAddressCreate with any type of body
func NewPostPublisherUserBillingAddressCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressDeleteRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressDeleteRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressDeleteRequestWithBody generates requests for PostPublisherUserBillingAddressDelete with any type of body
func NewPostPublisherUserBillingAddressDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressGetRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressGet builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressGetRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressGetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressGetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressGetRequestWithBody generates requests for PostPublisherUserBillingAddressGet with any type of body
func NewPostPublisherUserBillingAddressGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressGetByPaymentRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressGetByPayment builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressGetByPaymentRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressGetByPaymentRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressGetByPaymentRequestWithBody generates requests for PostPublisherUserBillingAddressGetByPayment with any type of body
func NewPostPublisherUserBillingAddressGetByPaymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/getByPayment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressGetByPaymentInfo builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithBody generates requests for PostPublisherUserBillingAddressGetByPaymentInfo with any type of body
func NewPostPublisherUserBillingAddressGetByPaymentInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/getByPaymentInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBillingAddressListRequestWithFormdataBody calls the generic PostPublisherUserBillingAddressList builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBillingAddressListRequestWithFormdataBody(server string, body PostPublisherUserBillingAddressListFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBillingAddressListRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBillingAddressListRequestWithBody generates requests for PostPublisherUserBillingAddressList with any type of body
func NewPostPublisherUserBillingAddressListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/billingAddress/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBulkImportDeleteRequestWithFormdataBody calls the generic PostPublisherUserBulkImportDelete builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBulkImportDeleteRequestWithFormdataBody(server string, body PostPublisherUserBulkImportDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBulkImportDeleteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBulkImportDeleteRequestWithBody generates requests for PostPublisherUserBulkImportDelete with any type of body
func NewPostPublisherUserBulkImportDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/bulkImport/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBulkImportDownloadRequestWithFormdataBody calls the generic PostPublisherUserBulkImportDownload builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBulkImportDownloadRequestWithFormdataBody(server string, body PostPublisherUserBulkImportDownloadFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBulkImportDownloadRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBulkImportDownloadRequestWithBody generates requests for PostPublisherUserBulkImportDownload with any type of body
func NewPostPublisherUserBulkImportDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/bulkImport/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBulkImportListCompletedRequestWithFormdataBody calls the generic PostPublisherUserBulkImportListCompleted builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBulkImportListCompletedRequestWithFormdataBody(server string, body PostPublisherUserBulkImportListCompletedFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBulkImportListCompletedRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBulkImportListCompletedRequestWithBody generates requests for PostPublisherUserBulkImportListCompleted with any type of body
func NewPostPublisherUserBulkImportListCompletedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/bulkImport/listCompleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserBulkImportListProcessingRequestWithFormdataBody calls the generic PostPublisherUserBulkImportListProcessing builder with application/x-www-form-urlencoded body
func NewPostPublisherUserBulkImportListProcessingRequestWithFormdataBody(server string, body PostPublisherUserBulkImportListProcessingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserBulkImportListProcessingRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserBulkImportListProcessingRequestWithBody generates requests for PostPublisherUserBulkImportListProcessing with any type of body
func NewPostPublisherUserBulkImportListProcessingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/bulkImport/listProcessing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserCreateRequestWithFormdataBody calls the generic PostPublisherUserCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserCreateRequestWithFormdataBody(server string, body PostPublisherUserCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserCreateRequestWithBody generates requests for PostPublisherUserCreate with any type of body
func NewPostPublisherUserCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserDisableRequestWithFormdataBody calls the generic PostPublisherUserDisable builder with application/x-www-form-urlencoded body
func NewPostPublisherUserDisableRequestWithFormdataBody(server string, body PostPublisherUserDisableFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserDisableRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserDisableRequestWithBody generates requests for PostPublisherUserDisable with any type of body
func NewPostPublisherUserDisableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherUserEmailGetRequest generates requests for GetPublisherUserEmailGet
func NewGetPublisherUserEmailGetRequest(server string, params *GetPublisherUserEmailGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/email/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MailLogId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mail_log_id", runtime.ParamLocationQuery, *params.MailLogId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserEmailListRequest generates requests for GetPublisherUserEmailList
func NewGetPublisherUserEmailListRequest(server string, params *GetPublisherUserEmailListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/email/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEmailBody != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_email_body", runtime.ParamLocationQuery, *params.IncludeEmailBody); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherUserGetRequestWithFormdataBody calls the generic PostPublisherUserGet builder with application/x-www-form-urlencoded body
func NewPostPublisherUserGetRequestWithFormdataBody(server string, body PostPublisherUserGetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserGetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserGetRequestWithBody generates requests for PostPublisherUserGet with any type of body
func NewPostPublisherUserGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserListRequestWithFormdataBody calls the generic PostPublisherUserList builder with application/x-www-form-urlencoded body
func NewPostPublisherUserListRequestWithFormdataBody(server string, body PostPublisherUserListFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserListRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserListRequestWithBody generates requests for PostPublisherUserList with any type of body
func NewPostPublisherUserListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserListAccessesRequestWithFormdataBody calls the generic PostPublisherUserListAccesses builder with application/x-www-form-urlencoded body
func NewPostPublisherUserListAccessesRequestWithFormdataBody(server string, body PostPublisherUserListAccessesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserListAccessesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserListAccessesRequestWithBody generates requests for PostPublisherUserListAccesses with any type of body
func NewPostPublisherUserListAccessesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/list/accesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserNoteCreateRequestWithFormdataBody calls the generic PostPublisherUserNoteCreate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserNoteCreateRequestWithFormdataBody(server string, body PostPublisherUserNoteCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserNoteCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserNoteCreateRequestWithBody generates requests for PostPublisherUserNoteCreate with any type of body
func NewPostPublisherUserNoteCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/note/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherUserNoteGetRequest generates requests for GetPublisherUserNoteGet
func NewGetPublisherUserNoteGetRequest(server string, params *GetPublisherUserNoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/note/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_note_id", runtime.ParamLocationQuery, params.UserNoteId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherUserNoteListRequest generates requests for GetPublisherUserNoteList
func NewGetPublisherUserNoteListRequest(server string, params *GetPublisherUserNoteListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/note/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, *params.OrderDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherUserNoteUpdateRequestWithFormdataBody calls the generic PostPublisherUserNoteUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserNoteUpdateRequestWithFormdataBody(server string, body PostPublisherUserNoteUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserNoteUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserNoteUpdateRequestWithBody generates requests for PostPublisherUserNoteUpdate with any type of body
func NewPostPublisherUserNoteUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/note/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserRegisterRequestWithFormdataBody calls the generic PostPublisherUserRegister builder with application/x-www-form-urlencoded body
func NewPostPublisherUserRegisterRequestWithFormdataBody(server string, body PostPublisherUserRegisterFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserRegisterRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserRegisterRequestWithBody generates requests for PostPublisherUserRegister with any type of body
func NewPostPublisherUserRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserSearchRequestWithFormdataBody calls the generic PostPublisherUserSearch builder with application/x-www-form-urlencoded body
func NewPostPublisherUserSearchRequestWithFormdataBody(server string, body PostPublisherUserSearchFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserSearchRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserSearchRequestWithBody generates requests for PostPublisherUserSearch with any type of body
func NewPostPublisherUserSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublisherUserUpdateRequestWithFormdataBody calls the generic PostPublisherUserUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherUserUpdateRequestWithFormdataBody(server string, body PostPublisherUserUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherUserUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherUserUpdateRequestWithBody generates requests for PostPublisherUserUpdate with any type of body
func NewPostPublisherUserUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/user/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherVoucherGetRequest generates requests for GetPublisherVoucherGet
func NewGetPublisherVoucherGetRequest(server string, params *GetPublisherVoucherGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/voucher/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pub_id", runtime.ParamLocationQuery, params.PubId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherVoucherListRequest generates requests for GetPublisherVoucherList
func NewGetPublisherVoucherListRequest(server string, params *GetPublisherVoucherListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/voucher/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, params.Uid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherVoucherResendRequestWithFormdataBody calls the generic PostPublisherVoucherResend builder with application/x-www-form-urlencoded body
func NewPostPublisherVoucherResendRequestWithFormdataBody(server string, body PostPublisherVoucherResendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherVoucherResendRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherVoucherResendRequestWithBody generates requests for PostPublisherVoucherResend with any type of body
func NewPostPublisherVoucherResendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/voucher/resend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherWebhookEventsRequest generates requests for GetPublisherWebhookEvents
func NewGetPublisherWebhookEventsRequest(server string, params *GetPublisherWebhookEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SkipDeprecatedWebhooks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_deprecated_webhooks", runtime.ParamLocationQuery, *params.SkipDeprecatedWebhooks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherWebhookGetRequest generates requests for GetPublisherWebhookGet
func NewGetPublisherWebhookGetRequest(server string, params *GetPublisherWebhookGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook_id", runtime.ParamLocationQuery, params.WebhookId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherWebhookResponseListRequest generates requests for GetPublisherWebhookResponseList
func NewGetPublisherWebhookResponseListRequest(server string, params *GetPublisherWebhookResponseListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/response/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook_id", runtime.ParamLocationQuery, params.WebhookId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_direction", runtime.ParamLocationQuery, params.OrderDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherWebhookResponseResendRequest generates requests for GetPublisherWebhookResponseResend
func NewGetPublisherWebhookResponseResendRequest(server string, params *GetPublisherWebhookResponseResendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/response/resend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook_id", runtime.ParamLocationQuery, params.WebhookId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherWebhookSettingsRequest generates requests for GetPublisherWebhookSettings
func NewGetPublisherWebhookSettingsRequest(server string, params *GetPublisherWebhookSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Aid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, *params.Aid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherWebhookSettingsUpdateRequestWithFormdataBody calls the generic PostPublisherWebhookSettingsUpdate builder with application/x-www-form-urlencoded body
func NewPostPublisherWebhookSettingsUpdateRequestWithFormdataBody(server string, body PostPublisherWebhookSettingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPublisherWebhookSettingsUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPublisherWebhookSettingsUpdateRequestWithBody generates requests for PostPublisherWebhookSettingsUpdate with any type of body
func NewPostPublisherWebhookSettingsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/settings/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherWebhookSkipRequest generates requests for GetPublisherWebhookSkip
func NewGetPublisherWebhookSkipRequest(server string, params *GetPublisherWebhookSkipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/skip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "webhook_id", runtime.ParamLocationQuery, params.WebhookId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherWebhookStatusRequest generates requests for GetPublisherWebhookStatus
func NewGetPublisherWebhookStatusRequest(server string, params *GetPublisherWebhookStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher/webhook/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aid", runtime.ParamLocationQuery, params.Aid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPublisherAdblockerGetWithResponse request
	GetPublisherAdblockerGetWithResponse(ctx context.Context, params *GetPublisherAdblockerGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAdblockerGetResponse, error)

	// GetPublisherAfcConfigurationDeleteWithResponse request
	GetPublisherAfcConfigurationDeleteWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationDeleteParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationDeleteResponse, error)

	// GetPublisherAfcConfigurationGetWithResponse request
	GetPublisherAfcConfigurationGetWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationGetResponse, error)

	// GetPublisherAfcConfigurationHealthCheckWithResponse request
	GetPublisherAfcConfigurationHealthCheckWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationHealthCheckParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationHealthCheckResponse, error)

	// GetPublisherAfcConfigurationSaveWithResponse request
	GetPublisherAfcConfigurationSaveWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationSaveParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationSaveResponse, error)

	// GetPublisherAppApiTokenGenerateWithResponse request
	GetPublisherAppApiTokenGenerateWithResponse(ctx context.Context, params *GetPublisherAppApiTokenGenerateParams, reqEditors ...RequestEditorFn) (*GetPublisherAppApiTokenGenerateResponse, error)

	// GetPublisherAppCurrenciesWithResponse request
	GetPublisherAppCurrenciesWithResponse(ctx context.Context, params *GetPublisherAppCurrenciesParams, reqEditors ...RequestEditorFn) (*GetPublisherAppCurrenciesResponse, error)

	// GetPublisherAppFeaturesGetWithResponse request
	GetPublisherAppFeaturesGetWithResponse(ctx context.Context, params *GetPublisherAppFeaturesGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAppFeaturesGetResponse, error)

	// GetPublisherAppGetWithResponse request
	GetPublisherAppGetWithResponse(ctx context.Context, params *GetPublisherAppGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAppGetResponse, error)

	// GetPublisherAppListWithResponse request
	GetPublisherAppListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublisherAppListResponse, error)

	// GetPublisherConsentEntryListWithResponse request
	GetPublisherConsentEntryListWithResponse(ctx context.Context, params *GetPublisherConsentEntryListParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentEntryListResponse, error)

	// GetPublisherConsentGetWithResponse request
	GetPublisherConsentGetWithResponse(ctx context.Context, params *GetPublisherConsentGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentGetResponse, error)

	// GetPublisherConsentListWithResponse request
	GetPublisherConsentListWithResponse(ctx context.Context, params *GetPublisherConsentListParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentListResponse, error)

	// GetPublisherConversionCountWithResponse request
	GetPublisherConversionCountWithResponse(ctx context.Context, params *GetPublisherConversionCountParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionCountResponse, error)

	// PostPublisherConversionCustomCreateWithBodyWithResponse request with any body
	PostPublisherConversionCustomCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionCustomCreateResponse, error)

	PostPublisherConversionCustomCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionCustomCreateResponse, error)

	// GetPublisherConversionDataGetWithResponse request
	GetPublisherConversionDataGetWithResponse(ctx context.Context, params *GetPublisherConversionDataGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionDataGetResponse, error)

	// PostPublisherConversionExternalCreateWithBodyWithResponse request with any body
	PostPublisherConversionExternalCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionExternalCreateResponse, error)

	PostPublisherConversionExternalCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionExternalCreateResponse, error)

	// GetPublisherConversionGetWithResponse request
	GetPublisherConversionGetWithResponse(ctx context.Context, params *GetPublisherConversionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionGetResponse, error)

	// GetPublisherConversionLastAccessWithResponse request
	GetPublisherConversionLastAccessWithResponse(ctx context.Context, params *GetPublisherConversionLastAccessParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionLastAccessResponse, error)

	// GetPublisherConversionListWithResponse request
	GetPublisherConversionListWithResponse(ctx context.Context, params *GetPublisherConversionListParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionListResponse, error)

	// PostPublisherConversionLogWithBodyWithResponse request with any body
	PostPublisherConversionLogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionLogResponse, error)

	PostPublisherConversionLogWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionLogFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionLogResponse, error)

	// PostPublisherConversionRegistrationCreateWithBodyWithResponse request with any body
	PostPublisherConversionRegistrationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionRegistrationCreateResponse, error)

	PostPublisherConversionRegistrationCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionRegistrationCreateResponse, error)

	// GetPublisherExperienceMetadataListWithResponse request
	GetPublisherExperienceMetadataListWithResponse(ctx context.Context, params *GetPublisherExperienceMetadataListParams, reqEditors ...RequestEditorFn) (*GetPublisherExperienceMetadataListResponse, error)

	// PostPublisherExportCreateAamDailyWithBodyWithResponse request with any body
	PostPublisherExportCreateAamDailyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamDailyResponse, error)

	PostPublisherExportCreateAamDailyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamDailyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamDailyResponse, error)

	// PostPublisherExportCreateAamMonthlyWithBodyWithResponse request with any body
	PostPublisherExportCreateAamMonthlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyResponse, error)

	PostPublisherExportCreateAamMonthlyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamMonthlyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyResponse, error)

	// PostPublisherExportCreateAamMonthlyV2WithBodyWithResponse request with any body
	PostPublisherExportCreateAamMonthlyV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyV2Response, error)

	PostPublisherExportCreateAamMonthlyV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamMonthlyV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyV2Response, error)

	// GetPublisherExportCreateAccessReportExportWithResponse request
	GetPublisherExportCreateAccessReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateAccessReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateAccessReportExportResponse, error)

	// GetPublisherExportCreateAccessReportExportV2WithResponse request
	GetPublisherExportCreateAccessReportExportV2WithResponse(ctx context.Context, params *GetPublisherExportCreateAccessReportExportV2Params, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateAccessReportExportV2Response, error)

	// GetPublisherExportCreateDailyActivityReportExportWithResponse request
	GetPublisherExportCreateDailyActivityReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateDailyActivityReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateDailyActivityReportExportResponse, error)

	// GetPublisherExportCreateMonthlyActivityReportExportWithResponse request
	GetPublisherExportCreateMonthlyActivityReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateMonthlyActivityReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateMonthlyActivityReportExportResponse, error)

	// PostPublisherExportCreateSubscriptionDetailsReportWithBodyWithResponse request with any body
	PostPublisherExportCreateSubscriptionDetailsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportResponse, error)

	PostPublisherExportCreateSubscriptionDetailsReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportResponse, error)

	// PostPublisherExportCreateSubscriptionDetailsReportV2WithBodyWithResponse request with any body
	PostPublisherExportCreateSubscriptionDetailsReportV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportV2Response, error)

	PostPublisherExportCreateSubscriptionDetailsReportV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportV2Response, error)

	// PostPublisherExportCreateSubscriptionSummaryReportWithBodyWithResponse request with any body
	PostPublisherExportCreateSubscriptionSummaryReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionSummaryReportResponse, error)

	PostPublisherExportCreateSubscriptionSummaryReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionSummaryReportResponse, error)

	// GetPublisherExportCreateTermChangeReportExportWithResponse request
	GetPublisherExportCreateTermChangeReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateTermChangeReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateTermChangeReportExportResponse, error)

	// PostPublisherExportCreateTransactionsReportWithBodyWithResponse request with any body
	PostPublisherExportCreateTransactionsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportResponse, error)

	PostPublisherExportCreateTransactionsReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateTransactionsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportResponse, error)

	// PostPublisherExportCreateTransactionsReportV2WithBodyWithResponse request with any body
	PostPublisherExportCreateTransactionsReportV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportV2Response, error)

	PostPublisherExportCreateTransactionsReportV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateTransactionsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportV2Response, error)

	// PostPublisherExportCreateUserExportWithBodyWithResponse request with any body
	PostPublisherExportCreateUserExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateUserExportResponse, error)

	PostPublisherExportCreateUserExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateUserExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateUserExportResponse, error)

	// GetPublisherExportDeleteWithResponse request
	GetPublisherExportDeleteWithResponse(ctx context.Context, params *GetPublisherExportDeleteParams, reqEditors ...RequestEditorFn) (*GetPublisherExportDeleteResponse, error)

	// GetPublisherExportDownloadWithResponse request
	GetPublisherExportDownloadWithResponse(ctx context.Context, params *GetPublisherExportDownloadParams, reqEditors ...RequestEditorFn) (*GetPublisherExportDownloadResponse, error)

	// GetPublisherExportGetWithResponse request
	GetPublisherExportGetWithResponse(ctx context.Context, params *GetPublisherExportGetParams, reqEditors ...RequestEditorFn) (*GetPublisherExportGetResponse, error)

	// GetPublisherExportListWithResponse request
	GetPublisherExportListWithResponse(ctx context.Context, params *GetPublisherExportListParams, reqEditors ...RequestEditorFn) (*GetPublisherExportListResponse, error)

	// GetPublisherExportRunWithResponse request
	GetPublisherExportRunWithResponse(ctx context.Context, params *GetPublisherExportRunParams, reqEditors ...RequestEditorFn) (*GetPublisherExportRunResponse, error)

	// PostPublisherExternalProviderPaymentUpdateWithBodyWithResponse request with any body
	PostPublisherExternalProviderPaymentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExternalProviderPaymentUpdateResponse, error)

	PostPublisherExternalProviderPaymentUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExternalProviderPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExternalProviderPaymentUpdateResponse, error)

	// PostPublisherGdprDeleteWithBodyWithResponse request with any body
	PostPublisherGdprDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteResponse, error)

	PostPublisherGdprDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteResponse, error)

	// PostPublisherGdprDeleteAnonWithBodyWithResponse request with any body
	PostPublisherGdprDeleteAnonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteAnonResponse, error)

	PostPublisherGdprDeleteAnonWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprDeleteAnonFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteAnonResponse, error)

	// PostPublisherGdprExportWithBodyWithResponse request with any body
	PostPublisherGdprExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprExportResponse, error)

	PostPublisherGdprExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprExportResponse, error)

	// GetPublisherInquiryAddWithResponse request
	GetPublisherInquiryAddWithResponse(ctx context.Context, params *GetPublisherInquiryAddParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryAddResponse, error)

	// GetPublisherInquiryCommentsWithResponse request
	GetPublisherInquiryCommentsWithResponse(ctx context.Context, params *GetPublisherInquiryCommentsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryCommentsResponse, error)

	// GetPublisherInquiryDetailsWithResponse request
	GetPublisherInquiryDetailsWithResponse(ctx context.Context, params *GetPublisherInquiryDetailsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryDetailsResponse, error)

	// GetPublisherInquiryInquiryActionsWithResponse request
	GetPublisherInquiryInquiryActionsWithResponse(ctx context.Context, params *GetPublisherInquiryInquiryActionsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryInquiryActionsResponse, error)

	// GetPublisherInquiryLastCommentWithResponse request
	GetPublisherInquiryLastCommentWithResponse(ctx context.Context, params *GetPublisherInquiryLastCommentParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryLastCommentResponse, error)

	// GetPublisherInquiryListWithResponse request
	GetPublisherInquiryListWithResponse(ctx context.Context, params *GetPublisherInquiryListParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryListResponse, error)

	// GetPublisherInquiryUnresolvedCountWithResponse request
	GetPublisherInquiryUnresolvedCountWithResponse(ctx context.Context, params *GetPublisherInquiryUnresolvedCountParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryUnresolvedCountResponse, error)

	// PostPublisherLicensingContractActivateWithBodyWithResponse request with any body
	PostPublisherLicensingContractActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractActivateResponse, error)

	PostPublisherLicensingContractActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractActivateResponse, error)

	// PostPublisherLicensingContractArchiveWithBodyWithResponse request with any body
	PostPublisherLicensingContractArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractArchiveResponse, error)

	PostPublisherLicensingContractArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractArchiveResponse, error)

	// PostPublisherLicensingContractCreateWithBodyWithResponse request with any body
	PostPublisherLicensingContractCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractCreateResponse, error)

	PostPublisherLicensingContractCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractCreateResponse, error)

	// PostPublisherLicensingContractDeactivateWithBodyWithResponse request with any body
	PostPublisherLicensingContractDeactivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDeactivateResponse, error)

	PostPublisherLicensingContractDeactivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDeactivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDeactivateResponse, error)

	// GetPublisherLicensingContractGetWithResponse request
	GetPublisherLicensingContractGetWithResponse(ctx context.Context, params *GetPublisherLicensingContractGetParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractGetResponse, error)

	// GetPublisherLicensingContractListWithResponse request
	GetPublisherLicensingContractListWithResponse(ctx context.Context, params *GetPublisherLicensingContractListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractListResponse, error)

	// PostPublisherLicensingContractPeriodsActivateWithBodyWithResponse request with any body
	PostPublisherLicensingContractPeriodsActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractPeriodsActivateResponse, error)

	PostPublisherLicensingContractPeriodsActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractPeriodsActivateResponse, error)

	// PostPublisherLicensingContractRedeemWithBodyWithResponse request with any body
	PostPublisherLicensingContractRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractRedeemResponse, error)

	PostPublisherLicensingContractRedeemWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractRedeemFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractRedeemResponse, error)

	// PostPublisherLicensingContractUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingContractUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUpdateResponse, error)

	PostPublisherLicensingContractUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUpdateResponse, error)

	// GetPublisherLicensingContractDomainContractUserListWithResponse request
	GetPublisherLicensingContractDomainContractUserListWithResponse(ctx context.Context, params *GetPublisherLicensingContractDomainContractUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractDomainContractUserListResponse, error)

	// PostPublisherLicensingContractDomainCreateWithBodyWithResponse request with any body
	PostPublisherLicensingContractDomainCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainCreateResponse, error)

	PostPublisherLicensingContractDomainCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainCreateResponse, error)

	// GetPublisherLicensingContractDomainListWithResponse request
	GetPublisherLicensingContractDomainListWithResponse(ctx context.Context, params *GetPublisherLicensingContractDomainListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractDomainListResponse, error)

	// PostPublisherLicensingContractDomainRemoveWithBodyWithResponse request with any body
	PostPublisherLicensingContractDomainRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveResponse, error)

	PostPublisherLicensingContractDomainRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveResponse, error)

	// PostPublisherLicensingContractDomainRemoveAndRevokeWithBodyWithResponse request with any body
	PostPublisherLicensingContractDomainRemoveAndRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveAndRevokeResponse, error)

	PostPublisherLicensingContractDomainRemoveAndRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveAndRevokeResponse, error)

	// PostPublisherLicensingContractDomainUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingContractDomainUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainUpdateResponse, error)

	PostPublisherLicensingContractDomainUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainUpdateResponse, error)

	// PostPublisherLicensingContractIpRangeCreateWithBodyWithResponse request with any body
	PostPublisherLicensingContractIpRangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeCreateResponse, error)

	PostPublisherLicensingContractIpRangeCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeCreateResponse, error)

	// GetPublisherLicensingContractIpRangeListWithResponse request
	GetPublisherLicensingContractIpRangeListWithResponse(ctx context.Context, params *GetPublisherLicensingContractIpRangeListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractIpRangeListResponse, error)

	// PostPublisherLicensingContractIpRangeRemoveWithBodyWithResponse request with any body
	PostPublisherLicensingContractIpRangeRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeRemoveResponse, error)

	PostPublisherLicensingContractIpRangeRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeRemoveResponse, error)

	// PostPublisherLicensingContractIpRangeUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingContractIpRangeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeUpdateResponse, error)

	PostPublisherLicensingContractIpRangeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeUpdateResponse, error)

	// PostPublisherLicensingContractUserCreateWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserCreateResponse, error)

	PostPublisherLicensingContractUserCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserCreateResponse, error)

	// PostPublisherLicensingContractUserInviteWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserInviteResponse, error)

	PostPublisherLicensingContractUserInviteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserInviteResponse, error)

	// GetPublisherLicensingContractUserListWithResponse request
	GetPublisherLicensingContractUserListWithResponse(ctx context.Context, params *GetPublisherLicensingContractUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractUserListResponse, error)

	// PostPublisherLicensingContractUserRemoveWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveResponse, error)

	PostPublisherLicensingContractUserRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveResponse, error)

	// PostPublisherLicensingContractUserRemoveAndRevokeWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserRemoveAndRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveAndRevokeResponse, error)

	PostPublisherLicensingContractUserRemoveAndRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveAndRevokeResponse, error)

	// PostPublisherLicensingContractUserRestoreWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRestoreResponse, error)

	PostPublisherLicensingContractUserRestoreWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRestoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRestoreResponse, error)

	// PostPublisherLicensingContractUserRevokeWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRevokeResponse, error)

	PostPublisherLicensingContractUserRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRevokeResponse, error)

	// PostPublisherLicensingContractUserUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingContractUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserUpdateResponse, error)

	PostPublisherLicensingContractUserUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserUpdateResponse, error)

	// PostPublisherLicensingLicenseeArchiveWithBodyWithResponse request with any body
	PostPublisherLicensingLicenseeArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeArchiveResponse, error)

	PostPublisherLicensingLicenseeArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeArchiveResponse, error)

	// GetPublisherLicensingLicenseeCountWithResponse request
	GetPublisherLicensingLicenseeCountWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeCountParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeCountResponse, error)

	// PostPublisherLicensingLicenseeCreateWithBodyWithResponse request with any body
	PostPublisherLicensingLicenseeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeCreateResponse, error)

	PostPublisherLicensingLicenseeCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeCreateResponse, error)

	// GetPublisherLicensingLicenseeGetWithResponse request
	GetPublisherLicensingLicenseeGetWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeGetParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeGetResponse, error)

	// GetPublisherLicensingLicenseeListWithResponse request
	GetPublisherLicensingLicenseeListWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeListResponse, error)

	// PostPublisherLicensingLicenseeUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingLicenseeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeUpdateResponse, error)

	PostPublisherLicensingLicenseeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeUpdateResponse, error)

	// GetPublisherLicensingNotificationListWithResponse request
	GetPublisherLicensingNotificationListWithResponse(ctx context.Context, params *GetPublisherLicensingNotificationListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingNotificationListResponse, error)

	// PostPublisherLicensingNotificationRuleArchiveWithBodyWithResponse request with any body
	PostPublisherLicensingNotificationRuleArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleArchiveResponse, error)

	PostPublisherLicensingNotificationRuleArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleArchiveResponse, error)

	// PostPublisherLicensingNotificationRuleCreateWithBodyWithResponse request with any body
	PostPublisherLicensingNotificationRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleCreateResponse, error)

	PostPublisherLicensingNotificationRuleCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleCreateResponse, error)

	// GetPublisherLicensingNotificationRuleListWithResponse request
	GetPublisherLicensingNotificationRuleListWithResponse(ctx context.Context, params *GetPublisherLicensingNotificationRuleListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingNotificationRuleListResponse, error)

	// PostPublisherLicensingNotificationRuleUpdateWithBodyWithResponse request with any body
	PostPublisherLicensingNotificationRuleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleUpdateResponse, error)

	PostPublisherLicensingNotificationRuleUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleUpdateResponse, error)

	// PostPublisherLicensingScheduleContractPeriodsActivateWithBodyWithResponse request with any body
	PostPublisherLicensingScheduleContractPeriodsActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingScheduleContractPeriodsActivateResponse, error)

	PostPublisherLicensingScheduleContractPeriodsActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingScheduleContractPeriodsActivateResponse, error)

	// GetPublisherLicensingScheduleContractsWithResponse request
	GetPublisherLicensingScheduleContractsWithResponse(ctx context.Context, params *GetPublisherLicensingScheduleContractsParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingScheduleContractsResponse, error)

	// PostPublisherLinkedTermConfigurationWithBodyWithResponse request with any body
	PostPublisherLinkedTermConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermConfigurationResponse, error)

	PostPublisherLinkedTermConfigurationWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermConfigurationResponse, error)

	// PostPublisherLinkedTermCustomFieldConfigurationWithBodyWithResponse request with any body
	PostPublisherLinkedTermCustomFieldConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermCustomFieldConfigurationResponse, error)

	PostPublisherLinkedTermCustomFieldConfigurationWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermCustomFieldConfigurationResponse, error)

	// PostPublisherLinkedTermEventWithBodyWithResponse request with any body
	PostPublisherLinkedTermEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermEventResponse, error)

	PostPublisherLinkedTermEventWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermEventFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermEventResponse, error)

	// GetPublisherLinkedTermSubscriptionWithResponse request
	GetPublisherLinkedTermSubscriptionWithResponse(ctx context.Context, params *GetPublisherLinkedTermSubscriptionParams, reqEditors ...RequestEditorFn) (*GetPublisherLinkedTermSubscriptionResponse, error)

	// GetPublisherOfferCountWithResponse request
	GetPublisherOfferCountWithResponse(ctx context.Context, params *GetPublisherOfferCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferCountResponse, error)

	// PostPublisherOfferCreateWithBodyWithResponse request with any body
	PostPublisherOfferCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferCreateResponse, error)

	PostPublisherOfferCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferCreateResponse, error)

	// PostPublisherOfferDeleteWithBodyWithResponse request with any body
	PostPublisherOfferDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferDeleteResponse, error)

	PostPublisherOfferDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferDeleteResponse, error)

	// GetPublisherOfferGetWithResponse request
	GetPublisherOfferGetWithResponse(ctx context.Context, params *GetPublisherOfferGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferGetResponse, error)

	// GetPublisherOfferListWithResponse request
	GetPublisherOfferListWithResponse(ctx context.Context, params *GetPublisherOfferListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferListResponse, error)

	// GetPublisherOfferTemplateArchiveWithResponse request
	GetPublisherOfferTemplateArchiveWithResponse(ctx context.Context, params *GetPublisherOfferTemplateArchiveParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateArchiveResponse, error)

	// GetPublisherOfferTemplateConvertBoilerplateToTemplateWithResponse request
	GetPublisherOfferTemplateConvertBoilerplateToTemplateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateConvertBoilerplateToTemplateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse, error)

	// GetPublisherOfferTemplateCountWithResponse request
	GetPublisherOfferTemplateCountWithResponse(ctx context.Context, params *GetPublisherOfferTemplateCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateCountResponse, error)

	// PostPublisherOfferTemplateCreateWithBodyWithResponse request with any body
	PostPublisherOfferTemplateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateResponse, error)

	PostPublisherOfferTemplateCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateResponse, error)

	// PostPublisherOfferTemplateCreateEmptyWithBodyWithResponse request with any body
	PostPublisherOfferTemplateCreateEmptyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateEmptyResponse, error)

	PostPublisherOfferTemplateCreateEmptyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateCreateEmptyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateEmptyResponse, error)

	// GetPublisherOfferTemplateDefaultCodeWithResponse request
	GetPublisherOfferTemplateDefaultCodeWithResponse(ctx context.Context, params *GetPublisherOfferTemplateDefaultCodeParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateDefaultCodeResponse, error)

	// PostPublisherOfferTemplateDeleteWithBodyWithResponse request with any body
	PostPublisherOfferTemplateDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateDeleteResponse, error)

	PostPublisherOfferTemplateDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateDeleteResponse, error)

	// GetPublisherOfferTemplateDuplicateWithResponse request
	GetPublisherOfferTemplateDuplicateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateDuplicateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateDuplicateResponse, error)

	// GetPublisherOfferTemplateGetWithResponse request
	GetPublisherOfferTemplateGetWithResponse(ctx context.Context, params *GetPublisherOfferTemplateGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateGetResponse, error)

	// GetPublisherOfferTemplateGetHistoryWithResponse request
	GetPublisherOfferTemplateGetHistoryWithResponse(ctx context.Context, params *GetPublisherOfferTemplateGetHistoryParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateGetHistoryResponse, error)

	// GetPublisherOfferTemplateInheritedCountWithResponse request
	GetPublisherOfferTemplateInheritedCountWithResponse(ctx context.Context, params *GetPublisherOfferTemplateInheritedCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateInheritedCountResponse, error)

	// PostPublisherOfferTemplateInheritedUpdateWithBodyWithResponse request with any body
	PostPublisherOfferTemplateInheritedUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateInheritedUpdateResponse, error)

	PostPublisherOfferTemplateInheritedUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateInheritedUpdateResponse, error)

	// GetPublisherOfferTemplateListWithResponse request
	GetPublisherOfferTemplateListWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListResponse, error)

	// GetPublisherOfferTemplateListBoilerplatesWithResponse request
	GetPublisherOfferTemplateListBoilerplatesWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListBoilerplatesParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListBoilerplatesResponse, error)

	// GetPublisherOfferTemplateListByCategoryWithResponse request
	GetPublisherOfferTemplateListByCategoryWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListByCategoryParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListByCategoryResponse, error)

	// GetPublisherOfferTemplateMakeGlobalWithResponse request
	GetPublisherOfferTemplateMakeGlobalWithResponse(ctx context.Context, params *GetPublisherOfferTemplateMakeGlobalParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateMakeGlobalResponse, error)

	// GetPublisherOfferTemplateRestoreWithResponse request
	GetPublisherOfferTemplateRestoreWithResponse(ctx context.Context, params *GetPublisherOfferTemplateRestoreParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateRestoreResponse, error)

	// PostPublisherOfferTemplateUpdateWithBodyWithResponse request with any body
	PostPublisherOfferTemplateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateResponse, error)

	PostPublisherOfferTemplateUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateResponse, error)

	// PostPublisherOfferTemplateUpdateContentfieldsWithBodyWithResponse request with any body
	PostPublisherOfferTemplateUpdateContentfieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateContentfieldsResponse, error)

	PostPublisherOfferTemplateUpdateContentfieldsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateContentfieldsResponse, error)

	// PostPublisherOfferTemplateUpdatefullWithBodyWithResponse request with any body
	PostPublisherOfferTemplateUpdatefullWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdatefullResponse, error)

	PostPublisherOfferTemplateUpdatefullWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdatefullFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdatefullResponse, error)

	// GetPublisherOfferTemplateVariantArchiveWithResponse request
	GetPublisherOfferTemplateVariantArchiveWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantArchiveParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantArchiveResponse, error)

	// PostPublisherOfferTemplateVariantCreateWithBodyWithResponse request with any body
	PostPublisherOfferTemplateVariantCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantCreateResponse, error)

	PostPublisherOfferTemplateVariantCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantCreateResponse, error)

	// PostPublisherOfferTemplateVariantDeleteWithBodyWithResponse request with any body
	PostPublisherOfferTemplateVariantDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantDeleteResponse, error)

	PostPublisherOfferTemplateVariantDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantDeleteResponse, error)

	// GetPublisherOfferTemplateVariantDuplicateWithResponse request
	GetPublisherOfferTemplateVariantDuplicateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantDuplicateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantDuplicateResponse, error)

	// GetPublisherOfferTemplateVariantGetWithResponse request
	GetPublisherOfferTemplateVariantGetWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantGetResponse, error)

	// GetPublisherOfferTemplateVariantRestoreWithResponse request
	GetPublisherOfferTemplateVariantRestoreWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantRestoreParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantRestoreResponse, error)

	// PostPublisherOfferTemplateVariantUpdateWithBodyWithResponse request with any body
	PostPublisherOfferTemplateVariantUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantUpdateResponse, error)

	PostPublisherOfferTemplateVariantUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantUpdateResponse, error)

	// PostPublisherOfferTermAddWithBodyWithResponse request with any body
	PostPublisherOfferTermAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermAddResponse, error)

	PostPublisherOfferTermAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermAddResponse, error)

	// GetPublisherOfferTermListWithResponse request
	GetPublisherOfferTermListWithResponse(ctx context.Context, params *GetPublisherOfferTermListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTermListResponse, error)

	// GetPublisherOfferTermOfferListWithResponse request
	GetPublisherOfferTermOfferListWithResponse(ctx context.Context, params *GetPublisherOfferTermOfferListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTermOfferListResponse, error)

	// PostPublisherOfferTermRemoveWithBodyWithResponse request with any body
	PostPublisherOfferTermRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermRemoveResponse, error)

	PostPublisherOfferTermRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermRemoveResponse, error)

	// PostPublisherOfferTermReorderWithBodyWithResponse request with any body
	PostPublisherOfferTermReorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermReorderResponse, error)

	PostPublisherOfferTermReorderWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermReorderFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermReorderResponse, error)

	// PostPublisherOfferUpdateWithBodyWithResponse request with any body
	PostPublisherOfferUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferUpdateResponse, error)

	PostPublisherOfferUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferUpdateResponse, error)

	// GetPublisherPaymentGetWithResponse request
	GetPublisherPaymentGetWithResponse(ctx context.Context, params *GetPublisherPaymentGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentGetResponse, error)

	// GetPublisherPaymentIsPartialRefundWithResponse request
	GetPublisherPaymentIsPartialRefundWithResponse(ctx context.Context, params *GetPublisherPaymentIsPartialRefundParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentIsPartialRefundResponse, error)

	// PostPublisherPaymentMethodAddWithBodyWithResponse request with any body
	PostPublisherPaymentMethodAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodAddResponse, error)

	PostPublisherPaymentMethodAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodAddResponse, error)

	// PostPublisherPaymentMethodBillingAddressApplyToAllWithBodyWithResponse request with any body
	PostPublisherPaymentMethodBillingAddressApplyToAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressApplyToAllResponse, error)

	PostPublisherPaymentMethodBillingAddressApplyToAllWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressApplyToAllResponse, error)

	// PostPublisherPaymentMethodBillingAddressAttachWithBodyWithResponse request with any body
	PostPublisherPaymentMethodBillingAddressAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressAttachResponse, error)

	PostPublisherPaymentMethodBillingAddressAttachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressAttachResponse, error)

	// PostPublisherPaymentMethodBillingAddressDetachWithBodyWithResponse request with any body
	PostPublisherPaymentMethodBillingAddressDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressDetachResponse, error)

	PostPublisherPaymentMethodBillingAddressDetachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressDetachResponse, error)

	// PostPublisherPaymentMethodBillingAddressGetWithBodyWithResponse request with any body
	PostPublisherPaymentMethodBillingAddressGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressGetResponse, error)

	PostPublisherPaymentMethodBillingAddressGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressGetResponse, error)

	// GetPublisherPaymentMethodGetWithResponse request
	GetPublisherPaymentMethodGetWithResponse(ctx context.Context, params *GetPublisherPaymentMethodGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentMethodGetResponse, error)

	// PostPublisherPaymentMethodGmoRefreshWithBodyWithResponse request with any body
	PostPublisherPaymentMethodGmoRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodGmoRefreshResponse, error)

	PostPublisherPaymentMethodGmoRefreshWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodGmoRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodGmoRefreshResponse, error)

	// PostPublisherPaymentMethodRemoveWithBodyWithResponse request with any body
	PostPublisherPaymentMethodRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodRemoveResponse, error)

	PostPublisherPaymentMethodRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodRemoveResponse, error)

	// PostPublisherPaymentMethodUpdateWithBodyWithResponse request with any body
	PostPublisherPaymentMethodUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodUpdateResponse, error)

	PostPublisherPaymentMethodUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodUpdateResponse, error)

	// PostPublisherPaymentProviderConfigurationSetVisibilityWithBodyWithResponse request with any body
	PostPublisherPaymentProviderConfigurationSetVisibilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentProviderConfigurationSetVisibilityResponse, error)

	PostPublisherPaymentProviderConfigurationSetVisibilityWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentProviderConfigurationSetVisibilityResponse, error)

	// GetPublisherPaymentRefundWithResponse request
	GetPublisherPaymentRefundWithResponse(ctx context.Context, params *GetPublisherPaymentRefundParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentRefundResponse, error)

	// GetPublisherPromotionCodeCountWithResponse request
	GetPublisherPromotionCodeCountWithResponse(ctx context.Context, params *GetPublisherPromotionCodeCountParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeCountResponse, error)

	// GetPublisherPromotionCodeCreateWithResponse request
	GetPublisherPromotionCodeCreateWithResponse(ctx context.Context, params *GetPublisherPromotionCodeCreateParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeCreateResponse, error)

	// PostPublisherPromotionCodeDeleteWithBodyWithResponse request with any body
	PostPublisherPromotionCodeDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeDeleteResponse, error)

	PostPublisherPromotionCodeDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeDeleteResponse, error)

	// PostPublisherPromotionCodeExportWithBodyWithResponse request with any body
	PostPublisherPromotionCodeExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeExportResponse, error)

	PostPublisherPromotionCodeExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeExportResponse, error)

	// GetPublisherPromotionCodeGetWithResponse request
	GetPublisherPromotionCodeGetWithResponse(ctx context.Context, params *GetPublisherPromotionCodeGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeGetResponse, error)

	// GetPublisherPromotionCodeListWithResponse request
	GetPublisherPromotionCodeListWithResponse(ctx context.Context, params *GetPublisherPromotionCodeListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeListResponse, error)

	// PostPublisherPromotionCodeUpdateWithBodyWithResponse request with any body
	PostPublisherPromotionCodeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeUpdateResponse, error)

	PostPublisherPromotionCodeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeUpdateResponse, error)

	// GetPublisherPromotionCountWithResponse request
	GetPublisherPromotionCountWithResponse(ctx context.Context, params *GetPublisherPromotionCountParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCountResponse, error)

	// PostPublisherPromotionCreateWithBodyWithResponse request with any body
	PostPublisherPromotionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCreateResponse, error)

	PostPublisherPromotionCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCreateResponse, error)

	// PostPublisherPromotionDeleteWithBodyWithResponse request with any body
	PostPublisherPromotionDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionDeleteResponse, error)

	PostPublisherPromotionDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionDeleteResponse, error)

	// PostPublisherPromotionExistsWithBodyWithResponse request with any body
	PostPublisherPromotionExistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionExistsResponse, error)

	PostPublisherPromotionExistsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionExistsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionExistsResponse, error)

	// GetPublisherPromotionFixedDiscountAddWithResponse request
	GetPublisherPromotionFixedDiscountAddWithResponse(ctx context.Context, params *GetPublisherPromotionFixedDiscountAddParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionFixedDiscountAddResponse, error)

	// PostPublisherPromotionFixedDiscountDeleteWithBodyWithResponse request with any body
	PostPublisherPromotionFixedDiscountDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountDeleteResponse, error)

	PostPublisherPromotionFixedDiscountDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountDeleteResponse, error)

	// PostPublisherPromotionFixedDiscountUpdateWithBodyWithResponse request with any body
	PostPublisherPromotionFixedDiscountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountUpdateResponse, error)

	PostPublisherPromotionFixedDiscountUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountUpdateResponse, error)

	// PostPublisherPromotionGenerateWithBodyWithResponse request with any body
	PostPublisherPromotionGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionGenerateResponse, error)

	PostPublisherPromotionGenerateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionGenerateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionGenerateResponse, error)

	// GetPublisherPromotionGetWithResponse request
	GetPublisherPromotionGetWithResponse(ctx context.Context, params *GetPublisherPromotionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionGetResponse, error)

	// GetPublisherPromotionListWithResponse request
	GetPublisherPromotionListWithResponse(ctx context.Context, params *GetPublisherPromotionListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionListResponse, error)

	// PostPublisherPromotionTermAddWithBodyWithResponse request with any body
	PostPublisherPromotionTermAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermAddResponse, error)

	PostPublisherPromotionTermAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermAddResponse, error)

	// PostPublisherPromotionTermDeleteWithBodyWithResponse request with any body
	PostPublisherPromotionTermDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermDeleteResponse, error)

	PostPublisherPromotionTermDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermDeleteResponse, error)

	// GetPublisherPromotionTermListWithResponse request
	GetPublisherPromotionTermListWithResponse(ctx context.Context, params *GetPublisherPromotionTermListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionTermListResponse, error)

	// GetPublisherPromotionTotalWithResponse request
	GetPublisherPromotionTotalWithResponse(ctx context.Context, params *GetPublisherPromotionTotalParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionTotalResponse, error)

	// PostPublisherPromotionUpdateWithBodyWithResponse request with any body
	PostPublisherPromotionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionUpdateResponse, error)

	PostPublisherPromotionUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionUpdateResponse, error)

	// GetPublisherResourceAttachWithResponse request
	GetPublisherResourceAttachWithResponse(ctx context.Context, params *GetPublisherResourceAttachParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceAttachResponse, error)

	// GetPublisherResourceBundleMembersWithResponse request
	GetPublisherResourceBundleMembersWithResponse(ctx context.Context, params *GetPublisherResourceBundleMembersParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceBundleMembersResponse, error)

	// GetPublisherResourceCountWithResponse request
	GetPublisherResourceCountWithResponse(ctx context.Context, params *GetPublisherResourceCountParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceCountResponse, error)

	// PostPublisherResourceCreateWithBodyWithResponse request with any body
	PostPublisherResourceCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceCreateResponse, error)

	PostPublisherResourceCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceCreateResponse, error)

	// GetPublisherResourceCrossAppCountWithResponse request
	GetPublisherResourceCrossAppCountWithResponse(ctx context.Context, params *GetPublisherResourceCrossAppCountParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceCrossAppCountResponse, error)

	// PostPublisherResourceDeleteWithBodyWithResponse request with any body
	PostPublisherResourceDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceDeleteResponse, error)

	PostPublisherResourceDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceDeleteResponse, error)

	// GetPublisherResourceDetachWithResponse request
	GetPublisherResourceDetachWithResponse(ctx context.Context, params *GetPublisherResourceDetachParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceDetachResponse, error)

	// GetPublisherResourceGetWithResponse request
	GetPublisherResourceGetWithResponse(ctx context.Context, params *GetPublisherResourceGetParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceGetResponse, error)

	// GetPublisherResourceListWithResponse request
	GetPublisherResourceListWithResponse(ctx context.Context, params *GetPublisherResourceListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceListResponse, error)

	// GetPublisherResourceStatsListWithResponse request
	GetPublisherResourceStatsListWithResponse(ctx context.Context, params *GetPublisherResourceStatsListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceStatsListResponse, error)

	// PostPublisherResourceTagAttachWithBodyWithResponse request with any body
	PostPublisherResourceTagAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagAttachResponse, error)

	PostPublisherResourceTagAttachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagAttachResponse, error)

	// GetPublisherResourceTagBundlesWithResponse request
	GetPublisherResourceTagBundlesWithResponse(ctx context.Context, params *GetPublisherResourceTagBundlesParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagBundlesResponse, error)

	// GetPublisherResourceTagCreateWithResponse request
	GetPublisherResourceTagCreateWithResponse(ctx context.Context, params *GetPublisherResourceTagCreateParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagCreateResponse, error)

	// PostPublisherResourceTagDeleteWithBodyWithResponse request with any body
	PostPublisherResourceTagDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDeleteResponse, error)

	PostPublisherResourceTagDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDeleteResponse, error)

	// PostPublisherResourceTagDetachWithBodyWithResponse request with any body
	PostPublisherResourceTagDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDetachResponse, error)

	PostPublisherResourceTagDetachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDetachResponse, error)

	// GetPublisherResourceTagGetWithResponse request
	GetPublisherResourceTagGetWithResponse(ctx context.Context, params *GetPublisherResourceTagGetParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagGetResponse, error)

	// GetPublisherResourceTagListWithResponse request
	GetPublisherResourceTagListWithResponse(ctx context.Context, params *GetPublisherResourceTagListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagListResponse, error)

	// PostPublisherResourceUpdateWithBodyWithResponse request with any body
	PostPublisherResourceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceUpdateResponse, error)

	PostPublisherResourceUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceUpdateResponse, error)

	// GetPublisherResourceUserListWithResponse request
	GetPublisherResourceUserListWithResponse(ctx context.Context, params *GetPublisherResourceUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceUserListResponse, error)

	// PostPublisherScheduleCreateWithBodyWithResponse request with any body
	PostPublisherScheduleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleCreateResponse, error)

	PostPublisherScheduleCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleCreateResponse, error)

	// PostPublisherScheduleDeleteWithBodyWithResponse request with any body
	PostPublisherScheduleDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleDeleteResponse, error)

	PostPublisherScheduleDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleDeleteResponse, error)

	// PostPublisherScheduleGetWithBodyWithResponse request with any body
	PostPublisherScheduleGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleGetResponse, error)

	PostPublisherScheduleGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleGetResponse, error)

	// PostPublisherScheduleListWithBodyWithResponse request with any body
	PostPublisherScheduleListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleListResponse, error)

	PostPublisherScheduleListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleListResponse, error)

	// PostPublisherSchedulePeriodAddWithBodyWithResponse request with any body
	PostPublisherSchedulePeriodAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodAddResponse, error)

	PostPublisherSchedulePeriodAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodAddResponse, error)

	// PostPublisherSchedulePeriodDeleteWithBodyWithResponse request with any body
	PostPublisherSchedulePeriodDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodDeleteResponse, error)

	PostPublisherSchedulePeriodDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodDeleteResponse, error)

	// PostPublisherSchedulePeriodUpdateWithBodyWithResponse request with any body
	PostPublisherSchedulePeriodUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodUpdateResponse, error)

	PostPublisherSchedulePeriodUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodUpdateResponse, error)

	// PostPublisherScheduleTermsWithBodyWithResponse request with any body
	PostPublisherScheduleTermsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleTermsResponse, error)

	PostPublisherScheduleTermsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleTermsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleTermsResponse, error)

	// PostPublisherScheduleUpdateWithBodyWithResponse request with any body
	PostPublisherScheduleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleUpdateResponse, error)

	PostPublisherScheduleUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleUpdateResponse, error)

	// PostPublisherSubscriptionAddressAssignWithBodyWithResponse request with any body
	PostPublisherSubscriptionAddressAssignWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionAddressAssignResponse, error)

	PostPublisherSubscriptionAddressAssignWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionAddressAssignFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionAddressAssignResponse, error)

	// PostPublisherSubscriptionCancelWithBodyWithResponse request with any body
	PostPublisherSubscriptionCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelResponse, error)

	PostPublisherSubscriptionCancelWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelResponse, error)

	// PostPublisherSubscriptionCancelDeferredWithBodyWithResponse request with any body
	PostPublisherSubscriptionCancelDeferredWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelDeferredResponse, error)

	PostPublisherSubscriptionCancelDeferredWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCancelDeferredFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelDeferredResponse, error)

	// PostPublisherSubscriptionCountWithBodyWithResponse request with any body
	PostPublisherSubscriptionCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCountResponse, error)

	PostPublisherSubscriptionCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCountResponse, error)

	// GetPublisherSubscriptionGetWithResponse request
	GetPublisherSubscriptionGetWithResponse(ctx context.Context, params *GetPublisherSubscriptionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionGetResponse, error)

	// PostPublisherSubscriptionIsPartiallyRefundableWithBodyWithResponse request with any body
	PostPublisherSubscriptionIsPartiallyRefundableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionIsPartiallyRefundableResponse, error)

	PostPublisherSubscriptionIsPartiallyRefundableWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionIsPartiallyRefundableResponse, error)

	// GetPublisherSubscriptionListWithResponse request
	GetPublisherSubscriptionListWithResponse(ctx context.Context, params *GetPublisherSubscriptionListParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionListResponse, error)

	// PostPublisherSubscriptionResumeWithBodyWithResponse request with any body
	PostPublisherSubscriptionResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionResumeResponse, error)

	PostPublisherSubscriptionResumeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionResumeResponse, error)

	// GetPublisherSubscriptionSearchWithResponse request
	GetPublisherSubscriptionSearchWithResponse(ctx context.Context, params *GetPublisherSubscriptionSearchParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionSearchResponse, error)

	// PostPublisherSubscriptionShareInviteWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareInviteResponse, error)

	PostPublisherSubscriptionShareInviteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareInviteResponse, error)

	// PostPublisherSubscriptionShareListWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareListResponse, error)

	PostPublisherSubscriptionShareListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareListResponse, error)

	// PostPublisherSubscriptionShareResendWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareResendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareResendResponse, error)

	PostPublisherSubscriptionShareResendWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareResendResponse, error)

	// PostPublisherSubscriptionShareRevokeWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareRevokeResponse, error)

	PostPublisherSubscriptionShareRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareRevokeResponse, error)

	// PostPublisherSubscriptionShareStartWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStartResponse, error)

	PostPublisherSubscriptionShareStartWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStartResponse, error)

	// PostPublisherSubscriptionShareStopWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStopResponse, error)

	PostPublisherSubscriptionShareStopWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStopResponse, error)

	// PostPublisherSubscriptionShareUpdateWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUpdateResponse, error)

	PostPublisherSubscriptionShareUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUpdateResponse, error)

	// PostPublisherSubscriptionShareUserAddWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareUserAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserAddResponse, error)

	PostPublisherSubscriptionShareUserAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUserAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserAddResponse, error)

	// PostPublisherSubscriptionShareUserRemoveWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareUserRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserRemoveResponse, error)

	PostPublisherSubscriptionShareUserRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserRemoveResponse, error)

	// PostPublisherSubscriptionShareValidateWithBodyWithResponse request with any body
	PostPublisherSubscriptionShareValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareValidateResponse, error)

	PostPublisherSubscriptionShareValidateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareValidateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareValidateResponse, error)

	// PostPublisherSubscriptionStatsWithBodyWithResponse request with any body
	PostPublisherSubscriptionStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionStatsResponse, error)

	PostPublisherSubscriptionStatsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionStatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionStatsResponse, error)

	// PostPublisherSubscriptionUpdateWithBodyWithResponse request with any body
	PostPublisherSubscriptionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionUpdateResponse, error)

	PostPublisherSubscriptionUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionUpdateResponse, error)

	// PostPublisherTeamListWithBodyWithResponse request with any body
	PostPublisherTeamListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTeamListResponse, error)

	PostPublisherTeamListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTeamListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTeamListResponse, error)

	// GetPublisherTermApplicableWithResponse request
	GetPublisherTermApplicableWithResponse(ctx context.Context, params *GetPublisherTermApplicableParams, reqEditors ...RequestEditorFn) (*GetPublisherTermApplicableResponse, error)

	// PostPublisherTermChangeCanWithBodyWithResponse request with any body
	PostPublisherTermChangeCanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCanResponse, error)

	PostPublisherTermChangeCanWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeCanFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCanResponse, error)

	// PostPublisherTermChangeCancelWithBodyWithResponse request with any body
	PostPublisherTermChangeCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCancelResponse, error)

	PostPublisherTermChangeCancelWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCancelResponse, error)

	// PostPublisherTermChangeDoWithBodyWithResponse request with any body
	PostPublisherTermChangeDoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeDoResponse, error)

	PostPublisherTermChangeDoWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeDoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeDoResponse, error)

	// PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBodyWithResponse request with any body
	PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse, error)

	PostPublisherTermChangeGetSubscriptionUpgradeStatusWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse, error)

	// PostPublisherTermChangeOptionCreateWithBodyWithResponse request with any body
	PostPublisherTermChangeOptionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeOptionCreateResponse, error)

	PostPublisherTermChangeOptionCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeOptionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeOptionCreateResponse, error)

	// GetPublisherTermCountWithResponse request
	GetPublisherTermCountWithResponse(ctx context.Context, params *GetPublisherTermCountParams, reqEditors ...RequestEditorFn) (*GetPublisherTermCountResponse, error)

	// PostPublisherTermCustomCreateWithBodyWithResponse request with any body
	PostPublisherTermCustomCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomCreateResponse, error)

	PostPublisherTermCustomCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomCreateResponse, error)

	// PostPublisherTermCustomUpdateWithBodyWithResponse request with any body
	PostPublisherTermCustomUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomUpdateResponse, error)

	PostPublisherTermCustomUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermCustomUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomUpdateResponse, error)

	// PostPublisherTermDeleteWithBodyWithResponse request with any body
	PostPublisherTermDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDeleteResponse, error)

	PostPublisherTermDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDeleteResponse, error)

	// PostPublisherTermDynamicCreateWithBodyWithResponse request with any body
	PostPublisherTermDynamicCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicCreateResponse, error)

	PostPublisherTermDynamicCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDynamicCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicCreateResponse, error)

	// PostPublisherTermDynamicUpdateWithBodyWithResponse request with any body
	PostPublisherTermDynamicUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicUpdateResponse, error)

	PostPublisherTermDynamicUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDynamicUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicUpdateResponse, error)

	// PostPublisherTermExternalCreateWithBodyWithResponse request with any body
	PostPublisherTermExternalCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalCreateResponse, error)

	PostPublisherTermExternalCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalCreateResponse, error)

	// PostPublisherTermExternalUpdateWithBodyWithResponse request with any body
	PostPublisherTermExternalUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalUpdateResponse, error)

	PostPublisherTermExternalUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermExternalUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalUpdateResponse, error)

	// GetPublisherTermGetWithResponse request
	GetPublisherTermGetWithResponse(ctx context.Context, params *GetPublisherTermGetParams, reqEditors ...RequestEditorFn) (*GetPublisherTermGetResponse, error)

	// PostPublisherTermGiftCreateWithBodyWithResponse request with any body
	PostPublisherTermGiftCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftCreateResponse, error)

	PostPublisherTermGiftCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermGiftCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftCreateResponse, error)

	// PostPublisherTermGiftUpdateWithBodyWithResponse request with any body
	PostPublisherTermGiftUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftUpdateResponse, error)

	PostPublisherTermGiftUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermGiftUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftUpdateResponse, error)

	// PostPublisherTermPaymentCreateWithBodyWithResponse request with any body
	PostPublisherTermPaymentCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentCreateResponse, error)

	PostPublisherTermPaymentCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermPaymentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentCreateResponse, error)

	// PostPublisherTermPaymentUpdateWithBodyWithResponse request with any body
	PostPublisherTermPaymentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentUpdateResponse, error)

	PostPublisherTermPaymentUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentUpdateResponse, error)

	// PostPublisherTermRegistrationCreateWithBodyWithResponse request with any body
	PostPublisherTermRegistrationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationCreateResponse, error)

	PostPublisherTermRegistrationCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationCreateResponse, error)

	// PostPublisherTermRegistrationUpdateWithBodyWithResponse request with any body
	PostPublisherTermRegistrationUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationUpdateResponse, error)

	PostPublisherTermRegistrationUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermRegistrationUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationUpdateResponse, error)

	// GetPublisherTermStatsListWithResponse request
	GetPublisherTermStatsListWithResponse(ctx context.Context, params *GetPublisherTermStatsListParams, reqEditors ...RequestEditorFn) (*GetPublisherTermStatsListResponse, error)

	// GetPublisherTestUserRefWithResponse request
	GetPublisherTestUserRefWithResponse(ctx context.Context, params *GetPublisherTestUserRefParams, reqEditors ...RequestEditorFn) (*GetPublisherTestUserRefResponse, error)

	// PostPublisherUserAccessActiveCountWithBodyWithResponse request with any body
	PostPublisherUserAccessActiveCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessActiveCountResponse, error)

	PostPublisherUserAccessActiveCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAccessActiveCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessActiveCountResponse, error)

	// GetPublisherUserAccessCheckWithResponse request
	GetPublisherUserAccessCheckWithResponse(ctx context.Context, params *GetPublisherUserAccessCheckParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessCheckResponse, error)

	// GetPublisherUserAccessGrantWithResponse request
	GetPublisherUserAccessGrantWithResponse(ctx context.Context, params *GetPublisherUserAccessGrantParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessGrantResponse, error)

	// GetPublisherUserAccessGrantToUsersWithResponse request
	GetPublisherUserAccessGrantToUsersWithResponse(ctx context.Context, params *GetPublisherUserAccessGrantToUsersParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessGrantToUsersResponse, error)

	// GetPublisherUserAccessListWithResponse request
	GetPublisherUserAccessListWithResponse(ctx context.Context, params *GetPublisherUserAccessListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessListResponse, error)

	// GetPublisherUserAccessRevokeWithResponse request
	GetPublisherUserAccessRevokeWithResponse(ctx context.Context, params *GetPublisherUserAccessRevokeParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessRevokeResponse, error)

	// PostPublisherUserAccessUpdateWithBodyWithResponse request with any body
	PostPublisherUserAccessUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessUpdateResponse, error)

	PostPublisherUserAccessUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAccessUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessUpdateResponse, error)

	// PostPublisherUserAddressCreateWithBodyWithResponse request with any body
	PostPublisherUserAddressCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressCreateResponse, error)

	PostPublisherUserAddressCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressCreateResponse, error)

	// PostPublisherUserAddressDeleteWithBodyWithResponse request with any body
	PostPublisherUserAddressDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressDeleteResponse, error)

	PostPublisherUserAddressDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressDeleteResponse, error)

	// PostPublisherUserAddressHistoryWithBodyWithResponse request with any body
	PostPublisherUserAddressHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressHistoryResponse, error)

	PostPublisherUserAddressHistoryWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressHistoryResponse, error)

	// GetPublisherUserAddressListWithResponse request
	GetPublisherUserAddressListWithResponse(ctx context.Context, params *GetPublisherUserAddressListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAddressListResponse, error)

	// PostPublisherUserAddressUpdateWithBodyWithResponse request with any body
	PostPublisherUserAddressUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressUpdateResponse, error)

	PostPublisherUserAddressUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressUpdateResponse, error)

	// PostPublisherUserAppCountWithBodyWithResponse request with any body
	PostPublisherUserAppCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAppCountResponse, error)

	PostPublisherUserAppCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAppCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAppCountResponse, error)

	// PostPublisherUserBillingAddressCreateWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressCreateResponse, error)

	PostPublisherUserBillingAddressCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressCreateResponse, error)

	// PostPublisherUserBillingAddressDeleteWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressDeleteResponse, error)

	PostPublisherUserBillingAddressDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressDeleteResponse, error)

	// PostPublisherUserBillingAddressGetWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetResponse, error)

	PostPublisherUserBillingAddressGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetResponse, error)

	// PostPublisherUserBillingAddressGetByPaymentWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressGetByPaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentResponse, error)

	PostPublisherUserBillingAddressGetByPaymentWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentResponse, error)

	// PostPublisherUserBillingAddressGetByPaymentInfoWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressGetByPaymentInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentInfoResponse, error)

	PostPublisherUserBillingAddressGetByPaymentInfoWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentInfoResponse, error)

	// PostPublisherUserBillingAddressListWithBodyWithResponse request with any body
	PostPublisherUserBillingAddressListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressListResponse, error)

	PostPublisherUserBillingAddressListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressListResponse, error)

	// PostPublisherUserBulkImportDeleteWithBodyWithResponse request with any body
	PostPublisherUserBulkImportDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDeleteResponse, error)

	PostPublisherUserBulkImportDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDeleteResponse, error)

	// PostPublisherUserBulkImportDownloadWithBodyWithResponse request with any body
	PostPublisherUserBulkImportDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDownloadResponse, error)

	PostPublisherUserBulkImportDownloadWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportDownloadFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDownloadResponse, error)

	// PostPublisherUserBulkImportListCompletedWithBodyWithResponse request with any body
	PostPublisherUserBulkImportListCompletedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListCompletedResponse, error)

	PostPublisherUserBulkImportListCompletedWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportListCompletedFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListCompletedResponse, error)

	// PostPublisherUserBulkImportListProcessingWithBodyWithResponse request with any body
	PostPublisherUserBulkImportListProcessingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListProcessingResponse, error)

	PostPublisherUserBulkImportListProcessingWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportListProcessingFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListProcessingResponse, error)

	// PostPublisherUserCreateWithBodyWithResponse request with any body
	PostPublisherUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserCreateResponse, error)

	PostPublisherUserCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserCreateResponse, error)

	// PostPublisherUserDisableWithBodyWithResponse request with any body
	PostPublisherUserDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserDisableResponse, error)

	PostPublisherUserDisableWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserDisableFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserDisableResponse, error)

	// GetPublisherUserEmailGetWithResponse request
	GetPublisherUserEmailGetWithResponse(ctx context.Context, params *GetPublisherUserEmailGetParams, reqEditors ...RequestEditorFn) (*GetPublisherUserEmailGetResponse, error)

	// GetPublisherUserEmailListWithResponse request
	GetPublisherUserEmailListWithResponse(ctx context.Context, params *GetPublisherUserEmailListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserEmailListResponse, error)

	// PostPublisherUserGetWithBodyWithResponse request with any body
	PostPublisherUserGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserGetResponse, error)

	PostPublisherUserGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserGetResponse, error)

	// PostPublisherUserListWithBodyWithResponse request with any body
	PostPublisherUserListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserListResponse, error)

	PostPublisherUserListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserListResponse, error)

	// PostPublisherUserListAccessesWithBodyWithResponse request with any body
	PostPublisherUserListAccessesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserListAccessesResponse, error)

	PostPublisherUserListAccessesWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserListAccessesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserListAccessesResponse, error)

	// PostPublisherUserNoteCreateWithBodyWithResponse request with any body
	PostPublisherUserNoteCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteCreateResponse, error)

	PostPublisherUserNoteCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserNoteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteCreateResponse, error)

	// GetPublisherUserNoteGetWithResponse request
	GetPublisherUserNoteGetWithResponse(ctx context.Context, params *GetPublisherUserNoteGetParams, reqEditors ...RequestEditorFn) (*GetPublisherUserNoteGetResponse, error)

	// GetPublisherUserNoteListWithResponse request
	GetPublisherUserNoteListWithResponse(ctx context.Context, params *GetPublisherUserNoteListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserNoteListResponse, error)

	// PostPublisherUserNoteUpdateWithBodyWithResponse request with any body
	PostPublisherUserNoteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteUpdateResponse, error)

	PostPublisherUserNoteUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserNoteUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteUpdateResponse, error)

	// PostPublisherUserRegisterWithBodyWithResponse request with any body
	PostPublisherUserRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserRegisterResponse, error)

	PostPublisherUserRegisterWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserRegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserRegisterResponse, error)

	// PostPublisherUserSearchWithBodyWithResponse request with any body
	PostPublisherUserSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserSearchResponse, error)

	PostPublisherUserSearchWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserSearchFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserSearchResponse, error)

	// PostPublisherUserUpdateWithBodyWithResponse request with any body
	PostPublisherUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserUpdateResponse, error)

	PostPublisherUserUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserUpdateResponse, error)

	// GetPublisherVoucherGetWithResponse request
	GetPublisherVoucherGetWithResponse(ctx context.Context, params *GetPublisherVoucherGetParams, reqEditors ...RequestEditorFn) (*GetPublisherVoucherGetResponse, error)

	// GetPublisherVoucherListWithResponse request
	GetPublisherVoucherListWithResponse(ctx context.Context, params *GetPublisherVoucherListParams, reqEditors ...RequestEditorFn) (*GetPublisherVoucherListResponse, error)

	// PostPublisherVoucherResendWithBodyWithResponse request with any body
	PostPublisherVoucherResendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherVoucherResendResponse, error)

	PostPublisherVoucherResendWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherVoucherResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherVoucherResendResponse, error)

	// GetPublisherWebhookEventsWithResponse request
	GetPublisherWebhookEventsWithResponse(ctx context.Context, params *GetPublisherWebhookEventsParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookEventsResponse, error)

	// GetPublisherWebhookGetWithResponse request
	GetPublisherWebhookGetWithResponse(ctx context.Context, params *GetPublisherWebhookGetParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookGetResponse, error)

	// GetPublisherWebhookResponseListWithResponse request
	GetPublisherWebhookResponseListWithResponse(ctx context.Context, params *GetPublisherWebhookResponseListParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookResponseListResponse, error)

	// GetPublisherWebhookResponseResendWithResponse request
	GetPublisherWebhookResponseResendWithResponse(ctx context.Context, params *GetPublisherWebhookResponseResendParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookResponseResendResponse, error)

	// GetPublisherWebhookSettingsWithResponse request
	GetPublisherWebhookSettingsWithResponse(ctx context.Context, params *GetPublisherWebhookSettingsParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookSettingsResponse, error)

	// PostPublisherWebhookSettingsUpdateWithBodyWithResponse request with any body
	PostPublisherWebhookSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherWebhookSettingsUpdateResponse, error)

	PostPublisherWebhookSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherWebhookSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherWebhookSettingsUpdateResponse, error)

	// GetPublisherWebhookSkipWithResponse request
	GetPublisherWebhookSkipWithResponse(ctx context.Context, params *GetPublisherWebhookSkipParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookSkipResponse, error)

	// GetPublisherWebhookStatusWithResponse request
	GetPublisherWebhookStatusWithResponse(ctx context.Context, params *GetPublisherWebhookStatusParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookStatusResponse, error)
}

type GetPublisherAdblockerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAdblockerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAdblockerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAfcConfigurationDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherAfcConfigurationDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAfcConfigurationDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAfcConfigurationGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAfcConfigurationGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAfcConfigurationGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAfcConfigurationHealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherAfcConfigurationHealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAfcConfigurationHealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAfcConfigurationSaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAfcConfigurationSaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAfcConfigurationSaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAppApiTokenGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherAppApiTokenGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAppApiTokenGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAppCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAppCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAppCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAppFeaturesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAppFeaturesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAppFeaturesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAppGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAppGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAppGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherAppListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherAppListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherAppListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConsentEntryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConsentEntryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConsentEntryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConsentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConsentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConsentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConsentListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConsentListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConsentListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConversionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConversionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConversionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherConversionCustomCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherConversionCustomCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherConversionCustomCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConversionDataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConversionDataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConversionDataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherConversionExternalCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherConversionExternalCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherConversionExternalCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConversionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConversionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConversionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConversionLastAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConversionLastAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConversionLastAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherConversionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherConversionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherConversionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherConversionLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherConversionLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherConversionLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherConversionRegistrationCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherConversionRegistrationCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherConversionRegistrationCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExperienceMetadataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExperienceMetadataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExperienceMetadataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateAamDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateAamDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateAamDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateAamMonthlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateAamMonthlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateAamMonthlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateAamMonthlyV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateAamMonthlyV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateAamMonthlyV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportCreateAccessReportExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportCreateAccessReportExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportCreateAccessReportExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportCreateAccessReportExportV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportCreateAccessReportExportV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportCreateAccessReportExportV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportCreateDailyActivityReportExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportCreateDailyActivityReportExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportCreateDailyActivityReportExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportCreateMonthlyActivityReportExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportCreateMonthlyActivityReportExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportCreateMonthlyActivityReportExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateSubscriptionDetailsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateSubscriptionDetailsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateSubscriptionDetailsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateSubscriptionDetailsReportV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateSubscriptionDetailsReportV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateSubscriptionDetailsReportV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateSubscriptionSummaryReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateSubscriptionSummaryReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateSubscriptionSummaryReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportCreateTermChangeReportExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportCreateTermChangeReportExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportCreateTermChangeReportExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateTransactionsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateTransactionsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateTransactionsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateTransactionsReportV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateTransactionsReportV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateTransactionsReportV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExportCreateUserExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExportCreateUserExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExportCreateUserExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherExportRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherExportRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherExportRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherExternalProviderPaymentUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherExternalProviderPaymentUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherExternalProviderPaymentUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherGdprDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherGdprDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherGdprDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherGdprDeleteAnonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherGdprDeleteAnonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherGdprDeleteAnonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherGdprExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherGdprExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherGdprExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryInquiryActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryInquiryActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryInquiryActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryLastCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryLastCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryLastCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherInquiryUnresolvedCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherInquiryUnresolvedCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherInquiryUnresolvedCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractPeriodsActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractPeriodsActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractPeriodsActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractDomainContractUserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractDomainContractUserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractDomainContractUserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractDomainCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractDomainCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractDomainCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractDomainListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractDomainListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractDomainListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractDomainRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractDomainRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractDomainRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractDomainRemoveAndRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractDomainRemoveAndRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractDomainRemoveAndRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractDomainUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractDomainUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractDomainUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractIpRangeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractIpRangeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractIpRangeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractIpRangeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractIpRangeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractIpRangeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractIpRangeRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractIpRangeRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractIpRangeRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractIpRangeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractIpRangeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractIpRangeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingContractUserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingContractUserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingContractUserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserRemoveAndRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserRemoveAndRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserRemoveAndRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingContractUserUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingContractUserUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingContractUserUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingLicenseeArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingLicenseeArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingLicenseeArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingLicenseeCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingLicenseeCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingLicenseeCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingLicenseeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingLicenseeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingLicenseeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingLicenseeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingLicenseeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingLicenseeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingLicenseeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingLicenseeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingLicenseeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingLicenseeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingLicenseeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingLicenseeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingNotificationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingNotificationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingNotificationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingNotificationRuleArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingNotificationRuleArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingNotificationRuleArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingNotificationRuleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingNotificationRuleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingNotificationRuleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingNotificationRuleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingNotificationRuleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingNotificationRuleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingNotificationRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingNotificationRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingNotificationRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLicensingScheduleContractPeriodsActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherLicensingScheduleContractPeriodsActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLicensingScheduleContractPeriodsActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLicensingScheduleContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLicensingScheduleContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLicensingScheduleContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLinkedTermConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLinkedTermConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLinkedTermConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLinkedTermCustomFieldConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLinkedTermCustomFieldConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLinkedTermCustomFieldConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherLinkedTermEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherLinkedTermEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherLinkedTermEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherLinkedTermSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherLinkedTermSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherLinkedTermSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateCreateEmptyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateCreateEmptyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateCreateEmptyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateDefaultCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateDefaultCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateDefaultCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateGetHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateGetHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateGetHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateInheritedCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateInheritedCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateInheritedCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateInheritedUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateInheritedUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateInheritedUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateListBoilerplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateListBoilerplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateListBoilerplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateListByCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateListByCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateListByCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateMakeGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateMakeGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateMakeGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateUpdateContentfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateUpdateContentfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateUpdateContentfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateUpdatefullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateUpdatefullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateUpdatefullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateVariantArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateVariantArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateVariantArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateVariantCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateVariantCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateVariantCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateVariantDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateVariantDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateVariantDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateVariantDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateVariantDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateVariantDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateVariantGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateVariantGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateVariantGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTemplateVariantRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTemplateVariantRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTemplateVariantRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTemplateVariantUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTemplateVariantUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTemplateVariantUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTermAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTermAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTermAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTermListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTermListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTermListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherOfferTermOfferListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherOfferTermOfferListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherOfferTermOfferListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTermRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTermRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTermRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferTermReorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferTermReorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferTermReorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherOfferUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherOfferUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherOfferUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPaymentGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPaymentGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPaymentGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPaymentIsPartialRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPaymentIsPartialRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPaymentIsPartialRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodBillingAddressApplyToAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodBillingAddressApplyToAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodBillingAddressApplyToAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodBillingAddressAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodBillingAddressAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodBillingAddressAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodBillingAddressDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodBillingAddressDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodBillingAddressDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodBillingAddressGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodBillingAddressGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodBillingAddressGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPaymentMethodGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPaymentMethodGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPaymentMethodGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodGmoRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodGmoRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodGmoRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentMethodUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentMethodUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentMethodUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPaymentProviderConfigurationSetVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPaymentProviderConfigurationSetVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPaymentProviderConfigurationSetVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPaymentRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPaymentRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPaymentRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionCodeCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionCodeCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionCodeCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionCodeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionCodeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionCodeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionCodeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionCodeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionCodeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionCodeExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionCodeExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionCodeExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionCodeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionCodeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionCodeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionCodeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionCodeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionCodeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionFixedDiscountAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionFixedDiscountAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionFixedDiscountAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionFixedDiscountDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionFixedDiscountDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionFixedDiscountDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionFixedDiscountUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionFixedDiscountUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionFixedDiscountUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionTermAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionTermAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionTermAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionTermDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionTermDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionTermDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionTermListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionTermListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionTermListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherPromotionTotalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherPromotionTotalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherPromotionTotalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherPromotionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherPromotionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherPromotionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceBundleMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceBundleMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceBundleMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceCrossAppCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceCrossAppCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceCrossAppCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceStatsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceStatsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceStatsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceTagAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceTagAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceTagAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceTagBundlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceTagBundlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceTagBundlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceTagCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceTagCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceTagCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceTagDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceTagDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceTagDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceTagDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceTagDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceTagDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceTagGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceTagGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceTagGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceTagListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceTagListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceTagListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResourceUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherResourceUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResourceUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResourceUserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherResourceUserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResourceUserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSchedulePeriodAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSchedulePeriodAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSchedulePeriodAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSchedulePeriodDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSchedulePeriodDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSchedulePeriodDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSchedulePeriodUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSchedulePeriodUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSchedulePeriodUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherScheduleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherScheduleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherScheduleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionAddressAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionAddressAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionAddressAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionCancelDeferredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionCancelDeferredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionCancelDeferredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherSubscriptionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherSubscriptionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherSubscriptionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionIsPartiallyRefundableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionIsPartiallyRefundableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionIsPartiallyRefundableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherSubscriptionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherSubscriptionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherSubscriptionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherSubscriptionSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherSubscriptionSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherSubscriptionSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareResendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareResendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareResendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareUserAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareUserAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareUserAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareUserRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareUserRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareUserRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionShareValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionShareValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionShareValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherSubscriptionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherSubscriptionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherSubscriptionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTeamListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTeamListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTeamListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherTermApplicableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherTermApplicableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherTermApplicableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermChangeCanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermChangeCanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermChangeCanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermChangeCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermChangeCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermChangeCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermChangeDoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermChangeDoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermChangeDoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermChangeOptionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermChangeOptionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermChangeOptionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherTermCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherTermCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherTermCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermCustomCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermCustomCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermCustomCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermCustomUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermCustomUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermCustomUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermDynamicCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermDynamicCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermDynamicCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermDynamicUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermDynamicUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermDynamicUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermExternalCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermExternalCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermExternalCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermExternalUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermExternalUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermExternalUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherTermGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherTermGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherTermGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermGiftCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermGiftCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermGiftCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermGiftUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermGiftUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermGiftUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermPaymentCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermPaymentCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermPaymentCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermPaymentUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermPaymentUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermPaymentUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermRegistrationCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermRegistrationCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermRegistrationCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherTermRegistrationUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherTermRegistrationUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherTermRegistrationUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherTermStatsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherTermStatsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherTermStatsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherTestUserRefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherTestUserRefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherTestUserRefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAccessActiveCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAccessActiveCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAccessActiveCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAccessCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAccessCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAccessCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAccessGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAccessGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAccessGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAccessGrantToUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAccessGrantToUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAccessGrantToUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAccessListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAccessListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAccessListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAccessRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAccessRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAccessRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAccessUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAccessUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAccessUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAddressCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAddressCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAddressCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAddressDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAddressDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAddressDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAddressHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAddressHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAddressHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserAddressListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserAddressListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserAddressListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAddressUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAddressUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAddressUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserAppCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserAppCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserAppCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressGetByPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressGetByPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressGetByPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressGetByPaymentInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressGetByPaymentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressGetByPaymentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBillingAddressListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBillingAddressListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBillingAddressListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBulkImportDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBulkImportDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBulkImportDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBulkImportDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBulkImportDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBulkImportDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBulkImportListCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBulkImportListCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBulkImportListCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserBulkImportListProcessingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserBulkImportListProcessingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserBulkImportListProcessingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserEmailGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserEmailGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserEmailGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserEmailListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserEmailListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserEmailListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserListAccessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserListAccessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserListAccessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserNoteCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserNoteCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserNoteCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserNoteGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserNoteGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserNoteGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherUserNoteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherUserNoteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherUserNoteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserNoteUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserNoteUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserNoteUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherUserUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherUserUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherUserUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherVoucherGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherVoucherGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherVoucherGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherVoucherListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherVoucherListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherVoucherListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherVoucherResendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherVoucherResendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherVoucherResendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookResponseListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookResponseListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookResponseListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookResponseResendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookResponseResendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookResponseResendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherWebhookSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPublisherWebhookSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherWebhookSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookSkipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookSkipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookSkipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherWebhookStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPublisherWebhookStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherWebhookStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPublisherAdblockerGetWithResponse request returning *GetPublisherAdblockerGetResponse
func (c *ClientWithResponses) GetPublisherAdblockerGetWithResponse(ctx context.Context, params *GetPublisherAdblockerGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAdblockerGetResponse, error) {
	rsp, err := c.GetPublisherAdblockerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAdblockerGetResponse(rsp)
}

// GetPublisherAfcConfigurationDeleteWithResponse request returning *GetPublisherAfcConfigurationDeleteResponse
func (c *ClientWithResponses) GetPublisherAfcConfigurationDeleteWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationDeleteParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationDeleteResponse, error) {
	rsp, err := c.GetPublisherAfcConfigurationDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAfcConfigurationDeleteResponse(rsp)
}

// GetPublisherAfcConfigurationGetWithResponse request returning *GetPublisherAfcConfigurationGetResponse
func (c *ClientWithResponses) GetPublisherAfcConfigurationGetWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationGetResponse, error) {
	rsp, err := c.GetPublisherAfcConfigurationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAfcConfigurationGetResponse(rsp)
}

// GetPublisherAfcConfigurationHealthCheckWithResponse request returning *GetPublisherAfcConfigurationHealthCheckResponse
func (c *ClientWithResponses) GetPublisherAfcConfigurationHealthCheckWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationHealthCheckParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationHealthCheckResponse, error) {
	rsp, err := c.GetPublisherAfcConfigurationHealthCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAfcConfigurationHealthCheckResponse(rsp)
}

// GetPublisherAfcConfigurationSaveWithResponse request returning *GetPublisherAfcConfigurationSaveResponse
func (c *ClientWithResponses) GetPublisherAfcConfigurationSaveWithResponse(ctx context.Context, params *GetPublisherAfcConfigurationSaveParams, reqEditors ...RequestEditorFn) (*GetPublisherAfcConfigurationSaveResponse, error) {
	rsp, err := c.GetPublisherAfcConfigurationSave(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAfcConfigurationSaveResponse(rsp)
}

// GetPublisherAppApiTokenGenerateWithResponse request returning *GetPublisherAppApiTokenGenerateResponse
func (c *ClientWithResponses) GetPublisherAppApiTokenGenerateWithResponse(ctx context.Context, params *GetPublisherAppApiTokenGenerateParams, reqEditors ...RequestEditorFn) (*GetPublisherAppApiTokenGenerateResponse, error) {
	rsp, err := c.GetPublisherAppApiTokenGenerate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAppApiTokenGenerateResponse(rsp)
}

// GetPublisherAppCurrenciesWithResponse request returning *GetPublisherAppCurrenciesResponse
func (c *ClientWithResponses) GetPublisherAppCurrenciesWithResponse(ctx context.Context, params *GetPublisherAppCurrenciesParams, reqEditors ...RequestEditorFn) (*GetPublisherAppCurrenciesResponse, error) {
	rsp, err := c.GetPublisherAppCurrencies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAppCurrenciesResponse(rsp)
}

// GetPublisherAppFeaturesGetWithResponse request returning *GetPublisherAppFeaturesGetResponse
func (c *ClientWithResponses) GetPublisherAppFeaturesGetWithResponse(ctx context.Context, params *GetPublisherAppFeaturesGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAppFeaturesGetResponse, error) {
	rsp, err := c.GetPublisherAppFeaturesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAppFeaturesGetResponse(rsp)
}

// GetPublisherAppGetWithResponse request returning *GetPublisherAppGetResponse
func (c *ClientWithResponses) GetPublisherAppGetWithResponse(ctx context.Context, params *GetPublisherAppGetParams, reqEditors ...RequestEditorFn) (*GetPublisherAppGetResponse, error) {
	rsp, err := c.GetPublisherAppGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAppGetResponse(rsp)
}

// GetPublisherAppListWithResponse request returning *GetPublisherAppListResponse
func (c *ClientWithResponses) GetPublisherAppListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublisherAppListResponse, error) {
	rsp, err := c.GetPublisherAppList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherAppListResponse(rsp)
}

// GetPublisherConsentEntryListWithResponse request returning *GetPublisherConsentEntryListResponse
func (c *ClientWithResponses) GetPublisherConsentEntryListWithResponse(ctx context.Context, params *GetPublisherConsentEntryListParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentEntryListResponse, error) {
	rsp, err := c.GetPublisherConsentEntryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConsentEntryListResponse(rsp)
}

// GetPublisherConsentGetWithResponse request returning *GetPublisherConsentGetResponse
func (c *ClientWithResponses) GetPublisherConsentGetWithResponse(ctx context.Context, params *GetPublisherConsentGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentGetResponse, error) {
	rsp, err := c.GetPublisherConsentGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConsentGetResponse(rsp)
}

// GetPublisherConsentListWithResponse request returning *GetPublisherConsentListResponse
func (c *ClientWithResponses) GetPublisherConsentListWithResponse(ctx context.Context, params *GetPublisherConsentListParams, reqEditors ...RequestEditorFn) (*GetPublisherConsentListResponse, error) {
	rsp, err := c.GetPublisherConsentList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConsentListResponse(rsp)
}

// GetPublisherConversionCountWithResponse request returning *GetPublisherConversionCountResponse
func (c *ClientWithResponses) GetPublisherConversionCountWithResponse(ctx context.Context, params *GetPublisherConversionCountParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionCountResponse, error) {
	rsp, err := c.GetPublisherConversionCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConversionCountResponse(rsp)
}

// PostPublisherConversionCustomCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherConversionCustomCreateResponse
func (c *ClientWithResponses) PostPublisherConversionCustomCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionCustomCreateResponse, error) {
	rsp, err := c.PostPublisherConversionCustomCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionCustomCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherConversionCustomCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionCustomCreateResponse, error) {
	rsp, err := c.PostPublisherConversionCustomCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionCustomCreateResponse(rsp)
}

// GetPublisherConversionDataGetWithResponse request returning *GetPublisherConversionDataGetResponse
func (c *ClientWithResponses) GetPublisherConversionDataGetWithResponse(ctx context.Context, params *GetPublisherConversionDataGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionDataGetResponse, error) {
	rsp, err := c.GetPublisherConversionDataGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConversionDataGetResponse(rsp)
}

// PostPublisherConversionExternalCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherConversionExternalCreateResponse
func (c *ClientWithResponses) PostPublisherConversionExternalCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionExternalCreateResponse, error) {
	rsp, err := c.PostPublisherConversionExternalCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionExternalCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherConversionExternalCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionExternalCreateResponse, error) {
	rsp, err := c.PostPublisherConversionExternalCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionExternalCreateResponse(rsp)
}

// GetPublisherConversionGetWithResponse request returning *GetPublisherConversionGetResponse
func (c *ClientWithResponses) GetPublisherConversionGetWithResponse(ctx context.Context, params *GetPublisherConversionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionGetResponse, error) {
	rsp, err := c.GetPublisherConversionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConversionGetResponse(rsp)
}

// GetPublisherConversionLastAccessWithResponse request returning *GetPublisherConversionLastAccessResponse
func (c *ClientWithResponses) GetPublisherConversionLastAccessWithResponse(ctx context.Context, params *GetPublisherConversionLastAccessParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionLastAccessResponse, error) {
	rsp, err := c.GetPublisherConversionLastAccess(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConversionLastAccessResponse(rsp)
}

// GetPublisherConversionListWithResponse request returning *GetPublisherConversionListResponse
func (c *ClientWithResponses) GetPublisherConversionListWithResponse(ctx context.Context, params *GetPublisherConversionListParams, reqEditors ...RequestEditorFn) (*GetPublisherConversionListResponse, error) {
	rsp, err := c.GetPublisherConversionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherConversionListResponse(rsp)
}

// PostPublisherConversionLogWithBodyWithResponse request with arbitrary body returning *PostPublisherConversionLogResponse
func (c *ClientWithResponses) PostPublisherConversionLogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionLogResponse, error) {
	rsp, err := c.PostPublisherConversionLogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionLogResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherConversionLogWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionLogFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionLogResponse, error) {
	rsp, err := c.PostPublisherConversionLogWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionLogResponse(rsp)
}

// PostPublisherConversionRegistrationCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherConversionRegistrationCreateResponse
func (c *ClientWithResponses) PostPublisherConversionRegistrationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherConversionRegistrationCreateResponse, error) {
	rsp, err := c.PostPublisherConversionRegistrationCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionRegistrationCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherConversionRegistrationCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherConversionRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherConversionRegistrationCreateResponse, error) {
	rsp, err := c.PostPublisherConversionRegistrationCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherConversionRegistrationCreateResponse(rsp)
}

// GetPublisherExperienceMetadataListWithResponse request returning *GetPublisherExperienceMetadataListResponse
func (c *ClientWithResponses) GetPublisherExperienceMetadataListWithResponse(ctx context.Context, params *GetPublisherExperienceMetadataListParams, reqEditors ...RequestEditorFn) (*GetPublisherExperienceMetadataListResponse, error) {
	rsp, err := c.GetPublisherExperienceMetadataList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExperienceMetadataListResponse(rsp)
}

// PostPublisherExportCreateAamDailyWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateAamDailyResponse
func (c *ClientWithResponses) PostPublisherExportCreateAamDailyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamDailyResponse, error) {
	rsp, err := c.PostPublisherExportCreateAamDailyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamDailyResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateAamDailyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamDailyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamDailyResponse, error) {
	rsp, err := c.PostPublisherExportCreateAamDailyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamDailyResponse(rsp)
}

// PostPublisherExportCreateAamMonthlyWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateAamMonthlyResponse
func (c *ClientWithResponses) PostPublisherExportCreateAamMonthlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyResponse, error) {
	rsp, err := c.PostPublisherExportCreateAamMonthlyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamMonthlyResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateAamMonthlyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamMonthlyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyResponse, error) {
	rsp, err := c.PostPublisherExportCreateAamMonthlyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamMonthlyResponse(rsp)
}

// PostPublisherExportCreateAamMonthlyV2WithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateAamMonthlyV2Response
func (c *ClientWithResponses) PostPublisherExportCreateAamMonthlyV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyV2Response, error) {
	rsp, err := c.PostPublisherExportCreateAamMonthlyV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamMonthlyV2Response(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateAamMonthlyV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateAamMonthlyV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateAamMonthlyV2Response, error) {
	rsp, err := c.PostPublisherExportCreateAamMonthlyV2WithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateAamMonthlyV2Response(rsp)
}

// GetPublisherExportCreateAccessReportExportWithResponse request returning *GetPublisherExportCreateAccessReportExportResponse
func (c *ClientWithResponses) GetPublisherExportCreateAccessReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateAccessReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateAccessReportExportResponse, error) {
	rsp, err := c.GetPublisherExportCreateAccessReportExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportCreateAccessReportExportResponse(rsp)
}

// GetPublisherExportCreateAccessReportExportV2WithResponse request returning *GetPublisherExportCreateAccessReportExportV2Response
func (c *ClientWithResponses) GetPublisherExportCreateAccessReportExportV2WithResponse(ctx context.Context, params *GetPublisherExportCreateAccessReportExportV2Params, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateAccessReportExportV2Response, error) {
	rsp, err := c.GetPublisherExportCreateAccessReportExportV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportCreateAccessReportExportV2Response(rsp)
}

// GetPublisherExportCreateDailyActivityReportExportWithResponse request returning *GetPublisherExportCreateDailyActivityReportExportResponse
func (c *ClientWithResponses) GetPublisherExportCreateDailyActivityReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateDailyActivityReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateDailyActivityReportExportResponse, error) {
	rsp, err := c.GetPublisherExportCreateDailyActivityReportExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportCreateDailyActivityReportExportResponse(rsp)
}

// GetPublisherExportCreateMonthlyActivityReportExportWithResponse request returning *GetPublisherExportCreateMonthlyActivityReportExportResponse
func (c *ClientWithResponses) GetPublisherExportCreateMonthlyActivityReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateMonthlyActivityReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateMonthlyActivityReportExportResponse, error) {
	rsp, err := c.GetPublisherExportCreateMonthlyActivityReportExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportCreateMonthlyActivityReportExportResponse(rsp)
}

// PostPublisherExportCreateSubscriptionDetailsReportWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateSubscriptionDetailsReportResponse
func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionDetailsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionDetailsReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionDetailsReportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionDetailsReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionDetailsReportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionDetailsReportResponse(rsp)
}

// PostPublisherExportCreateSubscriptionDetailsReportV2WithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateSubscriptionDetailsReportV2Response
func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionDetailsReportV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportV2Response, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionDetailsReportV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionDetailsReportV2Response(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionDetailsReportV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionDetailsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionDetailsReportV2Response, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionDetailsReportV2WithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionDetailsReportV2Response(rsp)
}

// PostPublisherExportCreateSubscriptionSummaryReportWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateSubscriptionSummaryReportResponse
func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionSummaryReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionSummaryReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionSummaryReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionSummaryReportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateSubscriptionSummaryReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateSubscriptionSummaryReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateSubscriptionSummaryReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateSubscriptionSummaryReportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateSubscriptionSummaryReportResponse(rsp)
}

// GetPublisherExportCreateTermChangeReportExportWithResponse request returning *GetPublisherExportCreateTermChangeReportExportResponse
func (c *ClientWithResponses) GetPublisherExportCreateTermChangeReportExportWithResponse(ctx context.Context, params *GetPublisherExportCreateTermChangeReportExportParams, reqEditors ...RequestEditorFn) (*GetPublisherExportCreateTermChangeReportExportResponse, error) {
	rsp, err := c.GetPublisherExportCreateTermChangeReportExport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportCreateTermChangeReportExportResponse(rsp)
}

// PostPublisherExportCreateTransactionsReportWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateTransactionsReportResponse
func (c *ClientWithResponses) PostPublisherExportCreateTransactionsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateTransactionsReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateTransactionsReportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateTransactionsReportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateTransactionsReportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportResponse, error) {
	rsp, err := c.PostPublisherExportCreateTransactionsReportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateTransactionsReportResponse(rsp)
}

// PostPublisherExportCreateTransactionsReportV2WithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateTransactionsReportV2Response
func (c *ClientWithResponses) PostPublisherExportCreateTransactionsReportV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportV2Response, error) {
	rsp, err := c.PostPublisherExportCreateTransactionsReportV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateTransactionsReportV2Response(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateTransactionsReportV2WithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateTransactionsReportV2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateTransactionsReportV2Response, error) {
	rsp, err := c.PostPublisherExportCreateTransactionsReportV2WithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateTransactionsReportV2Response(rsp)
}

// PostPublisherExportCreateUserExportWithBodyWithResponse request with arbitrary body returning *PostPublisherExportCreateUserExportResponse
func (c *ClientWithResponses) PostPublisherExportCreateUserExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateUserExportResponse, error) {
	rsp, err := c.PostPublisherExportCreateUserExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateUserExportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExportCreateUserExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExportCreateUserExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExportCreateUserExportResponse, error) {
	rsp, err := c.PostPublisherExportCreateUserExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExportCreateUserExportResponse(rsp)
}

// GetPublisherExportDeleteWithResponse request returning *GetPublisherExportDeleteResponse
func (c *ClientWithResponses) GetPublisherExportDeleteWithResponse(ctx context.Context, params *GetPublisherExportDeleteParams, reqEditors ...RequestEditorFn) (*GetPublisherExportDeleteResponse, error) {
	rsp, err := c.GetPublisherExportDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportDeleteResponse(rsp)
}

// GetPublisherExportDownloadWithResponse request returning *GetPublisherExportDownloadResponse
func (c *ClientWithResponses) GetPublisherExportDownloadWithResponse(ctx context.Context, params *GetPublisherExportDownloadParams, reqEditors ...RequestEditorFn) (*GetPublisherExportDownloadResponse, error) {
	rsp, err := c.GetPublisherExportDownload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportDownloadResponse(rsp)
}

// GetPublisherExportGetWithResponse request returning *GetPublisherExportGetResponse
func (c *ClientWithResponses) GetPublisherExportGetWithResponse(ctx context.Context, params *GetPublisherExportGetParams, reqEditors ...RequestEditorFn) (*GetPublisherExportGetResponse, error) {
	rsp, err := c.GetPublisherExportGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportGetResponse(rsp)
}

// GetPublisherExportListWithResponse request returning *GetPublisherExportListResponse
func (c *ClientWithResponses) GetPublisherExportListWithResponse(ctx context.Context, params *GetPublisherExportListParams, reqEditors ...RequestEditorFn) (*GetPublisherExportListResponse, error) {
	rsp, err := c.GetPublisherExportList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportListResponse(rsp)
}

// GetPublisherExportRunWithResponse request returning *GetPublisherExportRunResponse
func (c *ClientWithResponses) GetPublisherExportRunWithResponse(ctx context.Context, params *GetPublisherExportRunParams, reqEditors ...RequestEditorFn) (*GetPublisherExportRunResponse, error) {
	rsp, err := c.GetPublisherExportRun(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherExportRunResponse(rsp)
}

// PostPublisherExternalProviderPaymentUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherExternalProviderPaymentUpdateResponse
func (c *ClientWithResponses) PostPublisherExternalProviderPaymentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherExternalProviderPaymentUpdateResponse, error) {
	rsp, err := c.PostPublisherExternalProviderPaymentUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExternalProviderPaymentUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherExternalProviderPaymentUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherExternalProviderPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherExternalProviderPaymentUpdateResponse, error) {
	rsp, err := c.PostPublisherExternalProviderPaymentUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherExternalProviderPaymentUpdateResponse(rsp)
}

// PostPublisherGdprDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherGdprDeleteResponse
func (c *ClientWithResponses) PostPublisherGdprDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteResponse, error) {
	rsp, err := c.PostPublisherGdprDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherGdprDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteResponse, error) {
	rsp, err := c.PostPublisherGdprDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprDeleteResponse(rsp)
}

// PostPublisherGdprDeleteAnonWithBodyWithResponse request with arbitrary body returning *PostPublisherGdprDeleteAnonResponse
func (c *ClientWithResponses) PostPublisherGdprDeleteAnonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteAnonResponse, error) {
	rsp, err := c.PostPublisherGdprDeleteAnonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprDeleteAnonResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherGdprDeleteAnonWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprDeleteAnonFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprDeleteAnonResponse, error) {
	rsp, err := c.PostPublisherGdprDeleteAnonWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprDeleteAnonResponse(rsp)
}

// PostPublisherGdprExportWithBodyWithResponse request with arbitrary body returning *PostPublisherGdprExportResponse
func (c *ClientWithResponses) PostPublisherGdprExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherGdprExportResponse, error) {
	rsp, err := c.PostPublisherGdprExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprExportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherGdprExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherGdprExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherGdprExportResponse, error) {
	rsp, err := c.PostPublisherGdprExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherGdprExportResponse(rsp)
}

// GetPublisherInquiryAddWithResponse request returning *GetPublisherInquiryAddResponse
func (c *ClientWithResponses) GetPublisherInquiryAddWithResponse(ctx context.Context, params *GetPublisherInquiryAddParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryAddResponse, error) {
	rsp, err := c.GetPublisherInquiryAdd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryAddResponse(rsp)
}

// GetPublisherInquiryCommentsWithResponse request returning *GetPublisherInquiryCommentsResponse
func (c *ClientWithResponses) GetPublisherInquiryCommentsWithResponse(ctx context.Context, params *GetPublisherInquiryCommentsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryCommentsResponse, error) {
	rsp, err := c.GetPublisherInquiryComments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryCommentsResponse(rsp)
}

// GetPublisherInquiryDetailsWithResponse request returning *GetPublisherInquiryDetailsResponse
func (c *ClientWithResponses) GetPublisherInquiryDetailsWithResponse(ctx context.Context, params *GetPublisherInquiryDetailsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryDetailsResponse, error) {
	rsp, err := c.GetPublisherInquiryDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryDetailsResponse(rsp)
}

// GetPublisherInquiryInquiryActionsWithResponse request returning *GetPublisherInquiryInquiryActionsResponse
func (c *ClientWithResponses) GetPublisherInquiryInquiryActionsWithResponse(ctx context.Context, params *GetPublisherInquiryInquiryActionsParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryInquiryActionsResponse, error) {
	rsp, err := c.GetPublisherInquiryInquiryActions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryInquiryActionsResponse(rsp)
}

// GetPublisherInquiryLastCommentWithResponse request returning *GetPublisherInquiryLastCommentResponse
func (c *ClientWithResponses) GetPublisherInquiryLastCommentWithResponse(ctx context.Context, params *GetPublisherInquiryLastCommentParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryLastCommentResponse, error) {
	rsp, err := c.GetPublisherInquiryLastComment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryLastCommentResponse(rsp)
}

// GetPublisherInquiryListWithResponse request returning *GetPublisherInquiryListResponse
func (c *ClientWithResponses) GetPublisherInquiryListWithResponse(ctx context.Context, params *GetPublisherInquiryListParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryListResponse, error) {
	rsp, err := c.GetPublisherInquiryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryListResponse(rsp)
}

// GetPublisherInquiryUnresolvedCountWithResponse request returning *GetPublisherInquiryUnresolvedCountResponse
func (c *ClientWithResponses) GetPublisherInquiryUnresolvedCountWithResponse(ctx context.Context, params *GetPublisherInquiryUnresolvedCountParams, reqEditors ...RequestEditorFn) (*GetPublisherInquiryUnresolvedCountResponse, error) {
	rsp, err := c.GetPublisherInquiryUnresolvedCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherInquiryUnresolvedCountResponse(rsp)
}

// PostPublisherLicensingContractActivateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractActivateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractActivateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractActivateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractActivateResponse(rsp)
}

// PostPublisherLicensingContractArchiveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractArchiveResponse
func (c *ClientWithResponses) PostPublisherLicensingContractArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractArchiveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractArchiveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractArchiveResponse(rsp)
}

// PostPublisherLicensingContractCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractCreateResponse(rsp)
}

// PostPublisherLicensingContractDeactivateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractDeactivateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractDeactivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDeactivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDeactivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDeactivateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractDeactivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDeactivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDeactivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDeactivateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDeactivateResponse(rsp)
}

// GetPublisherLicensingContractGetWithResponse request returning *GetPublisherLicensingContractGetResponse
func (c *ClientWithResponses) GetPublisherLicensingContractGetWithResponse(ctx context.Context, params *GetPublisherLicensingContractGetParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractGetResponse, error) {
	rsp, err := c.GetPublisherLicensingContractGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractGetResponse(rsp)
}

// GetPublisherLicensingContractListWithResponse request returning *GetPublisherLicensingContractListResponse
func (c *ClientWithResponses) GetPublisherLicensingContractListWithResponse(ctx context.Context, params *GetPublisherLicensingContractListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractListResponse, error) {
	rsp, err := c.GetPublisherLicensingContractList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractListResponse(rsp)
}

// PostPublisherLicensingContractPeriodsActivateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractPeriodsActivateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractPeriodsActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractPeriodsActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractPeriodsActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractPeriodsActivateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractPeriodsActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractPeriodsActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractPeriodsActivateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractPeriodsActivateResponse(rsp)
}

// PostPublisherLicensingContractRedeemWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractRedeemResponse
func (c *ClientWithResponses) PostPublisherLicensingContractRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractRedeemResponse, error) {
	rsp, err := c.PostPublisherLicensingContractRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractRedeemWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractRedeemFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractRedeemResponse, error) {
	rsp, err := c.PostPublisherLicensingContractRedeemWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractRedeemResponse(rsp)
}

// PostPublisherLicensingContractUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUpdateResponse(rsp)
}

// GetPublisherLicensingContractDomainContractUserListWithResponse request returning *GetPublisherLicensingContractDomainContractUserListResponse
func (c *ClientWithResponses) GetPublisherLicensingContractDomainContractUserListWithResponse(ctx context.Context, params *GetPublisherLicensingContractDomainContractUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractDomainContractUserListResponse, error) {
	rsp, err := c.GetPublisherLicensingContractDomainContractUserList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractDomainContractUserListResponse(rsp)
}

// PostPublisherLicensingContractDomainCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractDomainCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractDomainCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractDomainCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainCreateResponse(rsp)
}

// GetPublisherLicensingContractDomainListWithResponse request returning *GetPublisherLicensingContractDomainListResponse
func (c *ClientWithResponses) GetPublisherLicensingContractDomainListWithResponse(ctx context.Context, params *GetPublisherLicensingContractDomainListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractDomainListResponse, error) {
	rsp, err := c.GetPublisherLicensingContractDomainList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractDomainListResponse(rsp)
}

// PostPublisherLicensingContractDomainRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractDomainRemoveResponse
func (c *ClientWithResponses) PostPublisherLicensingContractDomainRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractDomainRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainRemoveResponse(rsp)
}

// PostPublisherLicensingContractDomainRemoveAndRevokeWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractDomainRemoveAndRevokeResponse
func (c *ClientWithResponses) PostPublisherLicensingContractDomainRemoveAndRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveAndRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainRemoveAndRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainRemoveAndRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractDomainRemoveAndRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainRemoveAndRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainRemoveAndRevokeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainRemoveAndRevokeResponse(rsp)
}

// PostPublisherLicensingContractDomainUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractDomainUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractDomainUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractDomainUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractDomainUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractDomainUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractDomainUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractDomainUpdateResponse(rsp)
}

// PostPublisherLicensingContractIpRangeCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractIpRangeCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeCreateResponse(rsp)
}

// GetPublisherLicensingContractIpRangeListWithResponse request returning *GetPublisherLicensingContractIpRangeListResponse
func (c *ClientWithResponses) GetPublisherLicensingContractIpRangeListWithResponse(ctx context.Context, params *GetPublisherLicensingContractIpRangeListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractIpRangeListResponse, error) {
	rsp, err := c.GetPublisherLicensingContractIpRangeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractIpRangeListResponse(rsp)
}

// PostPublisherLicensingContractIpRangeRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractIpRangeRemoveResponse
func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeRemoveResponse(rsp)
}

// PostPublisherLicensingContractIpRangeUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractIpRangeUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractIpRangeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractIpRangeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractIpRangeUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractIpRangeUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractIpRangeUpdateResponse(rsp)
}

// PostPublisherLicensingContractUserCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserCreateResponse(rsp)
}

// PostPublisherLicensingContractUserInviteWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserInviteResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserInviteResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserInviteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserInviteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserInviteResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserInviteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserInviteResponse(rsp)
}

// GetPublisherLicensingContractUserListWithResponse request returning *GetPublisherLicensingContractUserListResponse
func (c *ClientWithResponses) GetPublisherLicensingContractUserListWithResponse(ctx context.Context, params *GetPublisherLicensingContractUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingContractUserListResponse, error) {
	rsp, err := c.GetPublisherLicensingContractUserList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingContractUserListResponse(rsp)
}

// PostPublisherLicensingContractUserRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserRemoveResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRemoveResponse(rsp)
}

// PostPublisherLicensingContractUserRemoveAndRevokeWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserRemoveAndRevokeResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserRemoveAndRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveAndRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRemoveAndRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRemoveAndRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserRemoveAndRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRemoveAndRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRemoveAndRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRemoveAndRevokeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRemoveAndRevokeResponse(rsp)
}

// PostPublisherLicensingContractUserRestoreWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserRestoreResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRestoreResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserRestoreWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRestoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRestoreResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRestoreWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRestoreResponse(rsp)
}

// PostPublisherLicensingContractUserRevokeWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserRevokeResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserRevokeResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserRevokeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserRevokeResponse(rsp)
}

// PostPublisherLicensingContractUserUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingContractUserUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingContractUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingContractUserUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingContractUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingContractUserUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingContractUserUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingContractUserUpdateResponse(rsp)
}

// PostPublisherLicensingLicenseeArchiveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingLicenseeArchiveResponse
func (c *ClientWithResponses) PostPublisherLicensingLicenseeArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeArchiveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingLicenseeArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeArchiveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeArchiveResponse(rsp)
}

// GetPublisherLicensingLicenseeCountWithResponse request returning *GetPublisherLicensingLicenseeCountResponse
func (c *ClientWithResponses) GetPublisherLicensingLicenseeCountWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeCountParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeCountResponse, error) {
	rsp, err := c.GetPublisherLicensingLicenseeCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingLicenseeCountResponse(rsp)
}

// PostPublisherLicensingLicenseeCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingLicenseeCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingLicenseeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingLicenseeCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeCreateResponse(rsp)
}

// GetPublisherLicensingLicenseeGetWithResponse request returning *GetPublisherLicensingLicenseeGetResponse
func (c *ClientWithResponses) GetPublisherLicensingLicenseeGetWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeGetParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeGetResponse, error) {
	rsp, err := c.GetPublisherLicensingLicenseeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingLicenseeGetResponse(rsp)
}

// GetPublisherLicensingLicenseeListWithResponse request returning *GetPublisherLicensingLicenseeListResponse
func (c *ClientWithResponses) GetPublisherLicensingLicenseeListWithResponse(ctx context.Context, params *GetPublisherLicensingLicenseeListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingLicenseeListResponse, error) {
	rsp, err := c.GetPublisherLicensingLicenseeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingLicenseeListResponse(rsp)
}

// PostPublisherLicensingLicenseeUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingLicenseeUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingLicenseeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingLicenseeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingLicenseeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingLicenseeUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingLicenseeUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingLicenseeUpdateResponse(rsp)
}

// GetPublisherLicensingNotificationListWithResponse request returning *GetPublisherLicensingNotificationListResponse
func (c *ClientWithResponses) GetPublisherLicensingNotificationListWithResponse(ctx context.Context, params *GetPublisherLicensingNotificationListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingNotificationListResponse, error) {
	rsp, err := c.GetPublisherLicensingNotificationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingNotificationListResponse(rsp)
}

// PostPublisherLicensingNotificationRuleArchiveWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingNotificationRuleArchiveResponse
func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleArchiveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleArchiveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleArchiveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleArchiveResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleArchiveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleArchiveResponse(rsp)
}

// PostPublisherLicensingNotificationRuleCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingNotificationRuleCreateResponse
func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleCreateResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleCreateResponse(rsp)
}

// GetPublisherLicensingNotificationRuleListWithResponse request returning *GetPublisherLicensingNotificationRuleListResponse
func (c *ClientWithResponses) GetPublisherLicensingNotificationRuleListWithResponse(ctx context.Context, params *GetPublisherLicensingNotificationRuleListParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingNotificationRuleListResponse, error) {
	rsp, err := c.GetPublisherLicensingNotificationRuleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingNotificationRuleListResponse(rsp)
}

// PostPublisherLicensingNotificationRuleUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingNotificationRuleUpdateResponse
func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingNotificationRuleUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingNotificationRuleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingNotificationRuleUpdateResponse, error) {
	rsp, err := c.PostPublisherLicensingNotificationRuleUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingNotificationRuleUpdateResponse(rsp)
}

// PostPublisherLicensingScheduleContractPeriodsActivateWithBodyWithResponse request with arbitrary body returning *PostPublisherLicensingScheduleContractPeriodsActivateResponse
func (c *ClientWithResponses) PostPublisherLicensingScheduleContractPeriodsActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLicensingScheduleContractPeriodsActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingScheduleContractPeriodsActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingScheduleContractPeriodsActivateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLicensingScheduleContractPeriodsActivateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLicensingScheduleContractPeriodsActivateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLicensingScheduleContractPeriodsActivateResponse, error) {
	rsp, err := c.PostPublisherLicensingScheduleContractPeriodsActivateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLicensingScheduleContractPeriodsActivateResponse(rsp)
}

// GetPublisherLicensingScheduleContractsWithResponse request returning *GetPublisherLicensingScheduleContractsResponse
func (c *ClientWithResponses) GetPublisherLicensingScheduleContractsWithResponse(ctx context.Context, params *GetPublisherLicensingScheduleContractsParams, reqEditors ...RequestEditorFn) (*GetPublisherLicensingScheduleContractsResponse, error) {
	rsp, err := c.GetPublisherLicensingScheduleContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLicensingScheduleContractsResponse(rsp)
}

// PostPublisherLinkedTermConfigurationWithBodyWithResponse request with arbitrary body returning *PostPublisherLinkedTermConfigurationResponse
func (c *ClientWithResponses) PostPublisherLinkedTermConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermConfigurationResponse, error) {
	rsp, err := c.PostPublisherLinkedTermConfigurationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLinkedTermConfigurationWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermConfigurationResponse, error) {
	rsp, err := c.PostPublisherLinkedTermConfigurationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermConfigurationResponse(rsp)
}

// PostPublisherLinkedTermCustomFieldConfigurationWithBodyWithResponse request with arbitrary body returning *PostPublisherLinkedTermCustomFieldConfigurationResponse
func (c *ClientWithResponses) PostPublisherLinkedTermCustomFieldConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermCustomFieldConfigurationResponse, error) {
	rsp, err := c.PostPublisherLinkedTermCustomFieldConfigurationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermCustomFieldConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLinkedTermCustomFieldConfigurationWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermCustomFieldConfigurationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermCustomFieldConfigurationResponse, error) {
	rsp, err := c.PostPublisherLinkedTermCustomFieldConfigurationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermCustomFieldConfigurationResponse(rsp)
}

// PostPublisherLinkedTermEventWithBodyWithResponse request with arbitrary body returning *PostPublisherLinkedTermEventResponse
func (c *ClientWithResponses) PostPublisherLinkedTermEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermEventResponse, error) {
	rsp, err := c.PostPublisherLinkedTermEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermEventResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherLinkedTermEventWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherLinkedTermEventFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherLinkedTermEventResponse, error) {
	rsp, err := c.PostPublisherLinkedTermEventWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherLinkedTermEventResponse(rsp)
}

// GetPublisherLinkedTermSubscriptionWithResponse request returning *GetPublisherLinkedTermSubscriptionResponse
func (c *ClientWithResponses) GetPublisherLinkedTermSubscriptionWithResponse(ctx context.Context, params *GetPublisherLinkedTermSubscriptionParams, reqEditors ...RequestEditorFn) (*GetPublisherLinkedTermSubscriptionResponse, error) {
	rsp, err := c.GetPublisherLinkedTermSubscription(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherLinkedTermSubscriptionResponse(rsp)
}

// GetPublisherOfferCountWithResponse request returning *GetPublisherOfferCountResponse
func (c *ClientWithResponses) GetPublisherOfferCountWithResponse(ctx context.Context, params *GetPublisherOfferCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferCountResponse, error) {
	rsp, err := c.GetPublisherOfferCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferCountResponse(rsp)
}

// PostPublisherOfferCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferCreateResponse
func (c *ClientWithResponses) PostPublisherOfferCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferCreateResponse, error) {
	rsp, err := c.PostPublisherOfferCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferCreateResponse, error) {
	rsp, err := c.PostPublisherOfferCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferCreateResponse(rsp)
}

// PostPublisherOfferDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferDeleteResponse
func (c *ClientWithResponses) PostPublisherOfferDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferDeleteResponse(rsp)
}

// GetPublisherOfferGetWithResponse request returning *GetPublisherOfferGetResponse
func (c *ClientWithResponses) GetPublisherOfferGetWithResponse(ctx context.Context, params *GetPublisherOfferGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferGetResponse, error) {
	rsp, err := c.GetPublisherOfferGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferGetResponse(rsp)
}

// GetPublisherOfferListWithResponse request returning *GetPublisherOfferListResponse
func (c *ClientWithResponses) GetPublisherOfferListWithResponse(ctx context.Context, params *GetPublisherOfferListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferListResponse, error) {
	rsp, err := c.GetPublisherOfferList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferListResponse(rsp)
}

// GetPublisherOfferTemplateArchiveWithResponse request returning *GetPublisherOfferTemplateArchiveResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateArchiveWithResponse(ctx context.Context, params *GetPublisherOfferTemplateArchiveParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateArchiveResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateArchive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateArchiveResponse(rsp)
}

// GetPublisherOfferTemplateConvertBoilerplateToTemplateWithResponse request returning *GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateConvertBoilerplateToTemplateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateConvertBoilerplateToTemplateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateConvertBoilerplateToTemplate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateConvertBoilerplateToTemplateResponse(rsp)
}

// GetPublisherOfferTemplateCountWithResponse request returning *GetPublisherOfferTemplateCountResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateCountWithResponse(ctx context.Context, params *GetPublisherOfferTemplateCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateCountResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateCountResponse(rsp)
}

// PostPublisherOfferTemplateCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateCreateResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateCreateResponse(rsp)
}

// PostPublisherOfferTemplateCreateEmptyWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateCreateEmptyResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateCreateEmptyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateEmptyResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateCreateEmptyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateCreateEmptyResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateCreateEmptyWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateCreateEmptyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateCreateEmptyResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateCreateEmptyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateCreateEmptyResponse(rsp)
}

// GetPublisherOfferTemplateDefaultCodeWithResponse request returning *GetPublisherOfferTemplateDefaultCodeResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateDefaultCodeWithResponse(ctx context.Context, params *GetPublisherOfferTemplateDefaultCodeParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateDefaultCodeResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateDefaultCode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateDefaultCodeResponse(rsp)
}

// PostPublisherOfferTemplateDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateDeleteResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateDeleteResponse(rsp)
}

// GetPublisherOfferTemplateDuplicateWithResponse request returning *GetPublisherOfferTemplateDuplicateResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateDuplicateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateDuplicateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateDuplicateResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateDuplicate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateDuplicateResponse(rsp)
}

// GetPublisherOfferTemplateGetWithResponse request returning *GetPublisherOfferTemplateGetResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateGetWithResponse(ctx context.Context, params *GetPublisherOfferTemplateGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateGetResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateGetResponse(rsp)
}

// GetPublisherOfferTemplateGetHistoryWithResponse request returning *GetPublisherOfferTemplateGetHistoryResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateGetHistoryWithResponse(ctx context.Context, params *GetPublisherOfferTemplateGetHistoryParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateGetHistoryResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateGetHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateGetHistoryResponse(rsp)
}

// GetPublisherOfferTemplateInheritedCountWithResponse request returning *GetPublisherOfferTemplateInheritedCountResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateInheritedCountWithResponse(ctx context.Context, params *GetPublisherOfferTemplateInheritedCountParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateInheritedCountResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateInheritedCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateInheritedCountResponse(rsp)
}

// PostPublisherOfferTemplateInheritedUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateInheritedUpdateResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateInheritedUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateInheritedUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateInheritedUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateInheritedUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateInheritedUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateInheritedUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateInheritedUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateInheritedUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateInheritedUpdateResponse(rsp)
}

// GetPublisherOfferTemplateListWithResponse request returning *GetPublisherOfferTemplateListResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateListWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateListResponse(rsp)
}

// GetPublisherOfferTemplateListBoilerplatesWithResponse request returning *GetPublisherOfferTemplateListBoilerplatesResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateListBoilerplatesWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListBoilerplatesParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListBoilerplatesResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateListBoilerplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateListBoilerplatesResponse(rsp)
}

// GetPublisherOfferTemplateListByCategoryWithResponse request returning *GetPublisherOfferTemplateListByCategoryResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateListByCategoryWithResponse(ctx context.Context, params *GetPublisherOfferTemplateListByCategoryParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateListByCategoryResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateListByCategory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateListByCategoryResponse(rsp)
}

// GetPublisherOfferTemplateMakeGlobalWithResponse request returning *GetPublisherOfferTemplateMakeGlobalResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateMakeGlobalWithResponse(ctx context.Context, params *GetPublisherOfferTemplateMakeGlobalParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateMakeGlobalResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateMakeGlobal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateMakeGlobalResponse(rsp)
}

// GetPublisherOfferTemplateRestoreWithResponse request returning *GetPublisherOfferTemplateRestoreResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateRestoreWithResponse(ctx context.Context, params *GetPublisherOfferTemplateRestoreParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateRestoreResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateRestore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateRestoreResponse(rsp)
}

// PostPublisherOfferTemplateUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateUpdateResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdateResponse(rsp)
}

// PostPublisherOfferTemplateUpdateContentfieldsWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateUpdateContentfieldsResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateUpdateContentfieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateContentfieldsResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdateContentfieldsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdateContentfieldsResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateUpdateContentfieldsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdateContentfieldsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdateContentfieldsResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdateContentfieldsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdateContentfieldsResponse(rsp)
}

// PostPublisherOfferTemplateUpdatefullWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateUpdatefullResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateUpdatefullWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdatefullResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdatefullWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdatefullResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateUpdatefullWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateUpdatefullFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateUpdatefullResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateUpdatefullWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateUpdatefullResponse(rsp)
}

// GetPublisherOfferTemplateVariantArchiveWithResponse request returning *GetPublisherOfferTemplateVariantArchiveResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateVariantArchiveWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantArchiveParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantArchiveResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateVariantArchive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateVariantArchiveResponse(rsp)
}

// PostPublisherOfferTemplateVariantCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateVariantCreateResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateVariantCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantCreateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateVariantCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantCreateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantCreateResponse(rsp)
}

// PostPublisherOfferTemplateVariantDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateVariantDeleteResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateVariantDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateVariantDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantDeleteResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantDeleteResponse(rsp)
}

// GetPublisherOfferTemplateVariantDuplicateWithResponse request returning *GetPublisherOfferTemplateVariantDuplicateResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateVariantDuplicateWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantDuplicateParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantDuplicateResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateVariantDuplicate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateVariantDuplicateResponse(rsp)
}

// GetPublisherOfferTemplateVariantGetWithResponse request returning *GetPublisherOfferTemplateVariantGetResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateVariantGetWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantGetParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantGetResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateVariantGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateVariantGetResponse(rsp)
}

// GetPublisherOfferTemplateVariantRestoreWithResponse request returning *GetPublisherOfferTemplateVariantRestoreResponse
func (c *ClientWithResponses) GetPublisherOfferTemplateVariantRestoreWithResponse(ctx context.Context, params *GetPublisherOfferTemplateVariantRestoreParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTemplateVariantRestoreResponse, error) {
	rsp, err := c.GetPublisherOfferTemplateVariantRestore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTemplateVariantRestoreResponse(rsp)
}

// PostPublisherOfferTemplateVariantUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTemplateVariantUpdateResponse
func (c *ClientWithResponses) PostPublisherOfferTemplateVariantUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTemplateVariantUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTemplateVariantUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTemplateVariantUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferTemplateVariantUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTemplateVariantUpdateResponse(rsp)
}

// PostPublisherOfferTermAddWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTermAddResponse
func (c *ClientWithResponses) PostPublisherOfferTermAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermAddResponse, error) {
	rsp, err := c.PostPublisherOfferTermAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermAddResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTermAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermAddResponse, error) {
	rsp, err := c.PostPublisherOfferTermAddWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermAddResponse(rsp)
}

// GetPublisherOfferTermListWithResponse request returning *GetPublisherOfferTermListResponse
func (c *ClientWithResponses) GetPublisherOfferTermListWithResponse(ctx context.Context, params *GetPublisherOfferTermListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTermListResponse, error) {
	rsp, err := c.GetPublisherOfferTermList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTermListResponse(rsp)
}

// GetPublisherOfferTermOfferListWithResponse request returning *GetPublisherOfferTermOfferListResponse
func (c *ClientWithResponses) GetPublisherOfferTermOfferListWithResponse(ctx context.Context, params *GetPublisherOfferTermOfferListParams, reqEditors ...RequestEditorFn) (*GetPublisherOfferTermOfferListResponse, error) {
	rsp, err := c.GetPublisherOfferTermOfferList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherOfferTermOfferListResponse(rsp)
}

// PostPublisherOfferTermRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTermRemoveResponse
func (c *ClientWithResponses) PostPublisherOfferTermRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermRemoveResponse, error) {
	rsp, err := c.PostPublisherOfferTermRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTermRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermRemoveResponse, error) {
	rsp, err := c.PostPublisherOfferTermRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermRemoveResponse(rsp)
}

// PostPublisherOfferTermReorderWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferTermReorderResponse
func (c *ClientWithResponses) PostPublisherOfferTermReorderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermReorderResponse, error) {
	rsp, err := c.PostPublisherOfferTermReorderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermReorderResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferTermReorderWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferTermReorderFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferTermReorderResponse, error) {
	rsp, err := c.PostPublisherOfferTermReorderWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferTermReorderResponse(rsp)
}

// PostPublisherOfferUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherOfferUpdateResponse
func (c *ClientWithResponses) PostPublisherOfferUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherOfferUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherOfferUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherOfferUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherOfferUpdateResponse, error) {
	rsp, err := c.PostPublisherOfferUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherOfferUpdateResponse(rsp)
}

// GetPublisherPaymentGetWithResponse request returning *GetPublisherPaymentGetResponse
func (c *ClientWithResponses) GetPublisherPaymentGetWithResponse(ctx context.Context, params *GetPublisherPaymentGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentGetResponse, error) {
	rsp, err := c.GetPublisherPaymentGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPaymentGetResponse(rsp)
}

// GetPublisherPaymentIsPartialRefundWithResponse request returning *GetPublisherPaymentIsPartialRefundResponse
func (c *ClientWithResponses) GetPublisherPaymentIsPartialRefundWithResponse(ctx context.Context, params *GetPublisherPaymentIsPartialRefundParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentIsPartialRefundResponse, error) {
	rsp, err := c.GetPublisherPaymentIsPartialRefund(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPaymentIsPartialRefundResponse(rsp)
}

// PostPublisherPaymentMethodAddWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodAddResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodAddResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodAddResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodAddResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodAddWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodAddResponse(rsp)
}

// PostPublisherPaymentMethodBillingAddressApplyToAllWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodBillingAddressApplyToAllResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressApplyToAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressApplyToAllResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressApplyToAllWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressApplyToAllResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressApplyToAllWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressApplyToAllFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressApplyToAllResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressApplyToAllWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressApplyToAllResponse(rsp)
}

// PostPublisherPaymentMethodBillingAddressAttachWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodBillingAddressAttachResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressAttachResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressAttachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressAttachResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressAttachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressAttachResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressAttachWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressAttachResponse(rsp)
}

// PostPublisherPaymentMethodBillingAddressDetachWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodBillingAddressDetachResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressDetachResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressDetachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressDetachResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressDetachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressDetachResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressDetachWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressDetachResponse(rsp)
}

// PostPublisherPaymentMethodBillingAddressGetWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodBillingAddressGetResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressGetResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressGetResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodBillingAddressGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodBillingAddressGetResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodBillingAddressGetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodBillingAddressGetResponse(rsp)
}

// GetPublisherPaymentMethodGetWithResponse request returning *GetPublisherPaymentMethodGetResponse
func (c *ClientWithResponses) GetPublisherPaymentMethodGetWithResponse(ctx context.Context, params *GetPublisherPaymentMethodGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentMethodGetResponse, error) {
	rsp, err := c.GetPublisherPaymentMethodGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPaymentMethodGetResponse(rsp)
}

// PostPublisherPaymentMethodGmoRefreshWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodGmoRefreshResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodGmoRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodGmoRefreshResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodGmoRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodGmoRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodGmoRefreshWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodGmoRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodGmoRefreshResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodGmoRefreshWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodGmoRefreshResponse(rsp)
}

// PostPublisherPaymentMethodRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodRemoveResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodRemoveResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodRemoveResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodRemoveResponse(rsp)
}

// PostPublisherPaymentMethodUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentMethodUpdateResponse
func (c *ClientWithResponses) PostPublisherPaymentMethodUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodUpdateResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentMethodUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentMethodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentMethodUpdateResponse, error) {
	rsp, err := c.PostPublisherPaymentMethodUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentMethodUpdateResponse(rsp)
}

// PostPublisherPaymentProviderConfigurationSetVisibilityWithBodyWithResponse request with arbitrary body returning *PostPublisherPaymentProviderConfigurationSetVisibilityResponse
func (c *ClientWithResponses) PostPublisherPaymentProviderConfigurationSetVisibilityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPaymentProviderConfigurationSetVisibilityResponse, error) {
	rsp, err := c.PostPublisherPaymentProviderConfigurationSetVisibilityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentProviderConfigurationSetVisibilityResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPaymentProviderConfigurationSetVisibilityWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPaymentProviderConfigurationSetVisibilityFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPaymentProviderConfigurationSetVisibilityResponse, error) {
	rsp, err := c.PostPublisherPaymentProviderConfigurationSetVisibilityWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPaymentProviderConfigurationSetVisibilityResponse(rsp)
}

// GetPublisherPaymentRefundWithResponse request returning *GetPublisherPaymentRefundResponse
func (c *ClientWithResponses) GetPublisherPaymentRefundWithResponse(ctx context.Context, params *GetPublisherPaymentRefundParams, reqEditors ...RequestEditorFn) (*GetPublisherPaymentRefundResponse, error) {
	rsp, err := c.GetPublisherPaymentRefund(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPaymentRefundResponse(rsp)
}

// GetPublisherPromotionCodeCountWithResponse request returning *GetPublisherPromotionCodeCountResponse
func (c *ClientWithResponses) GetPublisherPromotionCodeCountWithResponse(ctx context.Context, params *GetPublisherPromotionCodeCountParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeCountResponse, error) {
	rsp, err := c.GetPublisherPromotionCodeCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionCodeCountResponse(rsp)
}

// GetPublisherPromotionCodeCreateWithResponse request returning *GetPublisherPromotionCodeCreateResponse
func (c *ClientWithResponses) GetPublisherPromotionCodeCreateWithResponse(ctx context.Context, params *GetPublisherPromotionCodeCreateParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeCreateResponse, error) {
	rsp, err := c.GetPublisherPromotionCodeCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionCodeCreateResponse(rsp)
}

// PostPublisherPromotionCodeDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionCodeDeleteResponse
func (c *ClientWithResponses) PostPublisherPromotionCodeDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionCodeDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeDeleteResponse(rsp)
}

// PostPublisherPromotionCodeExportWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionCodeExportResponse
func (c *ClientWithResponses) PostPublisherPromotionCodeExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeExportResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeExportResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionCodeExportWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeExportFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeExportResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeExportWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeExportResponse(rsp)
}

// GetPublisherPromotionCodeGetWithResponse request returning *GetPublisherPromotionCodeGetResponse
func (c *ClientWithResponses) GetPublisherPromotionCodeGetWithResponse(ctx context.Context, params *GetPublisherPromotionCodeGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeGetResponse, error) {
	rsp, err := c.GetPublisherPromotionCodeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionCodeGetResponse(rsp)
}

// GetPublisherPromotionCodeListWithResponse request returning *GetPublisherPromotionCodeListResponse
func (c *ClientWithResponses) GetPublisherPromotionCodeListWithResponse(ctx context.Context, params *GetPublisherPromotionCodeListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCodeListResponse, error) {
	rsp, err := c.GetPublisherPromotionCodeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionCodeListResponse(rsp)
}

// PostPublisherPromotionCodeUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionCodeUpdateResponse
func (c *ClientWithResponses) PostPublisherPromotionCodeUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionCodeUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCodeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCodeUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionCodeUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCodeUpdateResponse(rsp)
}

// GetPublisherPromotionCountWithResponse request returning *GetPublisherPromotionCountResponse
func (c *ClientWithResponses) GetPublisherPromotionCountWithResponse(ctx context.Context, params *GetPublisherPromotionCountParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionCountResponse, error) {
	rsp, err := c.GetPublisherPromotionCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionCountResponse(rsp)
}

// PostPublisherPromotionCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionCreateResponse
func (c *ClientWithResponses) PostPublisherPromotionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCreateResponse, error) {
	rsp, err := c.PostPublisherPromotionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionCreateResponse, error) {
	rsp, err := c.PostPublisherPromotionCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionCreateResponse(rsp)
}

// PostPublisherPromotionDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionDeleteResponse
func (c *ClientWithResponses) PostPublisherPromotionDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionDeleteResponse(rsp)
}

// PostPublisherPromotionExistsWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionExistsResponse
func (c *ClientWithResponses) PostPublisherPromotionExistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionExistsResponse, error) {
	rsp, err := c.PostPublisherPromotionExistsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionExistsResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionExistsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionExistsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionExistsResponse, error) {
	rsp, err := c.PostPublisherPromotionExistsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionExistsResponse(rsp)
}

// GetPublisherPromotionFixedDiscountAddWithResponse request returning *GetPublisherPromotionFixedDiscountAddResponse
func (c *ClientWithResponses) GetPublisherPromotionFixedDiscountAddWithResponse(ctx context.Context, params *GetPublisherPromotionFixedDiscountAddParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionFixedDiscountAddResponse, error) {
	rsp, err := c.GetPublisherPromotionFixedDiscountAdd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionFixedDiscountAddResponse(rsp)
}

// PostPublisherPromotionFixedDiscountDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionFixedDiscountDeleteResponse
func (c *ClientWithResponses) PostPublisherPromotionFixedDiscountDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionFixedDiscountDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionFixedDiscountDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionFixedDiscountDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionFixedDiscountDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionFixedDiscountDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionFixedDiscountDeleteResponse(rsp)
}

// PostPublisherPromotionFixedDiscountUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionFixedDiscountUpdateResponse
func (c *ClientWithResponses) PostPublisherPromotionFixedDiscountUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionFixedDiscountUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionFixedDiscountUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionFixedDiscountUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionFixedDiscountUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionFixedDiscountUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionFixedDiscountUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionFixedDiscountUpdateResponse(rsp)
}

// PostPublisherPromotionGenerateWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionGenerateResponse
func (c *ClientWithResponses) PostPublisherPromotionGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionGenerateResponse, error) {
	rsp, err := c.PostPublisherPromotionGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionGenerateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionGenerateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionGenerateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionGenerateResponse, error) {
	rsp, err := c.PostPublisherPromotionGenerateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionGenerateResponse(rsp)
}

// GetPublisherPromotionGetWithResponse request returning *GetPublisherPromotionGetResponse
func (c *ClientWithResponses) GetPublisherPromotionGetWithResponse(ctx context.Context, params *GetPublisherPromotionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionGetResponse, error) {
	rsp, err := c.GetPublisherPromotionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionGetResponse(rsp)
}

// GetPublisherPromotionListWithResponse request returning *GetPublisherPromotionListResponse
func (c *ClientWithResponses) GetPublisherPromotionListWithResponse(ctx context.Context, params *GetPublisherPromotionListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionListResponse, error) {
	rsp, err := c.GetPublisherPromotionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionListResponse(rsp)
}

// PostPublisherPromotionTermAddWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionTermAddResponse
func (c *ClientWithResponses) PostPublisherPromotionTermAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermAddResponse, error) {
	rsp, err := c.PostPublisherPromotionTermAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionTermAddResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionTermAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionTermAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermAddResponse, error) {
	rsp, err := c.PostPublisherPromotionTermAddWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionTermAddResponse(rsp)
}

// PostPublisherPromotionTermDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionTermDeleteResponse
func (c *ClientWithResponses) PostPublisherPromotionTermDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionTermDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionTermDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionTermDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionTermDeleteResponse, error) {
	rsp, err := c.PostPublisherPromotionTermDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionTermDeleteResponse(rsp)
}

// GetPublisherPromotionTermListWithResponse request returning *GetPublisherPromotionTermListResponse
func (c *ClientWithResponses) GetPublisherPromotionTermListWithResponse(ctx context.Context, params *GetPublisherPromotionTermListParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionTermListResponse, error) {
	rsp, err := c.GetPublisherPromotionTermList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionTermListResponse(rsp)
}

// GetPublisherPromotionTotalWithResponse request returning *GetPublisherPromotionTotalResponse
func (c *ClientWithResponses) GetPublisherPromotionTotalWithResponse(ctx context.Context, params *GetPublisherPromotionTotalParams, reqEditors ...RequestEditorFn) (*GetPublisherPromotionTotalResponse, error) {
	rsp, err := c.GetPublisherPromotionTotal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherPromotionTotalResponse(rsp)
}

// PostPublisherPromotionUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherPromotionUpdateResponse
func (c *ClientWithResponses) PostPublisherPromotionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherPromotionUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherPromotionUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherPromotionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherPromotionUpdateResponse, error) {
	rsp, err := c.PostPublisherPromotionUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherPromotionUpdateResponse(rsp)
}

// GetPublisherResourceAttachWithResponse request returning *GetPublisherResourceAttachResponse
func (c *ClientWithResponses) GetPublisherResourceAttachWithResponse(ctx context.Context, params *GetPublisherResourceAttachParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceAttachResponse, error) {
	rsp, err := c.GetPublisherResourceAttach(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceAttachResponse(rsp)
}

// GetPublisherResourceBundleMembersWithResponse request returning *GetPublisherResourceBundleMembersResponse
func (c *ClientWithResponses) GetPublisherResourceBundleMembersWithResponse(ctx context.Context, params *GetPublisherResourceBundleMembersParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceBundleMembersResponse, error) {
	rsp, err := c.GetPublisherResourceBundleMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceBundleMembersResponse(rsp)
}

// GetPublisherResourceCountWithResponse request returning *GetPublisherResourceCountResponse
func (c *ClientWithResponses) GetPublisherResourceCountWithResponse(ctx context.Context, params *GetPublisherResourceCountParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceCountResponse, error) {
	rsp, err := c.GetPublisherResourceCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceCountResponse(rsp)
}

// PostPublisherResourceCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceCreateResponse
func (c *ClientWithResponses) PostPublisherResourceCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceCreateResponse, error) {
	rsp, err := c.PostPublisherResourceCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceCreateResponse, error) {
	rsp, err := c.PostPublisherResourceCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceCreateResponse(rsp)
}

// GetPublisherResourceCrossAppCountWithResponse request returning *GetPublisherResourceCrossAppCountResponse
func (c *ClientWithResponses) GetPublisherResourceCrossAppCountWithResponse(ctx context.Context, params *GetPublisherResourceCrossAppCountParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceCrossAppCountResponse, error) {
	rsp, err := c.GetPublisherResourceCrossAppCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceCrossAppCountResponse(rsp)
}

// PostPublisherResourceDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceDeleteResponse
func (c *ClientWithResponses) PostPublisherResourceDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceDeleteResponse, error) {
	rsp, err := c.PostPublisherResourceDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceDeleteResponse, error) {
	rsp, err := c.PostPublisherResourceDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceDeleteResponse(rsp)
}

// GetPublisherResourceDetachWithResponse request returning *GetPublisherResourceDetachResponse
func (c *ClientWithResponses) GetPublisherResourceDetachWithResponse(ctx context.Context, params *GetPublisherResourceDetachParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceDetachResponse, error) {
	rsp, err := c.GetPublisherResourceDetach(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceDetachResponse(rsp)
}

// GetPublisherResourceGetWithResponse request returning *GetPublisherResourceGetResponse
func (c *ClientWithResponses) GetPublisherResourceGetWithResponse(ctx context.Context, params *GetPublisherResourceGetParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceGetResponse, error) {
	rsp, err := c.GetPublisherResourceGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceGetResponse(rsp)
}

// GetPublisherResourceListWithResponse request returning *GetPublisherResourceListResponse
func (c *ClientWithResponses) GetPublisherResourceListWithResponse(ctx context.Context, params *GetPublisherResourceListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceListResponse, error) {
	rsp, err := c.GetPublisherResourceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceListResponse(rsp)
}

// GetPublisherResourceStatsListWithResponse request returning *GetPublisherResourceStatsListResponse
func (c *ClientWithResponses) GetPublisherResourceStatsListWithResponse(ctx context.Context, params *GetPublisherResourceStatsListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceStatsListResponse, error) {
	rsp, err := c.GetPublisherResourceStatsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceStatsListResponse(rsp)
}

// PostPublisherResourceTagAttachWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceTagAttachResponse
func (c *ClientWithResponses) PostPublisherResourceTagAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagAttachResponse, error) {
	rsp, err := c.PostPublisherResourceTagAttachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagAttachResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceTagAttachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagAttachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagAttachResponse, error) {
	rsp, err := c.PostPublisherResourceTagAttachWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagAttachResponse(rsp)
}

// GetPublisherResourceTagBundlesWithResponse request returning *GetPublisherResourceTagBundlesResponse
func (c *ClientWithResponses) GetPublisherResourceTagBundlesWithResponse(ctx context.Context, params *GetPublisherResourceTagBundlesParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagBundlesResponse, error) {
	rsp, err := c.GetPublisherResourceTagBundles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceTagBundlesResponse(rsp)
}

// GetPublisherResourceTagCreateWithResponse request returning *GetPublisherResourceTagCreateResponse
func (c *ClientWithResponses) GetPublisherResourceTagCreateWithResponse(ctx context.Context, params *GetPublisherResourceTagCreateParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagCreateResponse, error) {
	rsp, err := c.GetPublisherResourceTagCreate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceTagCreateResponse(rsp)
}

// PostPublisherResourceTagDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceTagDeleteResponse
func (c *ClientWithResponses) PostPublisherResourceTagDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDeleteResponse, error) {
	rsp, err := c.PostPublisherResourceTagDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceTagDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDeleteResponse, error) {
	rsp, err := c.PostPublisherResourceTagDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagDeleteResponse(rsp)
}

// PostPublisherResourceTagDetachWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceTagDetachResponse
func (c *ClientWithResponses) PostPublisherResourceTagDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDetachResponse, error) {
	rsp, err := c.PostPublisherResourceTagDetachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagDetachResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceTagDetachWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceTagDetachFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceTagDetachResponse, error) {
	rsp, err := c.PostPublisherResourceTagDetachWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceTagDetachResponse(rsp)
}

// GetPublisherResourceTagGetWithResponse request returning *GetPublisherResourceTagGetResponse
func (c *ClientWithResponses) GetPublisherResourceTagGetWithResponse(ctx context.Context, params *GetPublisherResourceTagGetParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagGetResponse, error) {
	rsp, err := c.GetPublisherResourceTagGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceTagGetResponse(rsp)
}

// GetPublisherResourceTagListWithResponse request returning *GetPublisherResourceTagListResponse
func (c *ClientWithResponses) GetPublisherResourceTagListWithResponse(ctx context.Context, params *GetPublisherResourceTagListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceTagListResponse, error) {
	rsp, err := c.GetPublisherResourceTagList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceTagListResponse(rsp)
}

// PostPublisherResourceUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherResourceUpdateResponse
func (c *ClientWithResponses) PostPublisherResourceUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResourceUpdateResponse, error) {
	rsp, err := c.PostPublisherResourceUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherResourceUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherResourceUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResourceUpdateResponse, error) {
	rsp, err := c.PostPublisherResourceUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResourceUpdateResponse(rsp)
}

// GetPublisherResourceUserListWithResponse request returning *GetPublisherResourceUserListResponse
func (c *ClientWithResponses) GetPublisherResourceUserListWithResponse(ctx context.Context, params *GetPublisherResourceUserListParams, reqEditors ...RequestEditorFn) (*GetPublisherResourceUserListResponse, error) {
	rsp, err := c.GetPublisherResourceUserList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResourceUserListResponse(rsp)
}

// PostPublisherScheduleCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleCreateResponse
func (c *ClientWithResponses) PostPublisherScheduleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleCreateResponse, error) {
	rsp, err := c.PostPublisherScheduleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleCreateResponse, error) {
	rsp, err := c.PostPublisherScheduleCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleCreateResponse(rsp)
}

// PostPublisherScheduleDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleDeleteResponse
func (c *ClientWithResponses) PostPublisherScheduleDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleDeleteResponse, error) {
	rsp, err := c.PostPublisherScheduleDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleDeleteResponse, error) {
	rsp, err := c.PostPublisherScheduleDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleDeleteResponse(rsp)
}

// PostPublisherScheduleGetWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleGetResponse
func (c *ClientWithResponses) PostPublisherScheduleGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleGetResponse, error) {
	rsp, err := c.PostPublisherScheduleGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleGetResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleGetResponse, error) {
	rsp, err := c.PostPublisherScheduleGetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleGetResponse(rsp)
}

// PostPublisherScheduleListWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleListResponse
func (c *ClientWithResponses) PostPublisherScheduleListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleListResponse, error) {
	rsp, err := c.PostPublisherScheduleListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleListResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleListResponse, error) {
	rsp, err := c.PostPublisherScheduleListWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleListResponse(rsp)
}

// PostPublisherSchedulePeriodAddWithBodyWithResponse request with arbitrary body returning *PostPublisherSchedulePeriodAddResponse
func (c *ClientWithResponses) PostPublisherSchedulePeriodAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodAddResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodAddResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSchedulePeriodAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodAddResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodAddWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodAddResponse(rsp)
}

// PostPublisherSchedulePeriodDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherSchedulePeriodDeleteResponse
func (c *ClientWithResponses) PostPublisherSchedulePeriodDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodDeleteResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSchedulePeriodDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodDeleteResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodDeleteResponse(rsp)
}

// PostPublisherSchedulePeriodUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherSchedulePeriodUpdateResponse
func (c *ClientWithResponses) PostPublisherSchedulePeriodUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodUpdateResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSchedulePeriodUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSchedulePeriodUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSchedulePeriodUpdateResponse, error) {
	rsp, err := c.PostPublisherSchedulePeriodUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSchedulePeriodUpdateResponse(rsp)
}

// PostPublisherScheduleTermsWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleTermsResponse
func (c *ClientWithResponses) PostPublisherScheduleTermsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleTermsResponse, error) {
	rsp, err := c.PostPublisherScheduleTermsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleTermsResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleTermsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleTermsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleTermsResponse, error) {
	rsp, err := c.PostPublisherScheduleTermsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleTermsResponse(rsp)
}

// PostPublisherScheduleUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherScheduleUpdateResponse
func (c *ClientWithResponses) PostPublisherScheduleUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherScheduleUpdateResponse, error) {
	rsp, err := c.PostPublisherScheduleUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherScheduleUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherScheduleUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherScheduleUpdateResponse, error) {
	rsp, err := c.PostPublisherScheduleUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherScheduleUpdateResponse(rsp)
}

// PostPublisherSubscriptionAddressAssignWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionAddressAssignResponse
func (c *ClientWithResponses) PostPublisherSubscriptionAddressAssignWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionAddressAssignResponse, error) {
	rsp, err := c.PostPublisherSubscriptionAddressAssignWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionAddressAssignResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionAddressAssignWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionAddressAssignFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionAddressAssignResponse, error) {
	rsp, err := c.PostPublisherSubscriptionAddressAssignWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionAddressAssignResponse(rsp)
}

// PostPublisherSubscriptionCancelWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionCancelResponse
func (c *ClientWithResponses) PostPublisherSubscriptionCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCancelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCancelResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionCancelWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCancelWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCancelResponse(rsp)
}

// PostPublisherSubscriptionCancelDeferredWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionCancelDeferredResponse
func (c *ClientWithResponses) PostPublisherSubscriptionCancelDeferredWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelDeferredResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCancelDeferredWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCancelDeferredResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionCancelDeferredWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCancelDeferredFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCancelDeferredResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCancelDeferredWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCancelDeferredResponse(rsp)
}

// PostPublisherSubscriptionCountWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionCountResponse
func (c *ClientWithResponses) PostPublisherSubscriptionCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCountResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCountResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionCountResponse, error) {
	rsp, err := c.PostPublisherSubscriptionCountWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionCountResponse(rsp)
}

// GetPublisherSubscriptionGetWithResponse request returning *GetPublisherSubscriptionGetResponse
func (c *ClientWithResponses) GetPublisherSubscriptionGetWithResponse(ctx context.Context, params *GetPublisherSubscriptionGetParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionGetResponse, error) {
	rsp, err := c.GetPublisherSubscriptionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherSubscriptionGetResponse(rsp)
}

// PostPublisherSubscriptionIsPartiallyRefundableWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionIsPartiallyRefundableResponse
func (c *ClientWithResponses) PostPublisherSubscriptionIsPartiallyRefundableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionIsPartiallyRefundableResponse, error) {
	rsp, err := c.PostPublisherSubscriptionIsPartiallyRefundableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionIsPartiallyRefundableResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionIsPartiallyRefundableWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionIsPartiallyRefundableFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionIsPartiallyRefundableResponse, error) {
	rsp, err := c.PostPublisherSubscriptionIsPartiallyRefundableWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionIsPartiallyRefundableResponse(rsp)
}

// GetPublisherSubscriptionListWithResponse request returning *GetPublisherSubscriptionListResponse
func (c *ClientWithResponses) GetPublisherSubscriptionListWithResponse(ctx context.Context, params *GetPublisherSubscriptionListParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionListResponse, error) {
	rsp, err := c.GetPublisherSubscriptionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherSubscriptionListResponse(rsp)
}

// PostPublisherSubscriptionResumeWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionResumeResponse
func (c *ClientWithResponses) PostPublisherSubscriptionResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionResumeResponse, error) {
	rsp, err := c.PostPublisherSubscriptionResumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionResumeResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionResumeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionResumeResponse, error) {
	rsp, err := c.PostPublisherSubscriptionResumeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionResumeResponse(rsp)
}

// GetPublisherSubscriptionSearchWithResponse request returning *GetPublisherSubscriptionSearchResponse
func (c *ClientWithResponses) GetPublisherSubscriptionSearchWithResponse(ctx context.Context, params *GetPublisherSubscriptionSearchParams, reqEditors ...RequestEditorFn) (*GetPublisherSubscriptionSearchResponse, error) {
	rsp, err := c.GetPublisherSubscriptionSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherSubscriptionSearchResponse(rsp)
}

// PostPublisherSubscriptionShareInviteWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareInviteResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareInviteResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareInviteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareInviteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareInviteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareInviteResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareInviteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareInviteResponse(rsp)
}

// PostPublisherSubscriptionShareListWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareListResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareListResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareListResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareListResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareListWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareListResponse(rsp)
}

// PostPublisherSubscriptionShareResendWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareResendResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareResendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareResendResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareResendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareResendResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareResendWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareResendResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareResendWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareResendResponse(rsp)
}

// PostPublisherSubscriptionShareRevokeWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareRevokeResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareRevokeResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareRevokeWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareRevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareRevokeResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareRevokeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareRevokeResponse(rsp)
}

// PostPublisherSubscriptionShareStartWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareStartResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStartResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareStartResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareStartWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStartResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareStartWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareStartResponse(rsp)
}

// PostPublisherSubscriptionShareStopWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareStopResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStopResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareStopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareStopResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareStopWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareStopResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareStopWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareStopResponse(rsp)
}

// PostPublisherSubscriptionShareUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareUpdateResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUpdateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUpdateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUpdateResponse(rsp)
}

// PostPublisherSubscriptionShareUserAddWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareUserAddResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareUserAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserAddResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUserAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUserAddResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareUserAddWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUserAddFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserAddResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUserAddWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUserAddResponse(rsp)
}

// PostPublisherSubscriptionShareUserRemoveWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareUserRemoveResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareUserRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserRemoveResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUserRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUserRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareUserRemoveWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareUserRemoveFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareUserRemoveResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareUserRemoveWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareUserRemoveResponse(rsp)
}

// PostPublisherSubscriptionShareValidateWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionShareValidateResponse
func (c *ClientWithResponses) PostPublisherSubscriptionShareValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareValidateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareValidateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionShareValidateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionShareValidateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionShareValidateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionShareValidateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionShareValidateResponse(rsp)
}

// PostPublisherSubscriptionStatsWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionStatsResponse
func (c *ClientWithResponses) PostPublisherSubscriptionStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionStatsResponse, error) {
	rsp, err := c.PostPublisherSubscriptionStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionStatsResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionStatsWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionStatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionStatsResponse, error) {
	rsp, err := c.PostPublisherSubscriptionStatsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionStatsResponse(rsp)
}

// PostPublisherSubscriptionUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherSubscriptionUpdateResponse
func (c *ClientWithResponses) PostPublisherSubscriptionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionUpdateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherSubscriptionUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherSubscriptionUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherSubscriptionUpdateResponse, error) {
	rsp, err := c.PostPublisherSubscriptionUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherSubscriptionUpdateResponse(rsp)
}

// PostPublisherTeamListWithBodyWithResponse request with arbitrary body returning *PostPublisherTeamListResponse
func (c *ClientWithResponses) PostPublisherTeamListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTeamListResponse, error) {
	rsp, err := c.PostPublisherTeamListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTeamListResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTeamListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTeamListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTeamListResponse, error) {
	rsp, err := c.PostPublisherTeamListWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTeamListResponse(rsp)
}

// GetPublisherTermApplicableWithResponse request returning *GetPublisherTermApplicableResponse
func (c *ClientWithResponses) GetPublisherTermApplicableWithResponse(ctx context.Context, params *GetPublisherTermApplicableParams, reqEditors ...RequestEditorFn) (*GetPublisherTermApplicableResponse, error) {
	rsp, err := c.GetPublisherTermApplicable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherTermApplicableResponse(rsp)
}

// PostPublisherTermChangeCanWithBodyWithResponse request with arbitrary body returning *PostPublisherTermChangeCanResponse
func (c *ClientWithResponses) PostPublisherTermChangeCanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCanResponse, error) {
	rsp, err := c.PostPublisherTermChangeCanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeCanResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermChangeCanWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeCanFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCanResponse, error) {
	rsp, err := c.PostPublisherTermChangeCanWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeCanResponse(rsp)
}

// PostPublisherTermChangeCancelWithBodyWithResponse request with arbitrary body returning *PostPublisherTermChangeCancelResponse
func (c *ClientWithResponses) PostPublisherTermChangeCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCancelResponse, error) {
	rsp, err := c.PostPublisherTermChangeCancelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeCancelResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermChangeCancelWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeCancelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeCancelResponse, error) {
	rsp, err := c.PostPublisherTermChangeCancelWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeCancelResponse(rsp)
}

// PostPublisherTermChangeDoWithBodyWithResponse request with arbitrary body returning *PostPublisherTermChangeDoResponse
func (c *ClientWithResponses) PostPublisherTermChangeDoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeDoResponse, error) {
	rsp, err := c.PostPublisherTermChangeDoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeDoResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermChangeDoWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeDoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeDoResponse, error) {
	rsp, err := c.PostPublisherTermChangeDoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeDoResponse(rsp)
}

// PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBodyWithResponse request with arbitrary body returning *PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse
func (c *ClientWithResponses) PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse, error) {
	rsp, err := c.PostPublisherTermChangeGetSubscriptionUpgradeStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeGetSubscriptionUpgradeStatusResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermChangeGetSubscriptionUpgradeStatusWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeGetSubscriptionUpgradeStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse, error) {
	rsp, err := c.PostPublisherTermChangeGetSubscriptionUpgradeStatusWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeGetSubscriptionUpgradeStatusResponse(rsp)
}

// PostPublisherTermChangeOptionCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermChangeOptionCreateResponse
func (c *ClientWithResponses) PostPublisherTermChangeOptionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeOptionCreateResponse, error) {
	rsp, err := c.PostPublisherTermChangeOptionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeOptionCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermChangeOptionCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermChangeOptionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermChangeOptionCreateResponse, error) {
	rsp, err := c.PostPublisherTermChangeOptionCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermChangeOptionCreateResponse(rsp)
}

// GetPublisherTermCountWithResponse request returning *GetPublisherTermCountResponse
func (c *ClientWithResponses) GetPublisherTermCountWithResponse(ctx context.Context, params *GetPublisherTermCountParams, reqEditors ...RequestEditorFn) (*GetPublisherTermCountResponse, error) {
	rsp, err := c.GetPublisherTermCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherTermCountResponse(rsp)
}

// PostPublisherTermCustomCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermCustomCreateResponse
func (c *ClientWithResponses) PostPublisherTermCustomCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomCreateResponse, error) {
	rsp, err := c.PostPublisherTermCustomCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermCustomCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermCustomCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermCustomCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomCreateResponse, error) {
	rsp, err := c.PostPublisherTermCustomCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermCustomCreateResponse(rsp)
}

// PostPublisherTermCustomUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermCustomUpdateResponse
func (c *ClientWithResponses) PostPublisherTermCustomUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomUpdateResponse, error) {
	rsp, err := c.PostPublisherTermCustomUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermCustomUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermCustomUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermCustomUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermCustomUpdateResponse, error) {
	rsp, err := c.PostPublisherTermCustomUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermCustomUpdateResponse(rsp)
}

// PostPublisherTermDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherTermDeleteResponse
func (c *ClientWithResponses) PostPublisherTermDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDeleteResponse, error) {
	rsp, err := c.PostPublisherTermDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDeleteResponse, error) {
	rsp, err := c.PostPublisherTermDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDeleteResponse(rsp)
}

// PostPublisherTermDynamicCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermDynamicCreateResponse
func (c *ClientWithResponses) PostPublisherTermDynamicCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicCreateResponse, error) {
	rsp, err := c.PostPublisherTermDynamicCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDynamicCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermDynamicCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDynamicCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicCreateResponse, error) {
	rsp, err := c.PostPublisherTermDynamicCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDynamicCreateResponse(rsp)
}

// PostPublisherTermDynamicUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermDynamicUpdateResponse
func (c *ClientWithResponses) PostPublisherTermDynamicUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicUpdateResponse, error) {
	rsp, err := c.PostPublisherTermDynamicUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDynamicUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermDynamicUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermDynamicUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermDynamicUpdateResponse, error) {
	rsp, err := c.PostPublisherTermDynamicUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermDynamicUpdateResponse(rsp)
}

// PostPublisherTermExternalCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermExternalCreateResponse
func (c *ClientWithResponses) PostPublisherTermExternalCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalCreateResponse, error) {
	rsp, err := c.PostPublisherTermExternalCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermExternalCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermExternalCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermExternalCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalCreateResponse, error) {
	rsp, err := c.PostPublisherTermExternalCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermExternalCreateResponse(rsp)
}

// PostPublisherTermExternalUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermExternalUpdateResponse
func (c *ClientWithResponses) PostPublisherTermExternalUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalUpdateResponse, error) {
	rsp, err := c.PostPublisherTermExternalUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermExternalUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermExternalUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermExternalUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermExternalUpdateResponse, error) {
	rsp, err := c.PostPublisherTermExternalUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermExternalUpdateResponse(rsp)
}

// GetPublisherTermGetWithResponse request returning *GetPublisherTermGetResponse
func (c *ClientWithResponses) GetPublisherTermGetWithResponse(ctx context.Context, params *GetPublisherTermGetParams, reqEditors ...RequestEditorFn) (*GetPublisherTermGetResponse, error) {
	rsp, err := c.GetPublisherTermGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherTermGetResponse(rsp)
}

// PostPublisherTermGiftCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermGiftCreateResponse
func (c *ClientWithResponses) PostPublisherTermGiftCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftCreateResponse, error) {
	rsp, err := c.PostPublisherTermGiftCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermGiftCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermGiftCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermGiftCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftCreateResponse, error) {
	rsp, err := c.PostPublisherTermGiftCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermGiftCreateResponse(rsp)
}

// PostPublisherTermGiftUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermGiftUpdateResponse
func (c *ClientWithResponses) PostPublisherTermGiftUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftUpdateResponse, error) {
	rsp, err := c.PostPublisherTermGiftUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermGiftUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermGiftUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermGiftUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermGiftUpdateResponse, error) {
	rsp, err := c.PostPublisherTermGiftUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermGiftUpdateResponse(rsp)
}

// PostPublisherTermPaymentCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermPaymentCreateResponse
func (c *ClientWithResponses) PostPublisherTermPaymentCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentCreateResponse, error) {
	rsp, err := c.PostPublisherTermPaymentCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermPaymentCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermPaymentCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermPaymentCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentCreateResponse, error) {
	rsp, err := c.PostPublisherTermPaymentCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermPaymentCreateResponse(rsp)
}

// PostPublisherTermPaymentUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermPaymentUpdateResponse
func (c *ClientWithResponses) PostPublisherTermPaymentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentUpdateResponse, error) {
	rsp, err := c.PostPublisherTermPaymentUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermPaymentUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermPaymentUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermPaymentUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermPaymentUpdateResponse, error) {
	rsp, err := c.PostPublisherTermPaymentUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermPaymentUpdateResponse(rsp)
}

// PostPublisherTermRegistrationCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermRegistrationCreateResponse
func (c *ClientWithResponses) PostPublisherTermRegistrationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationCreateResponse, error) {
	rsp, err := c.PostPublisherTermRegistrationCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermRegistrationCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermRegistrationCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermRegistrationCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationCreateResponse, error) {
	rsp, err := c.PostPublisherTermRegistrationCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermRegistrationCreateResponse(rsp)
}

// PostPublisherTermRegistrationUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherTermRegistrationUpdateResponse
func (c *ClientWithResponses) PostPublisherTermRegistrationUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationUpdateResponse, error) {
	rsp, err := c.PostPublisherTermRegistrationUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermRegistrationUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherTermRegistrationUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherTermRegistrationUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherTermRegistrationUpdateResponse, error) {
	rsp, err := c.PostPublisherTermRegistrationUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherTermRegistrationUpdateResponse(rsp)
}

// GetPublisherTermStatsListWithResponse request returning *GetPublisherTermStatsListResponse
func (c *ClientWithResponses) GetPublisherTermStatsListWithResponse(ctx context.Context, params *GetPublisherTermStatsListParams, reqEditors ...RequestEditorFn) (*GetPublisherTermStatsListResponse, error) {
	rsp, err := c.GetPublisherTermStatsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherTermStatsListResponse(rsp)
}

// GetPublisherTestUserRefWithResponse request returning *GetPublisherTestUserRefResponse
func (c *ClientWithResponses) GetPublisherTestUserRefWithResponse(ctx context.Context, params *GetPublisherTestUserRefParams, reqEditors ...RequestEditorFn) (*GetPublisherTestUserRefResponse, error) {
	rsp, err := c.GetPublisherTestUserRef(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherTestUserRefResponse(rsp)
}

// PostPublisherUserAccessActiveCountWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAccessActiveCountResponse
func (c *ClientWithResponses) PostPublisherUserAccessActiveCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessActiveCountResponse, error) {
	rsp, err := c.PostPublisherUserAccessActiveCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAccessActiveCountResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAccessActiveCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAccessActiveCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessActiveCountResponse, error) {
	rsp, err := c.PostPublisherUserAccessActiveCountWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAccessActiveCountResponse(rsp)
}

// GetPublisherUserAccessCheckWithResponse request returning *GetPublisherUserAccessCheckResponse
func (c *ClientWithResponses) GetPublisherUserAccessCheckWithResponse(ctx context.Context, params *GetPublisherUserAccessCheckParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessCheckResponse, error) {
	rsp, err := c.GetPublisherUserAccessCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAccessCheckResponse(rsp)
}

// GetPublisherUserAccessGrantWithResponse request returning *GetPublisherUserAccessGrantResponse
func (c *ClientWithResponses) GetPublisherUserAccessGrantWithResponse(ctx context.Context, params *GetPublisherUserAccessGrantParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessGrantResponse, error) {
	rsp, err := c.GetPublisherUserAccessGrant(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAccessGrantResponse(rsp)
}

// GetPublisherUserAccessGrantToUsersWithResponse request returning *GetPublisherUserAccessGrantToUsersResponse
func (c *ClientWithResponses) GetPublisherUserAccessGrantToUsersWithResponse(ctx context.Context, params *GetPublisherUserAccessGrantToUsersParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessGrantToUsersResponse, error) {
	rsp, err := c.GetPublisherUserAccessGrantToUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAccessGrantToUsersResponse(rsp)
}

// GetPublisherUserAccessListWithResponse request returning *GetPublisherUserAccessListResponse
func (c *ClientWithResponses) GetPublisherUserAccessListWithResponse(ctx context.Context, params *GetPublisherUserAccessListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessListResponse, error) {
	rsp, err := c.GetPublisherUserAccessList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAccessListResponse(rsp)
}

// GetPublisherUserAccessRevokeWithResponse request returning *GetPublisherUserAccessRevokeResponse
func (c *ClientWithResponses) GetPublisherUserAccessRevokeWithResponse(ctx context.Context, params *GetPublisherUserAccessRevokeParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAccessRevokeResponse, error) {
	rsp, err := c.GetPublisherUserAccessRevoke(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAccessRevokeResponse(rsp)
}

// PostPublisherUserAccessUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAccessUpdateResponse
func (c *ClientWithResponses) PostPublisherUserAccessUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessUpdateResponse, error) {
	rsp, err := c.PostPublisherUserAccessUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAccessUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAccessUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAccessUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAccessUpdateResponse, error) {
	rsp, err := c.PostPublisherUserAccessUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAccessUpdateResponse(rsp)
}

// PostPublisherUserAddressCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAddressCreateResponse
func (c *ClientWithResponses) PostPublisherUserAddressCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressCreateResponse, error) {
	rsp, err := c.PostPublisherUserAddressCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAddressCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressCreateResponse, error) {
	rsp, err := c.PostPublisherUserAddressCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressCreateResponse(rsp)
}

// PostPublisherUserAddressDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAddressDeleteResponse
func (c *ClientWithResponses) PostPublisherUserAddressDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressDeleteResponse, error) {
	rsp, err := c.PostPublisherUserAddressDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAddressDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressDeleteResponse, error) {
	rsp, err := c.PostPublisherUserAddressDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressDeleteResponse(rsp)
}

// PostPublisherUserAddressHistoryWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAddressHistoryResponse
func (c *ClientWithResponses) PostPublisherUserAddressHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressHistoryResponse, error) {
	rsp, err := c.PostPublisherUserAddressHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAddressHistoryWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressHistoryResponse, error) {
	rsp, err := c.PostPublisherUserAddressHistoryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressHistoryResponse(rsp)
}

// GetPublisherUserAddressListWithResponse request returning *GetPublisherUserAddressListResponse
func (c *ClientWithResponses) GetPublisherUserAddressListWithResponse(ctx context.Context, params *GetPublisherUserAddressListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserAddressListResponse, error) {
	rsp, err := c.GetPublisherUserAddressList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserAddressListResponse(rsp)
}

// PostPublisherUserAddressUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAddressUpdateResponse
func (c *ClientWithResponses) PostPublisherUserAddressUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressUpdateResponse, error) {
	rsp, err := c.PostPublisherUserAddressUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAddressUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAddressUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAddressUpdateResponse, error) {
	rsp, err := c.PostPublisherUserAddressUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAddressUpdateResponse(rsp)
}

// PostPublisherUserAppCountWithBodyWithResponse request with arbitrary body returning *PostPublisherUserAppCountResponse
func (c *ClientWithResponses) PostPublisherUserAppCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserAppCountResponse, error) {
	rsp, err := c.PostPublisherUserAppCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAppCountResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserAppCountWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserAppCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserAppCountResponse, error) {
	rsp, err := c.PostPublisherUserAppCountWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserAppCountResponse(rsp)
}

// PostPublisherUserBillingAddressCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressCreateResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressCreateResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressCreateResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressCreateResponse(rsp)
}

// PostPublisherUserBillingAddressDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressDeleteResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressDeleteResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressDeleteResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressDeleteResponse(rsp)
}

// PostPublisherUserBillingAddressGetWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressGetResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetResponse(rsp)
}

// PostPublisherUserBillingAddressGetByPaymentWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressGetByPaymentResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressGetByPaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetByPaymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetByPaymentResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressGetByPaymentWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetByPaymentWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetByPaymentResponse(rsp)
}

// PostPublisherUserBillingAddressGetByPaymentInfoWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressGetByPaymentInfoResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressGetByPaymentInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentInfoResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetByPaymentInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetByPaymentInfoResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressGetByPaymentInfoWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressGetByPaymentInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressGetByPaymentInfoResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressGetByPaymentInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressGetByPaymentInfoResponse(rsp)
}

// PostPublisherUserBillingAddressListWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBillingAddressListResponse
func (c *ClientWithResponses) PostPublisherUserBillingAddressListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressListResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressListResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBillingAddressListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBillingAddressListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBillingAddressListResponse, error) {
	rsp, err := c.PostPublisherUserBillingAddressListWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBillingAddressListResponse(rsp)
}

// PostPublisherUserBulkImportDeleteWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBulkImportDeleteResponse
func (c *ClientWithResponses) PostPublisherUserBulkImportDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDeleteResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBulkImportDeleteWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDeleteResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportDeleteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportDeleteResponse(rsp)
}

// PostPublisherUserBulkImportDownloadWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBulkImportDownloadResponse
func (c *ClientWithResponses) PostPublisherUserBulkImportDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDownloadResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportDownloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBulkImportDownloadWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportDownloadFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportDownloadResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportDownloadWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportDownloadResponse(rsp)
}

// PostPublisherUserBulkImportListCompletedWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBulkImportListCompletedResponse
func (c *ClientWithResponses) PostPublisherUserBulkImportListCompletedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListCompletedResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportListCompletedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportListCompletedResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBulkImportListCompletedWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportListCompletedFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListCompletedResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportListCompletedWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportListCompletedResponse(rsp)
}

// PostPublisherUserBulkImportListProcessingWithBodyWithResponse request with arbitrary body returning *PostPublisherUserBulkImportListProcessingResponse
func (c *ClientWithResponses) PostPublisherUserBulkImportListProcessingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListProcessingResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportListProcessingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportListProcessingResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserBulkImportListProcessingWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserBulkImportListProcessingFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserBulkImportListProcessingResponse, error) {
	rsp, err := c.PostPublisherUserBulkImportListProcessingWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserBulkImportListProcessingResponse(rsp)
}

// PostPublisherUserCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserCreateResponse
func (c *ClientWithResponses) PostPublisherUserCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserCreateResponse, error) {
	rsp, err := c.PostPublisherUserCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserCreateResponse, error) {
	rsp, err := c.PostPublisherUserCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserCreateResponse(rsp)
}

// PostPublisherUserDisableWithBodyWithResponse request with arbitrary body returning *PostPublisherUserDisableResponse
func (c *ClientWithResponses) PostPublisherUserDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserDisableResponse, error) {
	rsp, err := c.PostPublisherUserDisableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserDisableResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserDisableWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserDisableFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserDisableResponse, error) {
	rsp, err := c.PostPublisherUserDisableWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserDisableResponse(rsp)
}

// GetPublisherUserEmailGetWithResponse request returning *GetPublisherUserEmailGetResponse
func (c *ClientWithResponses) GetPublisherUserEmailGetWithResponse(ctx context.Context, params *GetPublisherUserEmailGetParams, reqEditors ...RequestEditorFn) (*GetPublisherUserEmailGetResponse, error) {
	rsp, err := c.GetPublisherUserEmailGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserEmailGetResponse(rsp)
}

// GetPublisherUserEmailListWithResponse request returning *GetPublisherUserEmailListResponse
func (c *ClientWithResponses) GetPublisherUserEmailListWithResponse(ctx context.Context, params *GetPublisherUserEmailListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserEmailListResponse, error) {
	rsp, err := c.GetPublisherUserEmailList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserEmailListResponse(rsp)
}

// PostPublisherUserGetWithBodyWithResponse request with arbitrary body returning *PostPublisherUserGetResponse
func (c *ClientWithResponses) PostPublisherUserGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserGetResponse, error) {
	rsp, err := c.PostPublisherUserGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserGetResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserGetWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserGetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserGetResponse, error) {
	rsp, err := c.PostPublisherUserGetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserGetResponse(rsp)
}

// PostPublisherUserListWithBodyWithResponse request with arbitrary body returning *PostPublisherUserListResponse
func (c *ClientWithResponses) PostPublisherUserListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserListResponse, error) {
	rsp, err := c.PostPublisherUserListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserListResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserListWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserListFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserListResponse, error) {
	rsp, err := c.PostPublisherUserListWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserListResponse(rsp)
}

// PostPublisherUserListAccessesWithBodyWithResponse request with arbitrary body returning *PostPublisherUserListAccessesResponse
func (c *ClientWithResponses) PostPublisherUserListAccessesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserListAccessesResponse, error) {
	rsp, err := c.PostPublisherUserListAccessesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserListAccessesResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserListAccessesWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserListAccessesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserListAccessesResponse, error) {
	rsp, err := c.PostPublisherUserListAccessesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserListAccessesResponse(rsp)
}

// PostPublisherUserNoteCreateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserNoteCreateResponse
func (c *ClientWithResponses) PostPublisherUserNoteCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteCreateResponse, error) {
	rsp, err := c.PostPublisherUserNoteCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserNoteCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserNoteCreateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserNoteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteCreateResponse, error) {
	rsp, err := c.PostPublisherUserNoteCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserNoteCreateResponse(rsp)
}

// GetPublisherUserNoteGetWithResponse request returning *GetPublisherUserNoteGetResponse
func (c *ClientWithResponses) GetPublisherUserNoteGetWithResponse(ctx context.Context, params *GetPublisherUserNoteGetParams, reqEditors ...RequestEditorFn) (*GetPublisherUserNoteGetResponse, error) {
	rsp, err := c.GetPublisherUserNoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserNoteGetResponse(rsp)
}

// GetPublisherUserNoteListWithResponse request returning *GetPublisherUserNoteListResponse
func (c *ClientWithResponses) GetPublisherUserNoteListWithResponse(ctx context.Context, params *GetPublisherUserNoteListParams, reqEditors ...RequestEditorFn) (*GetPublisherUserNoteListResponse, error) {
	rsp, err := c.GetPublisherUserNoteList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherUserNoteListResponse(rsp)
}

// PostPublisherUserNoteUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserNoteUpdateResponse
func (c *ClientWithResponses) PostPublisherUserNoteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteUpdateResponse, error) {
	rsp, err := c.PostPublisherUserNoteUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserNoteUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserNoteUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserNoteUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserNoteUpdateResponse, error) {
	rsp, err := c.PostPublisherUserNoteUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserNoteUpdateResponse(rsp)
}

// PostPublisherUserRegisterWithBodyWithResponse request with arbitrary body returning *PostPublisherUserRegisterResponse
func (c *ClientWithResponses) PostPublisherUserRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserRegisterResponse, error) {
	rsp, err := c.PostPublisherUserRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserRegisterWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserRegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserRegisterResponse, error) {
	rsp, err := c.PostPublisherUserRegisterWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserRegisterResponse(rsp)
}

// PostPublisherUserSearchWithBodyWithResponse request with arbitrary body returning *PostPublisherUserSearchResponse
func (c *ClientWithResponses) PostPublisherUserSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserSearchResponse, error) {
	rsp, err := c.PostPublisherUserSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserSearchResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserSearchWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserSearchFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserSearchResponse, error) {
	rsp, err := c.PostPublisherUserSearchWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserSearchResponse(rsp)
}

// PostPublisherUserUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherUserUpdateResponse
func (c *ClientWithResponses) PostPublisherUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherUserUpdateResponse, error) {
	rsp, err := c.PostPublisherUserUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherUserUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherUserUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherUserUpdateResponse, error) {
	rsp, err := c.PostPublisherUserUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherUserUpdateResponse(rsp)
}

// GetPublisherVoucherGetWithResponse request returning *GetPublisherVoucherGetResponse
func (c *ClientWithResponses) GetPublisherVoucherGetWithResponse(ctx context.Context, params *GetPublisherVoucherGetParams, reqEditors ...RequestEditorFn) (*GetPublisherVoucherGetResponse, error) {
	rsp, err := c.GetPublisherVoucherGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherVoucherGetResponse(rsp)
}

// GetPublisherVoucherListWithResponse request returning *GetPublisherVoucherListResponse
func (c *ClientWithResponses) GetPublisherVoucherListWithResponse(ctx context.Context, params *GetPublisherVoucherListParams, reqEditors ...RequestEditorFn) (*GetPublisherVoucherListResponse, error) {
	rsp, err := c.GetPublisherVoucherList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherVoucherListResponse(rsp)
}

// PostPublisherVoucherResendWithBodyWithResponse request with arbitrary body returning *PostPublisherVoucherResendResponse
func (c *ClientWithResponses) PostPublisherVoucherResendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherVoucherResendResponse, error) {
	rsp, err := c.PostPublisherVoucherResendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherVoucherResendResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherVoucherResendWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherVoucherResendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherVoucherResendResponse, error) {
	rsp, err := c.PostPublisherVoucherResendWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherVoucherResendResponse(rsp)
}

// GetPublisherWebhookEventsWithResponse request returning *GetPublisherWebhookEventsResponse
func (c *ClientWithResponses) GetPublisherWebhookEventsWithResponse(ctx context.Context, params *GetPublisherWebhookEventsParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookEventsResponse, error) {
	rsp, err := c.GetPublisherWebhookEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookEventsResponse(rsp)
}

// GetPublisherWebhookGetWithResponse request returning *GetPublisherWebhookGetResponse
func (c *ClientWithResponses) GetPublisherWebhookGetWithResponse(ctx context.Context, params *GetPublisherWebhookGetParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookGetResponse, error) {
	rsp, err := c.GetPublisherWebhookGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookGetResponse(rsp)
}

// GetPublisherWebhookResponseListWithResponse request returning *GetPublisherWebhookResponseListResponse
func (c *ClientWithResponses) GetPublisherWebhookResponseListWithResponse(ctx context.Context, params *GetPublisherWebhookResponseListParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookResponseListResponse, error) {
	rsp, err := c.GetPublisherWebhookResponseList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookResponseListResponse(rsp)
}

// GetPublisherWebhookResponseResendWithResponse request returning *GetPublisherWebhookResponseResendResponse
func (c *ClientWithResponses) GetPublisherWebhookResponseResendWithResponse(ctx context.Context, params *GetPublisherWebhookResponseResendParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookResponseResendResponse, error) {
	rsp, err := c.GetPublisherWebhookResponseResend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookResponseResendResponse(rsp)
}

// GetPublisherWebhookSettingsWithResponse request returning *GetPublisherWebhookSettingsResponse
func (c *ClientWithResponses) GetPublisherWebhookSettingsWithResponse(ctx context.Context, params *GetPublisherWebhookSettingsParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookSettingsResponse, error) {
	rsp, err := c.GetPublisherWebhookSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookSettingsResponse(rsp)
}

// PostPublisherWebhookSettingsUpdateWithBodyWithResponse request with arbitrary body returning *PostPublisherWebhookSettingsUpdateResponse
func (c *ClientWithResponses) PostPublisherWebhookSettingsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherWebhookSettingsUpdateResponse, error) {
	rsp, err := c.PostPublisherWebhookSettingsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherWebhookSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherWebhookSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, body PostPublisherWebhookSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherWebhookSettingsUpdateResponse, error) {
	rsp, err := c.PostPublisherWebhookSettingsUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherWebhookSettingsUpdateResponse(rsp)
}

// GetPublisherWebhookSkipWithResponse request returning *GetPublisherWebhookSkipResponse
func (c *ClientWithResponses) GetPublisherWebhookSkipWithResponse(ctx context.Context, params *GetPublisherWebhookSkipParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookSkipResponse, error) {
	rsp, err := c.GetPublisherWebhookSkip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookSkipResponse(rsp)
}

// GetPublisherWebhookStatusWithResponse request returning *GetPublisherWebhookStatusResponse
func (c *ClientWithResponses) GetPublisherWebhookStatusWithResponse(ctx context.Context, params *GetPublisherWebhookStatusParams, reqEditors ...RequestEditorFn) (*GetPublisherWebhookStatusResponse, error) {
	rsp, err := c.GetPublisherWebhookStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherWebhookStatusResponse(rsp)
}

// ParseGetPublisherAdblockerGetResponse parses an HTTP response from a GetPublisherAdblockerGetWithResponse call
func ParseGetPublisherAdblockerGetResponse(rsp *http.Response) (*GetPublisherAdblockerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAdblockerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAfcConfigurationDeleteResponse parses an HTTP response from a GetPublisherAfcConfigurationDeleteWithResponse call
func ParseGetPublisherAfcConfigurationDeleteResponse(rsp *http.Response) (*GetPublisherAfcConfigurationDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAfcConfigurationDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherAfcConfigurationGetResponse parses an HTTP response from a GetPublisherAfcConfigurationGetWithResponse call
func ParseGetPublisherAfcConfigurationGetResponse(rsp *http.Response) (*GetPublisherAfcConfigurationGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAfcConfigurationGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAfcConfigurationHealthCheckResponse parses an HTTP response from a GetPublisherAfcConfigurationHealthCheckWithResponse call
func ParseGetPublisherAfcConfigurationHealthCheckResponse(rsp *http.Response) (*GetPublisherAfcConfigurationHealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAfcConfigurationHealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherAfcConfigurationSaveResponse parses an HTTP response from a GetPublisherAfcConfigurationSaveWithResponse call
func ParseGetPublisherAfcConfigurationSaveResponse(rsp *http.Response) (*GetPublisherAfcConfigurationSaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAfcConfigurationSaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAppApiTokenGenerateResponse parses an HTTP response from a GetPublisherAppApiTokenGenerateWithResponse call
func ParseGetPublisherAppApiTokenGenerateResponse(rsp *http.Response) (*GetPublisherAppApiTokenGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAppApiTokenGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherAppCurrenciesResponse parses an HTTP response from a GetPublisherAppCurrenciesWithResponse call
func ParseGetPublisherAppCurrenciesResponse(rsp *http.Response) (*GetPublisherAppCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAppCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAppFeaturesGetResponse parses an HTTP response from a GetPublisherAppFeaturesGetWithResponse call
func ParseGetPublisherAppFeaturesGetResponse(rsp *http.Response) (*GetPublisherAppFeaturesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAppFeaturesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAppGetResponse parses an HTTP response from a GetPublisherAppGetWithResponse call
func ParseGetPublisherAppGetResponse(rsp *http.Response) (*GetPublisherAppGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAppGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherAppListResponse parses an HTTP response from a GetPublisherAppListWithResponse call
func ParseGetPublisherAppListResponse(rsp *http.Response) (*GetPublisherAppListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherAppListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConsentEntryListResponse parses an HTTP response from a GetPublisherConsentEntryListWithResponse call
func ParseGetPublisherConsentEntryListResponse(rsp *http.Response) (*GetPublisherConsentEntryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConsentEntryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConsentGetResponse parses an HTTP response from a GetPublisherConsentGetWithResponse call
func ParseGetPublisherConsentGetResponse(rsp *http.Response) (*GetPublisherConsentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConsentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConsentListResponse parses an HTTP response from a GetPublisherConsentListWithResponse call
func ParseGetPublisherConsentListResponse(rsp *http.Response) (*GetPublisherConsentListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConsentListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConversionCountResponse parses an HTTP response from a GetPublisherConversionCountWithResponse call
func ParseGetPublisherConversionCountResponse(rsp *http.Response) (*GetPublisherConversionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConversionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherConversionCustomCreateResponse parses an HTTP response from a PostPublisherConversionCustomCreateWithResponse call
func ParsePostPublisherConversionCustomCreateResponse(rsp *http.Response) (*PostPublisherConversionCustomCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherConversionCustomCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConversionDataGetResponse parses an HTTP response from a GetPublisherConversionDataGetWithResponse call
func ParseGetPublisherConversionDataGetResponse(rsp *http.Response) (*GetPublisherConversionDataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConversionDataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherConversionExternalCreateResponse parses an HTTP response from a PostPublisherConversionExternalCreateWithResponse call
func ParsePostPublisherConversionExternalCreateResponse(rsp *http.Response) (*PostPublisherConversionExternalCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherConversionExternalCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConversionGetResponse parses an HTTP response from a GetPublisherConversionGetWithResponse call
func ParseGetPublisherConversionGetResponse(rsp *http.Response) (*GetPublisherConversionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConversionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConversionLastAccessResponse parses an HTTP response from a GetPublisherConversionLastAccessWithResponse call
func ParseGetPublisherConversionLastAccessResponse(rsp *http.Response) (*GetPublisherConversionLastAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConversionLastAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherConversionListResponse parses an HTTP response from a GetPublisherConversionListWithResponse call
func ParseGetPublisherConversionListResponse(rsp *http.Response) (*GetPublisherConversionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherConversionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherConversionLogResponse parses an HTTP response from a PostPublisherConversionLogWithResponse call
func ParsePostPublisherConversionLogResponse(rsp *http.Response) (*PostPublisherConversionLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherConversionLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherConversionRegistrationCreateResponse parses an HTTP response from a PostPublisherConversionRegistrationCreateWithResponse call
func ParsePostPublisherConversionRegistrationCreateResponse(rsp *http.Response) (*PostPublisherConversionRegistrationCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherConversionRegistrationCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExperienceMetadataListResponse parses an HTTP response from a GetPublisherExperienceMetadataListWithResponse call
func ParseGetPublisherExperienceMetadataListResponse(rsp *http.Response) (*GetPublisherExperienceMetadataListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExperienceMetadataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateAamDailyResponse parses an HTTP response from a PostPublisherExportCreateAamDailyWithResponse call
func ParsePostPublisherExportCreateAamDailyResponse(rsp *http.Response) (*PostPublisherExportCreateAamDailyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateAamDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateAamMonthlyResponse parses an HTTP response from a PostPublisherExportCreateAamMonthlyWithResponse call
func ParsePostPublisherExportCreateAamMonthlyResponse(rsp *http.Response) (*PostPublisherExportCreateAamMonthlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateAamMonthlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateAamMonthlyV2Response parses an HTTP response from a PostPublisherExportCreateAamMonthlyV2WithResponse call
func ParsePostPublisherExportCreateAamMonthlyV2Response(rsp *http.Response) (*PostPublisherExportCreateAamMonthlyV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateAamMonthlyV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportCreateAccessReportExportResponse parses an HTTP response from a GetPublisherExportCreateAccessReportExportWithResponse call
func ParseGetPublisherExportCreateAccessReportExportResponse(rsp *http.Response) (*GetPublisherExportCreateAccessReportExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportCreateAccessReportExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportCreateAccessReportExportV2Response parses an HTTP response from a GetPublisherExportCreateAccessReportExportV2WithResponse call
func ParseGetPublisherExportCreateAccessReportExportV2Response(rsp *http.Response) (*GetPublisherExportCreateAccessReportExportV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportCreateAccessReportExportV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportCreateDailyActivityReportExportResponse parses an HTTP response from a GetPublisherExportCreateDailyActivityReportExportWithResponse call
func ParseGetPublisherExportCreateDailyActivityReportExportResponse(rsp *http.Response) (*GetPublisherExportCreateDailyActivityReportExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportCreateDailyActivityReportExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportCreateMonthlyActivityReportExportResponse parses an HTTP response from a GetPublisherExportCreateMonthlyActivityReportExportWithResponse call
func ParseGetPublisherExportCreateMonthlyActivityReportExportResponse(rsp *http.Response) (*GetPublisherExportCreateMonthlyActivityReportExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportCreateMonthlyActivityReportExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateSubscriptionDetailsReportResponse parses an HTTP response from a PostPublisherExportCreateSubscriptionDetailsReportWithResponse call
func ParsePostPublisherExportCreateSubscriptionDetailsReportResponse(rsp *http.Response) (*PostPublisherExportCreateSubscriptionDetailsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateSubscriptionDetailsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateSubscriptionDetailsReportV2Response parses an HTTP response from a PostPublisherExportCreateSubscriptionDetailsReportV2WithResponse call
func ParsePostPublisherExportCreateSubscriptionDetailsReportV2Response(rsp *http.Response) (*PostPublisherExportCreateSubscriptionDetailsReportV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateSubscriptionDetailsReportV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateSubscriptionSummaryReportResponse parses an HTTP response from a PostPublisherExportCreateSubscriptionSummaryReportWithResponse call
func ParsePostPublisherExportCreateSubscriptionSummaryReportResponse(rsp *http.Response) (*PostPublisherExportCreateSubscriptionSummaryReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateSubscriptionSummaryReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportCreateTermChangeReportExportResponse parses an HTTP response from a GetPublisherExportCreateTermChangeReportExportWithResponse call
func ParseGetPublisherExportCreateTermChangeReportExportResponse(rsp *http.Response) (*GetPublisherExportCreateTermChangeReportExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportCreateTermChangeReportExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateTransactionsReportResponse parses an HTTP response from a PostPublisherExportCreateTransactionsReportWithResponse call
func ParsePostPublisherExportCreateTransactionsReportResponse(rsp *http.Response) (*PostPublisherExportCreateTransactionsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateTransactionsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateTransactionsReportV2Response parses an HTTP response from a PostPublisherExportCreateTransactionsReportV2WithResponse call
func ParsePostPublisherExportCreateTransactionsReportV2Response(rsp *http.Response) (*PostPublisherExportCreateTransactionsReportV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateTransactionsReportV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExportCreateUserExportResponse parses an HTTP response from a PostPublisherExportCreateUserExportWithResponse call
func ParsePostPublisherExportCreateUserExportResponse(rsp *http.Response) (*PostPublisherExportCreateUserExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExportCreateUserExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportDeleteResponse parses an HTTP response from a GetPublisherExportDeleteWithResponse call
func ParseGetPublisherExportDeleteResponse(rsp *http.Response) (*GetPublisherExportDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportDownloadResponse parses an HTTP response from a GetPublisherExportDownloadWithResponse call
func ParseGetPublisherExportDownloadResponse(rsp *http.Response) (*GetPublisherExportDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportGetResponse parses an HTTP response from a GetPublisherExportGetWithResponse call
func ParseGetPublisherExportGetResponse(rsp *http.Response) (*GetPublisherExportGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportListResponse parses an HTTP response from a GetPublisherExportListWithResponse call
func ParseGetPublisherExportListResponse(rsp *http.Response) (*GetPublisherExportListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherExportRunResponse parses an HTTP response from a GetPublisherExportRunWithResponse call
func ParseGetPublisherExportRunResponse(rsp *http.Response) (*GetPublisherExportRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherExportRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherExternalProviderPaymentUpdateResponse parses an HTTP response from a PostPublisherExternalProviderPaymentUpdateWithResponse call
func ParsePostPublisherExternalProviderPaymentUpdateResponse(rsp *http.Response) (*PostPublisherExternalProviderPaymentUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherExternalProviderPaymentUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherGdprDeleteResponse parses an HTTP response from a PostPublisherGdprDeleteWithResponse call
func ParsePostPublisherGdprDeleteResponse(rsp *http.Response) (*PostPublisherGdprDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherGdprDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherGdprDeleteAnonResponse parses an HTTP response from a PostPublisherGdprDeleteAnonWithResponse call
func ParsePostPublisherGdprDeleteAnonResponse(rsp *http.Response) (*PostPublisherGdprDeleteAnonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherGdprDeleteAnonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherGdprExportResponse parses an HTTP response from a PostPublisherGdprExportWithResponse call
func ParsePostPublisherGdprExportResponse(rsp *http.Response) (*PostPublisherGdprExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherGdprExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryAddResponse parses an HTTP response from a GetPublisherInquiryAddWithResponse call
func ParseGetPublisherInquiryAddResponse(rsp *http.Response) (*GetPublisherInquiryAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryCommentsResponse parses an HTTP response from a GetPublisherInquiryCommentsWithResponse call
func ParseGetPublisherInquiryCommentsResponse(rsp *http.Response) (*GetPublisherInquiryCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryDetailsResponse parses an HTTP response from a GetPublisherInquiryDetailsWithResponse call
func ParseGetPublisherInquiryDetailsResponse(rsp *http.Response) (*GetPublisherInquiryDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryInquiryActionsResponse parses an HTTP response from a GetPublisherInquiryInquiryActionsWithResponse call
func ParseGetPublisherInquiryInquiryActionsResponse(rsp *http.Response) (*GetPublisherInquiryInquiryActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryInquiryActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryLastCommentResponse parses an HTTP response from a GetPublisherInquiryLastCommentWithResponse call
func ParseGetPublisherInquiryLastCommentResponse(rsp *http.Response) (*GetPublisherInquiryLastCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryLastCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryListResponse parses an HTTP response from a GetPublisherInquiryListWithResponse call
func ParseGetPublisherInquiryListResponse(rsp *http.Response) (*GetPublisherInquiryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherInquiryUnresolvedCountResponse parses an HTTP response from a GetPublisherInquiryUnresolvedCountWithResponse call
func ParseGetPublisherInquiryUnresolvedCountResponse(rsp *http.Response) (*GetPublisherInquiryUnresolvedCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherInquiryUnresolvedCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractActivateResponse parses an HTTP response from a PostPublisherLicensingContractActivateWithResponse call
func ParsePostPublisherLicensingContractActivateResponse(rsp *http.Response) (*PostPublisherLicensingContractActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractArchiveResponse parses an HTTP response from a PostPublisherLicensingContractArchiveWithResponse call
func ParsePostPublisherLicensingContractArchiveResponse(rsp *http.Response) (*PostPublisherLicensingContractArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractCreateResponse parses an HTTP response from a PostPublisherLicensingContractCreateWithResponse call
func ParsePostPublisherLicensingContractCreateResponse(rsp *http.Response) (*PostPublisherLicensingContractCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractDeactivateResponse parses an HTTP response from a PostPublisherLicensingContractDeactivateWithResponse call
func ParsePostPublisherLicensingContractDeactivateResponse(rsp *http.Response) (*PostPublisherLicensingContractDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingContractGetResponse parses an HTTP response from a GetPublisherLicensingContractGetWithResponse call
func ParseGetPublisherLicensingContractGetResponse(rsp *http.Response) (*GetPublisherLicensingContractGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingContractListResponse parses an HTTP response from a GetPublisherLicensingContractListWithResponse call
func ParseGetPublisherLicensingContractListResponse(rsp *http.Response) (*GetPublisherLicensingContractListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractPeriodsActivateResponse parses an HTTP response from a PostPublisherLicensingContractPeriodsActivateWithResponse call
func ParsePostPublisherLicensingContractPeriodsActivateResponse(rsp *http.Response) (*PostPublisherLicensingContractPeriodsActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractPeriodsActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractRedeemResponse parses an HTTP response from a PostPublisherLicensingContractRedeemWithResponse call
func ParsePostPublisherLicensingContractRedeemResponse(rsp *http.Response) (*PostPublisherLicensingContractRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractUpdateResponse parses an HTTP response from a PostPublisherLicensingContractUpdateWithResponse call
func ParsePostPublisherLicensingContractUpdateResponse(rsp *http.Response) (*PostPublisherLicensingContractUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingContractDomainContractUserListResponse parses an HTTP response from a GetPublisherLicensingContractDomainContractUserListWithResponse call
func ParseGetPublisherLicensingContractDomainContractUserListResponse(rsp *http.Response) (*GetPublisherLicensingContractDomainContractUserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractDomainContractUserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractDomainCreateResponse parses an HTTP response from a PostPublisherLicensingContractDomainCreateWithResponse call
func ParsePostPublisherLicensingContractDomainCreateResponse(rsp *http.Response) (*PostPublisherLicensingContractDomainCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractDomainCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingContractDomainListResponse parses an HTTP response from a GetPublisherLicensingContractDomainListWithResponse call
func ParseGetPublisherLicensingContractDomainListResponse(rsp *http.Response) (*GetPublisherLicensingContractDomainListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractDomainListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractDomainRemoveResponse parses an HTTP response from a PostPublisherLicensingContractDomainRemoveWithResponse call
func ParsePostPublisherLicensingContractDomainRemoveResponse(rsp *http.Response) (*PostPublisherLicensingContractDomainRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractDomainRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractDomainRemoveAndRevokeResponse parses an HTTP response from a PostPublisherLicensingContractDomainRemoveAndRevokeWithResponse call
func ParsePostPublisherLicensingContractDomainRemoveAndRevokeResponse(rsp *http.Response) (*PostPublisherLicensingContractDomainRemoveAndRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractDomainRemoveAndRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractDomainUpdateResponse parses an HTTP response from a PostPublisherLicensingContractDomainUpdateWithResponse call
func ParsePostPublisherLicensingContractDomainUpdateResponse(rsp *http.Response) (*PostPublisherLicensingContractDomainUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractDomainUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractIpRangeCreateResponse parses an HTTP response from a PostPublisherLicensingContractIpRangeCreateWithResponse call
func ParsePostPublisherLicensingContractIpRangeCreateResponse(rsp *http.Response) (*PostPublisherLicensingContractIpRangeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractIpRangeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingContractIpRangeListResponse parses an HTTP response from a GetPublisherLicensingContractIpRangeListWithResponse call
func ParseGetPublisherLicensingContractIpRangeListResponse(rsp *http.Response) (*GetPublisherLicensingContractIpRangeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractIpRangeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractIpRangeRemoveResponse parses an HTTP response from a PostPublisherLicensingContractIpRangeRemoveWithResponse call
func ParsePostPublisherLicensingContractIpRangeRemoveResponse(rsp *http.Response) (*PostPublisherLicensingContractIpRangeRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractIpRangeRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractIpRangeUpdateResponse parses an HTTP response from a PostPublisherLicensingContractIpRangeUpdateWithResponse call
func ParsePostPublisherLicensingContractIpRangeUpdateResponse(rsp *http.Response) (*PostPublisherLicensingContractIpRangeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractIpRangeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserCreateResponse parses an HTTP response from a PostPublisherLicensingContractUserCreateWithResponse call
func ParsePostPublisherLicensingContractUserCreateResponse(rsp *http.Response) (*PostPublisherLicensingContractUserCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserInviteResponse parses an HTTP response from a PostPublisherLicensingContractUserInviteWithResponse call
func ParsePostPublisherLicensingContractUserInviteResponse(rsp *http.Response) (*PostPublisherLicensingContractUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherLicensingContractUserListResponse parses an HTTP response from a GetPublisherLicensingContractUserListWithResponse call
func ParseGetPublisherLicensingContractUserListResponse(rsp *http.Response) (*GetPublisherLicensingContractUserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingContractUserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserRemoveResponse parses an HTTP response from a PostPublisherLicensingContractUserRemoveWithResponse call
func ParsePostPublisherLicensingContractUserRemoveResponse(rsp *http.Response) (*PostPublisherLicensingContractUserRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserRemoveAndRevokeResponse parses an HTTP response from a PostPublisherLicensingContractUserRemoveAndRevokeWithResponse call
func ParsePostPublisherLicensingContractUserRemoveAndRevokeResponse(rsp *http.Response) (*PostPublisherLicensingContractUserRemoveAndRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserRemoveAndRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserRestoreResponse parses an HTTP response from a PostPublisherLicensingContractUserRestoreWithResponse call
func ParsePostPublisherLicensingContractUserRestoreResponse(rsp *http.Response) (*PostPublisherLicensingContractUserRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserRevokeResponse parses an HTTP response from a PostPublisherLicensingContractUserRevokeWithResponse call
func ParsePostPublisherLicensingContractUserRevokeResponse(rsp *http.Response) (*PostPublisherLicensingContractUserRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingContractUserUpdateResponse parses an HTTP response from a PostPublisherLicensingContractUserUpdateWithResponse call
func ParsePostPublisherLicensingContractUserUpdateResponse(rsp *http.Response) (*PostPublisherLicensingContractUserUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingContractUserUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingLicenseeArchiveResponse parses an HTTP response from a PostPublisherLicensingLicenseeArchiveWithResponse call
func ParsePostPublisherLicensingLicenseeArchiveResponse(rsp *http.Response) (*PostPublisherLicensingLicenseeArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingLicenseeArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherLicensingLicenseeCountResponse parses an HTTP response from a GetPublisherLicensingLicenseeCountWithResponse call
func ParseGetPublisherLicensingLicenseeCountResponse(rsp *http.Response) (*GetPublisherLicensingLicenseeCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingLicenseeCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingLicenseeCreateResponse parses an HTTP response from a PostPublisherLicensingLicenseeCreateWithResponse call
func ParsePostPublisherLicensingLicenseeCreateResponse(rsp *http.Response) (*PostPublisherLicensingLicenseeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingLicenseeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingLicenseeGetResponse parses an HTTP response from a GetPublisherLicensingLicenseeGetWithResponse call
func ParseGetPublisherLicensingLicenseeGetResponse(rsp *http.Response) (*GetPublisherLicensingLicenseeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingLicenseeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingLicenseeListResponse parses an HTTP response from a GetPublisherLicensingLicenseeListWithResponse call
func ParseGetPublisherLicensingLicenseeListResponse(rsp *http.Response) (*GetPublisherLicensingLicenseeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingLicenseeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingLicenseeUpdateResponse parses an HTTP response from a PostPublisherLicensingLicenseeUpdateWithResponse call
func ParsePostPublisherLicensingLicenseeUpdateResponse(rsp *http.Response) (*PostPublisherLicensingLicenseeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingLicenseeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingNotificationListResponse parses an HTTP response from a GetPublisherLicensingNotificationListWithResponse call
func ParseGetPublisherLicensingNotificationListResponse(rsp *http.Response) (*GetPublisherLicensingNotificationListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingNotificationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingNotificationRuleArchiveResponse parses an HTTP response from a PostPublisherLicensingNotificationRuleArchiveWithResponse call
func ParsePostPublisherLicensingNotificationRuleArchiveResponse(rsp *http.Response) (*PostPublisherLicensingNotificationRuleArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingNotificationRuleArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherLicensingNotificationRuleCreateResponse parses an HTTP response from a PostPublisherLicensingNotificationRuleCreateWithResponse call
func ParsePostPublisherLicensingNotificationRuleCreateResponse(rsp *http.Response) (*PostPublisherLicensingNotificationRuleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingNotificationRuleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLicensingNotificationRuleListResponse parses an HTTP response from a GetPublisherLicensingNotificationRuleListWithResponse call
func ParseGetPublisherLicensingNotificationRuleListResponse(rsp *http.Response) (*GetPublisherLicensingNotificationRuleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingNotificationRuleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingNotificationRuleUpdateResponse parses an HTTP response from a PostPublisherLicensingNotificationRuleUpdateWithResponse call
func ParsePostPublisherLicensingNotificationRuleUpdateResponse(rsp *http.Response) (*PostPublisherLicensingNotificationRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingNotificationRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLicensingScheduleContractPeriodsActivateResponse parses an HTTP response from a PostPublisherLicensingScheduleContractPeriodsActivateWithResponse call
func ParsePostPublisherLicensingScheduleContractPeriodsActivateResponse(rsp *http.Response) (*PostPublisherLicensingScheduleContractPeriodsActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLicensingScheduleContractPeriodsActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherLicensingScheduleContractsResponse parses an HTTP response from a GetPublisherLicensingScheduleContractsWithResponse call
func ParseGetPublisherLicensingScheduleContractsResponse(rsp *http.Response) (*GetPublisherLicensingScheduleContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLicensingScheduleContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLinkedTermConfigurationResponse parses an HTTP response from a PostPublisherLinkedTermConfigurationWithResponse call
func ParsePostPublisherLinkedTermConfigurationResponse(rsp *http.Response) (*PostPublisherLinkedTermConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLinkedTermConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLinkedTermCustomFieldConfigurationResponse parses an HTTP response from a PostPublisherLinkedTermCustomFieldConfigurationWithResponse call
func ParsePostPublisherLinkedTermCustomFieldConfigurationResponse(rsp *http.Response) (*PostPublisherLinkedTermCustomFieldConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLinkedTermCustomFieldConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherLinkedTermEventResponse parses an HTTP response from a PostPublisherLinkedTermEventWithResponse call
func ParsePostPublisherLinkedTermEventResponse(rsp *http.Response) (*PostPublisherLinkedTermEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherLinkedTermEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherLinkedTermSubscriptionResponse parses an HTTP response from a GetPublisherLinkedTermSubscriptionWithResponse call
func ParseGetPublisherLinkedTermSubscriptionResponse(rsp *http.Response) (*GetPublisherLinkedTermSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherLinkedTermSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferCountResponse parses an HTTP response from a GetPublisherOfferCountWithResponse call
func ParseGetPublisherOfferCountResponse(rsp *http.Response) (*GetPublisherOfferCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferCreateResponse parses an HTTP response from a PostPublisherOfferCreateWithResponse call
func ParsePostPublisherOfferCreateResponse(rsp *http.Response) (*PostPublisherOfferCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferDeleteResponse parses an HTTP response from a PostPublisherOfferDeleteWithResponse call
func ParsePostPublisherOfferDeleteResponse(rsp *http.Response) (*PostPublisherOfferDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherOfferGetResponse parses an HTTP response from a GetPublisherOfferGetWithResponse call
func ParseGetPublisherOfferGetResponse(rsp *http.Response) (*GetPublisherOfferGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferListResponse parses an HTTP response from a GetPublisherOfferListWithResponse call
func ParseGetPublisherOfferListResponse(rsp *http.Response) (*GetPublisherOfferListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateArchiveResponse parses an HTTP response from a GetPublisherOfferTemplateArchiveWithResponse call
func ParseGetPublisherOfferTemplateArchiveResponse(rsp *http.Response) (*GetPublisherOfferTemplateArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherOfferTemplateConvertBoilerplateToTemplateResponse parses an HTTP response from a GetPublisherOfferTemplateConvertBoilerplateToTemplateWithResponse call
func ParseGetPublisherOfferTemplateConvertBoilerplateToTemplateResponse(rsp *http.Response) (*GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateConvertBoilerplateToTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateCountResponse parses an HTTP response from a GetPublisherOfferTemplateCountWithResponse call
func ParseGetPublisherOfferTemplateCountResponse(rsp *http.Response) (*GetPublisherOfferTemplateCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateCreateResponse parses an HTTP response from a PostPublisherOfferTemplateCreateWithResponse call
func ParsePostPublisherOfferTemplateCreateResponse(rsp *http.Response) (*PostPublisherOfferTemplateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateCreateEmptyResponse parses an HTTP response from a PostPublisherOfferTemplateCreateEmptyWithResponse call
func ParsePostPublisherOfferTemplateCreateEmptyResponse(rsp *http.Response) (*PostPublisherOfferTemplateCreateEmptyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateCreateEmptyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateDefaultCodeResponse parses an HTTP response from a GetPublisherOfferTemplateDefaultCodeWithResponse call
func ParseGetPublisherOfferTemplateDefaultCodeResponse(rsp *http.Response) (*GetPublisherOfferTemplateDefaultCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateDefaultCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateDeleteResponse parses an HTTP response from a PostPublisherOfferTemplateDeleteWithResponse call
func ParsePostPublisherOfferTemplateDeleteResponse(rsp *http.Response) (*PostPublisherOfferTemplateDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherOfferTemplateDuplicateResponse parses an HTTP response from a GetPublisherOfferTemplateDuplicateWithResponse call
func ParseGetPublisherOfferTemplateDuplicateResponse(rsp *http.Response) (*GetPublisherOfferTemplateDuplicateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateGetResponse parses an HTTP response from a GetPublisherOfferTemplateGetWithResponse call
func ParseGetPublisherOfferTemplateGetResponse(rsp *http.Response) (*GetPublisherOfferTemplateGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateGetHistoryResponse parses an HTTP response from a GetPublisherOfferTemplateGetHistoryWithResponse call
func ParseGetPublisherOfferTemplateGetHistoryResponse(rsp *http.Response) (*GetPublisherOfferTemplateGetHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateGetHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateInheritedCountResponse parses an HTTP response from a GetPublisherOfferTemplateInheritedCountWithResponse call
func ParseGetPublisherOfferTemplateInheritedCountResponse(rsp *http.Response) (*GetPublisherOfferTemplateInheritedCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateInheritedCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateInheritedUpdateResponse parses an HTTP response from a PostPublisherOfferTemplateInheritedUpdateWithResponse call
func ParsePostPublisherOfferTemplateInheritedUpdateResponse(rsp *http.Response) (*PostPublisherOfferTemplateInheritedUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateInheritedUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateListResponse parses an HTTP response from a GetPublisherOfferTemplateListWithResponse call
func ParseGetPublisherOfferTemplateListResponse(rsp *http.Response) (*GetPublisherOfferTemplateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateListBoilerplatesResponse parses an HTTP response from a GetPublisherOfferTemplateListBoilerplatesWithResponse call
func ParseGetPublisherOfferTemplateListBoilerplatesResponse(rsp *http.Response) (*GetPublisherOfferTemplateListBoilerplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateListBoilerplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateListByCategoryResponse parses an HTTP response from a GetPublisherOfferTemplateListByCategoryWithResponse call
func ParseGetPublisherOfferTemplateListByCategoryResponse(rsp *http.Response) (*GetPublisherOfferTemplateListByCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateListByCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateMakeGlobalResponse parses an HTTP response from a GetPublisherOfferTemplateMakeGlobalWithResponse call
func ParseGetPublisherOfferTemplateMakeGlobalResponse(rsp *http.Response) (*GetPublisherOfferTemplateMakeGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateMakeGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateRestoreResponse parses an HTTP response from a GetPublisherOfferTemplateRestoreWithResponse call
func ParseGetPublisherOfferTemplateRestoreResponse(rsp *http.Response) (*GetPublisherOfferTemplateRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherOfferTemplateUpdateResponse parses an HTTP response from a PostPublisherOfferTemplateUpdateWithResponse call
func ParsePostPublisherOfferTemplateUpdateResponse(rsp *http.Response) (*PostPublisherOfferTemplateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateUpdateContentfieldsResponse parses an HTTP response from a PostPublisherOfferTemplateUpdateContentfieldsWithResponse call
func ParsePostPublisherOfferTemplateUpdateContentfieldsResponse(rsp *http.Response) (*PostPublisherOfferTemplateUpdateContentfieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateUpdateContentfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateUpdatefullResponse parses an HTTP response from a PostPublisherOfferTemplateUpdatefullWithResponse call
func ParsePostPublisherOfferTemplateUpdatefullResponse(rsp *http.Response) (*PostPublisherOfferTemplateUpdatefullResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateUpdatefullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateVariantArchiveResponse parses an HTTP response from a GetPublisherOfferTemplateVariantArchiveWithResponse call
func ParseGetPublisherOfferTemplateVariantArchiveResponse(rsp *http.Response) (*GetPublisherOfferTemplateVariantArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateVariantArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherOfferTemplateVariantCreateResponse parses an HTTP response from a PostPublisherOfferTemplateVariantCreateWithResponse call
func ParsePostPublisherOfferTemplateVariantCreateResponse(rsp *http.Response) (*PostPublisherOfferTemplateVariantCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateVariantCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTemplateVariantDeleteResponse parses an HTTP response from a PostPublisherOfferTemplateVariantDeleteWithResponse call
func ParsePostPublisherOfferTemplateVariantDeleteResponse(rsp *http.Response) (*PostPublisherOfferTemplateVariantDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateVariantDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherOfferTemplateVariantDuplicateResponse parses an HTTP response from a GetPublisherOfferTemplateVariantDuplicateWithResponse call
func ParseGetPublisherOfferTemplateVariantDuplicateResponse(rsp *http.Response) (*GetPublisherOfferTemplateVariantDuplicateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateVariantDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateVariantGetResponse parses an HTTP response from a GetPublisherOfferTemplateVariantGetWithResponse call
func ParseGetPublisherOfferTemplateVariantGetResponse(rsp *http.Response) (*GetPublisherOfferTemplateVariantGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateVariantGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTemplateVariantRestoreResponse parses an HTTP response from a GetPublisherOfferTemplateVariantRestoreWithResponse call
func ParseGetPublisherOfferTemplateVariantRestoreResponse(rsp *http.Response) (*GetPublisherOfferTemplateVariantRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTemplateVariantRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherOfferTemplateVariantUpdateResponse parses an HTTP response from a PostPublisherOfferTemplateVariantUpdateWithResponse call
func ParsePostPublisherOfferTemplateVariantUpdateResponse(rsp *http.Response) (*PostPublisherOfferTemplateVariantUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTemplateVariantUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTermAddResponse parses an HTTP response from a PostPublisherOfferTermAddWithResponse call
func ParsePostPublisherOfferTermAddResponse(rsp *http.Response) (*PostPublisherOfferTermAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTermAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherOfferTermListResponse parses an HTTP response from a GetPublisherOfferTermListWithResponse call
func ParseGetPublisherOfferTermListResponse(rsp *http.Response) (*GetPublisherOfferTermListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTermListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherOfferTermOfferListResponse parses an HTTP response from a GetPublisherOfferTermOfferListWithResponse call
func ParseGetPublisherOfferTermOfferListResponse(rsp *http.Response) (*GetPublisherOfferTermOfferListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherOfferTermOfferListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherOfferTermRemoveResponse parses an HTTP response from a PostPublisherOfferTermRemoveWithResponse call
func ParsePostPublisherOfferTermRemoveResponse(rsp *http.Response) (*PostPublisherOfferTermRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTermRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherOfferTermReorderResponse parses an HTTP response from a PostPublisherOfferTermReorderWithResponse call
func ParsePostPublisherOfferTermReorderResponse(rsp *http.Response) (*PostPublisherOfferTermReorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferTermReorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherOfferUpdateResponse parses an HTTP response from a PostPublisherOfferUpdateWithResponse call
func ParsePostPublisherOfferUpdateResponse(rsp *http.Response) (*PostPublisherOfferUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherOfferUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPaymentGetResponse parses an HTTP response from a GetPublisherPaymentGetWithResponse call
func ParseGetPublisherPaymentGetResponse(rsp *http.Response) (*GetPublisherPaymentGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPaymentGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPaymentIsPartialRefundResponse parses an HTTP response from a GetPublisherPaymentIsPartialRefundWithResponse call
func ParseGetPublisherPaymentIsPartialRefundResponse(rsp *http.Response) (*GetPublisherPaymentIsPartialRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPaymentIsPartialRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentMethodAddResponse parses an HTTP response from a PostPublisherPaymentMethodAddWithResponse call
func ParsePostPublisherPaymentMethodAddResponse(rsp *http.Response) (*PostPublisherPaymentMethodAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentMethodBillingAddressApplyToAllResponse parses an HTTP response from a PostPublisherPaymentMethodBillingAddressApplyToAllWithResponse call
func ParsePostPublisherPaymentMethodBillingAddressApplyToAllResponse(rsp *http.Response) (*PostPublisherPaymentMethodBillingAddressApplyToAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodBillingAddressApplyToAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPaymentMethodBillingAddressAttachResponse parses an HTTP response from a PostPublisherPaymentMethodBillingAddressAttachWithResponse call
func ParsePostPublisherPaymentMethodBillingAddressAttachResponse(rsp *http.Response) (*PostPublisherPaymentMethodBillingAddressAttachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodBillingAddressAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPaymentMethodBillingAddressDetachResponse parses an HTTP response from a PostPublisherPaymentMethodBillingAddressDetachWithResponse call
func ParsePostPublisherPaymentMethodBillingAddressDetachResponse(rsp *http.Response) (*PostPublisherPaymentMethodBillingAddressDetachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodBillingAddressDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPaymentMethodBillingAddressGetResponse parses an HTTP response from a PostPublisherPaymentMethodBillingAddressGetWithResponse call
func ParsePostPublisherPaymentMethodBillingAddressGetResponse(rsp *http.Response) (*PostPublisherPaymentMethodBillingAddressGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodBillingAddressGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPaymentMethodGetResponse parses an HTTP response from a GetPublisherPaymentMethodGetWithResponse call
func ParseGetPublisherPaymentMethodGetResponse(rsp *http.Response) (*GetPublisherPaymentMethodGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPaymentMethodGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentMethodGmoRefreshResponse parses an HTTP response from a PostPublisherPaymentMethodGmoRefreshWithResponse call
func ParsePostPublisherPaymentMethodGmoRefreshResponse(rsp *http.Response) (*PostPublisherPaymentMethodGmoRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodGmoRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentMethodRemoveResponse parses an HTTP response from a PostPublisherPaymentMethodRemoveWithResponse call
func ParsePostPublisherPaymentMethodRemoveResponse(rsp *http.Response) (*PostPublisherPaymentMethodRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentMethodUpdateResponse parses an HTTP response from a PostPublisherPaymentMethodUpdateWithResponse call
func ParsePostPublisherPaymentMethodUpdateResponse(rsp *http.Response) (*PostPublisherPaymentMethodUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentMethodUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPaymentProviderConfigurationSetVisibilityResponse parses an HTTP response from a PostPublisherPaymentProviderConfigurationSetVisibilityWithResponse call
func ParsePostPublisherPaymentProviderConfigurationSetVisibilityResponse(rsp *http.Response) (*PostPublisherPaymentProviderConfigurationSetVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPaymentProviderConfigurationSetVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherPaymentRefundResponse parses an HTTP response from a GetPublisherPaymentRefundWithResponse call
func ParseGetPublisherPaymentRefundResponse(rsp *http.Response) (*GetPublisherPaymentRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPaymentRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionCodeCountResponse parses an HTTP response from a GetPublisherPromotionCodeCountWithResponse call
func ParseGetPublisherPromotionCodeCountResponse(rsp *http.Response) (*GetPublisherPromotionCodeCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionCodeCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionCodeCreateResponse parses an HTTP response from a GetPublisherPromotionCodeCreateWithResponse call
func ParseGetPublisherPromotionCodeCreateResponse(rsp *http.Response) (*GetPublisherPromotionCodeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionCodeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionCodeDeleteResponse parses an HTTP response from a PostPublisherPromotionCodeDeleteWithResponse call
func ParsePostPublisherPromotionCodeDeleteResponse(rsp *http.Response) (*PostPublisherPromotionCodeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionCodeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPromotionCodeExportResponse parses an HTTP response from a PostPublisherPromotionCodeExportWithResponse call
func ParsePostPublisherPromotionCodeExportResponse(rsp *http.Response) (*PostPublisherPromotionCodeExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionCodeExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionCodeGetResponse parses an HTTP response from a GetPublisherPromotionCodeGetWithResponse call
func ParseGetPublisherPromotionCodeGetResponse(rsp *http.Response) (*GetPublisherPromotionCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionCodeListResponse parses an HTTP response from a GetPublisherPromotionCodeListWithResponse call
func ParseGetPublisherPromotionCodeListResponse(rsp *http.Response) (*GetPublisherPromotionCodeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionCodeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionCodeUpdateResponse parses an HTTP response from a PostPublisherPromotionCodeUpdateWithResponse call
func ParsePostPublisherPromotionCodeUpdateResponse(rsp *http.Response) (*PostPublisherPromotionCodeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionCodeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionCountResponse parses an HTTP response from a GetPublisherPromotionCountWithResponse call
func ParseGetPublisherPromotionCountResponse(rsp *http.Response) (*GetPublisherPromotionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionCreateResponse parses an HTTP response from a PostPublisherPromotionCreateWithResponse call
func ParsePostPublisherPromotionCreateResponse(rsp *http.Response) (*PostPublisherPromotionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionDeleteResponse parses an HTTP response from a PostPublisherPromotionDeleteWithResponse call
func ParsePostPublisherPromotionDeleteResponse(rsp *http.Response) (*PostPublisherPromotionDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPromotionExistsResponse parses an HTTP response from a PostPublisherPromotionExistsWithResponse call
func ParsePostPublisherPromotionExistsResponse(rsp *http.Response) (*PostPublisherPromotionExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionFixedDiscountAddResponse parses an HTTP response from a GetPublisherPromotionFixedDiscountAddWithResponse call
func ParseGetPublisherPromotionFixedDiscountAddResponse(rsp *http.Response) (*GetPublisherPromotionFixedDiscountAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionFixedDiscountAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionFixedDiscountDeleteResponse parses an HTTP response from a PostPublisherPromotionFixedDiscountDeleteWithResponse call
func ParsePostPublisherPromotionFixedDiscountDeleteResponse(rsp *http.Response) (*PostPublisherPromotionFixedDiscountDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionFixedDiscountDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPromotionFixedDiscountUpdateResponse parses an HTTP response from a PostPublisherPromotionFixedDiscountUpdateWithResponse call
func ParsePostPublisherPromotionFixedDiscountUpdateResponse(rsp *http.Response) (*PostPublisherPromotionFixedDiscountUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionFixedDiscountUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionGenerateResponse parses an HTTP response from a PostPublisherPromotionGenerateWithResponse call
func ParsePostPublisherPromotionGenerateResponse(rsp *http.Response) (*PostPublisherPromotionGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionGetResponse parses an HTTP response from a GetPublisherPromotionGetWithResponse call
func ParseGetPublisherPromotionGetResponse(rsp *http.Response) (*GetPublisherPromotionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionListResponse parses an HTTP response from a GetPublisherPromotionListWithResponse call
func ParseGetPublisherPromotionListResponse(rsp *http.Response) (*GetPublisherPromotionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionTermAddResponse parses an HTTP response from a PostPublisherPromotionTermAddWithResponse call
func ParsePostPublisherPromotionTermAddResponse(rsp *http.Response) (*PostPublisherPromotionTermAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionTermAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherPromotionTermDeleteResponse parses an HTTP response from a PostPublisherPromotionTermDeleteWithResponse call
func ParsePostPublisherPromotionTermDeleteResponse(rsp *http.Response) (*PostPublisherPromotionTermDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionTermDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherPromotionTermListResponse parses an HTTP response from a GetPublisherPromotionTermListWithResponse call
func ParseGetPublisherPromotionTermListResponse(rsp *http.Response) (*GetPublisherPromotionTermListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionTermListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherPromotionTotalResponse parses an HTTP response from a GetPublisherPromotionTotalWithResponse call
func ParseGetPublisherPromotionTotalResponse(rsp *http.Response) (*GetPublisherPromotionTotalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherPromotionTotalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherPromotionUpdateResponse parses an HTTP response from a PostPublisherPromotionUpdateWithResponse call
func ParsePostPublisherPromotionUpdateResponse(rsp *http.Response) (*PostPublisherPromotionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherPromotionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceAttachResponse parses an HTTP response from a GetPublisherResourceAttachWithResponse call
func ParseGetPublisherResourceAttachResponse(rsp *http.Response) (*GetPublisherResourceAttachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherResourceBundleMembersResponse parses an HTTP response from a GetPublisherResourceBundleMembersWithResponse call
func ParseGetPublisherResourceBundleMembersResponse(rsp *http.Response) (*GetPublisherResourceBundleMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceBundleMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceCountResponse parses an HTTP response from a GetPublisherResourceCountWithResponse call
func ParseGetPublisherResourceCountResponse(rsp *http.Response) (*GetPublisherResourceCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherResourceCreateResponse parses an HTTP response from a PostPublisherResourceCreateWithResponse call
func ParsePostPublisherResourceCreateResponse(rsp *http.Response) (*PostPublisherResourceCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceCrossAppCountResponse parses an HTTP response from a GetPublisherResourceCrossAppCountWithResponse call
func ParseGetPublisherResourceCrossAppCountResponse(rsp *http.Response) (*GetPublisherResourceCrossAppCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceCrossAppCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherResourceDeleteResponse parses an HTTP response from a PostPublisherResourceDeleteWithResponse call
func ParsePostPublisherResourceDeleteResponse(rsp *http.Response) (*PostPublisherResourceDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherResourceDetachResponse parses an HTTP response from a GetPublisherResourceDetachWithResponse call
func ParseGetPublisherResourceDetachResponse(rsp *http.Response) (*GetPublisherResourceDetachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherResourceGetResponse parses an HTTP response from a GetPublisherResourceGetWithResponse call
func ParseGetPublisherResourceGetResponse(rsp *http.Response) (*GetPublisherResourceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceListResponse parses an HTTP response from a GetPublisherResourceListWithResponse call
func ParseGetPublisherResourceListResponse(rsp *http.Response) (*GetPublisherResourceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceStatsListResponse parses an HTTP response from a GetPublisherResourceStatsListWithResponse call
func ParseGetPublisherResourceStatsListResponse(rsp *http.Response) (*GetPublisherResourceStatsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceStatsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherResourceTagAttachResponse parses an HTTP response from a PostPublisherResourceTagAttachWithResponse call
func ParsePostPublisherResourceTagAttachResponse(rsp *http.Response) (*PostPublisherResourceTagAttachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceTagAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherResourceTagBundlesResponse parses an HTTP response from a GetPublisherResourceTagBundlesWithResponse call
func ParseGetPublisherResourceTagBundlesResponse(rsp *http.Response) (*GetPublisherResourceTagBundlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceTagBundlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceTagCreateResponse parses an HTTP response from a GetPublisherResourceTagCreateWithResponse call
func ParseGetPublisherResourceTagCreateResponse(rsp *http.Response) (*GetPublisherResourceTagCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceTagCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherResourceTagDeleteResponse parses an HTTP response from a PostPublisherResourceTagDeleteWithResponse call
func ParsePostPublisherResourceTagDeleteResponse(rsp *http.Response) (*PostPublisherResourceTagDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceTagDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherResourceTagDetachResponse parses an HTTP response from a PostPublisherResourceTagDetachWithResponse call
func ParsePostPublisherResourceTagDetachResponse(rsp *http.Response) (*PostPublisherResourceTagDetachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceTagDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherResourceTagGetResponse parses an HTTP response from a GetPublisherResourceTagGetWithResponse call
func ParseGetPublisherResourceTagGetResponse(rsp *http.Response) (*GetPublisherResourceTagGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceTagGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceTagListResponse parses an HTTP response from a GetPublisherResourceTagListWithResponse call
func ParseGetPublisherResourceTagListResponse(rsp *http.Response) (*GetPublisherResourceTagListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceTagListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherResourceUpdateResponse parses an HTTP response from a PostPublisherResourceUpdateWithResponse call
func ParsePostPublisherResourceUpdateResponse(rsp *http.Response) (*PostPublisherResourceUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResourceUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherResourceUserListResponse parses an HTTP response from a GetPublisherResourceUserListWithResponse call
func ParseGetPublisherResourceUserListResponse(rsp *http.Response) (*GetPublisherResourceUserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResourceUserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherScheduleCreateResponse parses an HTTP response from a PostPublisherScheduleCreateWithResponse call
func ParsePostPublisherScheduleCreateResponse(rsp *http.Response) (*PostPublisherScheduleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherScheduleDeleteResponse parses an HTTP response from a PostPublisherScheduleDeleteWithResponse call
func ParsePostPublisherScheduleDeleteResponse(rsp *http.Response) (*PostPublisherScheduleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherScheduleGetResponse parses an HTTP response from a PostPublisherScheduleGetWithResponse call
func ParsePostPublisherScheduleGetResponse(rsp *http.Response) (*PostPublisherScheduleGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherScheduleListResponse parses an HTTP response from a PostPublisherScheduleListWithResponse call
func ParsePostPublisherScheduleListResponse(rsp *http.Response) (*PostPublisherScheduleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSchedulePeriodAddResponse parses an HTTP response from a PostPublisherSchedulePeriodAddWithResponse call
func ParsePostPublisherSchedulePeriodAddResponse(rsp *http.Response) (*PostPublisherSchedulePeriodAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSchedulePeriodAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSchedulePeriodDeleteResponse parses an HTTP response from a PostPublisherSchedulePeriodDeleteWithResponse call
func ParsePostPublisherSchedulePeriodDeleteResponse(rsp *http.Response) (*PostPublisherSchedulePeriodDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSchedulePeriodDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSchedulePeriodUpdateResponse parses an HTTP response from a PostPublisherSchedulePeriodUpdateWithResponse call
func ParsePostPublisherSchedulePeriodUpdateResponse(rsp *http.Response) (*PostPublisherSchedulePeriodUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSchedulePeriodUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherScheduleTermsResponse parses an HTTP response from a PostPublisherScheduleTermsWithResponse call
func ParsePostPublisherScheduleTermsResponse(rsp *http.Response) (*PostPublisherScheduleTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherScheduleUpdateResponse parses an HTTP response from a PostPublisherScheduleUpdateWithResponse call
func ParsePostPublisherScheduleUpdateResponse(rsp *http.Response) (*PostPublisherScheduleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherScheduleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionAddressAssignResponse parses an HTTP response from a PostPublisherSubscriptionAddressAssignWithResponse call
func ParsePostPublisherSubscriptionAddressAssignResponse(rsp *http.Response) (*PostPublisherSubscriptionAddressAssignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionAddressAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionCancelResponse parses an HTTP response from a PostPublisherSubscriptionCancelWithResponse call
func ParsePostPublisherSubscriptionCancelResponse(rsp *http.Response) (*PostPublisherSubscriptionCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionCancelDeferredResponse parses an HTTP response from a PostPublisherSubscriptionCancelDeferredWithResponse call
func ParsePostPublisherSubscriptionCancelDeferredResponse(rsp *http.Response) (*PostPublisherSubscriptionCancelDeferredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionCancelDeferredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionCountResponse parses an HTTP response from a PostPublisherSubscriptionCountWithResponse call
func ParsePostPublisherSubscriptionCountResponse(rsp *http.Response) (*PostPublisherSubscriptionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherSubscriptionGetResponse parses an HTTP response from a GetPublisherSubscriptionGetWithResponse call
func ParseGetPublisherSubscriptionGetResponse(rsp *http.Response) (*GetPublisherSubscriptionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherSubscriptionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionIsPartiallyRefundableResponse parses an HTTP response from a PostPublisherSubscriptionIsPartiallyRefundableWithResponse call
func ParsePostPublisherSubscriptionIsPartiallyRefundableResponse(rsp *http.Response) (*PostPublisherSubscriptionIsPartiallyRefundableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionIsPartiallyRefundableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherSubscriptionListResponse parses an HTTP response from a GetPublisherSubscriptionListWithResponse call
func ParseGetPublisherSubscriptionListResponse(rsp *http.Response) (*GetPublisherSubscriptionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherSubscriptionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionResumeResponse parses an HTTP response from a PostPublisherSubscriptionResumeWithResponse call
func ParsePostPublisherSubscriptionResumeResponse(rsp *http.Response) (*PostPublisherSubscriptionResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherSubscriptionSearchResponse parses an HTTP response from a GetPublisherSubscriptionSearchWithResponse call
func ParseGetPublisherSubscriptionSearchResponse(rsp *http.Response) (*GetPublisherSubscriptionSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherSubscriptionSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareInviteResponse parses an HTTP response from a PostPublisherSubscriptionShareInviteWithResponse call
func ParsePostPublisherSubscriptionShareInviteResponse(rsp *http.Response) (*PostPublisherSubscriptionShareInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareListResponse parses an HTTP response from a PostPublisherSubscriptionShareListWithResponse call
func ParsePostPublisherSubscriptionShareListResponse(rsp *http.Response) (*PostPublisherSubscriptionShareListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareResendResponse parses an HTTP response from a PostPublisherSubscriptionShareResendWithResponse call
func ParsePostPublisherSubscriptionShareResendResponse(rsp *http.Response) (*PostPublisherSubscriptionShareResendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareResendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareRevokeResponse parses an HTTP response from a PostPublisherSubscriptionShareRevokeWithResponse call
func ParsePostPublisherSubscriptionShareRevokeResponse(rsp *http.Response) (*PostPublisherSubscriptionShareRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareStartResponse parses an HTTP response from a PostPublisherSubscriptionShareStartWithResponse call
func ParsePostPublisherSubscriptionShareStartResponse(rsp *http.Response) (*PostPublisherSubscriptionShareStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareStopResponse parses an HTTP response from a PostPublisherSubscriptionShareStopWithResponse call
func ParsePostPublisherSubscriptionShareStopResponse(rsp *http.Response) (*PostPublisherSubscriptionShareStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareUpdateResponse parses an HTTP response from a PostPublisherSubscriptionShareUpdateWithResponse call
func ParsePostPublisherSubscriptionShareUpdateResponse(rsp *http.Response) (*PostPublisherSubscriptionShareUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareUserAddResponse parses an HTTP response from a PostPublisherSubscriptionShareUserAddWithResponse call
func ParsePostPublisherSubscriptionShareUserAddResponse(rsp *http.Response) (*PostPublisherSubscriptionShareUserAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareUserAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareUserRemoveResponse parses an HTTP response from a PostPublisherSubscriptionShareUserRemoveWithResponse call
func ParsePostPublisherSubscriptionShareUserRemoveResponse(rsp *http.Response) (*PostPublisherSubscriptionShareUserRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareUserRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionShareValidateResponse parses an HTTP response from a PostPublisherSubscriptionShareValidateWithResponse call
func ParsePostPublisherSubscriptionShareValidateResponse(rsp *http.Response) (*PostPublisherSubscriptionShareValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionShareValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionStatsResponse parses an HTTP response from a PostPublisherSubscriptionStatsWithResponse call
func ParsePostPublisherSubscriptionStatsResponse(rsp *http.Response) (*PostPublisherSubscriptionStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherSubscriptionUpdateResponse parses an HTTP response from a PostPublisherSubscriptionUpdateWithResponse call
func ParsePostPublisherSubscriptionUpdateResponse(rsp *http.Response) (*PostPublisherSubscriptionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherSubscriptionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTeamListResponse parses an HTTP response from a PostPublisherTeamListWithResponse call
func ParsePostPublisherTeamListResponse(rsp *http.Response) (*PostPublisherTeamListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTeamListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherTermApplicableResponse parses an HTTP response from a GetPublisherTermApplicableWithResponse call
func ParseGetPublisherTermApplicableResponse(rsp *http.Response) (*GetPublisherTermApplicableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherTermApplicableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermChangeCanResponse parses an HTTP response from a PostPublisherTermChangeCanWithResponse call
func ParsePostPublisherTermChangeCanResponse(rsp *http.Response) (*PostPublisherTermChangeCanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermChangeCanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermChangeCancelResponse parses an HTTP response from a PostPublisherTermChangeCancelWithResponse call
func ParsePostPublisherTermChangeCancelResponse(rsp *http.Response) (*PostPublisherTermChangeCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermChangeCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermChangeDoResponse parses an HTTP response from a PostPublisherTermChangeDoWithResponse call
func ParsePostPublisherTermChangeDoResponse(rsp *http.Response) (*PostPublisherTermChangeDoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermChangeDoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermChangeGetSubscriptionUpgradeStatusResponse parses an HTTP response from a PostPublisherTermChangeGetSubscriptionUpgradeStatusWithResponse call
func ParsePostPublisherTermChangeGetSubscriptionUpgradeStatusResponse(rsp *http.Response) (*PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermChangeGetSubscriptionUpgradeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermChangeOptionCreateResponse parses an HTTP response from a PostPublisherTermChangeOptionCreateWithResponse call
func ParsePostPublisherTermChangeOptionCreateResponse(rsp *http.Response) (*PostPublisherTermChangeOptionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermChangeOptionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherTermCountResponse parses an HTTP response from a GetPublisherTermCountWithResponse call
func ParseGetPublisherTermCountResponse(rsp *http.Response) (*GetPublisherTermCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherTermCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermCustomCreateResponse parses an HTTP response from a PostPublisherTermCustomCreateWithResponse call
func ParsePostPublisherTermCustomCreateResponse(rsp *http.Response) (*PostPublisherTermCustomCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermCustomCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermCustomUpdateResponse parses an HTTP response from a PostPublisherTermCustomUpdateWithResponse call
func ParsePostPublisherTermCustomUpdateResponse(rsp *http.Response) (*PostPublisherTermCustomUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermCustomUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermDeleteResponse parses an HTTP response from a PostPublisherTermDeleteWithResponse call
func ParsePostPublisherTermDeleteResponse(rsp *http.Response) (*PostPublisherTermDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPublisherTermDynamicCreateResponse parses an HTTP response from a PostPublisherTermDynamicCreateWithResponse call
func ParsePostPublisherTermDynamicCreateResponse(rsp *http.Response) (*PostPublisherTermDynamicCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermDynamicCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermDynamicUpdateResponse parses an HTTP response from a PostPublisherTermDynamicUpdateWithResponse call
func ParsePostPublisherTermDynamicUpdateResponse(rsp *http.Response) (*PostPublisherTermDynamicUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermDynamicUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermExternalCreateResponse parses an HTTP response from a PostPublisherTermExternalCreateWithResponse call
func ParsePostPublisherTermExternalCreateResponse(rsp *http.Response) (*PostPublisherTermExternalCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermExternalCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermExternalUpdateResponse parses an HTTP response from a PostPublisherTermExternalUpdateWithResponse call
func ParsePostPublisherTermExternalUpdateResponse(rsp *http.Response) (*PostPublisherTermExternalUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermExternalUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherTermGetResponse parses an HTTP response from a GetPublisherTermGetWithResponse call
func ParseGetPublisherTermGetResponse(rsp *http.Response) (*GetPublisherTermGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherTermGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermGiftCreateResponse parses an HTTP response from a PostPublisherTermGiftCreateWithResponse call
func ParsePostPublisherTermGiftCreateResponse(rsp *http.Response) (*PostPublisherTermGiftCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermGiftCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermGiftUpdateResponse parses an HTTP response from a PostPublisherTermGiftUpdateWithResponse call
func ParsePostPublisherTermGiftUpdateResponse(rsp *http.Response) (*PostPublisherTermGiftUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermGiftUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermPaymentCreateResponse parses an HTTP response from a PostPublisherTermPaymentCreateWithResponse call
func ParsePostPublisherTermPaymentCreateResponse(rsp *http.Response) (*PostPublisherTermPaymentCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermPaymentCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermPaymentUpdateResponse parses an HTTP response from a PostPublisherTermPaymentUpdateWithResponse call
func ParsePostPublisherTermPaymentUpdateResponse(rsp *http.Response) (*PostPublisherTermPaymentUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermPaymentUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermRegistrationCreateResponse parses an HTTP response from a PostPublisherTermRegistrationCreateWithResponse call
func ParsePostPublisherTermRegistrationCreateResponse(rsp *http.Response) (*PostPublisherTermRegistrationCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermRegistrationCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherTermRegistrationUpdateResponse parses an HTTP response from a PostPublisherTermRegistrationUpdateWithResponse call
func ParsePostPublisherTermRegistrationUpdateResponse(rsp *http.Response) (*PostPublisherTermRegistrationUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherTermRegistrationUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherTermStatsListResponse parses an HTTP response from a GetPublisherTermStatsListWithResponse call
func ParseGetPublisherTermStatsListResponse(rsp *http.Response) (*GetPublisherTermStatsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherTermStatsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherTestUserRefResponse parses an HTTP response from a GetPublisherTestUserRefWithResponse call
func ParseGetPublisherTestUserRefResponse(rsp *http.Response) (*GetPublisherTestUserRefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherTestUserRefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAccessActiveCountResponse parses an HTTP response from a PostPublisherUserAccessActiveCountWithResponse call
func ParsePostPublisherUserAccessActiveCountResponse(rsp *http.Response) (*PostPublisherUserAccessActiveCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAccessActiveCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAccessCheckResponse parses an HTTP response from a GetPublisherUserAccessCheckWithResponse call
func ParseGetPublisherUserAccessCheckResponse(rsp *http.Response) (*GetPublisherUserAccessCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAccessCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAccessGrantResponse parses an HTTP response from a GetPublisherUserAccessGrantWithResponse call
func ParseGetPublisherUserAccessGrantResponse(rsp *http.Response) (*GetPublisherUserAccessGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAccessGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAccessGrantToUsersResponse parses an HTTP response from a GetPublisherUserAccessGrantToUsersWithResponse call
func ParseGetPublisherUserAccessGrantToUsersResponse(rsp *http.Response) (*GetPublisherUserAccessGrantToUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAccessGrantToUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAccessListResponse parses an HTTP response from a GetPublisherUserAccessListWithResponse call
func ParseGetPublisherUserAccessListResponse(rsp *http.Response) (*GetPublisherUserAccessListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAccessListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAccessRevokeResponse parses an HTTP response from a GetPublisherUserAccessRevokeWithResponse call
func ParseGetPublisherUserAccessRevokeResponse(rsp *http.Response) (*GetPublisherUserAccessRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAccessRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAccessUpdateResponse parses an HTTP response from a PostPublisherUserAccessUpdateWithResponse call
func ParsePostPublisherUserAccessUpdateResponse(rsp *http.Response) (*PostPublisherUserAccessUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAccessUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAddressCreateResponse parses an HTTP response from a PostPublisherUserAddressCreateWithResponse call
func ParsePostPublisherUserAddressCreateResponse(rsp *http.Response) (*PostPublisherUserAddressCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAddressCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAddressDeleteResponse parses an HTTP response from a PostPublisherUserAddressDeleteWithResponse call
func ParsePostPublisherUserAddressDeleteResponse(rsp *http.Response) (*PostPublisherUserAddressDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAddressDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAddressHistoryResponse parses an HTTP response from a PostPublisherUserAddressHistoryWithResponse call
func ParsePostPublisherUserAddressHistoryResponse(rsp *http.Response) (*PostPublisherUserAddressHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAddressHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserAddressListResponse parses an HTTP response from a GetPublisherUserAddressListWithResponse call
func ParseGetPublisherUserAddressListResponse(rsp *http.Response) (*GetPublisherUserAddressListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserAddressListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAddressUpdateResponse parses an HTTP response from a PostPublisherUserAddressUpdateWithResponse call
func ParsePostPublisherUserAddressUpdateResponse(rsp *http.Response) (*PostPublisherUserAddressUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAddressUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserAppCountResponse parses an HTTP response from a PostPublisherUserAppCountWithResponse call
func ParsePostPublisherUserAppCountResponse(rsp *http.Response) (*PostPublisherUserAppCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserAppCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressCreateResponse parses an HTTP response from a PostPublisherUserBillingAddressCreateWithResponse call
func ParsePostPublisherUserBillingAddressCreateResponse(rsp *http.Response) (*PostPublisherUserBillingAddressCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressDeleteResponse parses an HTTP response from a PostPublisherUserBillingAddressDeleteWithResponse call
func ParsePostPublisherUserBillingAddressDeleteResponse(rsp *http.Response) (*PostPublisherUserBillingAddressDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressGetResponse parses an HTTP response from a PostPublisherUserBillingAddressGetWithResponse call
func ParsePostPublisherUserBillingAddressGetResponse(rsp *http.Response) (*PostPublisherUserBillingAddressGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressGetByPaymentResponse parses an HTTP response from a PostPublisherUserBillingAddressGetByPaymentWithResponse call
func ParsePostPublisherUserBillingAddressGetByPaymentResponse(rsp *http.Response) (*PostPublisherUserBillingAddressGetByPaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressGetByPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressGetByPaymentInfoResponse parses an HTTP response from a PostPublisherUserBillingAddressGetByPaymentInfoWithResponse call
func ParsePostPublisherUserBillingAddressGetByPaymentInfoResponse(rsp *http.Response) (*PostPublisherUserBillingAddressGetByPaymentInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressGetByPaymentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBillingAddressListResponse parses an HTTP response from a PostPublisherUserBillingAddressListWithResponse call
func ParsePostPublisherUserBillingAddressListResponse(rsp *http.Response) (*PostPublisherUserBillingAddressListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBillingAddressListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBulkImportDeleteResponse parses an HTTP response from a PostPublisherUserBulkImportDeleteWithResponse call
func ParsePostPublisherUserBulkImportDeleteResponse(rsp *http.Response) (*PostPublisherUserBulkImportDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBulkImportDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBulkImportDownloadResponse parses an HTTP response from a PostPublisherUserBulkImportDownloadWithResponse call
func ParsePostPublisherUserBulkImportDownloadResponse(rsp *http.Response) (*PostPublisherUserBulkImportDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBulkImportDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBulkImportListCompletedResponse parses an HTTP response from a PostPublisherUserBulkImportListCompletedWithResponse call
func ParsePostPublisherUserBulkImportListCompletedResponse(rsp *http.Response) (*PostPublisherUserBulkImportListCompletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBulkImportListCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserBulkImportListProcessingResponse parses an HTTP response from a PostPublisherUserBulkImportListProcessingWithResponse call
func ParsePostPublisherUserBulkImportListProcessingResponse(rsp *http.Response) (*PostPublisherUserBulkImportListProcessingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserBulkImportListProcessingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserCreateResponse parses an HTTP response from a PostPublisherUserCreateWithResponse call
func ParsePostPublisherUserCreateResponse(rsp *http.Response) (*PostPublisherUserCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserDisableResponse parses an HTTP response from a PostPublisherUserDisableWithResponse call
func ParsePostPublisherUserDisableResponse(rsp *http.Response) (*PostPublisherUserDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublisherUserEmailGetResponse parses an HTTP response from a GetPublisherUserEmailGetWithResponse call
func ParseGetPublisherUserEmailGetResponse(rsp *http.Response) (*GetPublisherUserEmailGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserEmailGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserEmailListResponse parses an HTTP response from a GetPublisherUserEmailListWithResponse call
func ParseGetPublisherUserEmailListResponse(rsp *http.Response) (*GetPublisherUserEmailListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserEmailListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserGetResponse parses an HTTP response from a PostPublisherUserGetWithResponse call
func ParsePostPublisherUserGetResponse(rsp *http.Response) (*PostPublisherUserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserListResponse parses an HTTP response from a PostPublisherUserListWithResponse call
func ParsePostPublisherUserListResponse(rsp *http.Response) (*PostPublisherUserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserListAccessesResponse parses an HTTP response from a PostPublisherUserListAccessesWithResponse call
func ParsePostPublisherUserListAccessesResponse(rsp *http.Response) (*PostPublisherUserListAccessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserListAccessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserNoteCreateResponse parses an HTTP response from a PostPublisherUserNoteCreateWithResponse call
func ParsePostPublisherUserNoteCreateResponse(rsp *http.Response) (*PostPublisherUserNoteCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserNoteCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserNoteGetResponse parses an HTTP response from a GetPublisherUserNoteGetWithResponse call
func ParseGetPublisherUserNoteGetResponse(rsp *http.Response) (*GetPublisherUserNoteGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserNoteGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherUserNoteListResponse parses an HTTP response from a GetPublisherUserNoteListWithResponse call
func ParseGetPublisherUserNoteListResponse(rsp *http.Response) (*GetPublisherUserNoteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherUserNoteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserNoteUpdateResponse parses an HTTP response from a PostPublisherUserNoteUpdateWithResponse call
func ParsePostPublisherUserNoteUpdateResponse(rsp *http.Response) (*PostPublisherUserNoteUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserNoteUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserRegisterResponse parses an HTTP response from a PostPublisherUserRegisterWithResponse call
func ParsePostPublisherUserRegisterResponse(rsp *http.Response) (*PostPublisherUserRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserSearchResponse parses an HTTP response from a PostPublisherUserSearchWithResponse call
func ParsePostPublisherUserSearchResponse(rsp *http.Response) (*PostPublisherUserSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherUserUpdateResponse parses an HTTP response from a PostPublisherUserUpdateWithResponse call
func ParsePostPublisherUserUpdateResponse(rsp *http.Response) (*PostPublisherUserUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherUserUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherVoucherGetResponse parses an HTTP response from a GetPublisherVoucherGetWithResponse call
func ParseGetPublisherVoucherGetResponse(rsp *http.Response) (*GetPublisherVoucherGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherVoucherGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherVoucherListResponse parses an HTTP response from a GetPublisherVoucherListWithResponse call
func ParseGetPublisherVoucherListResponse(rsp *http.Response) (*GetPublisherVoucherListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherVoucherListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherVoucherResendResponse parses an HTTP response from a PostPublisherVoucherResendWithResponse call
func ParsePostPublisherVoucherResendResponse(rsp *http.Response) (*PostPublisherVoucherResendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherVoucherResendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookEventsResponse parses an HTTP response from a GetPublisherWebhookEventsWithResponse call
func ParseGetPublisherWebhookEventsResponse(rsp *http.Response) (*GetPublisherWebhookEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookGetResponse parses an HTTP response from a GetPublisherWebhookGetWithResponse call
func ParseGetPublisherWebhookGetResponse(rsp *http.Response) (*GetPublisherWebhookGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookResponseListResponse parses an HTTP response from a GetPublisherWebhookResponseListWithResponse call
func ParseGetPublisherWebhookResponseListResponse(rsp *http.Response) (*GetPublisherWebhookResponseListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookResponseListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookResponseResendResponse parses an HTTP response from a GetPublisherWebhookResponseResendWithResponse call
func ParseGetPublisherWebhookResponseResendResponse(rsp *http.Response) (*GetPublisherWebhookResponseResendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookResponseResendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookSettingsResponse parses an HTTP response from a GetPublisherWebhookSettingsWithResponse call
func ParseGetPublisherWebhookSettingsResponse(rsp *http.Response) (*GetPublisherWebhookSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublisherWebhookSettingsUpdateResponse parses an HTTP response from a PostPublisherWebhookSettingsUpdateWithResponse call
func ParsePostPublisherWebhookSettingsUpdateResponse(rsp *http.Response) (*PostPublisherWebhookSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherWebhookSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookSkipResponse parses an HTTP response from a GetPublisherWebhookSkipWithResponse call
func ParseGetPublisherWebhookSkipResponse(rsp *http.Response) (*GetPublisherWebhookSkipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookSkipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublisherWebhookStatusResponse parses an HTTP response from a GetPublisherWebhookStatusWithResponse call
func ParseGetPublisherWebhookStatusResponse(rsp *http.Response) (*GetPublisherWebhookStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherWebhookStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
